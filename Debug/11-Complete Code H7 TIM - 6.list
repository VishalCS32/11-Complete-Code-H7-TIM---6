
11-Complete Code H7 TIM - 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013444  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001be4  08013718  08013718  00014718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080152fc  080152fc  000162fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015304  08015304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015308  08015308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e4  24000000  0801530c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a20  240001e4  080154f0  000171e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000c04  080154f0  00017c04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000171e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000290d0  00000000  00000000  00017212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000058fe  00000000  00000000  000402e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002128  00000000  00000000  00045be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000196f  00000000  00000000  00047d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e35c  00000000  00000000  00049677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000295bc  00000000  00000000  000879d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001704b3  00000000  00000000  000b0f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00221442  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009e68  00000000  00000000  00221488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  0022b2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080136fc 	.word	0x080136fc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e8 	.word	0x240001e8
 800030c:	080136fc 	.word	0x080136fc

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f043 0201 	orr.w	r2, r3, #1
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	601a      	str	r2, [r3, #0]
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr

08000400 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6a1a      	ldr	r2, [r3, #32]
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	621a      	str	r2, [r3, #32]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000422:	b480      	push	{r7}
 8000424:	b083      	sub	sp, #12
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
 800042a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6a1a      	ldr	r2, [r3, #32]
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	43db      	mvns	r3, r3
 8000434:	401a      	ands	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	621a      	str	r2, [r3, #32]
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <Buzzer_On>:
  * @brief  Turn the buzzer on with a specific prescaler
  * @param  prescaler: Timer prescaler value
  * @retval None
  */
void Buzzer_On(uint16_t prescaler)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	80fb      	strh	r3, [r7, #6]
    BUZZER_TIM->PSC = prescaler;
 8000452:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000456:	88fb      	ldrh	r3, [r7, #6]
 8000458:	6293      	str	r3, [r2, #40]	@ 0x28
    BUZZER_TIM->CCR1 = BUZZER_TIM->ARR * BUZZER_DEFAULT_DUTY / 100;
 800045a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800045e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	009a      	lsls	r2, r3, #2
 8000468:	4413      	add	r3, r2
 800046a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800046e:	4909      	ldr	r1, [pc, #36]	@ (8000494 <Buzzer_On+0x4c>)
 8000470:	fba1 1303 	umull	r1, r3, r1, r3
 8000474:	095b      	lsrs	r3, r3, #5
 8000476:	6353      	str	r3, [r2, #52]	@ 0x34
    LL_TIM_EnableCounter(BUZZER_TIM);
 8000478:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800047c:	f7ff ffb0 	bl	80003e0 <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 8000480:	2101      	movs	r1, #1
 8000482:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000486:	f7ff ffbb 	bl	8000400 <LL_TIM_CC_EnableChannel>
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	51eb851f 	.word	0x51eb851f

08000498 <Buzzer_Off>:
/**
  * @brief  Turn the buzzer off
  * @retval None
  */
void Buzzer_Off(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
//    LL_TIM_DisableCounter(BUZZER_TIM);
    LL_TIM_CC_DisableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 800049c:	2101      	movs	r1, #1
 800049e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80004a2:	f7ff ffbe 	bl	8000422 <LL_TIM_CC_DisableChannel>
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004b0:	f3bf 8f4f 	dsb	sy
}
 80004b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004b6:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <__NVIC_SystemReset+0x24>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004be:	4904      	ldr	r1, [pc, #16]	@ (80004d0 <__NVIC_SystemReset+0x24>)
 80004c0:	4b04      	ldr	r3, [pc, #16]	@ (80004d4 <__NVIC_SystemReset+0x28>)
 80004c2:	4313      	orrs	r3, r2
 80004c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004c6:	f3bf 8f4f 	dsb	sy
}
 80004ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <__NVIC_SystemReset+0x20>
 80004d0:	e000ed00 	.word	0xe000ed00
 80004d4:	05fa0004 	.word	0x05fa0004

080004d8 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	69db      	ldr	r3, [r3, #28]
 80004e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004e8:	2b40      	cmp	r3, #64	@ 0x40
 80004ea:	d101      	bne.n	80004f0 <LL_USART_IsActiveFlag_TC+0x18>
 80004ec:	2301      	movs	r3, #1
 80004ee:	e000      	b.n	80004f2 <LL_USART_IsActiveFlag_TC+0x1a>
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
	...

08000500 <is_cmd_mode>:

//extern filter_state_t filter_state;

volatile uint8_t cmd_mode = 0; // Command mode flag (0 = normal, 1 = command mode)

uint8_t is_cmd_mode(void) {
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
    return cmd_mode;
 8000504:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <is_cmd_mode+0x14>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b2db      	uxtb	r3, r3
}
 800050a:	4618      	mov	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	24000200 	.word	0x24000200

08000518 <strip_brackets>:

void strip_brackets(char *str) {
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
    if (str[0] == '[') {
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b5b      	cmp	r3, #91	@ 0x5b
 8000526:	d10a      	bne.n	800053e <strip_brackets+0x26>
        memmove(str, str + 1, strlen(str));
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	1c5c      	adds	r4, r3, #1
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff4f 	bl	80003d0 <strlen>
 8000532:	4603      	mov	r3, r0
 8000534:	461a      	mov	r2, r3
 8000536:	4621      	mov	r1, r4
 8000538:	6878      	ldr	r0, [r7, #4]
 800053a:	f010 fd5b 	bl	8010ff4 <memmove>
    }
    char *end = strchr(str, ']');
 800053e:	215d      	movs	r1, #93	@ 0x5d
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f010 fd79 	bl	8011038 <strchr>
 8000546:	60f8      	str	r0, [r7, #12]
    if (end) *end = '\0';
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d002      	beq.n	8000554 <strip_brackets+0x3c>
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bd90      	pop	{r4, r7, pc}

0800055c <process_command>:

void process_command(char *cmd) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b0c4      	sub	sp, #272	@ 0x110
 8000560:	af0a      	add	r7, sp, #40	@ 0x28
 8000562:	6078      	str	r0, [r7, #4]
    strip_brackets(cmd);
 8000564:	6878      	ldr	r0, [r7, #4]
 8000566:	f7ff ffd7 	bl	8000518 <strip_brackets>

    if (strcmp(cmd, "CMD") == 0) {
 800056a:	49bc      	ldr	r1, [pc, #752]	@ (800085c <process_command+0x300>)
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff fecf 	bl	8000310 <strcmp>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10e      	bne.n	8000596 <process_command+0x3a>
        cmd_mode = 1;
 8000578:	4bb9      	ldr	r3, [pc, #740]	@ (8000860 <process_command+0x304>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
        printf("\r\n\r\nEntered command mode\r\n\r\n");
 800057e:	48b9      	ldr	r0, [pc, #740]	@ (8000864 <process_command+0x308>)
 8000580:	f010 fc2a 	bl	8010dd8 <puts>
        main_led(0, 255, 0, 255, 1);
 8000584:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000588:	23ff      	movs	r3, #255	@ 0xff
 800058a:	2200      	movs	r2, #0
 800058c:	21ff      	movs	r1, #255	@ 0xff
 800058e:	2000      	movs	r0, #0
 8000590:	f001 fcd0 	bl	8001f34 <main_led>
        return;
 8000594:	e315      	b.n	8000bc2 <process_command+0x666>
    }

    if (!cmd_mode) {
 8000596:	4bb2      	ldr	r3, [pc, #712]	@ (8000860 <process_command+0x304>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <process_command+0x4c>
        printf("Not in command mode\n");
 80005a0:	48b1      	ldr	r0, [pc, #708]	@ (8000868 <process_command+0x30c>)
 80005a2:	f010 fc19 	bl	8010dd8 <puts>
        return;
 80005a6:	e30c      	b.n	8000bc2 <process_command+0x666>
    }

    if (strcmp(cmd, "exit") == 0) {
 80005a8:	49b0      	ldr	r1, [pc, #704]	@ (800086c <process_command+0x310>)
 80005aa:	6878      	ldr	r0, [r7, #4]
 80005ac:	f7ff feb0 	bl	8000310 <strcmp>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d138      	bne.n	8000628 <process_command+0xcc>
        cmd_mode = 0;
 80005b6:	4baa      	ldr	r3, [pc, #680]	@ (8000860 <process_command+0x304>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
        printf("\r\nExiting command mode, rebooting...\r\n\r\n");
 80005bc:	48ac      	ldr	r0, [pc, #688]	@ (8000870 <process_command+0x314>)
 80005be:	f010 fc0b 	bl	8010dd8 <puts>
        // Wait for UART transmission to complete
        while (!LL_USART_IsActiveFlag_TC(USART6)); // Ensure transmission complete
 80005c2:	bf00      	nop
 80005c4:	48ab      	ldr	r0, [pc, #684]	@ (8000874 <process_command+0x318>)
 80005c6:	f7ff ff87 	bl	80004d8 <LL_USART_IsActiveFlag_TC>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f9      	beq.n	80005c4 <process_command+0x68>
        // Busy-wait instead of HAL_Delay
        for (volatile uint32_t i = 0; i < 1000000; i++); // ~200ms at 480MHz
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80005d6:	e004      	b.n	80005e2 <process_command+0x86>
 80005d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80005dc:	3301      	adds	r3, #1
 80005de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80005e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80005e6:	4aa4      	ldr	r2, [pc, #656]	@ (8000878 <process_command+0x31c>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d9f5      	bls.n	80005d8 <process_command+0x7c>
        // Check for pending faults
        if (SCB->HFSR) {
 80005ec:	4ba3      	ldr	r3, [pc, #652]	@ (800087c <process_command+0x320>)
 80005ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d005      	beq.n	8000600 <process_command+0xa4>
            printf("Hard Fault pending: HFSR=0x%08lX\r\n", SCB->HFSR);
 80005f4:	4ba1      	ldr	r3, [pc, #644]	@ (800087c <process_command+0x320>)
 80005f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005f8:	4619      	mov	r1, r3
 80005fa:	48a1      	ldr	r0, [pc, #644]	@ (8000880 <process_command+0x324>)
 80005fc:	f010 fb7c 	bl	8010cf8 <iprintf>
        }
        if (SCB->CFSR) {
 8000600:	4b9e      	ldr	r3, [pc, #632]	@ (800087c <process_command+0x320>)
 8000602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000604:	2b00      	cmp	r3, #0
 8000606:	d005      	beq.n	8000614 <process_command+0xb8>
            printf("Configurable Fault pending: CFSR=0x%08lX\r\n", SCB->CFSR);
 8000608:	4b9c      	ldr	r3, [pc, #624]	@ (800087c <process_command+0x320>)
 800060a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800060c:	4619      	mov	r1, r3
 800060e:	489d      	ldr	r0, [pc, #628]	@ (8000884 <process_command+0x328>)
 8000610:	f010 fb72 	bl	8010cf8 <iprintf>
        }
        printf("Disabling interrupts\r\n"); // Debug
 8000614:	489c      	ldr	r0, [pc, #624]	@ (8000888 <process_command+0x32c>)
 8000616:	f010 fbdf 	bl	8010dd8 <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 800061a:	b672      	cpsid	i
}
 800061c:	bf00      	nop
        __disable_irq(); // Disable all interrupts
        printf("Triggering NVIC_SystemReset\r\n"); // Debug
 800061e:	489b      	ldr	r0, [pc, #620]	@ (800088c <process_command+0x330>)
 8000620:	f010 fbda 	bl	8010dd8 <puts>
        NVIC_SystemReset(); // Primary reset
 8000624:	f7ff ff42 	bl	80004ac <__NVIC_SystemReset>
        printf("NVIC_SystemReset failed, trying SCB reset\r\n"); // Debug (should not reach)
        SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk;
        printf("SCB reset triggered\r\n"); // Debug (should not reach)
        while (true); // Trap if reset fails
    }
    else if (strcmp(cmd, "cal_accel_gyro") == 0) {
 8000628:	4999      	ldr	r1, [pc, #612]	@ (8000890 <process_command+0x334>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff fe70 	bl	8000310 <strcmp>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	f000 82c5 	beq.w	8000bc2 <process_command+0x666>
//        start_accel_and_gyro_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_mag") == 0) {
 8000638:	4996      	ldr	r1, [pc, #600]	@ (8000894 <process_command+0x338>)
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff fe68 	bl	8000310 <strcmp>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	f000 82bd 	beq.w	8000bc2 <process_command+0x666>
//        start_mag_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_all") == 0) {
 8000648:	4993      	ldr	r1, [pc, #588]	@ (8000898 <process_command+0x33c>)
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff fe60 	bl	8000310 <strcmp>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	f000 82b5 	beq.w	8000bc2 <process_command+0x666>
//        start_full_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cancel_cal") == 0) {
 8000658:	4990      	ldr	r1, [pc, #576]	@ (800089c <process_command+0x340>)
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff fe58 	bl	8000310 <strcmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	f000 82ad 	beq.w	8000bc2 <process_command+0x666>
//        cancel_calibration();
    }
    else if (strcmp(cmd, "status") == 0) {
 8000668:	498d      	ldr	r1, [pc, #564]	@ (80008a0 <process_command+0x344>)
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f7ff fe50 	bl	8000310 <strcmp>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d103      	bne.n	800067e <process_command+0x122>
        printf("Status OK\n");
 8000676:	488b      	ldr	r0, [pc, #556]	@ (80008a4 <process_command+0x348>)
 8000678:	f010 fbae 	bl	8010dd8 <puts>
 800067c:	e2a1      	b.n	8000bc2 <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_ON") == 0) {
 800067e:	498a      	ldr	r1, [pc, #552]	@ (80008a8 <process_command+0x34c>)
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff fe45 	bl	8000310 <strcmp>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d10e      	bne.n	80006aa <process_command+0x14e>
        printf("CMD: Executing main_led_ON command\n");
 800068c:	4887      	ldr	r0, [pc, #540]	@ (80008ac <process_command+0x350>)
 800068e:	f010 fba3 	bl	8010dd8 <puts>
        main_led(0, 255, 0, 255, 1);
 8000692:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000696:	23ff      	movs	r3, #255	@ 0xff
 8000698:	2200      	movs	r2, #0
 800069a:	21ff      	movs	r1, #255	@ 0xff
 800069c:	2000      	movs	r0, #0
 800069e:	f001 fc49 	bl	8001f34 <main_led>
        printf("Main LED ON\n");
 80006a2:	4883      	ldr	r0, [pc, #524]	@ (80008b0 <process_command+0x354>)
 80006a4:	f010 fb98 	bl	8010dd8 <puts>
 80006a8:	e28b      	b.n	8000bc2 <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_OFF") == 0) {
 80006aa:	4982      	ldr	r1, [pc, #520]	@ (80008b4 <process_command+0x358>)
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff fe2f 	bl	8000310 <strcmp>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d10e      	bne.n	80006d6 <process_command+0x17a>
        printf("CMD: Executing main_led_OFF command\n");
 80006b8:	487f      	ldr	r0, [pc, #508]	@ (80008b8 <process_command+0x35c>)
 80006ba:	f010 fb8d 	bl	8010dd8 <puts>
        main_led(0, 0, 0, 0, 0);
 80006be:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 80008bc <process_command+0x360>
 80006c2:	2300      	movs	r3, #0
 80006c4:	2200      	movs	r2, #0
 80006c6:	2100      	movs	r1, #0
 80006c8:	2000      	movs	r0, #0
 80006ca:	f001 fc33 	bl	8001f34 <main_led>
        printf("Main LED OFF\n");
 80006ce:	487c      	ldr	r0, [pc, #496]	@ (80008c0 <process_command+0x364>)
 80006d0:	f010 fb82 	bl	8010dd8 <puts>
 80006d4:	e275      	b.n	8000bc2 <process_command+0x666>
    }
    else if (strncmp(cmd, "set_main_led", 12) == 0) {
 80006d6:	220c      	movs	r2, #12
 80006d8:	497a      	ldr	r1, [pc, #488]	@ (80008c4 <process_command+0x368>)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f010 fcb9 	bl	8011052 <strncmp>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d13a      	bne.n	800075c <process_command+0x200>
        int index, r, g, b;
        float brightness;
        char *params_start = strchr(cmd, '(');
 80006e6:	2128      	movs	r1, #40	@ 0x28
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f010 fca5 	bl	8011038 <strchr>
 80006ee:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        if (params_start) {
 80006f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	f000 8263 	beq.w	8000bc2 <process_command+0x666>
            if (sscanf(params_start, "(%d,%d,%d,%d,%f)", &index, &r, &g, &b, &brightness) == 5) {
 80006fc:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8000700:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8000704:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000708:	9302      	str	r3, [sp, #8]
 800070a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	460b      	mov	r3, r1
 8000718:	496b      	ldr	r1, [pc, #428]	@ (80008c8 <process_command+0x36c>)
 800071a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 800071e:	f010 fb63 	bl	8010de8 <siscanf>
 8000722:	4603      	mov	r3, r0
 8000724:	2b05      	cmp	r3, #5
 8000726:	d115      	bne.n	8000754 <process_command+0x1f8>
                main_led(index, r, g, b, brightness);
 8000728:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800072c:	4618      	mov	r0, r3
 800072e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000732:	b2d9      	uxtb	r1, r3
 8000734:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000738:	b2da      	uxtb	r2, r3
 800073a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800073e:	b2db      	uxtb	r3, r3
 8000740:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8000744:	eeb0 0a67 	vmov.f32	s0, s15
 8000748:	f001 fbf4 	bl	8001f34 <main_led>
                printf("Main LED Set\n");
 800074c:	485f      	ldr	r0, [pc, #380]	@ (80008cc <process_command+0x370>)
 800074e:	f010 fb43 	bl	8010dd8 <puts>
 8000752:	e236      	b.n	8000bc2 <process_command+0x666>
            } else {
                printf("Invalid Parameters\n");
 8000754:	485e      	ldr	r0, [pc, #376]	@ (80008d0 <process_command+0x374>)
 8000756:	f010 fb3f 	bl	8010dd8 <puts>
 800075a:	e232      	b.n	8000bc2 <process_command+0x666>
            }
        }
    }
    else if (strncmp(cmd, "SetRollPID", 10) == 0) {
 800075c:	220a      	movs	r2, #10
 800075e:	495d      	ldr	r1, [pc, #372]	@ (80008d4 <process_command+0x378>)
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f010 fc76 	bl	8011052 <strncmp>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	f040 80bf 	bne.w	80008ec <process_command+0x390>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 800076e:	2128      	movs	r1, #40	@ 0x28
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f010 fc61 	bl	8011038 <strchr>
 8000776:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (params_start) {
 800077a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800077e:	2b00      	cmp	r3, #0
 8000780:	d068      	beq.n	8000854 <process_command+0x2f8>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000782:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8000786:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 800078a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800078e:	9303      	str	r3, [sp, #12]
 8000790:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000794:	9302      	str	r3, [sp, #8]
 8000796:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	460b      	mov	r3, r1
 80007a4:	494c      	ldr	r1, [pc, #304]	@ (80008d8 <process_command+0x37c>)
 80007a6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80007aa:	f010 fb1d 	bl	8010de8 <siscanf>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b06      	cmp	r3, #6
 80007b2:	d14b      	bne.n	800084c <process_command+0x2f0>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t roll_pid = {
 80007b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80007b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80007bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80007c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80007c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80007c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80007cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80007d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80007d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80007d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80007dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80007e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetRollPID(&roll_pid) == W25Qxx_OK) {
 80007e4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fc0b 	bl	8001004 <EEPROM_SetRollPID>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d127      	bne.n	8000844 <process_command+0x2e8>
                    printf("Roll PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 80007f4:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80007f8:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 80007fc:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8000800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000804:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 8000808:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800080c:	edd7 5a2c 	vldr	s11, [r7, #176]	@ 0xb0
 8000810:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000814:	edd7 4a2b 	vldr	s9, [r7, #172]	@ 0xac
 8000818:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 800081c:	edd7 3a2a 	vldr	s7, [r7, #168]	@ 0xa8
 8000820:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000824:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000828:	ed8d 4b06 	vstr	d4, [sp, #24]
 800082c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000830:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000834:	ed8d 7b00 	vstr	d7, [sp]
 8000838:	ec53 2b12 	vmov	r2, r3, d2
 800083c:	4827      	ldr	r0, [pc, #156]	@ (80008dc <process_command+0x380>)
 800083e:	f010 fa5b 	bl	8010cf8 <iprintf>
 8000842:	e1be      	b.n	8000bc2 <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Roll PID\n");
 8000844:	4826      	ldr	r0, [pc, #152]	@ (80008e0 <process_command+0x384>)
 8000846:	f010 fac7 	bl	8010dd8 <puts>
 800084a:	e1ba      	b.n	8000bc2 <process_command+0x666>
                }
            } else {
                printf("Invalid Roll PID Parameters\n");
 800084c:	4825      	ldr	r0, [pc, #148]	@ (80008e4 <process_command+0x388>)
 800084e:	f010 fac3 	bl	8010dd8 <puts>
 8000852:	e1b6      	b.n	8000bc2 <process_command+0x666>
            }
        } else {
            printf("Invalid Roll PID Command Format\n");
 8000854:	4824      	ldr	r0, [pc, #144]	@ (80008e8 <process_command+0x38c>)
 8000856:	f010 fabf 	bl	8010dd8 <puts>
 800085a:	e1b2      	b.n	8000bc2 <process_command+0x666>
 800085c:	08013718 	.word	0x08013718
 8000860:	24000200 	.word	0x24000200
 8000864:	0801371c 	.word	0x0801371c
 8000868:	08013738 	.word	0x08013738
 800086c:	0801374c 	.word	0x0801374c
 8000870:	08013754 	.word	0x08013754
 8000874:	40011400 	.word	0x40011400
 8000878:	000f423f 	.word	0x000f423f
 800087c:	e000ed00 	.word	0xe000ed00
 8000880:	0801377c 	.word	0x0801377c
 8000884:	080137a0 	.word	0x080137a0
 8000888:	080137cc 	.word	0x080137cc
 800088c:	080137e4 	.word	0x080137e4
 8000890:	08013804 	.word	0x08013804
 8000894:	08013814 	.word	0x08013814
 8000898:	0801381c 	.word	0x0801381c
 800089c:	08013824 	.word	0x08013824
 80008a0:	08013830 	.word	0x08013830
 80008a4:	08013838 	.word	0x08013838
 80008a8:	08013844 	.word	0x08013844
 80008ac:	08013850 	.word	0x08013850
 80008b0:	08013874 	.word	0x08013874
 80008b4:	08013880 	.word	0x08013880
 80008b8:	08013890 	.word	0x08013890
 80008bc:	00000000 	.word	0x00000000
 80008c0:	080138b4 	.word	0x080138b4
 80008c4:	080138c4 	.word	0x080138c4
 80008c8:	080138d4 	.word	0x080138d4
 80008cc:	080138e8 	.word	0x080138e8
 80008d0:	080138f8 	.word	0x080138f8
 80008d4:	0801390c 	.word	0x0801390c
 80008d8:	08013918 	.word	0x08013918
 80008dc:	08013930 	.word	0x08013930
 80008e0:	0801397c 	.word	0x0801397c
 80008e4:	08013994 	.word	0x08013994
 80008e8:	080139b0 	.word	0x080139b0
        }
    }
    else if (strncmp(cmd, "SetPitchPID", 11) == 0) {
 80008ec:	220b      	movs	r2, #11
 80008ee:	49b6      	ldr	r1, [pc, #728]	@ (8000bc8 <process_command+0x66c>)
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f010 fbae 	bl	8011052 <strncmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d16e      	bne.n	80009da <process_command+0x47e>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 80008fc:	2128      	movs	r1, #40	@ 0x28
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f010 fb9a 	bl	8011038 <strchr>
 8000904:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
        if (params_start) {
 8000908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d060      	beq.n	80009d2 <process_command+0x476>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000910:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000914:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000918:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800091c:	9303      	str	r3, [sp, #12]
 800091e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000922:	9302      	str	r3, [sp, #8]
 8000924:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800092e:	9300      	str	r3, [sp, #0]
 8000930:	460b      	mov	r3, r1
 8000932:	49a6      	ldr	r1, [pc, #664]	@ (8000bcc <process_command+0x670>)
 8000934:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000938:	f010 fa56 	bl	8010de8 <siscanf>
 800093c:	4603      	mov	r3, r0
 800093e:	2b06      	cmp	r3, #6
 8000940:	d143      	bne.n	80009ca <process_command+0x46e>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t pitch_pid = {
 8000942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000946:	663b      	str	r3, [r7, #96]	@ 0x60
 8000948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800094c:	667b      	str	r3, [r7, #100]	@ 0x64
 800094e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000952:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000954:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000958:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800095a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800095c:	673b      	str	r3, [r7, #112]	@ 0x70
 800095e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000960:	677b      	str	r3, [r7, #116]	@ 0x74
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000962:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fb9e 	bl	80010a8 <EEPROM_SetPitchPID>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d127      	bne.n	80009c2 <process_command+0x466>
                    printf("Pitch PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000972:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000976:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 800097a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800097e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000982:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8000986:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800098a:	edd7 5a20 	vldr	s11, [r7, #128]	@ 0x80
 800098e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000992:	edd7 4a1f 	vldr	s9, [r7, #124]	@ 0x7c
 8000996:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 800099a:	edd7 3a1e 	vldr	s7, [r7, #120]	@ 0x78
 800099e:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80009a2:	ed8d 3b08 	vstr	d3, [sp, #32]
 80009a6:	ed8d 4b06 	vstr	d4, [sp, #24]
 80009aa:	ed8d 5b04 	vstr	d5, [sp, #16]
 80009ae:	ed8d 6b02 	vstr	d6, [sp, #8]
 80009b2:	ed8d 7b00 	vstr	d7, [sp]
 80009b6:	ec53 2b12 	vmov	r2, r3, d2
 80009ba:	4885      	ldr	r0, [pc, #532]	@ (8000bd0 <process_command+0x674>)
 80009bc:	f010 f99c 	bl	8010cf8 <iprintf>
 80009c0:	e0ff      	b.n	8000bc2 <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Pitch PID\n");
 80009c2:	4884      	ldr	r0, [pc, #528]	@ (8000bd4 <process_command+0x678>)
 80009c4:	f010 fa08 	bl	8010dd8 <puts>
 80009c8:	e0fb      	b.n	8000bc2 <process_command+0x666>
                }
            } else {
                printf("Invalid Pitch PID Parameters\n");
 80009ca:	4883      	ldr	r0, [pc, #524]	@ (8000bd8 <process_command+0x67c>)
 80009cc:	f010 fa04 	bl	8010dd8 <puts>
 80009d0:	e0f7      	b.n	8000bc2 <process_command+0x666>
            }
        } else {
            printf("Invalid Pitch PID Command Format\n");
 80009d2:	4882      	ldr	r0, [pc, #520]	@ (8000bdc <process_command+0x680>)
 80009d4:	f010 fa00 	bl	8010dd8 <puts>
 80009d8:	e0f3      	b.n	8000bc2 <process_command+0x666>
        }
    }
    else if (strncmp(cmd, "SetYawRatePID", 13) == 0) {
 80009da:	220d      	movs	r2, #13
 80009dc:	4980      	ldr	r1, [pc, #512]	@ (8000be0 <process_command+0x684>)
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f010 fb37 	bl	8011052 <strncmp>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d149      	bne.n	8000a7e <process_command+0x522>
        float kp, ki, kd;
        char *params_start = strchr(cmd, '(');
 80009ea:	2128      	movs	r1, #40	@ 0x28
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f010 fb23 	bl	8011038 <strchr>
 80009f2:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (params_start) {
 80009f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d03b      	beq.n	8000a76 <process_command+0x51a>
            if (sscanf(params_start, "({%f,%f,%f})", &kp, &ki, &kd) == 3) {
 80009fe:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000a02:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8000a06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	4975      	ldr	r1, [pc, #468]	@ (8000be4 <process_command+0x688>)
 8000a10:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8000a14:	f010 f9e8 	bl	8010de8 <siscanf>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b03      	cmp	r3, #3
 8000a1c:	d127      	bne.n	8000a6e <process_command+0x512>
                PID_t yaw_rate_pid = {kp, ki, kd};
 8000a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000a22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a28:	653b      	str	r3, [r7, #80]	@ 0x50
                if (EEPROM_SetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000a2a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fb8c 	bl	800114c <EEPROM_SetYawRatePID>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d115      	bne.n	8000a66 <process_command+0x50a>
                    printf("Yaw Rate PID Set: Kp=%.3f, Ki=%.3f, Kd=%.3f\n", kp, ki, kd);
 8000a3a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000a3e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a42:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000a46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a4a:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8000a4e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000a52:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000a56:	ed8d 7b00 	vstr	d7, [sp]
 8000a5a:	ec53 2b15 	vmov	r2, r3, d5
 8000a5e:	4862      	ldr	r0, [pc, #392]	@ (8000be8 <process_command+0x68c>)
 8000a60:	f010 f94a 	bl	8010cf8 <iprintf>
 8000a64:	e0ad      	b.n	8000bc2 <process_command+0x666>
                } else {
                    printf("Failed to set Yaw Rate PID\n");
 8000a66:	4861      	ldr	r0, [pc, #388]	@ (8000bec <process_command+0x690>)
 8000a68:	f010 f9b6 	bl	8010dd8 <puts>
 8000a6c:	e0a9      	b.n	8000bc2 <process_command+0x666>
                }
            } else {
                printf("Invalid Yaw Rate PID Parameters\n");
 8000a6e:	4860      	ldr	r0, [pc, #384]	@ (8000bf0 <process_command+0x694>)
 8000a70:	f010 f9b2 	bl	8010dd8 <puts>
 8000a74:	e0a5      	b.n	8000bc2 <process_command+0x666>
            }
        } else {
            printf("Invalid Yaw Rate PID Command Format\n");
 8000a76:	485f      	ldr	r0, [pc, #380]	@ (8000bf4 <process_command+0x698>)
 8000a78:	f010 f9ae 	bl	8010dd8 <puts>
 8000a7c:	e0a1      	b.n	8000bc2 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_roll_pid") == 0) {
 8000a7e:	495e      	ldr	r1, [pc, #376]	@ (8000bf8 <process_command+0x69c>)
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff fc45 	bl	8000310 <strcmp>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d133      	bne.n	8000af4 <process_command+0x598>
        DualPID_t roll_pid;
        if (EEPROM_GetRollPID(&roll_pid) == W25Qxx_OK) {
 8000a8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fa95 	bl	8000fc0 <EEPROM_GetRollPID>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d127      	bne.n	8000aec <process_command+0x590>
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000a9c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000aa0:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000aa4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000aa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000aac:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000ab0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000ab4:	edd7 5a0f 	vldr	s11, [r7, #60]	@ 0x3c
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000ab8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000abc:	edd7 4a10 	vldr	s9, [r7, #64]	@ 0x40
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000ac0:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000ac4:	edd7 3a11 	vldr	s7, [r7, #68]	@ 0x44
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000ac8:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000acc:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000ad0:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000ad4:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000ad8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000adc:	ed8d 7b00 	vstr	d7, [sp]
 8000ae0:	ec53 2b12 	vmov	r2, r3, d2
 8000ae4:	4845      	ldr	r0, [pc, #276]	@ (8000bfc <process_command+0x6a0>)
 8000ae6:	f010 f907 	bl	8010cf8 <iprintf>
 8000aea:	e06a      	b.n	8000bc2 <process_command+0x666>
        } else {
            printf("Failed to get Roll PID\n");
 8000aec:	4844      	ldr	r0, [pc, #272]	@ (8000c00 <process_command+0x6a4>)
 8000aee:	f010 f973 	bl	8010dd8 <puts>
 8000af2:	e066      	b.n	8000bc2 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_pitch_pid") == 0) {
 8000af4:	4943      	ldr	r1, [pc, #268]	@ (8000c04 <process_command+0x6a8>)
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff fc0a 	bl	8000310 <strcmp>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d133      	bne.n	8000b6a <process_command+0x60e>
        DualPID_t pitch_pid;
        if (EEPROM_GetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000b02:	f107 0318 	add.w	r3, r7, #24
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 faac 	bl	8001064 <EEPROM_GetPitchPID>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d127      	bne.n	8000b62 <process_command+0x606>
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000b12:	edd7 7a06 	vldr	s15, [r7, #24]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b16:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000b1a:	edd7 7a07 	vldr	s15, [r7, #28]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000b22:	edd7 6a08 	vldr	s13, [r7, #32]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b26:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000b2a:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b2e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000b32:	edd7 4a0a 	vldr	s9, [r7, #40]	@ 0x28
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b36:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000b3a:	edd7 3a0b 	vldr	s7, [r7, #44]	@ 0x2c
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b3e:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000b42:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000b46:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000b4a:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000b4e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000b52:	ed8d 7b00 	vstr	d7, [sp]
 8000b56:	ec53 2b12 	vmov	r2, r3, d2
 8000b5a:	482b      	ldr	r0, [pc, #172]	@ (8000c08 <process_command+0x6ac>)
 8000b5c:	f010 f8cc 	bl	8010cf8 <iprintf>
 8000b60:	e02f      	b.n	8000bc2 <process_command+0x666>
        } else {
            printf("Failed to get Pitch PID\n");
 8000b62:	482a      	ldr	r0, [pc, #168]	@ (8000c0c <process_command+0x6b0>)
 8000b64:	f010 f938 	bl	8010dd8 <puts>
 8000b68:	e02b      	b.n	8000bc2 <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_yaw_rate_pid") == 0) {
 8000b6a:	4929      	ldr	r1, [pc, #164]	@ (8000c10 <process_command+0x6b4>)
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fbcf 	bl	8000310 <strcmp>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d121      	bne.n	8000bbc <process_command+0x660>
        PID_t yaw_rate_pid;
        if (EEPROM_GetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fac3 	bl	8001108 <EEPROM_GetYawRatePID>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d115      	bne.n	8000bb4 <process_command+0x658>
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000b88:	edd7 7a03 	vldr	s15, [r7, #12]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b8c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000b90:	edd7 7a04 	vldr	s15, [r7, #16]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000b98:	edd7 6a05 	vldr	s13, [r7, #20]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b9c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ba0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000ba4:	ed8d 7b00 	vstr	d7, [sp]
 8000ba8:	ec53 2b15 	vmov	r2, r3, d5
 8000bac:	4819      	ldr	r0, [pc, #100]	@ (8000c14 <process_command+0x6b8>)
 8000bae:	f010 f8a3 	bl	8010cf8 <iprintf>
 8000bb2:	e006      	b.n	8000bc2 <process_command+0x666>
        } else {
            printf("Failed to get Yaw Rate PID\n");
 8000bb4:	4818      	ldr	r0, [pc, #96]	@ (8000c18 <process_command+0x6bc>)
 8000bb6:	f010 f90f 	bl	8010dd8 <puts>
 8000bba:	e002      	b.n	8000bc2 <process_command+0x666>
        }
    }
    else {
        printf("Unknown Command\n");
 8000bbc:	4817      	ldr	r0, [pc, #92]	@ (8000c1c <process_command+0x6c0>)
 8000bbe:	f010 f90b 	bl	8010dd8 <puts>
    }
}
 8000bc2:	37e8      	adds	r7, #232	@ 0xe8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	080139d0 	.word	0x080139d0
 8000bcc:	08013918 	.word	0x08013918
 8000bd0:	080139dc 	.word	0x080139dc
 8000bd4:	08013a28 	.word	0x08013a28
 8000bd8:	08013a40 	.word	0x08013a40
 8000bdc:	08013a60 	.word	0x08013a60
 8000be0:	08013a84 	.word	0x08013a84
 8000be4:	08013a94 	.word	0x08013a94
 8000be8:	08013aa4 	.word	0x08013aa4
 8000bec:	08013ad4 	.word	0x08013ad4
 8000bf0:	08013af0 	.word	0x08013af0
 8000bf4:	08013b10 	.word	0x08013b10
 8000bf8:	08013b34 	.word	0x08013b34
 8000bfc:	08013b44 	.word	0x08013b44
 8000c00:	08013b8c 	.word	0x08013b8c
 8000c04:	08013ba4 	.word	0x08013ba4
 8000c08:	08013bb4 	.word	0x08013bb4
 8000c0c:	08013bfc 	.word	0x08013bfc
 8000c10:	08013c14 	.word	0x08013c14
 8000c14:	08013c28 	.word	0x08013c28
 8000c18:	08013c54 	.word	0x08013c54
 8000c1c:	08013c70 	.word	0x08013c70

08000c20 <EEPROM_Init>:

/**
  * @brief Initialize the W25Qxx flash memory
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_Init(void) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b096      	sub	sp, #88	@ 0x58
 8000c24:	af00      	add	r7, sp, #0
    uint8_t jedec_id[3];
    OSPI_RegularCmdTypeDef cmd = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2250      	movs	r2, #80	@ 0x50
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f010 f9fb 	bl	8011028 <memset>

    /* Configure command to read JEDEC ID */
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
    cmd.Instruction = W25Qxx_CMD_JEDEC_ID;
 8000c36:	239f      	movs	r3, #159	@ 0x9f
 8000c38:	60fb      	str	r3, [r7, #12]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	613b      	str	r3, [r7, #16]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8000c4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.NbData = 3;
 8000c50:	2303      	movs	r3, #3
 8000c52:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DummyCycles = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c62:	4619      	mov	r1, r3
 8000c64:	4815      	ldr	r0, [pc, #84]	@ (8000cbc <EEPROM_Init+0x9c>)
 8000c66:	f008 fe51 	bl	800990c <HAL_OSPI_Command>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <EEPROM_Init+0x5c>
        printf("Failed to configure JEDEC ID command\r\n");
 8000c70:	4813      	ldr	r0, [pc, #76]	@ (8000cc0 <EEPROM_Init+0xa0>)
 8000c72:	f010 f8b1 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c7a:	e01b      	b.n	8000cb4 <EEPROM_Init+0x94>
    }

    if (HAL_OSPI_Receive(&hospi1, jedec_id, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c7c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c84:	4619      	mov	r1, r3
 8000c86:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <EEPROM_Init+0x9c>)
 8000c88:	f008 ff40 	bl	8009b0c <HAL_OSPI_Receive>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <EEPROM_Init+0x7e>
        printf("Failed to read JEDEC ID\r\n");
 8000c92:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <EEPROM_Init+0xa4>)
 8000c94:	f010 f8a0 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c9c:	e00a      	b.n	8000cb4 <EEPROM_Init+0x94>
    }

    /* Check for valid JEDEC ID (example: Winbond W25Q series) */
    if (jedec_id[0] != 0xEF) { // Manufacturer ID for Winbond
 8000c9e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000ca2:	2bef      	cmp	r3, #239	@ 0xef
 8000ca4:	d005      	beq.n	8000cb2 <EEPROM_Init+0x92>
        printf("Invalid JEDEC ID\r\n");
 8000ca6:	4808      	ldr	r0, [pc, #32]	@ (8000cc8 <EEPROM_Init+0xa8>)
 8000ca8:	f010 f896 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8000cac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cb0:	e000      	b.n	8000cb4 <EEPROM_Init+0x94>
    }

    return W25Qxx_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3758      	adds	r7, #88	@ 0x58
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2400068c 	.word	0x2400068c
 8000cc0:	08013c80 	.word	0x08013c80
 8000cc4:	08013ca8 	.word	0x08013ca8
 8000cc8:	08013cc4 	.word	0x08013cc4

08000ccc <EEPROM_ReadConfig>:
/**
  * @brief Read configuration from EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_ReadConfig(DroneConfig_t *config) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b0a8      	sub	sp, #160	@ 0xa0
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    if (W25Qxx_Read(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2290      	movs	r2, #144	@ 0x90
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 fad9 	bl	8001294 <W25Qxx_Read>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <EEPROM_ReadConfig+0x28>
        printf("Failed to read data from flash\r\n");
 8000ce8:	4812      	ldr	r0, [pc, #72]	@ (8000d34 <EEPROM_ReadConfig+0x68>)
 8000cea:	f010 f875 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf2:	e01b      	b.n	8000d2c <EEPROM_ReadConfig+0x60>
    }

    memcpy(config, buffer, sizeof(DroneConfig_t));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2290      	movs	r2, #144	@ 0x90
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f010 fa31 	bl	8011166 <memcpy>
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8000d04:	218c      	movs	r1, #140	@ 0x8c
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 f83c 	bl	8000d84 <CalculateCRC32>
 8000d0c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (calculated_crc != config->crc) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d16:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d005      	beq.n	8000d2a <EEPROM_ReadConfig+0x5e>
        printf("EEPROM config CRC mismatch\r\n");
 8000d1e:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <EEPROM_ReadConfig+0x6c>)
 8000d20:	f010 f85a 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d28:	e000      	b.n	8000d2c <EEPROM_ReadConfig+0x60>
    }

    return W25Qxx_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	37a0      	adds	r7, #160	@ 0xa0
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08013cd8 	.word	0x08013cd8
 8000d38:	08013cf8 	.word	0x08013cf8

08000d3c <EEPROM_WriteConfig>:
/**
  * @brief Write configuration to EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_WriteConfig(DroneConfig_t *config) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0a6      	sub	sp, #152	@ 0x98
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    memcpy(buffer, config, sizeof(DroneConfig_t));
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	2290      	movs	r2, #144	@ 0x90
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f010 fa09 	bl	8011166 <memcpy>

    if (W25Qxx_Write(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	2290      	movs	r2, #144	@ 0x90
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f000 faed 	bl	800133c <W25Qxx_Write>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d005      	beq.n	8000d74 <EEPROM_WriteConfig+0x38>
        printf("Failed to write data to flash\r\n");
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <EEPROM_WriteConfig+0x44>)
 8000d6a:	f010 f835 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8000d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d72:	e000      	b.n	8000d76 <EEPROM_WriteConfig+0x3a>
    }

    return W25Qxx_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3798      	adds	r7, #152	@ 0x98
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	08013d14 	.word	0x08013d14

08000d84 <CalculateCRC32>:
  * @brief Calculate CRC32 for data integrity
  * @param data Pointer to data
  * @param length Length of data
  * @retval uint32_t CRC value
  */
uint32_t CalculateCRC32(const uint8_t *data, uint32_t length) {
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d92:	617b      	str	r3, [r7, #20]
    const uint32_t polynomial = 0x04C11DB7;
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <CalculateCRC32+0x70>)
 8000d96:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = 0; i < length; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	e01f      	b.n	8000dde <CalculateCRC32+0x5a>
        crc ^= (uint32_t)data[i] << 24;
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	061b      	lsls	r3, r3, #24
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	4053      	eors	r3, r2
 8000dac:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]
 8000db2:	e00e      	b.n	8000dd2 <CalculateCRC32+0x4e>
            if (crc & 0x80000000) {
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da05      	bge.n	8000dc6 <CalculateCRC32+0x42>
                crc = (crc << 1) ^ polynomial;
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	4053      	eors	r3, r2
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e002      	b.n	8000dcc <CalculateCRC32+0x48>
            } else {
                crc <<= 1;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b07      	cmp	r3, #7
 8000dd6:	d9ed      	bls.n	8000db4 <CalculateCRC32+0x30>
    for (uint32_t i = 0; i < length; i++) {
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d3db      	bcc.n	8000d9e <CalculateCRC32+0x1a>
            }
        }
    }
    return crc;
 8000de6:	697b      	ldr	r3, [r7, #20]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	04c11db7 	.word	0x04c11db7

08000df8 <EEPROM_GetAccelCalibration>:
/**
  * @brief Get accelerometer calibration data
  * @param accel_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAccelCalibration(float accel_cal[3]) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0aa      	sub	sp, #168	@ 0xa8
 8000dfc:	af04      	add	r7, sp, #16
 8000dfe:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff61 	bl	8000ccc <EEPROM_ReadConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d012      	beq.n	8000e36 <EEPROM_GetAccelCalibration+0x3e>
        printf("Failed to read config during GetAccelCalibration\r\n");
 8000e10:	481c      	ldr	r0, [pc, #112]	@ (8000e84 <EEPROM_GetAccelCalibration+0x8c>)
 8000e12:	f00f ffe1 	bl	8010dd8 <puts>
        accel_cal[0] = accel_cal[1] = accel_cal[2] = 0.0f; // Initialize on error
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f103 0208 	add.w	r2, r3, #8
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	3304      	adds	r3, #4
 8000e26:	6812      	ldr	r2, [r2, #0]
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e34:	e021      	b.n	8000e7a <EEPROM_GetAccelCalibration+0x82>
    }
    memcpy(accel_cal, config.accel_cal, 3 * sizeof(float));
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f010 f991 	bl	8011166 <memcpy>
    printf("Retrieved accel_cal: X=%f, Y=%f, Z=%f\r\n", accel_cal[0], accel_cal[1], accel_cal[2]);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	edd3 7a00 	vldr	s15, [r3]
 8000e4a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3304      	adds	r3, #4
 8000e52:	edd3 7a00 	vldr	s15, [r3]
 8000e56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	edd3 6a00 	vldr	s13, [r3]
 8000e62:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000e66:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000e6a:	ed8d 7b00 	vstr	d7, [sp]
 8000e6e:	ec53 2b15 	vmov	r2, r3, d5
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <EEPROM_GetAccelCalibration+0x90>)
 8000e74:	f00f ff40 	bl	8010cf8 <iprintf>
    return W25Qxx_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3798      	adds	r7, #152	@ 0x98
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08013d34 	.word	0x08013d34
 8000e88:	08013d68 	.word	0x08013d68

08000e8c <EEPROM_GetGyroCalibration>:
/**
  * @brief Get gyroscope calibration data
  * @param gyro_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetGyroCalibration(float gyro_cal[3]) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b0aa      	sub	sp, #168	@ 0xa8
 8000e90:	af04      	add	r7, sp, #16
 8000e92:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff17 	bl	8000ccc <EEPROM_ReadConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d012      	beq.n	8000eca <EEPROM_GetGyroCalibration+0x3e>
        printf("Failed to read config during GetGyroCalibration\r\n");
 8000ea4:	481c      	ldr	r0, [pc, #112]	@ (8000f18 <EEPROM_GetGyroCalibration+0x8c>)
 8000ea6:	f00f ff97 	bl	8010dd8 <puts>
        gyro_cal[0] = gyro_cal[1] = gyro_cal[2] = 0.0f; // Initialize on error
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f103 0208 	add.w	r2, r3, #8
 8000eb0:	f04f 0300 	mov.w	r3, #0
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ec8:	e022      	b.n	8000f10 <EEPROM_GetGyroCalibration+0x84>
    }
    memcpy(gyro_cal, config.gyro_cal, 3 * sizeof(float));
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	330c      	adds	r3, #12
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f010 f946 	bl	8011166 <memcpy>
    printf("Retrieved gyro_cal: X=%f, Y=%f, Z=%f\r\n", gyro_cal[0], gyro_cal[1], gyro_cal[2]);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	edd3 7a00 	vldr	s15, [r3]
 8000ee0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	edd3 7a00 	vldr	s15, [r3]
 8000eec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	edd3 6a00 	vldr	s13, [r3]
 8000ef8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000efc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000f00:	ed8d 7b00 	vstr	d7, [sp]
 8000f04:	ec53 2b15 	vmov	r2, r3, d5
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <EEPROM_GetGyroCalibration+0x90>)
 8000f0a:	f00f fef5 	bl	8010cf8 <iprintf>
    return W25Qxx_OK;
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3798      	adds	r7, #152	@ 0x98
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	08013dc4 	.word	0x08013dc4
 8000f1c:	08013df8 	.word	0x08013df8

08000f20 <EEPROM_GetMagCalibration>:
/**
  * @brief Get magnetometer calibration data
  * @param mag_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetMagCalibration(float mag_cal[3]) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b0a6      	sub	sp, #152	@ 0x98
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fecd 	bl	8000ccc <EEPROM_ReadConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d012      	beq.n	8000f5e <EEPROM_GetMagCalibration+0x3e>
        printf("Failed to read config during GetMagCalibration\r\n");
 8000f38:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <EEPROM_GetMagCalibration+0x58>)
 8000f3a:	f00f ff4d 	bl	8010dd8 <puts>
        mag_cal[0] = mag_cal[1] = mag_cal[2] = 0.0f; // Initialize on error
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f103 0208 	add.w	r2, r3, #8
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f5c:	e008      	b.n	8000f70 <EEPROM_GetMagCalibration+0x50>
    }
    memcpy(mag_cal, config.mag_cal, 3 * sizeof(float));
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	3318      	adds	r3, #24
 8000f64:	220c      	movs	r2, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f010 f8fc 	bl	8011166 <memcpy>
    return W25Qxx_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3798      	adds	r7, #152	@ 0x98
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08013e54 	.word	0x08013e54

08000f7c <EEPROM_GetPID>:
/**
  * @brief Get legacy PID values
  * @param pid Array to store PID values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPID(float pid[3]) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0a6      	sub	sp, #152	@ 0x98
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe9f 	bl	8000ccc <EEPROM_ReadConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <EEPROM_GetPID+0x24>
        printf("Failed to read config during GetPID\r\n");
 8000f94:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <EEPROM_GetPID+0x40>)
 8000f96:	f00f ff1f 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f9e:	e008      	b.n	8000fb2 <EEPROM_GetPID+0x36>
    }
    memcpy(pid, config.pid, 3 * sizeof(float));
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	3324      	adds	r3, #36	@ 0x24
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f010 f8db 	bl	8011166 <memcpy>
    return W25Qxx_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3798      	adds	r7, #152	@ 0x98
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	08013eb4 	.word	0x08013eb4

08000fc0 <EEPROM_GetRollPID>:
/**
  * @brief Get roll PID values
  * @param roll_pid Pointer to store roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetRollPID(DualPID_t *roll_pid) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0a6      	sub	sp, #152	@ 0x98
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe7d 	bl	8000ccc <EEPROM_ReadConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <EEPROM_GetRollPID+0x24>
        printf("Failed to read config during GetRollPID\r\n");
 8000fd8:	4809      	ldr	r0, [pc, #36]	@ (8001000 <EEPROM_GetRollPID+0x40>)
 8000fda:	f00f fefd 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fe2:	e008      	b.n	8000ff6 <EEPROM_GetRollPID+0x36>
    }
    memcpy(roll_pid, &config.roll_pid, sizeof(DualPID_t));
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	3340      	adds	r3, #64	@ 0x40
 8000fea:	2218      	movs	r2, #24
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f010 f8b9 	bl	8011166 <memcpy>
    return W25Qxx_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3798      	adds	r7, #152	@ 0x98
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	08013fac 	.word	0x08013fac

08001004 <EEPROM_SetRollPID>:
/**
  * @brief Set roll PID values
  * @param roll_pid Pointer to roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetRollPID(const DualPID_t *roll_pid) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b0a6      	sub	sp, #152	@ 0x98
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fe5b 	bl	8000ccc <EEPROM_ReadConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d005      	beq.n	8001028 <EEPROM_SetRollPID+0x24>
        printf("Failed to read config during SetRollPID\r\n");
 800101c:	4810      	ldr	r0, [pc, #64]	@ (8001060 <EEPROM_SetRollPID+0x5c>)
 800101e:	f00f fedb 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001026:	e016      	b.n	8001056 <EEPROM_SetRollPID+0x52>
    }
    memcpy(&config.roll_pid, roll_pid, sizeof(DualPID_t));
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	3340      	adds	r3, #64	@ 0x40
 800102e:	2218      	movs	r2, #24
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4618      	mov	r0, r3
 8001034:	f010 f897 	bl	8011166 <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	218c      	movs	r1, #140	@ 0x8c
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fea0 	bl	8000d84 <CalculateCRC32>
 8001044:	4603      	mov	r3, r0
 8001046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fe74 	bl	8000d3c <EEPROM_WriteConfig>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3798      	adds	r7, #152	@ 0x98
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	08013fd8 	.word	0x08013fd8

08001064 <EEPROM_GetPitchPID>:
/**
  * @brief Get pitch PID values
  * @param pitch_pid Pointer to store pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPitchPID(DualPID_t *pitch_pid) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b0a6      	sub	sp, #152	@ 0x98
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fe2b 	bl	8000ccc <EEPROM_ReadConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <EEPROM_GetPitchPID+0x24>
        printf("Failed to read config during GetPitchPID\r\n");
 800107c:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <EEPROM_GetPitchPID+0x40>)
 800107e:	f00f feab 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001086:	e008      	b.n	800109a <EEPROM_GetPitchPID+0x36>
    }
    memcpy(pitch_pid, &config.pitch_pid, sizeof(DualPID_t));
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	3358      	adds	r3, #88	@ 0x58
 800108e:	2218      	movs	r2, #24
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f010 f867 	bl	8011166 <memcpy>
    return W25Qxx_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3798      	adds	r7, #152	@ 0x98
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	08014004 	.word	0x08014004

080010a8 <EEPROM_SetPitchPID>:
/**
  * @brief Set pitch PID values
  * @param pitch_pid Pointer to pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetPitchPID(const DualPID_t *pitch_pid) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0a6      	sub	sp, #152	@ 0x98
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fe09 	bl	8000ccc <EEPROM_ReadConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d005      	beq.n	80010cc <EEPROM_SetPitchPID+0x24>
        printf("Failed to read config during SetPitchPID\r\n");
 80010c0:	4810      	ldr	r0, [pc, #64]	@ (8001104 <EEPROM_SetPitchPID+0x5c>)
 80010c2:	f00f fe89 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ca:	e016      	b.n	80010fa <EEPROM_SetPitchPID+0x52>
    }
    memcpy(&config.pitch_pid, pitch_pid, sizeof(DualPID_t));
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	3358      	adds	r3, #88	@ 0x58
 80010d2:	2218      	movs	r2, #24
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f010 f845 	bl	8011166 <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	218c      	movs	r1, #140	@ 0x8c
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fe4e 	bl	8000d84 <CalculateCRC32>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fe22 	bl	8000d3c <EEPROM_WriteConfig>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3798      	adds	r7, #152	@ 0x98
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08014030 	.word	0x08014030

08001108 <EEPROM_GetYawRatePID>:
/**
  * @brief Get yaw rate PID values
  * @param yaw_rate_pid Pointer to store yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetYawRatePID(PID_t *yaw_rate_pid) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b0a6      	sub	sp, #152	@ 0x98
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fdd9 	bl	8000ccc <EEPROM_ReadConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <EEPROM_GetYawRatePID+0x24>
        printf("Failed to read config during GetYawRatePID\r\n");
 8001120:	4809      	ldr	r0, [pc, #36]	@ (8001148 <EEPROM_GetYawRatePID+0x40>)
 8001122:	f00f fe59 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800112a:	e008      	b.n	800113e <EEPROM_GetYawRatePID+0x36>
    }
    memcpy(yaw_rate_pid, &config.yaw_rate_pid, sizeof(PID_t));
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	3370      	adds	r3, #112	@ 0x70
 8001132:	220c      	movs	r2, #12
 8001134:	4619      	mov	r1, r3
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f010 f815 	bl	8011166 <memcpy>
    return W25Qxx_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3798      	adds	r7, #152	@ 0x98
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	0801405c 	.word	0x0801405c

0800114c <EEPROM_SetYawRatePID>:
/**
  * @brief Set yaw rate PID values
  * @param yaw_rate_pid Pointer to yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetYawRatePID(const PID_t *yaw_rate_pid) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b0a6      	sub	sp, #152	@ 0x98
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fdb7 	bl	8000ccc <EEPROM_ReadConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <EEPROM_SetYawRatePID+0x24>
        printf("Failed to read config during SetYawRatePID\r\n");
 8001164:	4810      	ldr	r0, [pc, #64]	@ (80011a8 <EEPROM_SetYawRatePID+0x5c>)
 8001166:	f00f fe37 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800116e:	e016      	b.n	800119e <EEPROM_SetYawRatePID+0x52>
    }
    memcpy(&config.yaw_rate_pid, yaw_rate_pid, sizeof(PID_t));
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	3370      	adds	r3, #112	@ 0x70
 8001176:	220c      	movs	r2, #12
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	f00f fff3 	bl	8011166 <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	218c      	movs	r1, #140	@ 0x8c
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fdfc 	bl	8000d84 <CalculateCRC32>
 800118c:	4603      	mov	r3, r0
 800118e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fdd0 	bl	8000d3c <EEPROM_WriteConfig>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3798      	adds	r7, #152	@ 0x98
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	08014088 	.word	0x08014088

080011ac <EEPROM_GetAircraftLights>:
/**
  * @brief Get aircraft lights configuration
  * @param lights Pointer to store lights configuration
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAircraftLights(AircraftLights_t *lights) {
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b0a7      	sub	sp, #156	@ 0x9c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fd87 	bl	8000ccc <EEPROM_ReadConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <EEPROM_GetAircraftLights+0x24>
        printf("Failed to read config during GetAircraftLights\r\n");
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <EEPROM_GetAircraftLights+0x44>)
 80011c6:	f00f fe07 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 80011ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ce:	e00a      	b.n	80011e6 <EEPROM_GetAircraftLights+0x3a>
    }
    memcpy(lights, &config.lights, sizeof(AircraftLights_t));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	461c      	mov	r4, r3
 80011d4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80011d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011da:	6020      	str	r0, [r4, #0]
 80011dc:	6061      	str	r1, [r4, #4]
 80011de:	60a2      	str	r2, [r4, #8]
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	7323      	strb	r3, [r4, #12]
    return W25Qxx_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	379c      	adds	r7, #156	@ 0x9c
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	080140b4 	.word	0x080140b4

080011f4 <W25Qxx_WaitForWriteEnd>:

/**
  * @brief Wait for write operation to complete
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_WaitForWriteEnd(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b096      	sub	sp, #88	@ 0x58
 80011f8:	af00      	add	r7, sp, #0
    OSPI_RegularCmdTypeDef cmd = {0};
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2250      	movs	r2, #80	@ 0x50
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00f ff10 	bl	8011028 <memset>
    uint8_t status;

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
    cmd.Instruction = W25Qxx_CMD_READ_STATUS1;
 800120c:	2305      	movs	r3, #5
 800120e:	613b      	str	r3, [r7, #16]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	@ 0x34
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001224:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.NbData = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	647b      	str	r3, [r7, #68]	@ 0x44
    cmd.DummyCycles = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	653b      	str	r3, [r7, #80]	@ 0x50

    do {
        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	f241 3288 	movw	r2, #5000	@ 0x1388
 800123a:	4619      	mov	r1, r3
 800123c:	4812      	ldr	r0, [pc, #72]	@ (8001288 <W25Qxx_WaitForWriteEnd+0x94>)
 800123e:	f008 fb65 	bl	800990c <HAL_OSPI_Command>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <W25Qxx_WaitForWriteEnd+0x60>
            printf("Failed to configure read status command\r\n");
 8001248:	4810      	ldr	r0, [pc, #64]	@ (800128c <W25Qxx_WaitForWriteEnd+0x98>)
 800124a:	f00f fdc5 	bl	8010dd8 <puts>
            return W25Qxx_ERROR;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001252:	e015      	b.n	8001280 <W25Qxx_WaitForWriteEnd+0x8c>
        }
        if (HAL_OSPI_Receive(&hospi1, &status, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800125a:	4619      	mov	r1, r3
 800125c:	480a      	ldr	r0, [pc, #40]	@ (8001288 <W25Qxx_WaitForWriteEnd+0x94>)
 800125e:	f008 fc55 	bl	8009b0c <HAL_OSPI_Receive>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <W25Qxx_WaitForWriteEnd+0x80>
            printf("Failed to read status\r\n");
 8001268:	4809      	ldr	r0, [pc, #36]	@ (8001290 <W25Qxx_WaitForWriteEnd+0x9c>)
 800126a:	f00f fdb5 	bl	8010dd8 <puts>
            return W25Qxx_ERROR;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001272:	e005      	b.n	8001280 <W25Qxx_WaitForWriteEnd+0x8c>
        }
    } while (status & 0x01); // Busy bit
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1d9      	bne.n	8001232 <W25Qxx_WaitForWriteEnd+0x3e>

    return W25Qxx_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3758      	adds	r7, #88	@ 0x58
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2400068c 	.word	0x2400068c
 800128c:	08014114 	.word	0x08014114
 8001290:	08014140 	.word	0x08014140

08001294 <W25Qxx_Read>:
  * @param address Start address
  * @param buffer Buffer to store data
  * @param length Length of data to read
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Read(uint32_t address, uint8_t *buffer, uint32_t length) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b098      	sub	sp, #96	@ 0x60
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	2250      	movs	r2, #80	@ 0x50
 80012a6:	2100      	movs	r1, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f00f febd 	bl	8011028 <memset>

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
    cmd.Instruction = W25Qxx_CMD_READ_DATA;
 80012b2:	2303      	movs	r3, #3
 80012b4:	61bb      	str	r3, [r7, #24]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
    cmd.Address = address;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80012c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80012c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012cc:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 80012d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.NbData = length;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	657b      	str	r3, [r7, #84]	@ 0x54
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ec:	4619      	mov	r1, r3
 80012ee:	4810      	ldr	r0, [pc, #64]	@ (8001330 <W25Qxx_Read+0x9c>)
 80012f0:	f008 fb0c 	bl	800990c <HAL_OSPI_Command>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <W25Qxx_Read+0x72>
        printf("Failed to configure read command\r\n");
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <W25Qxx_Read+0xa0>)
 80012fc:	f00f fd6c 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 8001300:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001304:	e00f      	b.n	8001326 <W25Qxx_Read+0x92>
    }

    if (HAL_OSPI_Receive(&hospi1, buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	4808      	ldr	r0, [pc, #32]	@ (8001330 <W25Qxx_Read+0x9c>)
 800130e:	f008 fbfd 	bl	8009b0c <HAL_OSPI_Receive>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <W25Qxx_Read+0x90>
        printf("Failed to read data\r\n");
 8001318:	4807      	ldr	r0, [pc, #28]	@ (8001338 <W25Qxx_Read+0xa4>)
 800131a:	f00f fd5d 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001322:	e000      	b.n	8001326 <W25Qxx_Read+0x92>
    }

    return W25Qxx_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3760      	adds	r7, #96	@ 0x60
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2400068c 	.word	0x2400068c
 8001334:	08014158 	.word	0x08014158
 8001338:	0801417c 	.word	0x0801417c

0800133c <W25Qxx_Write>:
  * @param address Start address
  * @param buffer Pointer to data
  * @param length Length of data to write
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Write(uint32_t address, uint8_t *buffer, uint32_t length) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b09e      	sub	sp, #120	@ 0x78
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2250      	movs	r2, #80	@ 0x50
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f00f fe69 	bl	8011028 <memset>
    uint32_t remaining = length;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t current_address = address;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	673b      	str	r3, [r7, #112]	@ 0x70
    uint8_t *current_buffer = buffer;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Erase sector if necessary */
    uint32_t sector = address / W25Qxx_SECTOR_SIZE;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	0b1b      	lsrs	r3, r3, #12
 8001366:	66bb      	str	r3, [r7, #104]	@ 0x68
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
    cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 800136c:	2306      	movs	r3, #6
 800136e:	61fb      	str	r3, [r7, #28]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001370:	2301      	movs	r3, #1
 8001372:	623b      	str	r3, [r7, #32]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800137c:	2300      	movs	r3, #0
 800137e:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DataMode = HAL_OSPI_DATA_NONE;
 8001380:	2300      	movs	r3, #0
 8001382:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	65bb      	str	r3, [r7, #88]	@ 0x58
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001394:	4619      	mov	r1, r3
 8001396:	484f      	ldr	r0, [pc, #316]	@ (80014d4 <W25Qxx_Write+0x198>)
 8001398:	f008 fab8 	bl	800990c <HAL_OSPI_Command>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <W25Qxx_Write+0x72>
        printf("Failed to enable write for sector erase\r\n");
 80013a2:	484d      	ldr	r0, [pc, #308]	@ (80014d8 <W25Qxx_Write+0x19c>)
 80013a4:	f00f fd18 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ac:	e08e      	b.n	80014cc <W25Qxx_Write+0x190>
    }

    cmd.Instruction = W25Qxx_CMD_SECTOR_ERASE;
 80013ae:	2320      	movs	r3, #32
 80013b0:	61fb      	str	r3, [r7, #28]
    cmd.Address = sector * W25Qxx_SECTOR_SIZE;
 80013b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80013b4:	031b      	lsls	r3, r3, #12
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80013b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013bc:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80013be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c2:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013cc:	4619      	mov	r1, r3
 80013ce:	4841      	ldr	r0, [pc, #260]	@ (80014d4 <W25Qxx_Write+0x198>)
 80013d0:	f008 fa9c 	bl	800990c <HAL_OSPI_Command>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d005      	beq.n	80013e6 <W25Qxx_Write+0xaa>
        printf("Failed to erase sector\r\n");
 80013da:	4840      	ldr	r0, [pc, #256]	@ (80014dc <W25Qxx_Write+0x1a0>)
 80013dc:	f00f fcfc 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013e4:	e072      	b.n	80014cc <W25Qxx_Write+0x190>
    }

    if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 80013e6:	f7ff ff05 	bl	80011f4 <W25Qxx_WaitForWriteEnd>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d069      	beq.n	80014c4 <W25Qxx_Write+0x188>
        printf("Timeout waiting for sector erase\r\n");
 80013f0:	483b      	ldr	r0, [pc, #236]	@ (80014e0 <W25Qxx_Write+0x1a4>)
 80013f2:	f00f fcf1 	bl	8010dd8 <puts>
        return W25Qxx_ERROR;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013fa:	e067      	b.n	80014cc <W25Qxx_Write+0x190>
    }

    /* Write data in pages */
    while (remaining > 0) {
        uint32_t page_size = (remaining > W25Qxx_PAGE_SIZE) ? W25Qxx_PAGE_SIZE : remaining;
 80013fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80013fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001402:	bf28      	it	cs
 8001404:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8001408:	667b      	str	r3, [r7, #100]	@ 0x64

        cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 800140a:	2306      	movs	r3, #6
 800140c:	61fb      	str	r3, [r7, #28]
        cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.DataMode = HAL_OSPI_DATA_NONE;
 8001412:	2300      	movs	r3, #0
 8001414:	64fb      	str	r3, [r7, #76]	@ 0x4c

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800141e:	4619      	mov	r1, r3
 8001420:	482c      	ldr	r0, [pc, #176]	@ (80014d4 <W25Qxx_Write+0x198>)
 8001422:	f008 fa73 	bl	800990c <HAL_OSPI_Command>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <W25Qxx_Write+0xfc>
            printf("Failed to enable write for page program\r\n");
 800142c:	482d      	ldr	r0, [pc, #180]	@ (80014e4 <W25Qxx_Write+0x1a8>)
 800142e:	f00f fcd3 	bl	8010dd8 <puts>
            return W25Qxx_ERROR;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001436:	e049      	b.n	80014cc <W25Qxx_Write+0x190>
        }

        cmd.Instruction = W25Qxx_CMD_PAGE_PROGRAM;
 8001438:	2302      	movs	r3, #2
 800143a:	61fb      	str	r3, [r7, #28]
        cmd.Address = current_address;
 800143c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001444:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8001446:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144a:	637b      	str	r3, [r7, #52]	@ 0x34
        cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 800144c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001450:	64fb      	str	r3, [r7, #76]	@ 0x4c
        cmd.NbData = page_size;
 8001452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001454:	653b      	str	r3, [r7, #80]	@ 0x50

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145e:	4619      	mov	r1, r3
 8001460:	481c      	ldr	r0, [pc, #112]	@ (80014d4 <W25Qxx_Write+0x198>)
 8001462:	f008 fa53 	bl	800990c <HAL_OSPI_Command>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <W25Qxx_Write+0x13c>
            printf("Failed to configure page program command\r\n");
 800146c:	481e      	ldr	r0, [pc, #120]	@ (80014e8 <W25Qxx_Write+0x1ac>)
 800146e:	f00f fcb3 	bl	8010dd8 <puts>
            return W25Qxx_ERROR;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001476:	e029      	b.n	80014cc <W25Qxx_Write+0x190>
        }

        if (HAL_OSPI_Transmit(&hospi1, current_buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800147c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800147e:	4815      	ldr	r0, [pc, #84]	@ (80014d4 <W25Qxx_Write+0x198>)
 8001480:	f008 fad1 	bl	8009a26 <HAL_OSPI_Transmit>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <W25Qxx_Write+0x15a>
            printf("Failed to write page data\r\n");
 800148a:	4818      	ldr	r0, [pc, #96]	@ (80014ec <W25Qxx_Write+0x1b0>)
 800148c:	f00f fca4 	bl	8010dd8 <puts>
            return W25Qxx_ERROR;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001494:	e01a      	b.n	80014cc <W25Qxx_Write+0x190>
        }

        if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 8001496:	f7ff fead 	bl	80011f4 <W25Qxx_WaitForWriteEnd>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <W25Qxx_Write+0x170>
            printf("Timeout waiting for page write\r\n");
 80014a0:	4813      	ldr	r0, [pc, #76]	@ (80014f0 <W25Qxx_Write+0x1b4>)
 80014a2:	f00f fc99 	bl	8010dd8 <puts>
            return W25Qxx_ERROR;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014aa:	e00f      	b.n	80014cc <W25Qxx_Write+0x190>
        }

        remaining -= page_size;
 80014ac:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80014ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	677b      	str	r3, [r7, #116]	@ 0x74
        current_address += page_size;
 80014b4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80014b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014b8:	4413      	add	r3, r2
 80014ba:	673b      	str	r3, [r7, #112]	@ 0x70
        current_buffer += page_size;
 80014bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80014be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014c0:	4413      	add	r3, r2
 80014c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (remaining > 0) {
 80014c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d198      	bne.n	80013fc <W25Qxx_Write+0xc0>
    }

    return W25Qxx_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3778      	adds	r7, #120	@ 0x78
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2400068c 	.word	0x2400068c
 80014d8:	08014194 	.word	0x08014194
 80014dc:	080141c0 	.word	0x080141c0
 80014e0:	080141d8 	.word	0x080141d8
 80014e4:	080141fc 	.word	0x080141fc
 80014e8:	08014228 	.word	0x08014228
 80014ec:	08014254 	.word	0x08014254
 80014f0:	08014270 	.word	0x08014270

080014f4 <HMC5883L_WriteReg>:
static volatile uint8_t i2c_error = 0;
static uint32_t last_reset_time = 0;
static uint8_t reset_attempts = 0;
static const uint8_t max_reset_attempts = 5;

static void HMC5883L_WriteReg(uint8_t reg, uint8_t value) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	4603      	mov	r3, r0
 80014fc:	460a      	mov	r2, r1
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	4613      	mov	r3, r2
 8001502:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, value};
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	733b      	strb	r3, [r7, #12]
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, tx_data, 2, 100);
 800150c:	f107 020c 	add.w	r2, r7, #12
 8001510:	2364      	movs	r3, #100	@ 0x64
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2302      	movs	r3, #2
 8001516:	213c      	movs	r1, #60	@ 0x3c
 8001518:	4803      	ldr	r0, [pc, #12]	@ (8001528 <HMC5883L_WriteReg+0x34>)
 800151a:	f007 fbef 	bl	8008cfc <HAL_I2C_Master_Transmit>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	240004bc 	.word	0x240004bc

0800152c <HMC5883L_ReadReg>:

uint8_t HMC5883L_ReadReg(uint8_t reg) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af02      	add	r7, sp, #8
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, &reg, 1, 100);
 8001536:	1dfa      	adds	r2, r7, #7
 8001538:	2364      	movs	r3, #100	@ 0x64
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2301      	movs	r3, #1
 800153e:	213c      	movs	r1, #60	@ 0x3c
 8001540:	4808      	ldr	r0, [pc, #32]	@ (8001564 <HMC5883L_ReadReg+0x38>)
 8001542:	f007 fbdb 	bl	8008cfc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, HMC5883L_ADDR, &rx_data, 1, 100);
 8001546:	f107 020f 	add.w	r2, r7, #15
 800154a:	2364      	movs	r3, #100	@ 0x64
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	213c      	movs	r1, #60	@ 0x3c
 8001552:	4804      	ldr	r0, [pc, #16]	@ (8001564 <HMC5883L_ReadReg+0x38>)
 8001554:	f007 fcea 	bl	8008f2c <HAL_I2C_Master_Receive>
    return rx_data;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	240004bc 	.word	0x240004bc

08001568 <HMC5883L_Init>:

void HMC5883L_Init(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x80); // Soft reset
 800156c:	2180      	movs	r1, #128	@ 0x80
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff ffc0 	bl	80014f4 <HMC5883L_WriteReg>
    HAL_Delay(100);
 8001574:	2064      	movs	r0, #100	@ 0x64
 8001576:	f004 fc83 	bl	8005e80 <HAL_Delay>
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x78); // 8-avg, 75 Hz, normal mode
 800157a:	2178      	movs	r1, #120	@ 0x78
 800157c:	2000      	movs	r0, #0
 800157e:	f7ff ffb9 	bl	80014f4 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_CONFIG_B, 0x20); // ±1.3 Gauss
 8001582:	2120      	movs	r1, #32
 8001584:	2001      	movs	r0, #1
 8001586:	f7ff ffb5 	bl	80014f4 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_MODE, 0x00);     // Continuous mode
 800158a:	2100      	movs	r1, #0
 800158c:	2002      	movs	r0, #2
 800158e:	f7ff ffb1 	bl	80014f4 <HMC5883L_WriteReg>
    HAL_Delay(10);
 8001592:	200a      	movs	r0, #10
 8001594:	f004 fc74 	bl	8005e80 <HAL_Delay>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 0201 	bic.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_MASTER, Mode);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	60da      	str	r2, [r3, #12]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_SPI_StartMasterTransfer>:
  * @rmtoll CR1          CSTART        LL_SPI_StartMasterTransfer
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPHA, ClockPhase);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPOL, ClockPolarity);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60da      	str	r2, [r3, #12]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t Baudrate)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR, Baudrate);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	609a      	str	r2, [r3, #8]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_LSBFRST, BitOrder);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60da      	str	r2, [r3, #12]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR,  TransferDirection & SPI_CR1_HDDIR);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016d2:	431a      	orrs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_COMM, TransferDirection & SPI_CFG2_COMM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	60da      	str	r2, [r3, #12]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_31BIT
  *         @arg @ref LL_SPI_DATAWIDTH_32BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f023 021f 	bic.w	r2, r3, #31
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	609a      	str	r2, [r3, #8]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_SPI_SetFIFOThreshold>:
  *         @arg @ref LL_SPI_FIFO_TH_15DATA
  *         @arg @ref LL_SPI_FIFO_TH_16DATA
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM | SPI_CFG2_SSOE, NSS);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f023 5210 	bic.w	r2, r3, #603979776	@ 0x24000000
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	60da      	str	r2, [r3, #12]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <LL_SPI_IsActiveFlag_RXP+0x18>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_SPI_IsActiveFlag_RXP+0x1a>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d101      	bne.n	80017a8 <LL_SPI_IsActiveFlag_TXP+0x18>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <LL_SPI_IsActiveFlag_TXP+0x1a>
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3330      	adds	r3, #48	@ 0x30
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	460b      	mov	r3, r1
 80017dc:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3320      	adds	r3, #32
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	701a      	strb	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <LL_AHB4_GRP1_EnableClock+0x34>)
 80017fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001802:	4909      	ldr	r1, [pc, #36]	@ (8001828 <LL_AHB4_GRP1_EnableClock+0x34>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4313      	orrs	r3, r2
 8001808:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <LL_AHB4_GRP1_EnableClock+0x34>)
 800180e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	58024400 	.word	0x58024400

0800182c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <LL_APB1_GRP1_EnableClock+0x34>)
 8001836:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800183a:	4909      	ldr	r1, [pc, #36]	@ (8001860 <LL_APB1_GRP1_EnableClock+0x34>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4313      	orrs	r3, r2
 8001840:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <LL_APB1_GRP1_EnableClock+0x34>)
 8001846:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4013      	ands	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001850:	68fb      	ldr	r3, [r7, #12]
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	58024400 	.word	0x58024400

08001864 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(const GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	4013      	ands	r3, r2
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d101      	bne.n	8001880 <LL_GPIO_IsInputPinSet+0x1c>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <LL_GPIO_IsInputPinSet+0x1e>
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	041a      	lsls	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <ICM42688P_GPIO_SPI_Initialization>:
    if (value < -2048) return -2048;
    return (int16_t)value;
}

void ICM42688P_GPIO_SPI_Initialization(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b090      	sub	sp, #64	@ 0x40
 80018cc:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80018ce:	f107 0318 	add.w	r3, r7, #24
 80018d2:	2228      	movs	r2, #40	@ 0x28
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f00f fba6 	bl	8011028 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable for STM32H7 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80018ec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80018f0:	f7ff ff9c 	bl	800182c <LL_APB1_GRP1_EnableClock>

	/* GPIO clock enable for STM32H7 */
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff ff7d 	bl	80017f4 <LL_AHB4_GRP1_EnableClock>
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80018fa:	2004      	movs	r0, #4
 80018fc:	f7ff ff7a 	bl	80017f4 <LL_AHB4_GRP1_EnableClock>
	/**SPI3 GPIO Configuration for STM32H7
	 * PC10  ------> SPI3_SCK
	 * PC11  ------> SPI3_MISO
	 * PC12  ------> SPI3_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8001900:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001904:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001906:	2302      	movs	r3, #2
 8001908:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6; // SPI3 alternate function for STM32H7
 8001916:	2306      	movs	r3, #6
 8001918:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191a:	463b      	mov	r3, r7
 800191c:	4619      	mov	r1, r3
 800191e:	4830      	ldr	r0, [pc, #192]	@ (80019e0 <ICM42688P_GPIO_SPI_Initialization+0x118>)
 8001920:	f00d fae8 	bl	800eef4 <LL_GPIO_Init>
	 * PA15  ------> ICM42688P_SPI_CS_PIN (output)
	 * PC8   ------> ICM42688P_INT1_PIN (input)
	 */

	/* Chip Select Pin */
	LL_GPIO_SetOutputPin(ICM42688P_SPI_CS_PORT, ICM42688P_SPI_CS_PIN); // Start with CS high
 8001924:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001928:	482e      	ldr	r0, [pc, #184]	@ (80019e4 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 800192a:	f7ff ffb0 	bl	800188e <LL_GPIO_SetOutputPin>

	GPIO_InitStruct.Pin = ICM42688P_SPI_CS_PIN;
 800192e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001932:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001934:	2301      	movs	r3, #1
 8001936:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_SPI_CS_PORT, &GPIO_InitStruct);
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	4826      	ldr	r0, [pc, #152]	@ (80019e4 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 800194a:	f00d fad3 	bl	800eef4 <LL_GPIO_Init>

	/* Interrupt Pin */
	GPIO_InitStruct.Pin = ICM42688P_INT1_PIN;
 800194e:	2310      	movs	r3, #16
 8001950:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001956:	2301      	movs	r3, #1
 8001958:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_INT1_PORT, &GPIO_InitStruct);
 800195a:	463b      	mov	r3, r7
 800195c:	4619      	mov	r1, r3
 800195e:	4822      	ldr	r0, [pc, #136]	@ (80019e8 <ICM42688P_GPIO_SPI_Initialization+0x120>)
 8001960:	f00d fac8 	bl	800eef4 <LL_GPIO_Init>

	/* STM32H7 SPI3 configuration - Fixed for proper LL driver usage */
	// Disable SPI first
	LL_SPI_Disable(ICM42688P_SPI_CHANNEL);
 8001964:	4821      	ldr	r0, [pc, #132]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001966:	f7ff fe29 	bl	80015bc <LL_SPI_Disable>

	// Configure SPI3 - STM32H7 style
	LL_SPI_SetBaudRatePrescaler(ICM42688P_SPI_CHANNEL, LL_SPI_BAUDRATEPRESCALER_DIV8);
 800196a:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 800196e:	481f      	ldr	r0, [pc, #124]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001970:	f7ff fe7d 	bl	800166e <LL_SPI_SetBaudRatePrescaler>
	LL_SPI_SetTransferDirection(ICM42688P_SPI_CHANNEL, LL_SPI_FULL_DUPLEX);
 8001974:	2100      	movs	r1, #0
 8001976:	481d      	ldr	r0, [pc, #116]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001978:	f7ff fe9f 	bl	80016ba <LL_SPI_SetTransferDirection>
	LL_SPI_SetClockPhase(ICM42688P_SPI_CHANNEL, LL_SPI_PHASE_2EDGE);
 800197c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001980:	481a      	ldr	r0, [pc, #104]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001982:	f7ff fe4e 	bl	8001622 <LL_SPI_SetClockPhase>
	LL_SPI_SetClockPolarity(ICM42688P_SPI_CHANNEL, LL_SPI_POLARITY_HIGH);
 8001986:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800198a:	4818      	ldr	r0, [pc, #96]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 800198c:	f7ff fe5c 	bl	8001648 <LL_SPI_SetClockPolarity>
	LL_SPI_SetTransferBitOrder(ICM42688P_SPI_CHANNEL, LL_SPI_MSB_FIRST);
 8001990:	2100      	movs	r1, #0
 8001992:	4816      	ldr	r0, [pc, #88]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8001994:	f7ff fe7e 	bl	8001694 <LL_SPI_SetTransferBitOrder>
	LL_SPI_SetDataWidth(ICM42688P_SPI_CHANNEL, LL_SPI_DATAWIDTH_8BIT);
 8001998:	2107      	movs	r1, #7
 800199a:	4814      	ldr	r0, [pc, #80]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 800199c:	f7ff feac 	bl	80016f8 <LL_SPI_SetDataWidth>
	LL_SPI_SetNSSMode(ICM42688P_SPI_CHANNEL, LL_SPI_NSS_SOFT);
 80019a0:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80019a4:	4811      	ldr	r0, [pc, #68]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80019a6:	f7ff fecd 	bl	8001744 <LL_SPI_SetNSSMode>
	LL_SPI_SetMode(ICM42688P_SPI_CHANNEL, LL_SPI_MODE_MASTER);
 80019aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80019ae:	480f      	ldr	r0, [pc, #60]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80019b0:	f7ff fe14 	bl	80015dc <LL_SPI_SetMode>

	// STM32H7 specific settings
	LL_SPI_SetFIFOThreshold(ICM42688P_SPI_CHANNEL, LL_SPI_FIFO_TH_01DATA);
 80019b4:	2100      	movs	r1, #0
 80019b6:	480d      	ldr	r0, [pc, #52]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80019b8:	f7ff feb1 	bl	800171e <LL_SPI_SetFIFOThreshold>

	// Enable SPI
	LL_SPI_Enable(ICM42688P_SPI_CHANNEL);
 80019bc:	480b      	ldr	r0, [pc, #44]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80019be:	f7ff fded 	bl	800159c <LL_SPI_Enable>

	// Start SPI (STM32H7 requirement)
	LL_SPI_StartMasterTransfer(ICM42688P_SPI_CHANNEL);
 80019c2:	480a      	ldr	r0, [pc, #40]	@ (80019ec <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80019c4:	f7ff fe1d 	bl	8001602 <LL_SPI_StartMasterTransfer>

	CHIP_DESELECT(ICM42688P);
 80019c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019cc:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 80019ce:	f7ff ff5e 	bl	800188e <LL_GPIO_SetOutputPin>

	printf("SPI3 initialized for STM32H7\n");
 80019d2:	4807      	ldr	r0, [pc, #28]	@ (80019f0 <ICM42688P_GPIO_SPI_Initialization+0x128>)
 80019d4:	f00f fa00 	bl	8010dd8 <puts>
}
 80019d8:	bf00      	nop
 80019da:	3740      	adds	r7, #64	@ 0x40
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	58020800 	.word	0x58020800
 80019e4:	58020000 	.word	0x58020000
 80019e8:	58021000 	.word	0x58021000
 80019ec:	40003c00 	.word	0x40003c00
 80019f0:	08014290 	.word	0x08014290

080019f4 <ICM42688P_SelectBank>:

// ====== BANK SELECT ======
void ICM42688P_SelectBank(uint8_t bank)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
	printf("Selecting bank %d\n", bank);
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <ICM42688P_SelectBank+0x2c>)
 8001a04:	f00f f978 	bl	8010cf8 <iprintf>
	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	2076      	movs	r0, #118	@ 0x76
 8001a0e:	f000 f87d 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(1); // Small delay after bank selection
 8001a12:	2001      	movs	r0, #1
 8001a14:	f004 fa34 	bl	8005e80 <HAL_Delay>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	080142b0 	.word	0x080142b0

08001a24 <SPI3_SendByte>:

uint8_t SPI3_SendByte(uint8_t data)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXP(ICM42688P_SPI_CHANNEL)==RESET);
 8001a2e:	bf00      	nop
 8001a30:	480c      	ldr	r0, [pc, #48]	@ (8001a64 <SPI3_SendByte+0x40>)
 8001a32:	f7ff fead 	bl	8001790 <LL_SPI_IsActiveFlag_TXP>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f9      	beq.n	8001a30 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688P_SPI_CHANNEL, data);
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4808      	ldr	r0, [pc, #32]	@ (8001a64 <SPI3_SendByte+0x40>)
 8001a42:	f7ff fec6 	bl	80017d2 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXP(ICM42688P_SPI_CHANNEL)==RESET);
 8001a46:	bf00      	nop
 8001a48:	4806      	ldr	r0, [pc, #24]	@ (8001a64 <SPI3_SendByte+0x40>)
 8001a4a:	f7ff fe8e 	bl	800176a <LL_SPI_IsActiveFlag_RXP>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f9      	beq.n	8001a48 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688P_SPI_CHANNEL);
 8001a54:	4803      	ldr	r0, [pc, #12]	@ (8001a64 <SPI3_SendByte+0x40>)
 8001a56:	f7ff feae 	bl	80017b6 <LL_SPI_ReceiveData8>
 8001a5a:	4603      	mov	r3, r0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40003c00 	.word	0x40003c00

08001a68 <ICM42688P_ReadByte>:
//	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
//	HAL_Delay(1); // Small delay after bank selection
//}

uint8_t ICM42688P_ReadByte(uint8_t reg_addr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688P);
 8001a72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a76:	480c      	ldr	r0, [pc, #48]	@ (8001aa8 <ICM42688P_ReadByte+0x40>)
 8001a78:	f7ff ff17 	bl	80018aa <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ffcd 	bl	8001a24 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY to read data
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff ffca 	bl	8001a24 <SPI3_SendByte>
 8001a90:	4603      	mov	r3, r0
 8001a92:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688P);
 8001a94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a98:	4803      	ldr	r0, [pc, #12]	@ (8001aa8 <ICM42688P_ReadByte+0x40>)
 8001a9a:	f7ff fef8 	bl	800188e <LL_GPIO_SetOutputPin>

//	printf("0x%02x\n", val);
	return val;
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	58020000 	.word	0x58020000

08001aac <ICM42688P_ReadBytes>:

void ICM42688P_ReadBytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	603a      	str	r2, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688P);
 8001ac0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ac4:	4810      	ldr	r0, [pc, #64]	@ (8001b08 <ICM42688P_ReadBytes+0x5c>)
 8001ac6:	f7ff fef0 	bl	80018aa <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ffa6 	bl	8001a24 <SPI3_SendByte>
	while(i < len)
 8001ad8:	e009      	b.n	8001aee <ICM42688P_ReadBytes+0x42>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY to read data
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	60fa      	str	r2, [r7, #12]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	18d4      	adds	r4, r2, r3
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f7ff ff9d 	bl	8001a24 <SPI3_SendByte>
 8001aea:	4603      	mov	r3, r0
 8001aec:	7023      	strb	r3, [r4, #0]
	while(i < len)
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d3f1      	bcc.n	8001ada <ICM42688P_ReadBytes+0x2e>
	}
	CHIP_DESELECT(ICM42688P);
 8001af6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001afa:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <ICM42688P_ReadBytes+0x5c>)
 8001afc:	f7ff fec7 	bl	800188e <LL_GPIO_SetOutputPin>
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}
 8001b08:	58020000 	.word	0x58020000

08001b0c <ICM42688P_WriteByte>:

void ICM42688P_WriteByte(uint8_t reg_addr, uint8_t val)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688P);
 8001b1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b20:	480b      	ldr	r0, [pc, #44]	@ (8001b50 <ICM42688P_WriteByte+0x44>)
 8001b22:	f7ff fec2 	bl	80018aa <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff78 	bl	8001a24 <SPI3_SendByte>
	SPI3_SendByte(val); //Send Data to write
 8001b34:	79bb      	ldrb	r3, [r7, #6]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff ff74 	bl	8001a24 <SPI3_SendByte>
	CHIP_DESELECT(ICM42688P);
 8001b3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b40:	4803      	ldr	r0, [pc, #12]	@ (8001b50 <ICM42688P_WriteByte+0x44>)
 8001b42:	f7ff fea4 	bl	800188e <LL_GPIO_SetOutputPin>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	58020000 	.word	0x58020000

08001b54 <ICM42688P_Initialization>:
	}
	CHIP_DESELECT(ICM42688P);
}

int ICM42688P_Initialization(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
	uint8_t who_am_i = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	809a      	strh	r2, [r3, #4]

	ICM42688P_GPIO_SPI_Initialization();
 8001b70:	f7ff feaa 	bl	80018c8 <ICM42688P_GPIO_SPI_Initialization>

	printf("Checking ICM42688P...\n");
 8001b74:	483f      	ldr	r0, [pc, #252]	@ (8001c74 <ICM42688P_Initialization+0x120>)
 8001b76:	f00f f92f 	bl	8010dd8 <puts>

	// check WHO_AM_I (0x75)
	who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I);
 8001b7a:	2075      	movs	r0, #117	@ 0x75
 8001b7c:	f7ff ff74 	bl	8001a68 <ICM42688P_ReadByte>
 8001b80:	4603      	mov	r3, r0
 8001b82:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x47
	if(who_am_i == 0x47)
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	2b47      	cmp	r3, #71	@ 0x47
 8001b88:	d105      	bne.n	8001b96 <ICM42688P_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	483a      	ldr	r0, [pc, #232]	@ (8001c78 <ICM42688P_Initialization+0x124>)
 8001b90:	f00f f8b2 	bl	8010cf8 <iprintf>
 8001b94:	e012      	b.n	8001bbc <ICM42688P_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x47)
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b47      	cmp	r3, #71	@ 0x47
 8001b9a:	d00f      	beq.n	8001bbc <ICM42688P_Initialization+0x68>
	{
		who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I); // check again WHO_AM_I (0x75)
 8001b9c:	2075      	movs	r0, #117	@ 0x75
 8001b9e:	f7ff ff63 	bl	8001a68 <ICM42688P_ReadByte>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x47){
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	2b47      	cmp	r3, #71	@ 0x47
 8001baa:	d007      	beq.n	8001bbc <ICM42688P_Initialization+0x68>
			printf( "ICM42688P Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x47);
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2247      	movs	r2, #71	@ 0x47
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4832      	ldr	r0, [pc, #200]	@ (8001c7c <ICM42688P_Initialization+0x128>)
 8001bb4:	f00f f8a0 	bl	8010cf8 <iprintf>
			return 1; //ERROR
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e056      	b.n	8001c6a <ICM42688P_Initialization+0x116>
		}
	}

	// Reset ICM42688P
	// DEVICE_CONFIG 0x11
	ICM42688P_WriteByte(ICM42688P_DEVICE_CONFIG, 0x01); // Software reset
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	2011      	movs	r0, #17
 8001bc0:	f7ff ffa4 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001bc4:	2032      	movs	r0, #50	@ 0x32
 8001bc6:	f004 f95b 	bl	8005e80 <HAL_Delay>

	// Wait for reset to complete and switch to user bank 0
	ICM42688P_SelectBank(ICM42688P_BANK_SEL_0); // Select user bank 0
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff ff12 	bl	80019f4 <ICM42688P_SelectBank>
	HAL_Delay(10);
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	f004 f955 	bl	8005e80 <HAL_Delay>

	// PWR_MGMT0 0x4E - Main power management
	// Enable Gyro and Accel in Low Noise mode, keep temperature sensor enabled
	ICM42688P_WriteByte(ICM42688P_PWR_MGMT0, ICM42688P_PWR_MGMT0_GYRO_MODE_LN | ICM42688P_PWR_MGMT0_ACCEL_MODE_LN);
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	204e      	movs	r0, #78	@ 0x4e
 8001bda:	f7ff ff97 	bl	8001b0c <ICM42688P_WriteByte>
	// 온도센서 끄면 자이로 값 이상하게 출력됨 (same as original comment)
	HAL_Delay(50);
 8001bde:	2032      	movs	r0, #50	@ 0x32
 8001be0:	f004 f94e 	bl	8005e80 <HAL_Delay>

	// GYRO_CONFIG0 0x4F - Gyro configuration
	// Set Gyro to ±2000dps and 1kHz ODR (equivalent to original 2000dps setting)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG0, (ICM42688P_GYRO_FS_SEL_2000DPS << 5) | ICM42688P_ODR_4KHZ);
 8001be4:	2104      	movs	r1, #4
 8001be6:	204f      	movs	r0, #79	@ 0x4f
 8001be8:	f7ff ff90 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001bec:	2032      	movs	r0, #50	@ 0x32
 8001bee:	f004 f947 	bl	8005e80 <HAL_Delay>

	// ACCEL_CONFIG0 0x50 - Accelerometer configuration
	// Set Accel to ±16g and 1kHz ODR (equivalent to original 16g setting)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG0, (ICM42688P_ACCEL_FS_SEL_16G << 5) | ICM42688P_ODR_4KHZ);
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	2050      	movs	r0, #80	@ 0x50
 8001bf6:	f7ff ff89 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001bfa:	2032      	movs	r0, #50	@ 0x32
 8001bfc:	f004 f940 	bl	8005e80 <HAL_Delay>

	// GYRO_CONFIG1 0x51 - Gyro filter configuration
	// Enable gyro DLPF with low-pass filter (equivalent to original 20Hz filter)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG1, 0x16); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8001c00:	2116      	movs	r1, #22
 8001c02:	2051      	movs	r0, #81	@ 0x51
 8001c04:	f7ff ff82 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001c08:	2032      	movs	r0, #50	@ 0x32
 8001c0a:	f004 f939 	bl	8005e80 <HAL_Delay>

	// ACCEL_CONFIG1 0x53 - Accel filter configuration
	// Enable accel DLPF with low-pass filter (equivalent to original 44.8Hz filter)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG1, 0x15); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8001c0e:	2115      	movs	r1, #21
 8001c10:	2053      	movs	r0, #83	@ 0x53
 8001c12:	f7ff ff7b 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001c16:	2032      	movs	r0, #50	@ 0x32
 8001c18:	f004 f932 	bl	8005e80 <HAL_Delay>

	// TMST_CONFIG 0x54 - Timestamp configuration (optional)
	ICM42688P_WriteByte(ICM42688P_TMST_CONFIG, 0x23); // Enable timestamp, 1kHz resolution
 8001c1c:	2123      	movs	r1, #35	@ 0x23
 8001c1e:	2054      	movs	r0, #84	@ 0x54
 8001c20:	f7ff ff74 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001c24:	2032      	movs	r0, #50	@ 0x32
 8001c26:	f004 f92b 	bl	8005e80 <HAL_Delay>

	// FIFO_CONFIG 0x16 - FIFO configuration (disable for this setup, equivalent to original)
	ICM42688P_WriteByte(ICM42688P_FIFO_CONFIG, 0x00); // FIFO bypass mode
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2016      	movs	r0, #22
 8001c2e:	f7ff ff6d 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001c32:	2032      	movs	r0, #50	@ 0x32
 8001c34:	f004 f924 	bl	8005e80 <HAL_Delay>

	// INT_CONFIG 0x14 - Interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG, 0x12); // INT1 push-pull, active high, pulse mode
 8001c38:	2112      	movs	r1, #18
 8001c3a:	2014      	movs	r0, #20
 8001c3c:	f7ff ff66 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001c40:	2032      	movs	r0, #50	@ 0x32
 8001c42:	f004 f91d 	bl	8005e80 <HAL_Delay>

	// INT_CONFIG1 0x64 - Additional interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG1, 0x00); // Default settings
 8001c46:	2100      	movs	r1, #0
 8001c48:	2064      	movs	r0, #100	@ 0x64
 8001c4a:	f7ff ff5f 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001c4e:	2032      	movs	r0, #50	@ 0x32
 8001c50:	f004 f916 	bl	8005e80 <HAL_Delay>

	// INT_SOURCE0 0x65 - Enable data ready interrupt (equivalent to original INT_ENABLE)
	ICM42688P_WriteByte(ICM42688P_INT_SOURCE0, 0x18); // Enable UI data ready interrupt for INT1
 8001c54:	2118      	movs	r1, #24
 8001c56:	2065      	movs	r0, #101	@ 0x65
 8001c58:	f7ff ff58 	bl	8001b0c <ICM42688P_WriteByte>
	HAL_Delay(50);
 8001c5c:	2032      	movs	r0, #50	@ 0x32
 8001c5e:	f004 f90f 	bl	8005e80 <HAL_Delay>

	printf("ICM42688P initialized successfully!\n");
 8001c62:	4807      	ldr	r0, [pc, #28]	@ (8001c80 <ICM42688P_Initialization+0x12c>)
 8001c64:	f00f f8b8 	bl	8010dd8 <puts>

	return 0; //OK
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	080142c4 	.word	0x080142c4
 8001c78:	080142dc 	.word	0x080142dc
 8001c7c:	08014300 	.word	0x08014300
 8001c80:	0801432c 	.word	0x0801432c

08001c84 <ICM42688P_Get6AxisRawData>:

void ICM42688P_Get6AxisRawData(short* accel, short* gyro)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM42688P_ReadBytes(ICM42688P_ACCEL_DATA_X1, 14, data);
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	461a      	mov	r2, r3
 8001c94:	210e      	movs	r1, #14
 8001c96:	201f      	movs	r0, #31
 8001c98:	f7ff ff08 	bl	8001aac <ICM42688P_ReadBytes>

	accel[0] = (data[0] << 8) | data[1];
 8001c9c:	7a3b      	ldrb	r3, [r7, #8]
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	7a7b      	ldrb	r3, [r7, #9]
 8001ca6:	b21b      	sxth	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 8001cb0:	7abb      	ldrb	r3, [r7, #10]
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	b219      	sxth	r1, r3
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	b21a      	sxth	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	b212      	sxth	r2, r2
 8001cc4:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 8001cc6:	7b3b      	ldrb	r3, [r7, #12]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b219      	sxth	r1, r3
 8001cce:	7b7b      	ldrb	r3, [r7, #13]
 8001cd0:	b21a      	sxth	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	b212      	sxth	r2, r2
 8001cda:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[6] << 8) | data[7]);
 8001cdc:	7bbb      	ldrb	r3, [r7, #14]
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	b21b      	sxth	r3, r3
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[8] << 8) | data[9]);
 8001cf0:	7c3b      	ldrb	r3, [r7, #16]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	b219      	sxth	r1, r3
 8001cf8:	7c7b      	ldrb	r3, [r7, #17]
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	3302      	adds	r3, #2
 8001d00:	430a      	orrs	r2, r1
 8001d02:	b212      	sxth	r2, r2
 8001d04:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[10] << 8) | data[11]);
 8001d06:	7cbb      	ldrb	r3, [r7, #18]
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	b219      	sxth	r1, r3
 8001d0e:	7cfb      	ldrb	r3, [r7, #19]
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	3304      	adds	r3, #4
 8001d16:	430a      	orrs	r2, r1
 8001d18:	b212      	sxth	r2, r2
 8001d1a:	801a      	strh	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <ICM42688P_DataReady>:
	gyro[1] = ((data[2] << 8) | data[3]);
	gyro[2] = ((data[4] << 8) | data[5]);
}

int ICM42688P_DataReady(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM42688P_INT1_PORT, ICM42688P_INT1_PIN);
 8001d28:	2110      	movs	r1, #16
 8001d2a:	4803      	ldr	r0, [pc, #12]	@ (8001d38 <ICM42688P_DataReady+0x14>)
 8001d2c:	f7ff fd9a 	bl	8001864 <LL_GPIO_IsInputPinSet>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	58021000 	.word	0x58021000

08001d3c <WS2812_SetColor>:
    if (brightness < 0.0) brightness = 0.0;
    if (brightness > 1.0) brightness = 1.0;
    global_brightness = brightness;
}

void WS2812_SetColor(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d4e:	4603      	mov	r3, r0
 8001d50:	72fb      	strb	r3, [r7, #11]
 8001d52:	460b      	mov	r3, r1
 8001d54:	72bb      	strb	r3, [r7, #10]
 8001d56:	4613      	mov	r3, r2
 8001d58:	727b      	strb	r3, [r7, #9]
    if (led_index < LED_COUNT) {
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d165      	bne.n	8001e2c <WS2812_SetColor+0xf0>
        // Clamp brightness between 0.0 and 1.0
        if (brightness < 0.0) brightness = 0.0;
 8001d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	d502      	bpl.n	8001d74 <WS2812_SetColor+0x38>
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0) brightness = 1.0;
 8001d74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	dd02      	ble.n	8001d8c <WS2812_SetColor+0x50>
 8001d86:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d8a:	607b      	str	r3, [r7, #4]
        // Apply brightness scaling (combine with global brightness)
        float total_brightness = brightness * global_brightness;
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e38 <WS2812_SetColor+0xfc>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9a:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness); // GRB order
 8001d9e:	7abb      	ldrb	r3, [r7, #10]
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db4:	edc7 7a00 	vstr	s15, [r7]
 8001db8:	783b      	ldrb	r3, [r7, #0]
 8001dba:	b2d8      	uxtb	r0, r3
 8001dbc:	491f      	ldr	r1, [pc, #124]	@ (8001e3c <WS2812_SetColor+0x100>)
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	4602      	mov	r2, r0
 8001dca:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red * total_brightness);
 8001dcc:	7afb      	ldrb	r3, [r7, #11]
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de2:	edc7 7a00 	vstr	s15, [r7]
 8001de6:	783b      	ldrb	r3, [r7, #0]
 8001de8:	b2d8      	uxtb	r0, r3
 8001dea:	4914      	ldr	r1, [pc, #80]	@ (8001e3c <WS2812_SetColor+0x100>)
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	3301      	adds	r3, #1
 8001df8:	4602      	mov	r2, r0
 8001dfa:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue * total_brightness);
 8001dfc:	7a7b      	ldrb	r3, [r7, #9]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e12:	edc7 7a00 	vstr	s15, [r7]
 8001e16:	783b      	ldrb	r3, [r7, #0]
 8001e18:	b2d8      	uxtb	r0, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	@ (8001e3c <WS2812_SetColor+0x100>)
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	440b      	add	r3, r1
 8001e26:	3302      	adds	r3, #2
 8001e28:	4602      	mov	r2, r0
 8001e2a:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 SetColor: LED %lu, R=%d, G=%d, B=%d, Brightness=%.2f\n",
//               led_index, led_data[led_index][1], led_data[led_index][0], led_data[led_index][2], brightness);
    }
}
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	24000000 	.word	0x24000000
 8001e3c:	24000374 	.word	0x24000374

08001e40 <WS2812_Send>:

void WS2812_Send(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]

    // Clear buffer to ensure no stale data
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	e007      	b.n	8001e60 <WS2812_Send+0x20>
        pwm_buffer[i] = DUTY_RESET;
 8001e50:	4a34      	ldr	r2, [pc, #208]	@ (8001f24 <WS2812_Send+0xe4>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2100      	movs	r1, #0
 8001e56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b49      	cmp	r3, #73	@ 0x49
 8001e64:	d9f4      	bls.n	8001e50 <WS2812_Send+0x10>
    }

    // Convert LED data to PWM duty cycles
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e039      	b.n	8001ee0 <WS2812_Send+0xa0>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	e030      	b.n	8001ed4 <WS2812_Send+0x94>
            for (int8_t bit = 7; bit >= 0; bit--) {
 8001e72:	2307      	movs	r3, #7
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	e026      	b.n	8001ec6 <WS2812_Send+0x86>
                if (led_data[led][color] & (1 << bit)) {
 8001e78:	492b      	ldr	r1, [pc, #172]	@ (8001f28 <WS2812_Send+0xe8>)
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	18ca      	adds	r2, r1, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	fa42 f303 	asr.w	r3, r2, r3
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <WS2812_Send+0x6c>
                    pwm_buffer[buffer_index++] = DUTY_1; // Logical 1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	617a      	str	r2, [r7, #20]
 8001ea2:	4a20      	ldr	r2, [pc, #128]	@ (8001f24 <WS2812_Send+0xe4>)
 8001ea4:	21a0      	movs	r1, #160	@ 0xa0
 8001ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001eaa:	e006      	b.n	8001eba <WS2812_Send+0x7a>
                } else {
                    pwm_buffer[buffer_index++] = DUTY_0; // Logical 0
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	617a      	str	r2, [r7, #20]
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <WS2812_Send+0xe4>)
 8001eb4:	2150      	movs	r1, #80	@ 0x50
 8001eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (int8_t bit = 7; bit >= 0; bit--) {
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	71fb      	strb	r3, [r7, #7]
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	dad4      	bge.n	8001e78 <WS2812_Send+0x38>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d9cb      	bls.n	8001e72 <WS2812_Send+0x32>
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3301      	adds	r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0c2      	beq.n	8001e6c <WS2812_Send+0x2c>
            }
        }
    }

    // Stop previous DMA and timer
    HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8001ee6:	2104      	movs	r1, #4
 8001ee8:	4810      	ldr	r0, [pc, #64]	@ (8001f2c <WS2812_Send+0xec>)
 8001eea:	f00b fd0f 	bl	800d90c <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&WS2812_TIMER);
 8001eee:	480f      	ldr	r0, [pc, #60]	@ (8001f2c <WS2812_Send+0xec>)
 8001ef0:	f00b f934 	bl	800d15c <HAL_TIM_Base_Stop>

    // Ensure DMA interrupt is enabled
    HAL_NVIC_SetPriority(WS2812_DMA_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	200f      	movs	r0, #15
 8001efa:	f004 f8c0 	bl	800607e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WS2812_DMA_IRQn);
 8001efe:	200f      	movs	r0, #15
 8001f00:	f004 f8d7 	bl	80060b2 <HAL_NVIC_EnableIRQ>

    // Reset flag and start new DMA transfer
    data_sent_flag = 0;
 8001f04:	4b0a      	ldr	r3, [pc, #40]	@ (8001f30 <WS2812_Send+0xf0>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start(&WS2812_TIMER);
 8001f0a:	4808      	ldr	r0, [pc, #32]	@ (8001f2c <WS2812_Send+0xec>)
 8001f0c:	f00b f8a8 	bl	800d060 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL, pwm_buffer, BUFFER_SIZE);
 8001f10:	234a      	movs	r3, #74	@ 0x4a
 8001f12:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <WS2812_Send+0xe4>)
 8001f14:	2104      	movs	r1, #4
 8001f16:	4805      	ldr	r0, [pc, #20]	@ (8001f2c <WS2812_Send+0xec>)
 8001f18:	f00b fac4 	bl	800d4a4 <HAL_TIM_PWM_Start_DMA>
//    printf("WS2812 Send Started\n");
}
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	2400024c 	.word	0x2400024c
 8001f28:	24000374 	.word	0x24000374
 8001f2c:	240007c4 	.word	0x240007c4
 8001f30:	24000248 	.word	0x24000248

08001f34 <main_led>:

void main_led(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	4608      	mov	r0, r1
 8001f3e:	4611      	mov	r1, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f46:	4603      	mov	r3, r0
 8001f48:	72fb      	strb	r3, [r7, #11]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	72bb      	strb	r3, [r7, #10]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	727b      	strb	r3, [r7, #9]
    WS2812_SetColor(led_index, red, green, blue, brightness);
 8001f52:	7a7b      	ldrb	r3, [r7, #9]
 8001f54:	7aba      	ldrb	r2, [r7, #10]
 8001f56:	7af9      	ldrb	r1, [r7, #11]
 8001f58:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff feed 	bl	8001d3c <WS2812_SetColor>
    WS2812_Send();
 8001f62:	f7ff ff6d 	bl	8001e40 <WS2812_Send>
    led_active = true;
 8001f66:	4b07      	ldr	r3, [pc, #28]	@ (8001f84 <main_led+0x50>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
    led_start_time = HAL_GetTick();
 8001f6c:	f003 ff7c 	bl	8005e68 <HAL_GetTick>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <main_led+0x54>)
 8001f74:	6013      	str	r3, [r2, #0]
    led_on_time = 100; // Default duration (100ms)
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <main_led+0x58>)
 8001f78:	2264      	movs	r2, #100	@ 0x64
 8001f7a:	601a      	str	r2, [r3, #0]
//    printf("main_led: LED %lu set, duration=%lu ms\n", led_index, led_on_time);
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	24000380 	.word	0x24000380
 8001f88:	2400037c 	.word	0x2400037c
 8001f8c:	24000378 	.word	0x24000378

08001f90 <WS2812_Update>:

void WS2812_Update(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
    if (led_active && data_sent_flag) {
 8001f94:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <WS2812_Update+0x4c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01b      	beq.n	8001fd6 <WS2812_Update+0x46>
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <WS2812_Update+0x50>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d016      	beq.n	8001fd6 <WS2812_Update+0x46>
        if ((HAL_GetTick() - led_start_time) >= led_on_time) {
 8001fa8:	f003 ff5e 	bl	8005e68 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <WS2812_Update+0x54>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	1ad2      	subs	r2, r2, r3
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <WS2812_Update+0x58>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d30c      	bcc.n	8001fd6 <WS2812_Update+0x46>
            // Turn off LED by setting color to black
            WS2812_SetColor(0, 0, 0, 0, 1.0);
 8001fbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff feb8 	bl	8001d3c <WS2812_SetColor>
            WS2812_Send();
 8001fcc:	f7ff ff38 	bl	8001e40 <WS2812_Send>
            led_active = false;
 8001fd0:	4b02      	ldr	r3, [pc, #8]	@ (8001fdc <WS2812_Update+0x4c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
//            printf("WS2812 LED turned off\n");
        }
    }
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	24000380 	.word	0x24000380
 8001fe0:	24000248 	.word	0x24000248
 8001fe4:	2400037c 	.word	0x2400037c
 8001fe8:	24000378 	.word	0x24000378

08001fec <HAL_TIM_PWM_PulseFinishedCallback>:

__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a08      	ldr	r2, [pc, #32]	@ (800201c <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d109      	bne.n	8002012 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
        HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8001ffe:	2104      	movs	r1, #4
 8002000:	4807      	ldr	r0, [pc, #28]	@ (8002020 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002002:	f00b fc83 	bl	800d90c <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&WS2812_TIMER);
 8002006:	4806      	ldr	r0, [pc, #24]	@ (8002020 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002008:	f00b f8a8 	bl	800d15c <HAL_TIM_Base_Stop>
        data_sent_flag = 1;
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 DMA Transfer Complete\n");
    }
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40000400 	.word	0x40000400
 8002020:	240007c4 	.word	0x240007c4
 8002024:	24000248 	.word	0x24000248

08002028 <iBus_Check_CHKSUM>:

#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len){
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8002034:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002038:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < len-2; i++){
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	e00a      	b.n	8002056 <iBus_Check_CHKSUM+0x2e>
		chksum = chksum - data[i];
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	89fb      	ldrh	r3, [r7, #14]
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < len-2; i++){
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3301      	adds	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	3b02      	subs	r3, #2
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbef      	blt.n	8002040 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff) == data[30] && (chksum>>8)==data[31]);
 8002060:	89fb      	ldrh	r3, [r7, #14]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	321e      	adds	r2, #30
 8002068:	7812      	ldrb	r2, [r2, #0]
 800206a:	4293      	cmp	r3, r2
 800206c:	d109      	bne.n	8002082 <iBus_Check_CHKSUM+0x5a>
 800206e:	89fb      	ldrh	r3, [r7, #14]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	b29b      	uxth	r3, r3
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	321f      	adds	r2, #31
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <iBus_Check_CHKSUM+0x5a>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <iBus_Check_CHKSUM+0x5c>
 8002082:	2300      	movs	r3, #0
 8002084:	b2db      	uxtb	r3, r3
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus) {
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3302      	adds	r3, #2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3303      	adds	r3, #3
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b21a      	sxth	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3305      	adds	r3, #5
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	b29b      	uxth	r3, r3
 80020da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020de:	b29a      	uxth	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3306      	adds	r3, #6
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3307      	adds	r3, #7
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	4313      	orrs	r3, r2
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002102:	b29a      	uxth	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3308      	adds	r3, #8
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b21a      	sxth	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3309      	adds	r3, #9
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b21b      	sxth	r3, r3
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	b21b      	sxth	r3, r3
 8002120:	b29b      	uxth	r3, r3
 8002122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002126:	b29a      	uxth	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	330a      	adds	r3, #10
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b21a      	sxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	330b      	adds	r3, #11
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	b21b      	sxth	r3, r3
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	b21b      	sxth	r3, r3
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	b29b      	uxth	r3, r3
 8002146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214a:	b29a      	uxth	r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0fff;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330c      	adds	r3, #12
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21a      	sxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	330d      	adds	r3, #13
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	b21b      	sxth	r3, r3
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	b21b      	sxth	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b21b      	sxth	r3, r3
 8002168:	b29b      	uxth	r3, r3
 800216a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216e:	b29a      	uxth	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	815a      	strh	r2, [r3, #10]
	iBus->SwC = (data[14] | data[15]<<8) & 0x0fff;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	330e      	adds	r3, #14
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	b21a      	sxth	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	330f      	adds	r3, #15
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b21b      	sxth	r3, r3
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	b21b      	sxth	r3, r3
 8002188:	4313      	orrs	r3, r2
 800218a:	b21b      	sxth	r3, r3
 800218c:	b29b      	uxth	r3, r3
 800218e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002192:	b29a      	uxth	r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[16] | data[17]<<8) & 0x0fff;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3310      	adds	r3, #16
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3311      	adds	r3, #17
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	81da      	strh	r2, [r3, #14]
	iBus->VrA = (data[18] | data[19]<<8) & 0x0fff;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3312      	adds	r3, #18
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3313      	adds	r3, #19
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b21b      	sxth	r3, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021da:	b29a      	uxth	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[20] | data[21]<<8) & 0x0fff;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3314      	adds	r3, #20
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3315      	adds	r3, #21
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	021b      	lsls	r3, r3, #8
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fe:	b29a      	uxth	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	825a      	strh	r2, [r3, #18]

	iBus->FailSafe = (data[13] >> 4);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	330d      	adds	r3, #13
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	829a      	strh	r2, [r3, #20]

}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <iBus_isActiveFailsafe>:

#ifdef _USE_FS_I6
	iBus->FailSafe = (data[13] >> 4);
#endif

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus) {
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8a9b      	ldrh	r3, [r3, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
}
 8002236:	4618      	mov	r0, r3
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <__NVIC_GetPriorityGrouping>:
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4907      	ldr	r1, [pc, #28]	@ (8002298 <__NVIC_EnableIRQ+0x38>)
 800227a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	@ (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	@ (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800235e:	4b3d      	ldr	r3, [pc, #244]	@ (8002454 <MX_DMA_Init+0xfc>)
 8002360:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002364:	4a3b      	ldr	r2, [pc, #236]	@ (8002454 <MX_DMA_Init+0xfc>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800236e:	4b39      	ldr	r3, [pc, #228]	@ (8002454 <MX_DMA_Init+0xfc>)
 8002370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800237c:	4b35      	ldr	r3, [pc, #212]	@ (8002454 <MX_DMA_Init+0xfc>)
 800237e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002382:	4a34      	ldr	r2, [pc, #208]	@ (8002454 <MX_DMA_Init+0xfc>)
 8002384:	f043 0302 	orr.w	r3, r3, #2
 8002388:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800238c:	4b31      	ldr	r3, [pc, #196]	@ (8002454 <MX_DMA_Init+0xfc>)
 800238e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	200b      	movs	r0, #11
 80023a0:	f003 fe6d 	bl	800607e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023a4:	200b      	movs	r0, #11
 80023a6:	f003 fe84 	bl	80060b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	200c      	movs	r0, #12
 80023b0:	f003 fe65 	bl	800607e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80023b4:	200c      	movs	r0, #12
 80023b6:	f003 fe7c 	bl	80060b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	2100      	movs	r1, #0
 80023be:	200d      	movs	r0, #13
 80023c0:	f003 fe5d 	bl	800607e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80023c4:	200d      	movs	r0, #13
 80023c6:	f003 fe74 	bl	80060b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80023ca:	f7ff ff3b 	bl	8002244 <__NVIC_GetPriorityGrouping>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff8b 	bl	80022f0 <NVIC_EncodePriority>
 80023da:	4603      	mov	r3, r0
 80023dc:	4619      	mov	r1, r3
 80023de:	200e      	movs	r0, #14
 80023e0:	f7ff ff5c 	bl	800229c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80023e4:	200e      	movs	r0, #14
 80023e6:	f7ff ff3b 	bl	8002260 <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80023ea:	f7ff ff2b 	bl	8002244 <__NVIC_GetPriorityGrouping>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff7b 	bl	80022f0 <NVIC_EncodePriority>
 80023fa:	4603      	mov	r3, r0
 80023fc:	4619      	mov	r1, r3
 80023fe:	200f      	movs	r0, #15
 8002400:	f7ff ff4c 	bl	800229c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002404:	200f      	movs	r0, #15
 8002406:	f7ff ff2b 	bl	8002260 <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	2010      	movs	r0, #16
 8002410:	f003 fe35 	bl	800607e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002414:	2010      	movs	r0, #16
 8002416:	f003 fe4c 	bl	80060b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	2011      	movs	r0, #17
 8002420:	f003 fe2d 	bl	800607e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002424:	2011      	movs	r0, #17
 8002426:	f003 fe44 	bl	80060b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	202f      	movs	r0, #47	@ 0x2f
 8002430:	f003 fe25 	bl	800607e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002434:	202f      	movs	r0, #47	@ 0x2f
 8002436:	f003 fe3c 	bl	80060b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	2038      	movs	r0, #56	@ 0x38
 8002440:	f003 fe1d 	bl	800607e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002444:	2038      	movs	r0, #56	@ 0x38
 8002446:	f003 fe34 	bl	80060b2 <HAL_NVIC_EnableIRQ>

}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	58024400 	.word	0x58024400

08002458 <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 f833 	bl	80024d0 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800246a:	f000 f8d1 	bl	8002610 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800246e:	f000 f8eb 	bl	8002648 <dshot_start_pwm>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f95c 	bl	8002740 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8002488:	f000 f986 	bl	8002798 <dshot_dma_start>
	dshot_enable_dma_request();
 800248c:	f000 f9ba 	bl	8002804 <dshot_enable_dma_request>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d003      	beq.n	80024b0 <dshot_choose_type+0x18>
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d103      	bne.n	80024b4 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80024ac:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <dshot_choose_type+0x2c>)
 80024ae:	e002      	b.n	80024b6 <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <dshot_choose_type+0x30>)
 80024b2:	e000      	b.n	80024b6 <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <dshot_choose_type+0x34>)
	}
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	00b71b00 	.word	0x00b71b00
 80024c8:	005b8d80 	.word	0x005b8d80
 80024cc:	002dc6c0 	.word	0x002dc6c0

080024d0 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	ed2d 8b02 	vpush	{d8}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80024de:	4b27      	ldr	r3, [pc, #156]	@ (800257c <dshot_set_timer+0xac>)
 80024e0:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ffd2 	bl	8002498 <dshot_choose_type>
 80024f4:	ee07 0a90 	vmov	s15, r0
 80024f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024fc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002500:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002580 <dshot_set_timer+0xb0>
 8002504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002508:	eeb0 0a67 	vmov.f32	s0, s15
 800250c:	f011 f8b6 	bl	801367c <lrintf>
 8002510:	4603      	mov	r3, r0
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8002518:	4b1a      	ldr	r3, [pc, #104]	@ (8002584 <dshot_set_timer+0xb4>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	897a      	ldrh	r2, [r7, #10]
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8002520:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <dshot_set_timer+0xb4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2214      	movs	r2, #20
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002528:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <dshot_set_timer+0xb4>)
 800252a:	2214      	movs	r2, #20
 800252c:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <dshot_set_timer+0xb4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	897a      	ldrh	r2, [r7, #10]
 8002534:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8002536:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <dshot_set_timer+0xb4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2214      	movs	r2, #20
 800253c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <dshot_set_timer+0xb4>)
 8002540:	2214      	movs	r2, #20
 8002542:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <dshot_set_timer+0xb4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	897a      	ldrh	r2, [r7, #10]
 800254a:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 800254c:	4b0d      	ldr	r3, [pc, #52]	@ (8002584 <dshot_set_timer+0xb4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2214      	movs	r2, #20
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002554:	4b0b      	ldr	r3, [pc, #44]	@ (8002584 <dshot_set_timer+0xb4>)
 8002556:	2214      	movs	r2, #20
 8002558:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800255a:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <dshot_set_timer+0xb4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	897a      	ldrh	r2, [r7, #10]
 8002560:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <dshot_set_timer+0xb4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2214      	movs	r2, #20
 8002568:	62da      	str	r2, [r3, #44]	@ 0x2c
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <dshot_set_timer+0xb4>)
 800256c:	2214      	movs	r2, #20
 800256e:	60da      	str	r2, [r3, #12]
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	ecbd 8b02 	vpop	{d8}
 800257a:	bd80      	pop	{r7, pc}
 800257c:	10642ac0 	.word	0x10642ac0
 8002580:	3c23d70a 	.word	0x3c23d70a
 8002584:	24000810 	.word	0x24000810

08002588 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002594:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	429a      	cmp	r2, r3
 800259e:	d108      	bne.n	80025b2 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025ae:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80025b0:	e028      	b.n	8002604 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d108      	bne.n	80025ce <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025ca:	60da      	str	r2, [r3, #12]
}
 80025cc:	e01a      	b.n	8002604 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d108      	bne.n	80025ea <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025e6:	60da      	str	r2, [r3, #12]
}
 80025e8:	e00c      	b.n	8002604 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d107      	bne.n	8002604 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002602:	60da      	str	r2, [r3, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8002614:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <dshot_put_tc_callback_function+0x30>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <dshot_put_tc_callback_function+0x34>)
 800261a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 800261c:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <dshot_put_tc_callback_function+0x30>)
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <dshot_put_tc_callback_function+0x34>)
 8002622:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8002624:	4b06      	ldr	r3, [pc, #24]	@ (8002640 <dshot_put_tc_callback_function+0x30>)
 8002626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002628:	4a06      	ldr	r2, [pc, #24]	@ (8002644 <dshot_put_tc_callback_function+0x34>)
 800262a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <dshot_put_tc_callback_function+0x30>)
 800262e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002630:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <dshot_put_tc_callback_function+0x34>)
 8002632:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	24000810 	.word	0x24000810
 8002644:	08002589 	.word	0x08002589

08002648 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 800264c:	2100      	movs	r1, #0
 800264e:	4808      	ldr	r0, [pc, #32]	@ (8002670 <dshot_start_pwm+0x28>)
 8002650:	f00a fe0c 	bl	800d26c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8002654:	2104      	movs	r1, #4
 8002656:	4806      	ldr	r0, [pc, #24]	@ (8002670 <dshot_start_pwm+0x28>)
 8002658:	f00a fe08 	bl	800d26c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 800265c:	2108      	movs	r1, #8
 800265e:	4804      	ldr	r0, [pc, #16]	@ (8002670 <dshot_start_pwm+0x28>)
 8002660:	f00a fe04 	bl	800d26c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8002664:	210c      	movs	r1, #12
 8002666:	4802      	ldr	r0, [pc, #8]	@ (8002670 <dshot_start_pwm+0x28>)
 8002668:	f00a fe00 	bl	800d26c <HAL_TIM_PWM_Start>
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	24000810 	.word	0x24000810

08002674 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 800267e:	2300      	movs	r3, #0
 8002680:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8002682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	b21a      	sxth	r2, r3
 800268a:	7afb      	ldrb	r3, [r7, #11]
 800268c:	b21b      	sxth	r3, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	b21b      	sxth	r3, r3
 8002692:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8002698:	893b      	ldrh	r3, [r7, #8]
 800269a:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	e009      	b.n	80026b6 <dshot_prepare_packet+0x42>
	{
        csum ^=  csum_data; // xor data by nibbles
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4053      	eors	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3301      	adds	r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	ddf2      	ble.n	80026a2 <dshot_prepare_packet+0x2e>
	}

	csum &= 0xf;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 80026c4:	893b      	ldrh	r3, [r7, #8]
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	813b      	strh	r3, [r7, #8]

	return packet;
 80026d2:	893b      	ldrh	r3, [r7, #8]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	371c      	adds	r7, #28
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ffc0 	bl	8002674 <dshot_prepare_packet>
 80026f4:	4603      	mov	r3, r0
 80026f6:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	e011      	b.n	8002722 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 80026fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002702:	2b00      	cmp	r3, #0
 8002704:	da01      	bge.n	800270a <dshot_prepare_dmabuffer+0x2a>
 8002706:	220e      	movs	r2, #14
 8002708:	e000      	b.n	800270c <dshot_prepare_dmabuffer+0x2c>
 800270a:	2207      	movs	r2, #7
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	440b      	add	r3, r1
 8002714:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8002716:	89fb      	ldrh	r3, [r7, #14]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3301      	adds	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	ddea      	ble.n	80026fe <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3340      	adds	r3, #64	@ 0x40
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3344      	adds	r3, #68	@ 0x44
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	480e      	ldr	r0, [pc, #56]	@ (8002788 <dshot_prepare_dmabuffer_all+0x48>)
 8002750:	f7ff ffc6 	bl	80026e0 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3302      	adds	r3, #2
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	4619      	mov	r1, r3
 800275c:	480b      	ldr	r0, [pc, #44]	@ (800278c <dshot_prepare_dmabuffer_all+0x4c>)
 800275e:	f7ff ffbf 	bl	80026e0 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	4809      	ldr	r0, [pc, #36]	@ (8002790 <dshot_prepare_dmabuffer_all+0x50>)
 800276c:	f7ff ffb8 	bl	80026e0 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3306      	adds	r3, #6
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	4806      	ldr	r0, [pc, #24]	@ (8002794 <dshot_prepare_dmabuffer_all+0x54>)
 800277a:	f7ff ffb1 	bl	80026e0 <dshot_prepare_dmabuffer>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	2400039c 	.word	0x2400039c
 800278c:	240003e4 	.word	0x240003e4
 8002790:	2400042c 	.word	0x2400042c
 8002794:	24000474 	.word	0x24000474

08002798 <dshot_dma_start>:

static void dshot_dma_start()
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <dshot_dma_start+0x58>)
 800279e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80027a0:	4914      	ldr	r1, [pc, #80]	@ (80027f4 <dshot_dma_start+0x5c>)
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <dshot_dma_start+0x58>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3340      	adds	r3, #64	@ 0x40
 80027a8:	461a      	mov	r2, r3
 80027aa:	2312      	movs	r3, #18
 80027ac:	f004 f86c 	bl	8006888 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 80027b0:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <dshot_dma_start+0x58>)
 80027b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80027b4:	4910      	ldr	r1, [pc, #64]	@ (80027f8 <dshot_dma_start+0x60>)
 80027b6:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <dshot_dma_start+0x58>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	333c      	adds	r3, #60	@ 0x3c
 80027bc:	461a      	mov	r2, r3
 80027be:	2312      	movs	r3, #18
 80027c0:	f004 f862 	bl	8006888 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 80027c4:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <dshot_dma_start+0x58>)
 80027c6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80027c8:	490c      	ldr	r1, [pc, #48]	@ (80027fc <dshot_dma_start+0x64>)
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <dshot_dma_start+0x58>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3334      	adds	r3, #52	@ 0x34
 80027d0:	461a      	mov	r2, r3
 80027d2:	2312      	movs	r3, #18
 80027d4:	f004 f858 	bl	8006888 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <dshot_dma_start+0x58>)
 80027da:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80027dc:	4908      	ldr	r1, [pc, #32]	@ (8002800 <dshot_dma_start+0x68>)
 80027de:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <dshot_dma_start+0x58>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3338      	adds	r3, #56	@ 0x38
 80027e4:	461a      	mov	r2, r3
 80027e6:	2312      	movs	r3, #18
 80027e8:	f004 f84e 	bl	8006888 <HAL_DMA_Start_IT>
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	24000810 	.word	0x24000810
 80027f4:	2400039c 	.word	0x2400039c
 80027f8:	240003e4 	.word	0x240003e4
 80027fc:	2400042c 	.word	0x2400042c
 8002800:	24000474 	.word	0x24000474

08002804 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8002808:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <dshot_enable_dma_request+0x50>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <dshot_enable_dma_request+0x50>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002816:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8002818:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <dshot_enable_dma_request+0x50>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <dshot_enable_dma_request+0x50>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002826:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8002828:	4b0a      	ldr	r3, [pc, #40]	@ (8002854 <dshot_enable_dma_request+0x50>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <dshot_enable_dma_request+0x50>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002836:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8002838:	4b06      	ldr	r3, [pc, #24]	@ (8002854 <dshot_enable_dma_request+0x50>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <dshot_enable_dma_request+0x50>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002846:	60da      	str	r2, [r3, #12]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	24000810 	.word	0x24000810

08002858 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	@ 0x30
 800285c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285e:	f107 031c 	add.w	r3, r7, #28
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800286e:	4b49      	ldr	r3, [pc, #292]	@ (8002994 <MX_GPIO_Init+0x13c>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002874:	4a47      	ldr	r2, [pc, #284]	@ (8002994 <MX_GPIO_Init+0x13c>)
 8002876:	f043 0310 	orr.w	r3, r3, #16
 800287a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800287e:	4b45      	ldr	r3, [pc, #276]	@ (8002994 <MX_GPIO_Init+0x13c>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800288c:	4b41      	ldr	r3, [pc, #260]	@ (8002994 <MX_GPIO_Init+0x13c>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002892:	4a40      	ldr	r2, [pc, #256]	@ (8002994 <MX_GPIO_Init+0x13c>)
 8002894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800289c:	4b3d      	ldr	r3, [pc, #244]	@ (8002994 <MX_GPIO_Init+0x13c>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002994 <MX_GPIO_Init+0x13c>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b0:	4a38      	ldr	r2, [pc, #224]	@ (8002994 <MX_GPIO_Init+0x13c>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ba:	4b36      	ldr	r3, [pc, #216]	@ (8002994 <MX_GPIO_Init+0x13c>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c8:	4b32      	ldr	r3, [pc, #200]	@ (8002994 <MX_GPIO_Init+0x13c>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ce:	4a31      	ldr	r2, [pc, #196]	@ (8002994 <MX_GPIO_Init+0x13c>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002994 <MX_GPIO_Init+0x13c>)
 80028da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002994 <MX_GPIO_Init+0x13c>)
 80028e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ec:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <MX_GPIO_Init+0x13c>)
 80028ee:	f043 0308 	orr.w	r3, r3, #8
 80028f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f6:	4b27      	ldr	r3, [pc, #156]	@ (8002994 <MX_GPIO_Init+0x13c>)
 80028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002904:	4b23      	ldr	r3, [pc, #140]	@ (8002994 <MX_GPIO_Init+0x13c>)
 8002906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800290a:	4a22      	ldr	r2, [pc, #136]	@ (8002994 <MX_GPIO_Init+0x13c>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002914:	4b1f      	ldr	r3, [pc, #124]	@ (8002994 <MX_GPIO_Init+0x13c>)
 8002916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	2128      	movs	r1, #40	@ 0x28
 8002926:	481c      	ldr	r0, [pc, #112]	@ (8002998 <MX_GPIO_Init+0x140>)
 8002928:	f006 f918 	bl	8008b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CSA15_GPIO_Port, SPI3_CSA15_Pin, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002932:	481a      	ldr	r0, [pc, #104]	@ (800299c <MX_GPIO_Init+0x144>)
 8002934:	f006 f912 	bl	8008b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8002938:	2328      	movs	r3, #40	@ 0x28
 800293a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	4812      	ldr	r0, [pc, #72]	@ (8002998 <MX_GPIO_Init+0x140>)
 8002950:	f005 ff5c 	bl	800880c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002954:	2310      	movs	r3, #16
 8002956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002958:	2300      	movs	r3, #0
 800295a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	480c      	ldr	r0, [pc, #48]	@ (8002998 <MX_GPIO_Init+0x140>)
 8002968:	f005 ff50 	bl	800880c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CSA15_Pin */
  GPIO_InitStruct.Pin = SPI3_CSA15_Pin;
 800296c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002972:	2301      	movs	r3, #1
 8002974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CSA15_GPIO_Port, &GPIO_InitStruct);
 800297e:	f107 031c 	add.w	r3, r7, #28
 8002982:	4619      	mov	r1, r3
 8002984:	4805      	ldr	r0, [pc, #20]	@ (800299c <MX_GPIO_Init+0x144>)
 8002986:	f005 ff41 	bl	800880c <HAL_GPIO_Init>

}
 800298a:	bf00      	nop
 800298c:	3730      	adds	r7, #48	@ 0x30
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	58024400 	.word	0x58024400
 8002998:	58021000 	.word	0x58021000
 800299c:	58020000 	.word	0x58020000

080029a0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a18 <MX_I2C1_Init+0x78>)
 80029a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 80029aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029ac:	4a1b      	ldr	r2, [pc, #108]	@ (8002a1c <MX_I2C1_Init+0x7c>)
 80029ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029b0:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029b6:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029bc:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029c2:	4b14      	ldr	r3, [pc, #80]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029c8:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ce:	4b11      	ldr	r3, [pc, #68]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029da:	480e      	ldr	r0, [pc, #56]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029dc:	f006 f8f2 	bl	8008bc4 <HAL_I2C_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029e6:	f001 f977 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029ea:	2100      	movs	r1, #0
 80029ec:	4809      	ldr	r0, [pc, #36]	@ (8002a14 <MX_I2C1_Init+0x74>)
 80029ee:	f006 fe39 	bl	8009664 <HAL_I2CEx_ConfigAnalogFilter>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029f8:	f001 f96e 	bl	8003cd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029fc:	2100      	movs	r1, #0
 80029fe:	4805      	ldr	r0, [pc, #20]	@ (8002a14 <MX_I2C1_Init+0x74>)
 8002a00:	f006 fe7b 	bl	80096fa <HAL_I2CEx_ConfigDigitalFilter>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a0a:	f001 f965 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	240004bc 	.word	0x240004bc
 8002a18:	40005400 	.word	0x40005400
 8002a1c:	00d049fb 	.word	0x00d049fb

08002a20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b0b8      	sub	sp, #224	@ 0xe0
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a38:	f107 0310 	add.w	r3, r7, #16
 8002a3c:	22b8      	movs	r2, #184	@ 0xb8
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00e faf1 	bl	8011028 <memset>
  if(i2cHandle->Instance==I2C1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a54      	ldr	r2, [pc, #336]	@ (8002b9c <HAL_I2C_MspInit+0x17c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	f040 80a1 	bne.w	8002b94 <HAL_I2C_MspInit+0x174>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a52:	f04f 0208 	mov.w	r2, #8
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f008 ff9d 	bl	800b9a8 <HAL_RCCEx_PeriphCLKConfig>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002a74:	f001 f930 	bl	8003cd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a78:	4b49      	ldr	r3, [pc, #292]	@ (8002ba0 <HAL_I2C_MspInit+0x180>)
 8002a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a7e:	4a48      	ldr	r2, [pc, #288]	@ (8002ba0 <HAL_I2C_MspInit+0x180>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a88:	4b45      	ldr	r3, [pc, #276]	@ (8002ba0 <HAL_I2C_MspInit+0x180>)
 8002a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002a96:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002a9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a9e:	2312      	movs	r3, #18
 8002aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ab0:	2304      	movs	r3, #4
 8002ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002aba:	4619      	mov	r1, r3
 8002abc:	4839      	ldr	r0, [pc, #228]	@ (8002ba4 <HAL_I2C_MspInit+0x184>)
 8002abe:	f005 fea5 	bl	800880c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ac2:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <HAL_I2C_MspInit+0x180>)
 8002ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ac8:	4a35      	ldr	r2, [pc, #212]	@ (8002ba0 <HAL_I2C_MspInit+0x180>)
 8002aca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ace:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ad2:	4b33      	ldr	r3, [pc, #204]	@ (8002ba0 <HAL_I2C_MspInit+0x180>)
 8002ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002ae0:	4b31      	ldr	r3, [pc, #196]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002ae2:	4a32      	ldr	r2, [pc, #200]	@ (8002bac <HAL_I2C_MspInit+0x18c>)
 8002ae4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002ae6:	4b30      	ldr	r3, [pc, #192]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002ae8:	2221      	movs	r2, #33	@ 0x21
 8002aea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002af8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002afe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b00:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b06:	4b28      	ldr	r3, [pc, #160]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002b0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b12:	4b25      	ldr	r3, [pc, #148]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b18:	4b23      	ldr	r3, [pc, #140]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002b1e:	4822      	ldr	r0, [pc, #136]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002b20:	f003 fb5a 	bl	80061d8 <HAL_DMA_Init>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8002b2a:	f001 f8d5 	bl	8003cd8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002b32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba8 <HAL_I2C_MspInit+0x188>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA2_Stream0;
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <HAL_I2C_MspInit+0x194>)
 8002b3e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b42:	2222      	movs	r2, #34	@ 0x22
 8002b44:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b46:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b48:	2240      	movs	r2, #64	@ 0x40
 8002b4a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b4c:	4b18      	ldr	r3, [pc, #96]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b52:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b58:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b60:	4b13      	ldr	r3, [pc, #76]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002b66:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b6c:	4b10      	ldr	r3, [pc, #64]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b72:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b78:	480d      	ldr	r0, [pc, #52]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b7a:	f003 fb2d 	bl	80061d8 <HAL_DMA_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8002b84:	f001 f8a8 	bl	8003cd8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b8e:	4a08      	ldr	r2, [pc, #32]	@ (8002bb0 <HAL_I2C_MspInit+0x190>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b94:	bf00      	nop
 8002b96:	37e0      	adds	r7, #224	@ 0xe0
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40005400 	.word	0x40005400
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	58020400 	.word	0x58020400
 8002ba8:	24000510 	.word	0x24000510
 8002bac:	400200b8 	.word	0x400200b8
 8002bb0:	24000588 	.word	0x24000588
 8002bb4:	40020410 	.word	0x40020410

08002bb8 <LL_TIM_EnableCounter>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f043 0201 	orr.w	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	601a      	str	r2, [r3, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_USART_IsActiveFlag_FE>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d101      	bne.n	8002c10 <LL_USART_IsActiveFlag_FE+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_USART_IsActiveFlag_FE+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_USART_IsActiveFlag_ORE>:
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d101      	bne.n	8002c36 <LL_USART_IsActiveFlag_ORE+0x18>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_USART_IsActiveFlag_TC>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c54:	2b40      	cmp	r3, #64	@ 0x40
 8002c56:	d101      	bne.n	8002c5c <LL_USART_IsActiveFlag_TC+0x18>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <LL_USART_IsActiveFlag_TC+0x1a>
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b80      	cmp	r3, #128	@ 0x80
 8002c7c:	d101      	bne.n	8002c82 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	@ 0x24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	f043 0320 	orr.w	r3, r3, #32
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	61ba      	str	r2, [r7, #24]
 8002ce6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e9      	bne.n	8002ccc <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	041a      	lsls	r2, r3, #16
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	400b      	ands	r3, r1
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	619a      	str	r2, [r3, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <_write>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* *********** USART6 printf function code ************ */
int _write(int file, char* p, int len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e025      	b.n	8002db6 <_write+0x5e>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
            if (LL_USART_IsActiveFlag_ORE(USART6) || LL_USART_IsActiveFlag_FE(USART6)) {
 8002d6a:	481b      	ldr	r0, [pc, #108]	@ (8002dd8 <_write+0x80>)
 8002d6c:	f7ff ff57 	bl	8002c1e <LL_USART_IsActiveFlag_ORE>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d105      	bne.n	8002d82 <_write+0x2a>
 8002d76:	4818      	ldr	r0, [pc, #96]	@ (8002dd8 <_write+0x80>)
 8002d78:	f7ff ff3e 	bl	8002bf8 <LL_USART_IsActiveFlag_FE>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <_write+0x3c>
                LL_USART_ClearFlag_ORE(USART6);
 8002d82:	4815      	ldr	r0, [pc, #84]	@ (8002dd8 <_write+0x80>)
 8002d84:	f7ff ff91 	bl	8002caa <LL_USART_ClearFlag_ORE>
                LL_USART_ClearFlag_FE(USART6);
 8002d88:	4813      	ldr	r0, [pc, #76]	@ (8002dd8 <_write+0x80>)
 8002d8a:	f7ff ff81 	bl	8002c90 <LL_USART_ClearFlag_FE>
                return -1; // Indicate error
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d92:	e01c      	b.n	8002dce <_write+0x76>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
 8002d94:	4810      	ldr	r0, [pc, #64]	@ (8002dd8 <_write+0x80>)
 8002d96:	f7ff ff68 	bl	8002c6a <LL_USART_IsActiveFlag_TXE_TXFNF>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0e4      	beq.n	8002d6a <_write+0x12>
            }
        }
        LL_USART_TransmitData8(USART6, *(p + i));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	4413      	add	r3, r2
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	480b      	ldr	r0, [pc, #44]	@ (8002dd8 <_write+0x80>)
 8002dac:	f7ff ffab 	bl	8002d06 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	3301      	adds	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	dbea      	blt.n	8002d94 <_write+0x3c>
    }
    while (!LL_USART_IsActiveFlag_TC(USART6)) {}
 8002dbe:	bf00      	nop
 8002dc0:	4805      	ldr	r0, [pc, #20]	@ (8002dd8 <_write+0x80>)
 8002dc2:	f7ff ff3f 	bl	8002c44 <LL_USART_IsActiveFlag_TC>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f9      	beq.n	8002dc0 <_write+0x68>
    return len;
 8002dcc:	687b      	ldr	r3, [r7, #4]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40011400 	.word	0x40011400
 8002ddc:	00000000 	.word	0x00000000

08002de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de4:	b0de      	sub	sp, #376	@ 0x178
 8002de6:	af0a      	add	r7, sp, #40	@ 0x28

  /* USER CODE BEGIN 1 */

	static int16_t gyro_offsets_lsb[3] = {8, 4, -2}; // Initialize to zero

	unsigned char motor_arming_flag = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
	unsigned short iBus_SwA_Prev = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
	unsigned char iBus_rx_cnt = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
	unsigned short ccr1, ccr2, ccr3, ccr4;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002dfa:	f000 ff41 	bl	8003c80 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dfe:	f002 ffad 	bl	8005d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e02:	f000 fdeb 	bl	80039dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e06:	f7ff fd27 	bl	8002858 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e0a:	f7ff faa5 	bl	8002358 <MX_DMA_Init>
  MX_TIM5_Init();
 8002e0e:	f002 f9df 	bl	80051d0 <MX_TIM5_Init>
  MX_OCTOSPI1_Init();
 8002e12:	f000 ff67 	bl	8003ce4 <MX_OCTOSPI1_Init>
  MX_USART6_UART_Init();
 8002e16:	f002 fed7 	bl	8005bc8 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8002e1a:	f002 fa71 	bl	8005300 <MX_TIM7_Init>
  MX_SPI3_Init();
 8002e1e:	f001 faef 	bl	8004400 <MX_SPI3_Init>
  MX_UART4_Init();
 8002e22:	f002 fe37 	bl	8005a94 <MX_UART4_Init>
  MX_TIM2_Init();
 8002e26:	f002 f8e5 	bl	8004ff4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e2a:	f002 f959 	bl	80050e0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8002e2e:	f7ff fdb7 	bl	80029a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_EnableIT_RXNE(USART6);
 8002e32:	48b2      	ldr	r0, [pc, #712]	@ (80030fc <main+0x31c>)
 8002e34:	f7ff ff46 	bl	8002cc4 <LL_USART_EnableIT_RXNE_RXFNE>
//  StartupTone();
  LL_USART_EnableIT_RXNE_RXFNE(UART4);
 8002e38:	48b1      	ldr	r0, [pc, #708]	@ (8003100 <main+0x320>)
 8002e3a:	f7ff ff43 	bl	8002cc4 <LL_USART_EnableIT_RXNE_RXFNE>

  /* ======================== EEPROM Code START ======================== */

  if (EEPROM_Init() != W25Qxx_OK) {
 8002e3e:	f7fd feef 	bl	8000c20 <EEPROM_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d004      	beq.n	8002e52 <main+0x72>
	  printf("EEPROM Init Failed\r\n");
 8002e48:	48ae      	ldr	r0, [pc, #696]	@ (8003104 <main+0x324>)
 8002e4a:	f00d ffc5 	bl	8010dd8 <puts>
	  Error_Handler();
 8002e4e:	f000 ff43 	bl	8003cd8 <Error_Handler>
  }

  DroneConfig_t config;
  if (EEPROM_ReadConfig(&config) == W25Qxx_OK) {
 8002e52:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd ff38 	bl	8000ccc <EEPROM_ReadConfig>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10c      	bne.n	8002e7c <main+0x9c>
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
			  config.flight_mode, config.pid[0]);
 8002e62:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8002e66:	4619      	mov	r1, r3
			  config.flight_mode, config.pid[0]);
 8002e68:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8002e6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e70:	ec53 2b17 	vmov	r2, r3, d7
 8002e74:	48a4      	ldr	r0, [pc, #656]	@ (8003108 <main+0x328>)
 8002e76:	f00d ff3f 	bl	8010cf8 <iprintf>
 8002e7a:	e02a      	b.n	8002ed2 <main+0xf2>
  } else {
	  printf("No valid config found, loading defaults\r\n");
 8002e7c:	48a3      	ldr	r0, [pc, #652]	@ (800310c <main+0x32c>)
 8002e7e:	f00d ffab 	bl	8010dd8 <puts>
	  DroneConfig_t default_config = {
 8002e82:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e86:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e8a:	4aa1      	ldr	r2, [pc, #644]	@ (8003110 <main+0x330>)
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	4611      	mov	r1, r2
 8002e90:	2390      	movs	r3, #144	@ 0x90
 8002e92:	461a      	mov	r2, r3
 8002e94:	f00e f967 	bl	8011166 <memcpy>
					  .rgb = {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}},
					  .mode = 0
			  },
			  .crc = 0
	  };
	  default_config.crc = CalculateCRC32((uint8_t*)&default_config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	218c      	movs	r1, #140	@ 0x8c
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd ff70 	bl	8000d84 <CalculateCRC32>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002eaa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002eae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	  if (EEPROM_WriteConfig(&default_config) != W25Qxx_OK) {
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd ff40 	bl	8000d3c <EEPROM_WriteConfig>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d004      	beq.n	8002ecc <main+0xec>
		  printf("Failed to write default config\r\n");
 8002ec2:	4894      	ldr	r0, [pc, #592]	@ (8003114 <main+0x334>)
 8002ec4:	f00d ff88 	bl	8010dd8 <puts>
		  Error_Handler();
 8002ec8:	f000 ff06 	bl	8003cd8 <Error_Handler>
	  }
	  printf("Default config written and verified\r\n");
 8002ecc:	4892      	ldr	r0, [pc, #584]	@ (8003118 <main+0x338>)
 8002ece:	f00d ff83 	bl	8010dd8 <puts>
  }

  if (EEPROM_GetPID(eeprom_pid_read) == W25Qxx_OK) {
 8002ed2:	4892      	ldr	r0, [pc, #584]	@ (800311c <main+0x33c>)
 8002ed4:	f7fe f852 	bl	8000f7c <EEPROM_GetPID>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d118      	bne.n	8002f10 <main+0x130>
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002ede:	4b8f      	ldr	r3, [pc, #572]	@ (800311c <main+0x33c>)
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002ee4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800311c <main+0x33c>)
 8002eea:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 8002ef2:	4b8a      	ldr	r3, [pc, #552]	@ (800311c <main+0x33c>)
 8002ef4:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 8002ef8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002efc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002f00:	ed8d 7b00 	vstr	d7, [sp]
 8002f04:	ec53 2b15 	vmov	r2, r3, d5
 8002f08:	4885      	ldr	r0, [pc, #532]	@ (8003120 <main+0x340>)
 8002f0a:	f00d fef5 	bl	8010cf8 <iprintf>
 8002f0e:	e002      	b.n	8002f16 <main+0x136>
  } else {
	  printf("Failed to read PID\r\n");
 8002f10:	4884      	ldr	r0, [pc, #528]	@ (8003124 <main+0x344>)
 8002f12:	f00d ff61 	bl	8010dd8 <puts>
  }

  if (EEPROM_GetGyroCalibration(eeprom_gyro_read) == W25Qxx_OK) {
 8002f16:	4884      	ldr	r0, [pc, #528]	@ (8003128 <main+0x348>)
 8002f18:	f7fd ffb8 	bl	8000e8c <EEPROM_GetGyroCalibration>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d118      	bne.n	8002f54 <main+0x174>
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002f22:	4b81      	ldr	r3, [pc, #516]	@ (8003128 <main+0x348>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002f28:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003128 <main+0x348>)
 8002f2e:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002f32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8002f36:	4b7c      	ldr	r3, [pc, #496]	@ (8003128 <main+0x348>)
 8002f38:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002f3c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002f40:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002f44:	ed8d 7b00 	vstr	d7, [sp]
 8002f48:	ec53 2b15 	vmov	r2, r3, d5
 8002f4c:	4877      	ldr	r0, [pc, #476]	@ (800312c <main+0x34c>)
 8002f4e:	f00d fed3 	bl	8010cf8 <iprintf>
 8002f52:	e002      	b.n	8002f5a <main+0x17a>
  } else {
	  printf("Failed to read EEPROM Gyro Data\r\n");
 8002f54:	4876      	ldr	r0, [pc, #472]	@ (8003130 <main+0x350>)
 8002f56:	f00d ff3f 	bl	8010dd8 <puts>
  }

  if (EEPROM_GetAccelCalibration(eeprom_accel_read) == W25Qxx_OK) {
 8002f5a:	4876      	ldr	r0, [pc, #472]	@ (8003134 <main+0x354>)
 8002f5c:	f7fd ff4c 	bl	8000df8 <EEPROM_GetAccelCalibration>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d118      	bne.n	8002f98 <main+0x1b8>
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002f66:	4b73      	ldr	r3, [pc, #460]	@ (8003134 <main+0x354>)
 8002f68:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002f6c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002f70:	4b70      	ldr	r3, [pc, #448]	@ (8003134 <main+0x354>)
 8002f72:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002f76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8002f7a:	4b6e      	ldr	r3, [pc, #440]	@ (8003134 <main+0x354>)
 8002f7c:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002f80:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002f84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002f88:	ed8d 7b00 	vstr	d7, [sp]
 8002f8c:	ec53 2b15 	vmov	r2, r3, d5
 8002f90:	4869      	ldr	r0, [pc, #420]	@ (8003138 <main+0x358>)
 8002f92:	f00d feb1 	bl	8010cf8 <iprintf>
 8002f96:	e002      	b.n	8002f9e <main+0x1be>
  } else {
	  printf("Failed to read EEPROM Accel Data\r\n");
 8002f98:	4868      	ldr	r0, [pc, #416]	@ (800313c <main+0x35c>)
 8002f9a:	f00d ff1d 	bl	8010dd8 <puts>
  }

  if (EEPROM_GetMagCalibration(eeprom_mag_read) == W25Qxx_OK) {
 8002f9e:	4868      	ldr	r0, [pc, #416]	@ (8003140 <main+0x360>)
 8002fa0:	f7fd ffbe 	bl	8000f20 <EEPROM_GetMagCalibration>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <main+0x1fc>
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002faa:	4b65      	ldr	r3, [pc, #404]	@ (8003140 <main+0x360>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002fb0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002fb4:	4b62      	ldr	r3, [pc, #392]	@ (8003140 <main+0x360>)
 8002fb6:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002fba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8002fbe:	4b60      	ldr	r3, [pc, #384]	@ (8003140 <main+0x360>)
 8002fc0:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8002fc4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002fc8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002fcc:	ed8d 7b00 	vstr	d7, [sp]
 8002fd0:	ec53 2b15 	vmov	r2, r3, d5
 8002fd4:	485b      	ldr	r0, [pc, #364]	@ (8003144 <main+0x364>)
 8002fd6:	f00d fe8f 	bl	8010cf8 <iprintf>
 8002fda:	e002      	b.n	8002fe2 <main+0x202>
  } else {
	  printf("Failed to read EEPROM Mag Data\r\n");
 8002fdc:	485a      	ldr	r0, [pc, #360]	@ (8003148 <main+0x368>)
 8002fde:	f00d fefb 	bl	8010dd8 <puts>
  }

  if (EEPROM_GetRollPID(&eeprom_roll_pid_read) == W25Qxx_OK) {
 8002fe2:	485a      	ldr	r0, [pc, #360]	@ (800314c <main+0x36c>)
 8002fe4:	f7fd ffec 	bl	8000fc0 <EEPROM_GetRollPID>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d12d      	bne.n	800304a <main+0x26a>
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002fee:	4b57      	ldr	r3, [pc, #348]	@ (800314c <main+0x36c>)
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002ff4:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8002ff8:	4b54      	ldr	r3, [pc, #336]	@ (800314c <main+0x36c>)
 8002ffa:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8002ffe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8003002:	4b52      	ldr	r3, [pc, #328]	@ (800314c <main+0x36c>)
 8003004:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003008:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 800300c:	4b4f      	ldr	r3, [pc, #316]	@ (800314c <main+0x36c>)
 800300e:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003012:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8003016:	4b4d      	ldr	r3, [pc, #308]	@ (800314c <main+0x36c>)
 8003018:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 800301c:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8003020:	4b4a      	ldr	r3, [pc, #296]	@ (800314c <main+0x36c>)
 8003022:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003026:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800302a:	ed8d 3b08 	vstr	d3, [sp, #32]
 800302e:	ed8d 4b06 	vstr	d4, [sp, #24]
 8003032:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003036:	ed8d 6b02 	vstr	d6, [sp, #8]
 800303a:	ed8d 7b00 	vstr	d7, [sp]
 800303e:	ec53 2b12 	vmov	r2, r3, d2
 8003042:	4843      	ldr	r0, [pc, #268]	@ (8003150 <main+0x370>)
 8003044:	f00d fe58 	bl	8010cf8 <iprintf>
 8003048:	e002      	b.n	8003050 <main+0x270>
  } else {
	  printf("Failed to read Roll PID\r\n");
 800304a:	4842      	ldr	r0, [pc, #264]	@ (8003154 <main+0x374>)
 800304c:	f00d fec4 	bl	8010dd8 <puts>
  }

  if (EEPROM_GetPitchPID(&eeprom_pitch_pid_read) == W25Qxx_OK) {
 8003050:	4841      	ldr	r0, [pc, #260]	@ (8003158 <main+0x378>)
 8003052:	f7fe f807 	bl	8001064 <EEPROM_GetPitchPID>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d12d      	bne.n	80030b8 <main+0x2d8>
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 800305c:	4b3e      	ldr	r3, [pc, #248]	@ (8003158 <main+0x378>)
 800305e:	edd3 7a00 	vldr	s15, [r3]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003062:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8003066:	4b3c      	ldr	r3, [pc, #240]	@ (8003158 <main+0x378>)
 8003068:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 800306c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8003070:	4b39      	ldr	r3, [pc, #228]	@ (8003158 <main+0x378>)
 8003072:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003076:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 800307a:	4b37      	ldr	r3, [pc, #220]	@ (8003158 <main+0x378>)
 800307c:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003080:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8003084:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <main+0x378>)
 8003086:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 800308a:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 800308e:	4b32      	ldr	r3, [pc, #200]	@ (8003158 <main+0x378>)
 8003090:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003094:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8003098:	ed8d 3b08 	vstr	d3, [sp, #32]
 800309c:	ed8d 4b06 	vstr	d4, [sp, #24]
 80030a0:	ed8d 5b04 	vstr	d5, [sp, #16]
 80030a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80030a8:	ed8d 7b00 	vstr	d7, [sp]
 80030ac:	ec53 2b12 	vmov	r2, r3, d2
 80030b0:	482a      	ldr	r0, [pc, #168]	@ (800315c <main+0x37c>)
 80030b2:	f00d fe21 	bl	8010cf8 <iprintf>
 80030b6:	e002      	b.n	80030be <main+0x2de>
  } else {
	  printf("Failed to read Pitch PID\r\n");
 80030b8:	4829      	ldr	r0, [pc, #164]	@ (8003160 <main+0x380>)
 80030ba:	f00d fe8d 	bl	8010dd8 <puts>
  }

  if (EEPROM_GetYawRatePID(&eeprom_yaw_rate_pid_read) == W25Qxx_OK) {
 80030be:	4829      	ldr	r0, [pc, #164]	@ (8003164 <main+0x384>)
 80030c0:	f7fe f822 	bl	8001108 <EEPROM_GetYawRatePID>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d150      	bne.n	800316c <main+0x38c>
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 80030ca:	4b26      	ldr	r3, [pc, #152]	@ (8003164 <main+0x384>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 80030d0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 80030d4:	4b23      	ldr	r3, [pc, #140]	@ (8003164 <main+0x384>)
 80030d6:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 80030da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 80030de:	4b21      	ldr	r3, [pc, #132]	@ (8003164 <main+0x384>)
 80030e0:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 80030e4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80030e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80030ec:	ed8d 7b00 	vstr	d7, [sp]
 80030f0:	ec53 2b15 	vmov	r2, r3, d5
 80030f4:	481c      	ldr	r0, [pc, #112]	@ (8003168 <main+0x388>)
 80030f6:	f00d fdff 	bl	8010cf8 <iprintf>
 80030fa:	e03a      	b.n	8003172 <main+0x392>
 80030fc:	40011400 	.word	0x40011400
 8003100:	40004c00 	.word	0x40004c00
 8003104:	08014aa0 	.word	0x08014aa0
 8003108:	08014ab4 	.word	0x08014ab4
 800310c:	08014ae4 	.word	0x08014ae4
 8003110:	08014e44 	.word	0x08014e44
 8003114:	08014b10 	.word	0x08014b10
 8003118:	08014b30 	.word	0x08014b30
 800311c:	24000604 	.word	0x24000604
 8003120:	08014b58 	.word	0x08014b58
 8003124:	08014b84 	.word	0x08014b84
 8003128:	24000610 	.word	0x24000610
 800312c:	08014b98 	.word	0x08014b98
 8003130:	08014bc4 	.word	0x08014bc4
 8003134:	2400061c 	.word	0x2400061c
 8003138:	08014be8 	.word	0x08014be8
 800313c:	08014c14 	.word	0x08014c14
 8003140:	24000628 	.word	0x24000628
 8003144:	08014c38 	.word	0x08014c38
 8003148:	08014c64 	.word	0x08014c64
 800314c:	24000634 	.word	0x24000634
 8003150:	08014c84 	.word	0x08014c84
 8003154:	08014cc8 	.word	0x08014cc8
 8003158:	2400064c 	.word	0x2400064c
 800315c:	08014ce4 	.word	0x08014ce4
 8003160:	08014d28 	.word	0x08014d28
 8003164:	24000664 	.word	0x24000664
 8003168:	08014d44 	.word	0x08014d44
  } else {
	  printf("Failed to read Yaw Rate PID\r\n");
 800316c:	48c3      	ldr	r0, [pc, #780]	@ (800347c <main+0x69c>)
 800316e:	f00d fe33 	bl	8010dd8 <puts>
  }

  if (EEPROM_GetAircraftLights(&aircraft_lights) == W25Qxx_OK) {
 8003172:	48c3      	ldr	r0, [pc, #780]	@ (8003480 <main+0x6a0>)
 8003174:	f7fe f81a 	bl	80011ac <EEPROM_GetAircraftLights>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d139      	bne.n	80031f2 <main+0x412>
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 800317e:	4bc0      	ldr	r3, [pc, #768]	@ (8003480 <main+0x6a0>)
 8003180:	781b      	ldrb	r3, [r3, #0]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003182:	469c      	mov	ip, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8003184:	4bbe      	ldr	r3, [pc, #760]	@ (8003480 <main+0x6a0>)
 8003186:	785b      	ldrb	r3, [r3, #1]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003188:	469e      	mov	lr, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 800318a:	4bbd      	ldr	r3, [pc, #756]	@ (8003480 <main+0x6a0>)
 800318c:	789b      	ldrb	r3, [r3, #2]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 800318e:	4698      	mov	r8, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8003190:	4bbb      	ldr	r3, [pc, #748]	@ (8003480 <main+0x6a0>)
 8003192:	78db      	ldrb	r3, [r3, #3]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003194:	461a      	mov	r2, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8003196:	4bba      	ldr	r3, [pc, #744]	@ (8003480 <main+0x6a0>)
 8003198:	791b      	ldrb	r3, [r3, #4]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 800319a:	4619      	mov	r1, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 800319c:	4bb8      	ldr	r3, [pc, #736]	@ (8003480 <main+0x6a0>)
 800319e:	795b      	ldrb	r3, [r3, #5]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80031a0:	4618      	mov	r0, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 80031a2:	4bb7      	ldr	r3, [pc, #732]	@ (8003480 <main+0x6a0>)
 80031a4:	799b      	ldrb	r3, [r3, #6]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80031a6:	461c      	mov	r4, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 80031a8:	4bb5      	ldr	r3, [pc, #724]	@ (8003480 <main+0x6a0>)
 80031aa:	79db      	ldrb	r3, [r3, #7]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80031ac:	461d      	mov	r5, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 80031ae:	4bb4      	ldr	r3, [pc, #720]	@ (8003480 <main+0x6a0>)
 80031b0:	7a1b      	ldrb	r3, [r3, #8]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80031b2:	461e      	mov	r6, r3
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 80031b4:	4bb2      	ldr	r3, [pc, #712]	@ (8003480 <main+0x6a0>)
 80031b6:	7a5b      	ldrb	r3, [r3, #9]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80031b8:	60fb      	str	r3, [r7, #12]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 80031ba:	4bb1      	ldr	r3, [pc, #708]	@ (8003480 <main+0x6a0>)
 80031bc:	7a9b      	ldrb	r3, [r3, #10]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80031be:	60bb      	str	r3, [r7, #8]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 80031c0:	4baf      	ldr	r3, [pc, #700]	@ (8003480 <main+0x6a0>)
 80031c2:	7adb      	ldrb	r3, [r3, #11]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80031c4:	607b      	str	r3, [r7, #4]
			  aircraft_lights.mode);
 80031c6:	4bae      	ldr	r3, [pc, #696]	@ (8003480 <main+0x6a0>)
 80031c8:	7b1b      	ldrb	r3, [r3, #12]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 80031ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	9308      	str	r3, [sp, #32]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	9307      	str	r3, [sp, #28]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	9306      	str	r3, [sp, #24]
 80031d8:	9605      	str	r6, [sp, #20]
 80031da:	9504      	str	r5, [sp, #16]
 80031dc:	9403      	str	r4, [sp, #12]
 80031de:	9002      	str	r0, [sp, #8]
 80031e0:	9101      	str	r1, [sp, #4]
 80031e2:	9200      	str	r2, [sp, #0]
 80031e4:	4643      	mov	r3, r8
 80031e6:	4672      	mov	r2, lr
 80031e8:	4661      	mov	r1, ip
 80031ea:	48a6      	ldr	r0, [pc, #664]	@ (8003484 <main+0x6a4>)
 80031ec:	f00d fd84 	bl	8010cf8 <iprintf>
 80031f0:	e002      	b.n	80031f8 <main+0x418>
  } else {
	  printf("Failed to read Aircraft Lights\r\n");
 80031f2:	48a5      	ldr	r0, [pc, #660]	@ (8003488 <main+0x6a8>)
 80031f4:	f00d fdf0 	bl	8010dd8 <puts>
  //          yaw_rate_pid.kp = eeprom_yaw_rate_pid_read.kp;
  //          yaw_rate_pid.ki = eeprom_yaw_rate_pid_read.ki;
  //          yaw_rate_pid.kd = eeprom_yaw_rate_pid_read.kd;


  printf("\n");
 80031f8:	200a      	movs	r0, #10
 80031fa:	f00d fd8f 	bl	8010d1c <putchar>

  /* *********** iBus Calibration Check ************ */

  while (Is_iBus_Received() == 0) {
 80031fe:	e00b      	b.n	8003218 <main+0x438>
	  Buzzer_On(3000);
 8003200:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003204:	f7fd f920 	bl	8000448 <Buzzer_On>
	  HAL_Delay(200);
 8003208:	20c8      	movs	r0, #200	@ 0xc8
 800320a:	f002 fe39 	bl	8005e80 <HAL_Delay>
	  Buzzer_Off();
 800320e:	f7fd f943 	bl	8000498 <Buzzer_Off>
	  HAL_Delay(200);
 8003212:	20c8      	movs	r0, #200	@ 0xc8
 8003214:	f002 fe34 	bl	8005e80 <HAL_Delay>
  while (Is_iBus_Received() == 0) {
 8003218:	f000 fce4 	bl	8003be4 <Is_iBus_Received>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0ee      	beq.n	8003200 <main+0x420>
  }
  if (iBus.SwC == 2000) {
 8003222:	4b9a      	ldr	r3, [pc, #616]	@ (800348c <main+0x6ac>)
 8003224:	899b      	ldrh	r3, [r3, #12]
 8003226:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800322a:	d144      	bne.n	80032b6 <main+0x4d6>
	  Buzzer_On(1500);
 800322c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003230:	f7fd f90a 	bl	8000448 <Buzzer_On>
	  HAL_Delay(200);
 8003234:	20c8      	movs	r0, #200	@ 0xc8
 8003236:	f002 fe23 	bl	8005e80 <HAL_Delay>
	  Buzzer_On(2000);
 800323a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800323e:	f7fd f903 	bl	8000448 <Buzzer_On>
	  HAL_Delay(200);
 8003242:	20c8      	movs	r0, #200	@ 0xc8
 8003244:	f002 fe1c 	bl	8005e80 <HAL_Delay>
	  Buzzer_On(1500);
 8003248:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800324c:	f7fd f8fc 	bl	8000448 <Buzzer_On>
	  HAL_Delay(200);
 8003250:	20c8      	movs	r0, #200	@ 0xc8
 8003252:	f002 fe15 	bl	8005e80 <HAL_Delay>
	  Buzzer_On(2000);
 8003256:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800325a:	f7fd f8f5 	bl	8000448 <Buzzer_On>
	  HAL_Delay(200);
 800325e:	20c8      	movs	r0, #200	@ 0xc8
 8003260:	f002 fe0e 	bl	8005e80 <HAL_Delay>
	  Buzzer_Off();
 8003264:	f7fd f918 	bl	8000498 <Buzzer_Off>
	  ESC_Calibration();
 8003268:	f000 fc72 	bl	8003b50 <ESC_Calibration>
	  while (iBus.SwC != 1000) {
 800326c:	e011      	b.n	8003292 <main+0x4b2>
		  Is_iBus_Received();
 800326e:	f000 fcb9 	bl	8003be4 <Is_iBus_Received>
		  Buzzer_On(1500);
 8003272:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003276:	f7fd f8e7 	bl	8000448 <Buzzer_On>
		  HAL_Delay(200);
 800327a:	20c8      	movs	r0, #200	@ 0xc8
 800327c:	f002 fe00 	bl	8005e80 <HAL_Delay>
		  Buzzer_On(2000);
 8003280:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003284:	f7fd f8e0 	bl	8000448 <Buzzer_On>
		  HAL_Delay(200);
 8003288:	20c8      	movs	r0, #200	@ 0xc8
 800328a:	f002 fdf9 	bl	8005e80 <HAL_Delay>
		  Buzzer_Off();
 800328e:	f7fd f903 	bl	8000498 <Buzzer_Off>
	  while (iBus.SwC != 1000) {
 8003292:	4b7e      	ldr	r3, [pc, #504]	@ (800348c <main+0x6ac>)
 8003294:	899b      	ldrh	r3, [r3, #12]
 8003296:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800329a:	d1e8      	bne.n	800326e <main+0x48e>

  /* *********** iBus Calibration Check END ************ */

  /* *********** iBus Throttle Check ************ */

  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 800329c:	e00b      	b.n	80032b6 <main+0x4d6>
	  Buzzer_On(343);
 800329e:	f240 1057 	movw	r0, #343	@ 0x157
 80032a2:	f7fd f8d1 	bl	8000448 <Buzzer_On>
	  HAL_Delay(70);
 80032a6:	2046      	movs	r0, #70	@ 0x46
 80032a8:	f002 fdea 	bl	8005e80 <HAL_Delay>
	  Buzzer_Off();
 80032ac:	f7fd f8f4 	bl	8000498 <Buzzer_Off>
	  HAL_Delay(70);
 80032b0:	2046      	movs	r0, #70	@ 0x46
 80032b2:	f002 fde5 	bl	8005e80 <HAL_Delay>
  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 80032b6:	f000 fbff 	bl	8003ab8 <Is_iBus_Throttle_Min>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ee      	beq.n	800329e <main+0x4be>
 80032c0:	4b72      	ldr	r3, [pc, #456]	@ (800348c <main+0x6ac>)
 80032c2:	891b      	ldrh	r3, [r3, #8]
 80032c4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80032c8:	d0e9      	beq.n	800329e <main+0x4be>

  /* *********** iBus Throttle Check END ************ */

  /* *********** ESC Startup START ************ */

  __HAL_TIM_DISABLE(&htim5); // Reset timers
 80032ca:	4b71      	ldr	r3, [pc, #452]	@ (8003490 <main+0x6b0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6a1a      	ldr	r2, [r3, #32]
 80032d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10f      	bne.n	80032fa <main+0x51a>
 80032da:	4b6d      	ldr	r3, [pc, #436]	@ (8003490 <main+0x6b0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d107      	bne.n	80032fa <main+0x51a>
 80032ea:	4b69      	ldr	r3, [pc, #420]	@ (8003490 <main+0x6b0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b67      	ldr	r3, [pc, #412]	@ (8003490 <main+0x6b0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
  HAL_Delay(10);
 80032fa:	200a      	movs	r0, #10
 80032fc:	f002 fdc0 	bl	8005e80 <HAL_Delay>
  dshot_init(DSHOT600);
 8003300:	2002      	movs	r0, #2
 8003302:	f7ff f8a9 	bl	8002458 <dshot_init>
  main_led(0, 255, 0, 0, 1);
 8003306:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800330a:	2300      	movs	r3, #0
 800330c:	2200      	movs	r2, #0
 800330e:	21ff      	movs	r1, #255	@ 0xff
 8003310:	2000      	movs	r0, #0
 8003312:	f7fe fe0f 	bl	8001f34 <main_led>

  // Arming sequence: Send 0 for 3 seconds
  for (uint32_t i = 0; i < 3000; i++) {
 8003316:	2300      	movs	r3, #0
 8003318:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800331c:	e00a      	b.n	8003334 <main+0x554>
	  dshot_write(my_motor_value);
 800331e:	485d      	ldr	r0, [pc, #372]	@ (8003494 <main+0x6b4>)
 8003320:	f7ff f8ab 	bl	800247a <dshot_write>
	  HAL_Delay(1);
 8003324:	2001      	movs	r0, #1
 8003326:	f002 fdab 	bl	8005e80 <HAL_Delay>
  for (uint32_t i = 0; i < 3000; i++) {
 800332a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800332e:	3301      	adds	r3, #1
 8003330:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003334:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003338:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800333c:	4293      	cmp	r3, r2
 800333e:	d9ee      	bls.n	800331e <main+0x53e>
  }

  my_motor_value[0] = 0; // Motor 1
 8003340:	4b54      	ldr	r3, [pc, #336]	@ (8003494 <main+0x6b4>)
 8003342:	2200      	movs	r2, #0
 8003344:	801a      	strh	r2, [r3, #0]
  my_motor_value[1] = 0; // Motor 2
 8003346:	4b53      	ldr	r3, [pc, #332]	@ (8003494 <main+0x6b4>)
 8003348:	2200      	movs	r2, #0
 800334a:	805a      	strh	r2, [r3, #2]
  my_motor_value[2] = 0; // Motor 3
 800334c:	4b51      	ldr	r3, [pc, #324]	@ (8003494 <main+0x6b4>)
 800334e:	2200      	movs	r2, #0
 8003350:	809a      	strh	r2, [r3, #4]
  my_motor_value[3] = 0; // Motor 4
 8003352:	4b50      	ldr	r3, [pc, #320]	@ (8003494 <main+0x6b4>)
 8003354:	2200      	movs	r2, #0
 8003356:	80da      	strh	r2, [r3, #6]

  main_led(0, 100, 0, 155, 1);
 8003358:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800335c:	239b      	movs	r3, #155	@ 0x9b
 800335e:	2200      	movs	r2, #0
 8003360:	2164      	movs	r1, #100	@ 0x64
 8003362:	2000      	movs	r0, #0
 8003364:	f7fe fde6 	bl	8001f34 <main_led>

  /* *********** ESC Startup END ************ */

  LL_TIM_EnableCounter(TIM7);
 8003368:	484b      	ldr	r0, [pc, #300]	@ (8003498 <main+0x6b8>)
 800336a:	f7ff fc25 	bl	8002bb8 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 800336e:	484a      	ldr	r0, [pc, #296]	@ (8003498 <main+0x6b8>)
 8003370:	f7ff fc32 	bl	8002bd8 <LL_TIM_EnableIT_UPDATE>

  if(ICM42688P_Initialization() == 0)
 8003374:	f7fe fbee 	bl	8001b54 <ICM42688P_Initialization>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d102      	bne.n	8003384 <main+0x5a4>
  {
	  printf("=== Sensor Ready ===\n\n");
 800337e:	4847      	ldr	r0, [pc, #284]	@ (800349c <main+0x6bc>)
 8003380:	f00d fd2a 	bl	8010dd8 <puts>

  }



  HMC5883L_Init();
 8003384:	f7fe f8f0 	bl	8001568 <HMC5883L_Init>
  uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8003388:	200a      	movs	r0, #10
 800338a:	f7fe f8cf 	bl	800152c <HMC5883L_ReadReg>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
  printf("HMC5883L ID: %c\n", hmc_id);
 8003394:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8003398:	4619      	mov	r1, r3
 800339a:	4841      	ldr	r0, [pc, #260]	@ (80034a0 <main+0x6c0>)
 800339c:	f00d fcac 	bl	8010cf8 <iprintf>
  printf("\n");
 80033a0:	200a      	movs	r0, #10
 80033a2:	f00d fcbb 	bl	8010d1c <putchar>
//  ICM42688P_WriteByte(0x16, (gyro_y_offset*-2));
//
//  ICM42688P_WriteByte(0x17, (gyro_z_offset*-2)>>8);
//  ICM42688P_WriteByte(0x18, (gyro_z_offset*-2));

  main_led(0, 0, 0, 255, 1);
 80033a6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80033aa:	23ff      	movs	r3, #255	@ 0xff
 80033ac:	2200      	movs	r2, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7fe fdbf 	bl	8001f34 <main_led>
  HAL_Delay(500);
 80033b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033ba:	f002 fd61 	bl	8005e80 <HAL_Delay>
  main_led(0, 0, 0, 255, 0);
 80033be:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 80034a4 <main+0x6c4>
 80033c2:	23ff      	movs	r3, #255	@ 0xff
 80033c4:	2200      	movs	r2, #0
 80033c6:	2100      	movs	r1, #0
 80033c8:	2000      	movs	r0, #0
 80033ca:	f7fe fdb3 	bl	8001f34 <main_led>
  HAL_Delay(500);
 80033ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033d2:	f002 fd55 	bl	8005e80 <HAL_Delay>
  main_led(0, 0, 0, 255, 1);
 80033d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80033da:	23ff      	movs	r3, #255	@ 0xff
 80033dc:	2200      	movs	r2, #0
 80033de:	2100      	movs	r1, #0
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7fe fda7 	bl	8001f34 <main_led>
  HAL_Delay(500);
 80033e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033ea:	f002 fd49 	bl	8005e80 <HAL_Delay>
  main_led(0, 0, 0, 255, 0);
 80033ee:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80034a4 <main+0x6c4>
 80033f2:	23ff      	movs	r3, #255	@ 0xff
 80033f4:	2200      	movs	r2, #0
 80033f6:	2100      	movs	r1, #0
 80033f8:	2000      	movs	r0, #0
 80033fa:	f7fe fd9b 	bl	8001f34 <main_led>
  HAL_Delay(500);
 80033fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003402:	f002 fd3d 	bl	8005e80 <HAL_Delay>
  main_led(0, 0, 255, 0, 1);
 8003406:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800340a:	2300      	movs	r3, #0
 800340c:	22ff      	movs	r2, #255	@ 0xff
 800340e:	2100      	movs	r1, #0
 8003410:	2000      	movs	r0, #0
 8003412:	f7fe fd8f 	bl	8001f34 <main_led>
  HAL_Delay(500);
 8003416:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800341a:	f002 fd31 	bl	8005e80 <HAL_Delay>
  main_led(0, 0, 255, 0, 0);
 800341e:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80034a4 <main+0x6c4>
 8003422:	2300      	movs	r3, #0
 8003424:	22ff      	movs	r2, #255	@ 0xff
 8003426:	2100      	movs	r1, #0
 8003428:	2000      	movs	r0, #0
 800342a:	f7fe fd83 	bl	8001f34 <main_led>
  HAL_Delay(500);
 800342e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003432:	f002 fd25 	bl	8005e80 <HAL_Delay>

  main_led(0, 0, 255, 0, 0.1);
 8003436:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80034a8 <main+0x6c8>
 800343a:	2300      	movs	r3, #0
 800343c:	22ff      	movs	r2, #255	@ 0xff
 800343e:	2100      	movs	r1, #0
 8003440:	2000      	movs	r0, #0
 8003442:	f7fe fd77 	bl	8001f34 <main_led>


  while (Is_iBus_Throttle_Armed() == 0) {
 8003446:	e040      	b.n	80034ca <main+0x6ea>
	  // Debug: Print loop status
	  static uint32_t last_loop_print = 0;
	  if ((HAL_GetTick() - last_loop_print) >= 1000) {
 8003448:	f002 fd0e 	bl	8005e68 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	4b17      	ldr	r3, [pc, #92]	@ (80034ac <main+0x6cc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003458:	d304      	bcc.n	8003464 <main+0x684>
		  last_loop_print = HAL_GetTick();
 800345a:	f002 fd05 	bl	8005e68 <HAL_GetTick>
 800345e:	4603      	mov	r3, r0
 8003460:	4a12      	ldr	r2, [pc, #72]	@ (80034ac <main+0x6cc>)
 8003462:	6013      	str	r3, [r2, #0]
	  }

	  //	  calibration_task(); // Always call calibration_task
	  dshot_write(my_motor_value);
 8003464:	480b      	ldr	r0, [pc, #44]	@ (8003494 <main+0x6b4>)
 8003466:	f7ff f808 	bl	800247a <dshot_write>
	  if (is_cmd_mode()) {
 800346a:	f7fd f849 	bl	8000500 <is_cmd_mode>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01d      	beq.n	80034b0 <main+0x6d0>
		  dshot_write(my_motor_value);
 8003474:	4807      	ldr	r0, [pc, #28]	@ (8003494 <main+0x6b4>)
 8003476:	f7ff f800 	bl	800247a <dshot_write>
		  continue; // Skip all other tasks in command mode
 800347a:	e026      	b.n	80034ca <main+0x6ea>
 800347c:	08014d6c 	.word	0x08014d6c
 8003480:	24000670 	.word	0x24000670
 8003484:	08014d8c 	.word	0x08014d8c
 8003488:	08014df8 	.word	0x08014df8
 800348c:	24000384 	.word	0x24000384
 8003490:	24000810 	.word	0x24000810
 8003494:	24000680 	.word	0x24000680
 8003498:	40001400 	.word	0x40001400
 800349c:	08014e18 	.word	0x08014e18
 80034a0:	08014e30 	.word	0x08014e30
 80034a4:	00000000 	.word	0x00000000
 80034a8:	3dcccccd 	.word	0x3dcccccd
 80034ac:	24000688 	.word	0x24000688
	  }

	  if (tim7_20ms_flag == 1 && tim7_100ms_flag != 1) {
 80034b0:	4bc1      	ldr	r3, [pc, #772]	@ (80037b8 <main+0x9d8>)
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d108      	bne.n	80034ca <main+0x6ea>
 80034b8:	4bc0      	ldr	r3, [pc, #768]	@ (80037bc <main+0x9dc>)
 80034ba:	881b      	ldrh	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d004      	beq.n	80034ca <main+0x6ea>
		  tim7_20ms_flag = 0;
 80034c0:	4bbd      	ldr	r3, [pc, #756]	@ (80037b8 <main+0x9d8>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	801a      	strh	r2, [r3, #0]
		  check_command_timeout();
 80034c6:	f000 fbad 	bl	8003c24 <check_command_timeout>
  while (Is_iBus_Throttle_Armed() == 0) {
 80034ca:	f000 fb1b 	bl	8003b04 <Is_iBus_Throttle_Armed>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0b9      	beq.n	8003448 <main+0x668>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(tim7_1ms_flag == 1)
 80034d4:	4bba      	ldr	r3, [pc, #744]	@ (80037c0 <main+0x9e0>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	f040 80db 	bne.w	8003694 <main+0x8b4>
	  {
		  tim7_1ms_flag = 0;
 80034de:	4bb8      	ldr	r3, [pc, #736]	@ (80037c0 <main+0x9e0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	801a      	strh	r2, [r3, #0]

		  ccr1 = 240 + (((iBus.LV - 1000)*10 + (iBus.RV - 1500)*5 + (iBus.RH - 1500)*5 + (iBus.LH - 1500)*5 ) * 0.176); // back left
 80034e4:	4bb7      	ldr	r3, [pc, #732]	@ (80037c4 <main+0x9e4>)
 80034e6:	889b      	ldrh	r3, [r3, #4]
 80034e8:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	4619      	mov	r1, r3
 80034f6:	4bb3      	ldr	r3, [pc, #716]	@ (80037c4 <main+0x9e4>)
 80034f8:	885b      	ldrh	r3, [r3, #2]
 80034fa:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	4419      	add	r1, r3
 8003506:	4baf      	ldr	r3, [pc, #700]	@ (80037c4 <main+0x9e4>)
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	4419      	add	r1, r3
 8003516:	4bab      	ldr	r3, [pc, #684]	@ (80037c4 <main+0x9e4>)
 8003518:	88db      	ldrh	r3, [r3, #6]
 800351a:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	440b      	add	r3, r1
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800352e:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 80037a8 <main+0x9c8>
 8003532:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003536:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 80037b0 <main+0x9d0>
 800353a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800353e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003542:	ee17 3a90 	vmov	r3, s15
 8003546:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
		  ccr2 = 240 + (((iBus.LV - 1000)*10 - (iBus.RV - 1500)*5 + (iBus.RH - 1500)*5 - (iBus.LH - 1500)*5 ) * 0.176); // front left
 800354a:	4b9e      	ldr	r3, [pc, #632]	@ (80037c4 <main+0x9e4>)
 800354c:	889b      	ldrh	r3, [r3, #4]
 800354e:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4619      	mov	r1, r3
 800355c:	4b99      	ldr	r3, [pc, #612]	@ (80037c4 <main+0x9e4>)
 800355e:	885b      	ldrh	r3, [r3, #2]
 8003560:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8003564:	4613      	mov	r3, r2
 8003566:	079b      	lsls	r3, r3, #30
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	4419      	add	r1, r3
 8003570:	4b94      	ldr	r3, [pc, #592]	@ (80037c4 <main+0x9e4>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	4419      	add	r1, r3
 8003580:	4b90      	ldr	r3, [pc, #576]	@ (80037c4 <main+0x9e4>)
 8003582:	88db      	ldrh	r3, [r3, #6]
 8003584:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8003588:	4613      	mov	r3, r2
 800358a:	079b      	lsls	r3, r3, #30
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	440b      	add	r3, r1
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800359c:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 80037a8 <main+0x9c8>
 80035a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035a4:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 80037b0 <main+0x9d0>
 80035a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035ac:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035b0:	ee17 3a90 	vmov	r3, s15
 80035b4:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
		  ccr3 = 240 + (((iBus.LV - 1000)*10 + (iBus.RV - 1500)*5 - (iBus.RH - 1500)*5 - (iBus.LH - 1500)*5 ) * 0.176); // back right
 80035b8:	4b82      	ldr	r3, [pc, #520]	@ (80037c4 <main+0x9e4>)
 80035ba:	889b      	ldrh	r3, [r3, #4]
 80035bc:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4619      	mov	r1, r3
 80035ca:	4b7e      	ldr	r3, [pc, #504]	@ (80037c4 <main+0x9e4>)
 80035cc:	885b      	ldrh	r3, [r3, #2]
 80035ce:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	4419      	add	r1, r3
 80035da:	4b7a      	ldr	r3, [pc, #488]	@ (80037c4 <main+0x9e4>)
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 80035e2:	4613      	mov	r3, r2
 80035e4:	079b      	lsls	r3, r3, #30
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	4419      	add	r1, r3
 80035ee:	4b75      	ldr	r3, [pc, #468]	@ (80037c4 <main+0x9e4>)
 80035f0:	88db      	ldrh	r3, [r3, #6]
 80035f2:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 80035f6:	4613      	mov	r3, r2
 80035f8:	079b      	lsls	r3, r3, #30
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	440b      	add	r3, r1
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800360a:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 80037a8 <main+0x9c8>
 800360e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003612:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 80037b0 <main+0x9d0>
 8003616:	ee37 7b06 	vadd.f64	d7, d7, d6
 800361a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800361e:	ee17 3a90 	vmov	r3, s15
 8003622:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
		  ccr4 = 240 + (((iBus.LV - 1000)*10 - (iBus.RV - 1500)*5 - (iBus.RH - 1500)*5 + (iBus.LH - 1500)*5 ) * 0.176); // front right
 8003626:	4b67      	ldr	r3, [pc, #412]	@ (80037c4 <main+0x9e4>)
 8003628:	889b      	ldrh	r3, [r3, #4]
 800362a:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4619      	mov	r1, r3
 8003638:	4b62      	ldr	r3, [pc, #392]	@ (80037c4 <main+0x9e4>)
 800363a:	885b      	ldrh	r3, [r3, #2]
 800363c:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8003640:	4613      	mov	r3, r2
 8003642:	079b      	lsls	r3, r3, #30
 8003644:	1a9b      	subs	r3, r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	4419      	add	r1, r3
 800364c:	4b5d      	ldr	r3, [pc, #372]	@ (80037c4 <main+0x9e4>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8003654:	4613      	mov	r3, r2
 8003656:	079b      	lsls	r3, r3, #30
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	4419      	add	r1, r3
 8003660:	4b58      	ldr	r3, [pc, #352]	@ (80037c4 <main+0x9e4>)
 8003662:	88db      	ldrh	r3, [r3, #6]
 8003664:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	440b      	add	r3, r1
 8003670:	ee07 3a90 	vmov	s15, r3
 8003674:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003678:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80037a8 <main+0x9c8>
 800367c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003680:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80037b0 <main+0x9d0>
 8003684:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003688:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800368c:	ee17 3a90 	vmov	r3, s15
 8003690:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142

	  }

	  if(tim7_2ms_flag == 1)
 8003694:	4b4c      	ldr	r3, [pc, #304]	@ (80037c8 <main+0x9e8>)
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d102      	bne.n	80036a2 <main+0x8c2>
	  {
		  tim7_2ms_flag = 0;
 800369c:	4b4a      	ldr	r3, [pc, #296]	@ (80037c8 <main+0x9e8>)
 800369e:	2200      	movs	r2, #0
 80036a0:	801a      	strh	r2, [r3, #0]
//				  (int)(ICM42688P.gyro_x), (int)(ICM42688P.gyro_y), (int)(ICM42688P.gyro_z));
//		  printf("%d\t%d\t%d\t%d\t\n", my_motor_value[2], my_motor_value[3], my_motor_value[1], my_motor_value[0]);

	  }

	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 80036a2:	4b48      	ldr	r3, [pc, #288]	@ (80037c4 <main+0x9e4>)
 80036a4:	891b      	ldrh	r3, [r3, #8]
 80036a6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80036aa:	d125      	bne.n	80036f8 <main+0x918>
 80036ac:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 80036b0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80036b4:	d020      	beq.n	80036f8 <main+0x918>
	  {
		  if(iBus.LV < 1010)
 80036b6:	4b43      	ldr	r3, [pc, #268]	@ (80037c4 <main+0x9e4>)
 80036b8:	889b      	ldrh	r3, [r3, #4]
 80036ba:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80036be:	4293      	cmp	r3, r2
 80036c0:	d810      	bhi.n	80036e4 <main+0x904>
		  {
			  motor_arming_flag = 1;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 80036c8:	e016      	b.n	80036f8 <main+0x918>
		  }
		  else{
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
			  {
				  Buzzer_On(1200);
 80036ca:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80036ce:	f7fc febb 	bl	8000448 <Buzzer_On>
				  HAL_Delay(300);
 80036d2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80036d6:	f002 fbd3 	bl	8005e80 <HAL_Delay>
				  Buzzer_Off();
 80036da:	f7fc fedd 	bl	8000498 <Buzzer_Off>
				  HAL_Delay(70);
 80036de:	2046      	movs	r0, #70	@ 0x46
 80036e0:	f002 fbce 	bl	8005e80 <HAL_Delay>
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80036e4:	f000 f9e8 	bl	8003ab8 <Is_iBus_Throttle_Min>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ed      	beq.n	80036ca <main+0x8ea>
 80036ee:	4b35      	ldr	r3, [pc, #212]	@ (80037c4 <main+0x9e4>)
 80036f0:	891b      	ldrh	r3, [r3, #8]
 80036f2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80036f6:	d0e8      	beq.n	80036ca <main+0x8ea>
			  }
		  }
	  }

	  iBus_SwA_Prev = iBus.SwA;
 80036f8:	4b32      	ldr	r3, [pc, #200]	@ (80037c4 <main+0x9e4>)
 80036fa:	891b      	ldrh	r3, [r3, #8]
 80036fc:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c

	  if(iBus.SwA != 2000)
 8003700:	4b30      	ldr	r3, [pc, #192]	@ (80037c4 <main+0x9e4>)
 8003702:	891b      	ldrh	r3, [r3, #8]
 8003704:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003708:	d002      	beq.n	8003710 <main+0x930>
	  {
		  motor_arming_flag = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
	  }

	  if(motor_arming_flag == 1)
 8003710:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8003714:	2b01      	cmp	r3, #1
 8003716:	d16d      	bne.n	80037f4 <main+0xa14>
	  {
		  if(failsafe_flag == 0)
 8003718:	4b2c      	ldr	r3, [pc, #176]	@ (80037cc <main+0x9ec>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d159      	bne.n	80037d4 <main+0x9f4>
		  {
			  my_motor_value[2] = ccr1 > 2000 ? 2000 : ccr1 < 240 ? 240 : ccr1;
 8003720:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 8003724:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003728:	d806      	bhi.n	8003738 <main+0x958>
 800372a:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 800372e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003730:	bf38      	it	cc
 8003732:	23f0      	movcc	r3, #240	@ 0xf0
 8003734:	b29b      	uxth	r3, r3
 8003736:	e001      	b.n	800373c <main+0x95c>
 8003738:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800373c:	4a24      	ldr	r2, [pc, #144]	@ (80037d0 <main+0x9f0>)
 800373e:	8093      	strh	r3, [r2, #4]
			  my_motor_value[3] = ccr2 > 2000 ? 2000 : ccr2 < 240 ? 240 : ccr2;
 8003740:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8003744:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003748:	d806      	bhi.n	8003758 <main+0x978>
 800374a:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 800374e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003750:	bf38      	it	cc
 8003752:	23f0      	movcc	r3, #240	@ 0xf0
 8003754:	b29b      	uxth	r3, r3
 8003756:	e001      	b.n	800375c <main+0x97c>
 8003758:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800375c:	4a1c      	ldr	r2, [pc, #112]	@ (80037d0 <main+0x9f0>)
 800375e:	80d3      	strh	r3, [r2, #6]
			  my_motor_value[1] = ccr3 > 2000 ? 2000 : ccr3 < 240 ? 240 : ccr3;
 8003760:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8003764:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003768:	d806      	bhi.n	8003778 <main+0x998>
 800376a:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 800376e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003770:	bf38      	it	cc
 8003772:	23f0      	movcc	r3, #240	@ 0xf0
 8003774:	b29b      	uxth	r3, r3
 8003776:	e001      	b.n	800377c <main+0x99c>
 8003778:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800377c:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <main+0x9f0>)
 800377e:	8053      	strh	r3, [r2, #2]
			  my_motor_value[0] = ccr4 > 2000 ? 2000 : ccr4 < 240 ? 240 : ccr4;
 8003780:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8003784:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003788:	d806      	bhi.n	8003798 <main+0x9b8>
 800378a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 800378e:	2bf0      	cmp	r3, #240	@ 0xf0
 8003790:	bf38      	it	cc
 8003792:	23f0      	movcc	r3, #240	@ 0xf0
 8003794:	b29b      	uxth	r3, r3
 8003796:	e001      	b.n	800379c <main+0x9bc>
 8003798:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800379c:	4a0c      	ldr	r2, [pc, #48]	@ (80037d0 <main+0x9f0>)
 800379e:	8013      	strh	r3, [r2, #0]
			  dshot_write(my_motor_value);
 80037a0:	480b      	ldr	r0, [pc, #44]	@ (80037d0 <main+0x9f0>)
 80037a2:	f7fe fe6a 	bl	800247a <dshot_write>
 80037a6:	e034      	b.n	8003812 <main+0xa32>
 80037a8:	020c49ba 	.word	0x020c49ba
 80037ac:	3fc6872b 	.word	0x3fc6872b
 80037b0:	00000000 	.word	0x00000000
 80037b4:	406e0000 	.word	0x406e0000
 80037b8:	24000712 	.word	0x24000712
 80037bc:	24000716 	.word	0x24000716
 80037c0:	2400070e 	.word	0x2400070e
 80037c4:	24000384 	.word	0x24000384
 80037c8:	24000710 	.word	0x24000710
 80037cc:	24000600 	.word	0x24000600
 80037d0:	24000680 	.word	0x24000680
//			  printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
//					  iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
		  }
		  else
		  {
			  my_motor_value[2] = 0;
 80037d4:	4b73      	ldr	r3, [pc, #460]	@ (80039a4 <main+0xbc4>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	809a      	strh	r2, [r3, #4]
			  my_motor_value[3] = 0;
 80037da:	4b72      	ldr	r3, [pc, #456]	@ (80039a4 <main+0xbc4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	80da      	strh	r2, [r3, #6]
			  my_motor_value[1] = 0;
 80037e0:	4b70      	ldr	r3, [pc, #448]	@ (80039a4 <main+0xbc4>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	805a      	strh	r2, [r3, #2]
			  my_motor_value[0] = 0;
 80037e6:	4b6f      	ldr	r3, [pc, #444]	@ (80039a4 <main+0xbc4>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	801a      	strh	r2, [r3, #0]
			  dshot_write(my_motor_value);
 80037ec:	486d      	ldr	r0, [pc, #436]	@ (80039a4 <main+0xbc4>)
 80037ee:	f7fe fe44 	bl	800247a <dshot_write>
 80037f2:	e00e      	b.n	8003812 <main+0xa32>
		  }
	  }
	  else
	  {
		  my_motor_value[2] = 0;
 80037f4:	4b6b      	ldr	r3, [pc, #428]	@ (80039a4 <main+0xbc4>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	809a      	strh	r2, [r3, #4]
		  my_motor_value[3] = 0;
 80037fa:	4b6a      	ldr	r3, [pc, #424]	@ (80039a4 <main+0xbc4>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	80da      	strh	r2, [r3, #6]
		  my_motor_value[1] = 0;
 8003800:	4b68      	ldr	r3, [pc, #416]	@ (80039a4 <main+0xbc4>)
 8003802:	2200      	movs	r2, #0
 8003804:	805a      	strh	r2, [r3, #2]
		  my_motor_value[0] = 0;
 8003806:	4b67      	ldr	r3, [pc, #412]	@ (80039a4 <main+0xbc4>)
 8003808:	2200      	movs	r2, #0
 800380a:	801a      	strh	r2, [r3, #0]
		  dshot_write(my_motor_value);
 800380c:	4865      	ldr	r0, [pc, #404]	@ (80039a4 <main+0xbc4>)
 800380e:	f7fe fe34 	bl	800247a <dshot_write>
	  }

	  if(ibus_rx_cplt_flag == 1)
 8003812:	4b65      	ldr	r3, [pc, #404]	@ (80039a8 <main+0xbc8>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d123      	bne.n	8003862 <main+0xa82>
	  {
		  ibus_rx_cplt_flag = 0;
 800381a:	4b63      	ldr	r3, [pc, #396]	@ (80039a8 <main+0xbc8>)
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8003820:	2120      	movs	r1, #32
 8003822:	4862      	ldr	r0, [pc, #392]	@ (80039ac <main+0xbcc>)
 8003824:	f7fe fc00 	bl	8002028 <iBus_Check_CHKSUM>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d119      	bne.n	8003862 <main+0xa82>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800382e:	2104      	movs	r1, #4
 8003830:	485f      	ldr	r0, [pc, #380]	@ (80039b0 <main+0xbd0>)
 8003832:	f7ff fa77 	bl	8002d24 <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003836:	495f      	ldr	r1, [pc, #380]	@ (80039b4 <main+0xbd4>)
 8003838:	485c      	ldr	r0, [pc, #368]	@ (80039ac <main+0xbcc>)
 800383a:	f7fe fc2a 	bl	8002092 <iBus_Parsing>
			  iBus_rx_cnt++;
 800383e:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 8003842:	3301      	adds	r3, #1
 8003844:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b

			  if(iBus_isActiveFailsafe(&iBus) == 1)
 8003848:	485a      	ldr	r0, [pc, #360]	@ (80039b4 <main+0xbd4>)
 800384a:	f7fe fce9 	bl	8002220 <iBus_isActiveFailsafe>
 800384e:	4603      	mov	r3, r0
 8003850:	2b01      	cmp	r3, #1
 8003852:	d103      	bne.n	800385c <main+0xa7c>
			  {
				  failsafe_flag = 1;
 8003854:	4b58      	ldr	r3, [pc, #352]	@ (80039b8 <main+0xbd8>)
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e002      	b.n	8003862 <main+0xa82>
			  }
			  else
			  {
				  failsafe_flag = 0;
 800385c:	4b56      	ldr	r3, [pc, #344]	@ (80039b8 <main+0xbd8>)
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
			  //					  iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
			  //			  HAL_Delay(100);
		  }
	  }

	  if(tim7_1000ms_flag == 1)
 8003862:	4b56      	ldr	r3, [pc, #344]	@ (80039bc <main+0xbdc>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d10c      	bne.n	8003884 <main+0xaa4>
	  {
		  tim7_1000ms_flag = 0;
 800386a:	4b54      	ldr	r3, [pc, #336]	@ (80039bc <main+0xbdc>)
 800386c:	2200      	movs	r2, #0
 800386e:	801a      	strh	r2, [r3, #0]

		  if(iBus_rx_cnt == 0)
 8003870:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <main+0xa9e>
		  {
			  failsafe_flag = 2;
 8003878:	4b4f      	ldr	r3, [pc, #316]	@ (80039b8 <main+0xbd8>)
 800387a:	2202      	movs	r2, #2
 800387c:	701a      	strb	r2, [r3, #0]
		  }
		  iBus_rx_cnt = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
	  }

	  if(ICM42688P_DataReady() == 1)
 8003884:	f7fe fa4e 	bl	8001d24 <ICM42688P_DataReady>
 8003888:	4603      	mov	r3, r0
 800388a:	2b01      	cmp	r3, #1
 800388c:	f47f ae22 	bne.w	80034d4 <main+0x6f4>
	  {

		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8003890:	2108      	movs	r1, #8
 8003892:	484b      	ldr	r0, [pc, #300]	@ (80039c0 <main+0xbe0>)
 8003894:	f005 f97b 	bl	8008b8e <HAL_GPIO_TogglePin>

		  ICM42688P_Get6AxisRawData(&ICM42688P.acc_x_raw, &ICM42688P.gyro_x_raw);
 8003898:	494a      	ldr	r1, [pc, #296]	@ (80039c4 <main+0xbe4>)
 800389a:	484b      	ldr	r0, [pc, #300]	@ (80039c8 <main+0xbe8>)
 800389c:	f7fe f9f2 	bl	8001c84 <ICM42688P_Get6AxisRawData>

		  // Apply gyro offsets in software (subtract offsets from raw data)
		  int16_t gyro_x_corrected = ICM42688P.gyro_x_raw + gyro_offsets_lsb[0];	//  8
 80038a0:	4b49      	ldr	r3, [pc, #292]	@ (80039c8 <main+0xbe8>)
 80038a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	4b48      	ldr	r3, [pc, #288]	@ (80039cc <main+0xbec>)
 80038aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
		  int16_t gyro_y_corrected = ICM42688P.gyro_y_raw + gyro_offsets_lsb[1];	//  4
 80038b8:	4b43      	ldr	r3, [pc, #268]	@ (80039c8 <main+0xbe8>)
 80038ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80038be:	b29a      	uxth	r2, r3
 80038c0:	4b42      	ldr	r3, [pc, #264]	@ (80039cc <main+0xbec>)
 80038c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
		  int16_t gyro_z_corrected = ICM42688P.gyro_z_raw + gyro_offsets_lsb[2];	// -2
 80038d0:	4b3d      	ldr	r3, [pc, #244]	@ (80039c8 <main+0xbe8>)
 80038d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	4b3c      	ldr	r3, [pc, #240]	@ (80039cc <main+0xbec>)
 80038da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134

		  ICM42688P.gyro_x = gyro_x_corrected * 2000.f / 32768.f;
 80038e8:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	@ 0x138
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80039d0 <main+0xbf0>
 80038f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038fc:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80039d4 <main+0xbf4>
 8003900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003904:	4b30      	ldr	r3, [pc, #192]	@ (80039c8 <main+0xbe8>)
 8003906:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		  ICM42688P.gyro_y = gyro_y_corrected * 2000.f / 32768.f;
 800390a:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	@ 0x136
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003916:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80039d0 <main+0xbf0>
 800391a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800391e:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 80039d4 <main+0xbf4>
 8003922:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003926:	4b28      	ldr	r3, [pc, #160]	@ (80039c8 <main+0xbe8>)
 8003928:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		  ICM42688P.gyro_z = gyro_z_corrected * 2000.f / 32768.f;
 800392c:	f9b7 3134 	ldrsh.w	r3, [r7, #308]	@ 0x134
 8003930:	ee07 3a90 	vmov	s15, r3
 8003934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003938:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80039d0 <main+0xbf0>
 800393c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003940:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80039d4 <main+0xbf4>
 8003944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003948:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <main+0xbe8>)
 800394a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		  ICM42688P.acc_x = ICM42688P.acc_x_raw * 0.0004883f;
 800394e:	4b1e      	ldr	r3, [pc, #120]	@ (80039c8 <main+0xbe8>)
 8003950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800395c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80039d8 <main+0xbf8>
 8003960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003964:	4b18      	ldr	r3, [pc, #96]	@ (80039c8 <main+0xbe8>)
 8003966:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM42688P.acc_y = ICM42688P.acc_y_raw * 0.0004883f;
 800396a:	4b17      	ldr	r3, [pc, #92]	@ (80039c8 <main+0xbe8>)
 800396c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003970:	ee07 3a90 	vmov	s15, r3
 8003974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003978:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80039d8 <main+0xbf8>
 800397c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003980:	4b11      	ldr	r3, [pc, #68]	@ (80039c8 <main+0xbe8>)
 8003982:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM42688P.acc_z = ICM42688P.acc_z_raw * 0.0004883f;
 8003986:	4b10      	ldr	r3, [pc, #64]	@ (80039c8 <main+0xbe8>)
 8003988:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003994:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80039d8 <main+0xbf8>
 8003998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800399c:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <main+0xbe8>)
 800399e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	  if(tim7_1ms_flag == 1)
 80039a2:	e597      	b.n	80034d4 <main+0x6f4>
 80039a4:	24000680 	.word	0x24000680
 80039a8:	2400070c 	.word	0x2400070c
 80039ac:	240006ec 	.word	0x240006ec
 80039b0:	58020800 	.word	0x58020800
 80039b4:	24000384 	.word	0x24000384
 80039b8:	24000600 	.word	0x24000600
 80039bc:	2400071a 	.word	0x2400071a
 80039c0:	58021000 	.word	0x58021000
 80039c4:	2400020c 	.word	0x2400020c
 80039c8:	24000204 	.word	0x24000204
 80039cc:	24000004 	.word	0x24000004
 80039d0:	44fa0000 	.word	0x44fa0000
 80039d4:	47000000 	.word	0x47000000
 80039d8:	3a000142 	.word	0x3a000142

080039dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b09c      	sub	sp, #112	@ 0x70
 80039e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039e6:	224c      	movs	r2, #76	@ 0x4c
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f00d fb1c 	bl	8011028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039f0:	1d3b      	adds	r3, r7, #4
 80039f2:	2220      	movs	r2, #32
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f00d fb16 	bl	8011028 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80039fc:	2002      	movs	r0, #2
 80039fe:	f007 f88f 	bl	800ab20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003a02:	2300      	movs	r3, #0
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab4 <SystemClock_Config+0xd8>)
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab4 <SystemClock_Config+0xd8>)
 8003a0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003a10:	6193      	str	r3, [r2, #24]
 8003a12:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <SystemClock_Config+0xd8>)
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003a1e:	bf00      	nop
 8003a20:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <SystemClock_Config+0xd8>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2c:	d1f8      	bne.n	8003a20 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003a40:	2302      	movs	r3, #2
 8003a42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8003a44:	232c      	movs	r3, #44	@ 0x2c
 8003a46:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003a50:	2302      	movs	r3, #2
 8003a52:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003a54:	230c      	movs	r3, #12
 8003a56:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a64:	4618      	mov	r0, r3
 8003a66:	f007 f895 	bl	800ab94 <HAL_RCC_OscConfig>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003a70:	f000 f932 	bl	8003cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a74:	233f      	movs	r3, #63	@ 0x3f
 8003a76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003a80:	2308      	movs	r3, #8
 8003a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003a84:	2340      	movs	r3, #64	@ 0x40
 8003a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003a88:	2340      	movs	r3, #64	@ 0x40
 8003a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003a8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a90:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003a92:	2340      	movs	r3, #64	@ 0x40
 8003a94:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003a96:	1d3b      	adds	r3, r7, #4
 8003a98:	2103      	movs	r1, #3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f007 fc54 	bl	800b348 <HAL_RCC_ClockConfig>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <SystemClock_Config+0xce>
  {
    Error_Handler();
 8003aa6:	f000 f917 	bl	8003cd8 <Error_Handler>
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3770      	adds	r7, #112	@ 0x70
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	58024800 	.word	0x58024800

08003ab8 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */

int Is_iBus_Throttle_Min(void){
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8003abc:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <Is_iBus_Throttle_Min+0x40>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d115      	bne.n	8003af0 <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <Is_iBus_Throttle_Min+0x40>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8003aca:	2120      	movs	r1, #32
 8003acc:	480b      	ldr	r0, [pc, #44]	@ (8003afc <Is_iBus_Throttle_Min+0x44>)
 8003ace:	f7fe faab 	bl	8002028 <iBus_Check_CHKSUM>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d10b      	bne.n	8003af0 <Is_iBus_Throttle_Min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003ad8:	4909      	ldr	r1, [pc, #36]	@ (8003b00 <Is_iBus_Throttle_Min+0x48>)
 8003ada:	4808      	ldr	r0, [pc, #32]	@ (8003afc <Is_iBus_Throttle_Min+0x44>)
 8003adc:	f7fe fad9 	bl	8002092 <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 8003ae0:	4b07      	ldr	r3, [pc, #28]	@ (8003b00 <Is_iBus_Throttle_Min+0x48>)
 8003ae2:	889b      	ldrh	r3, [r3, #4]
 8003ae4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d801      	bhi.n	8003af0 <Is_iBus_Throttle_Min+0x38>
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2400070c 	.word	0x2400070c
 8003afc:	240006ec 	.word	0x240006ec
 8003b00:	24000384 	.word	0x24000384

08003b04 <Is_iBus_Throttle_Armed>:

int Is_iBus_Throttle_Armed(void){
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8003b08:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <Is_iBus_Throttle_Armed+0x40>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d115      	bne.n	8003b3c <Is_iBus_Throttle_Armed+0x38>
		ibus_rx_cplt_flag = 0;
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <Is_iBus_Throttle_Armed+0x40>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 8003b16:	2120      	movs	r1, #32
 8003b18:	480b      	ldr	r0, [pc, #44]	@ (8003b48 <Is_iBus_Throttle_Armed+0x44>)
 8003b1a:	f7fe fa85 	bl	8002028 <iBus_Check_CHKSUM>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d10b      	bne.n	8003b3c <Is_iBus_Throttle_Armed+0x38>
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003b24:	4909      	ldr	r1, [pc, #36]	@ (8003b4c <Is_iBus_Throttle_Armed+0x48>)
 8003b26:	4808      	ldr	r0, [pc, #32]	@ (8003b48 <Is_iBus_Throttle_Armed+0x44>)
 8003b28:	f7fe fab3 	bl	8002092 <iBus_Parsing>
			if(iBus.SwA >= 1900)  // HIGH = armed
 8003b2c:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <Is_iBus_Throttle_Armed+0x48>)
 8003b2e:	891b      	ldrh	r3, [r3, #8]
 8003b30:	f240 726b 	movw	r2, #1899	@ 0x76b
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d901      	bls.n	8003b3c <Is_iBus_Throttle_Armed+0x38>
				return 1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <Is_iBus_Throttle_Armed+0x3a>
		}
	}
	return 0;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	2400070c 	.word	0x2400070c
 8003b48:	240006ec 	.word	0x240006ec
 8003b4c:	24000384 	.word	0x24000384

08003b50 <ESC_Calibration>:

void ESC_Calibration(void){
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0

	   TIM5->CCR1 = 2000;
 8003b54:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <ESC_Calibration+0x88>)
 8003b56:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b5a:	635a      	str	r2, [r3, #52]	@ 0x34
	   TIM5->CCR2 = 2000;
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <ESC_Calibration+0x88>)
 8003b5e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b62:	639a      	str	r2, [r3, #56]	@ 0x38
	   TIM5->CCR3 = 2000;
 8003b64:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd8 <ESC_Calibration+0x88>)
 8003b66:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	   TIM5->CCR4 = 2000;
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd8 <ESC_Calibration+0x88>)
 8003b6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003b72:	641a      	str	r2, [r3, #64]	@ 0x40

	   main_led(0, 255, 0, 0, 0.1);
 8003b74:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8003bdc <ESC_Calibration+0x8c>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	21ff      	movs	r1, #255	@ 0xff
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7fe f9d8 	bl	8001f34 <main_led>

	   HAL_Delay(7000);
 8003b84:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8003b88:	f002 f97a 	bl	8005e80 <HAL_Delay>

	   TIM5->CCR1 = 1000;
 8003b8c:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <ESC_Calibration+0x88>)
 8003b8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b92:	635a      	str	r2, [r3, #52]	@ 0x34
	   TIM5->CCR2 = 1000;
 8003b94:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <ESC_Calibration+0x88>)
 8003b96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b9a:	639a      	str	r2, [r3, #56]	@ 0x38
	   TIM5->CCR3 = 1000;
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd8 <ESC_Calibration+0x88>)
 8003b9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
	   TIM5->CCR4 = 1000;
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <ESC_Calibration+0x88>)
 8003ba6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40

	   main_led(0, 0, 0, 255, 0.1);
 8003bac:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8003bdc <ESC_Calibration+0x8c>
 8003bb0:	23ff      	movs	r3, #255	@ 0xff
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f7fe f9bc 	bl	8001f34 <main_led>

	   HAL_Delay(8000);
 8003bbc:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8003bc0:	f002 f95e 	bl	8005e80 <HAL_Delay>

	   main_led(0, 0, 0, 255, 0);
 8003bc4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8003be0 <ESC_Calibration+0x90>
 8003bc8:	23ff      	movs	r3, #255	@ 0xff
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2100      	movs	r1, #0
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fe f9b0 	bl	8001f34 <main_led>
}
 8003bd4:	bf00      	nop
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40000c00 	.word	0x40000c00
 8003bdc:	3dcccccd 	.word	0x3dcccccd
 8003be0:	00000000 	.word	0x00000000

08003be4 <Is_iBus_Received>:

int Is_iBus_Received(void){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8003be8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <Is_iBus_Received+0x34>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10f      	bne.n	8003c10 <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <Is_iBus_Received+0x34>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8003bf6:	2120      	movs	r1, #32
 8003bf8:	4808      	ldr	r0, [pc, #32]	@ (8003c1c <Is_iBus_Received+0x38>)
 8003bfa:	f7fe fa15 	bl	8002028 <iBus_Check_CHKSUM>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d105      	bne.n	8003c10 <Is_iBus_Received+0x2c>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003c04:	4906      	ldr	r1, [pc, #24]	@ (8003c20 <Is_iBus_Received+0x3c>)
 8003c06:	4805      	ldr	r0, [pc, #20]	@ (8003c1c <Is_iBus_Received+0x38>)
 8003c08:	f7fe fa43 	bl	8002092 <iBus_Parsing>
			return 1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	2400070c 	.word	0x2400070c
 8003c1c:	240006ec 	.word	0x240006ec
 8003c20:	24000384 	.word	0x24000384

08003c24 <check_command_timeout>:

void check_command_timeout(void) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
	if (cmd_receiving && !is_cmd_mode()) { // Only in normal mode
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <check_command_timeout+0x4c>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01b      	beq.n	8003c6a <check_command_timeout+0x46>
 8003c32:	f7fc fc65 	bl	8000500 <is_cmd_mode>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d116      	bne.n	8003c6a <check_command_timeout+0x46>
		if ((HAL_GetTick() - last_char_time) > CMD_TIMEOUT_MS) {
 8003c3c:	f002 f914 	bl	8005e68 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <check_command_timeout+0x50>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2bc8      	cmp	r3, #200	@ 0xc8
 8003c4a:	d90e      	bls.n	8003c6a <check_command_timeout+0x46>
			cmd_receiving = 0;
 8003c4c:	4b08      	ldr	r3, [pc, #32]	@ (8003c70 <check_command_timeout+0x4c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
			cmd_index = 0;
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <check_command_timeout+0x54>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
			printf("Main: Command timeout at %lu ms\n", HAL_GetTick());
 8003c58:	f002 f906 	bl	8005e68 <HAL_GetTick>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4806      	ldr	r0, [pc, #24]	@ (8003c7c <check_command_timeout+0x58>)
 8003c62:	f00d f849 	bl	8010cf8 <iprintf>
			WS2812_Update();
 8003c66:	f7fe f993 	bl	8001f90 <WS2812_Update>
		}
	}
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	2400075d 	.word	0x2400075d
 8003c74:	24000760 	.word	0x24000760
 8003c78:	2400075c 	.word	0x2400075c
 8003c7c:	08014ed4 	.word	0x08014ed4

08003c80 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003c86:	463b      	mov	r3, r7
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8003c92:	f002 fa29 	bl	80060e8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003ca2:	231f      	movs	r3, #31
 8003ca4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8003ca6:	2387      	movs	r3, #135	@ 0x87
 8003ca8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f002 fa47 	bl	8006158 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003cca:	2004      	movs	r0, #4
 8003ccc:	f002 fa24 	bl	8006118 <HAL_MPU_Enable>

}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cdc:	b672      	cpsid	i
}
 8003cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <Error_Handler+0x8>

08003ce4 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8003cea:	463b      	mov	r3, r7
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
 8003cf8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8003cfa:	4b28      	ldr	r3, [pc, #160]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003cfc:	4a28      	ldr	r2, [pc, #160]	@ (8003da0 <MX_OCTOSPI1_Init+0xbc>)
 8003cfe:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8003d00:	4b26      	ldr	r3, [pc, #152]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8003d06:	4b25      	ldr	r3, [pc, #148]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8003d0c:	4b23      	ldr	r3, [pc, #140]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 8003d12:	4b22      	ldr	r3, [pc, #136]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d14:	2217      	movs	r2, #23
 8003d16:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8003d18:	4b20      	ldr	r3, [pc, #128]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8003d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 8003d24:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3-1;
 8003d30:	4b1a      	ldr	r3, [pc, #104]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d32:	2202      	movs	r2, #2
 8003d34:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8003d36:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8003d3e:	4b17      	ldr	r3, [pc, #92]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8003d44:	4b15      	ldr	r3, [pc, #84]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8003d50:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8003d56:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8003d5c:	480f      	ldr	r0, [pc, #60]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d5e:	f005 fd19 	bl	8009794 <HAL_OSPI_Init>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 8003d68:	f7ff ffb6 	bl	8003cd8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8003d70:	2301      	movs	r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8003d74:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003d78:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d80:	4619      	mov	r1, r3
 8003d82:	4806      	ldr	r0, [pc, #24]	@ (8003d9c <MX_OCTOSPI1_Init+0xb8>)
 8003d84:	f005 ff74 	bl	8009c70 <HAL_OSPIM_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 8003d8e:	f7ff ffa3 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8003d92:	bf00      	nop
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	2400068c 	.word	0x2400068c
 8003da0:	52005000 	.word	0x52005000

08003da4 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b0bc      	sub	sp, #240	@ 0xf0
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dbc:	f107 0320 	add.w	r3, r7, #32
 8003dc0:	22b8      	movs	r2, #184	@ 0xb8
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f00d f92f 	bl	8011028 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a5d      	ldr	r2, [pc, #372]	@ (8003f44 <HAL_OSPI_MspInit+0x1a0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	f040 80b2 	bne.w	8003f3a <HAL_OSPI_MspInit+0x196>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003dd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003de6:	f107 0320 	add.w	r3, r7, #32
 8003dea:	4618      	mov	r0, r3
 8003dec:	f007 fddc 	bl	800b9a8 <HAL_RCCEx_PeriphCLKConfig>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8003df6:	f7ff ff6f 	bl	8003cd8 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8003dfa:	4b53      	ldr	r3, [pc, #332]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003dfc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003e00:	4a51      	ldr	r2, [pc, #324]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e06:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e0c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003e18:	4b4b      	ldr	r3, [pc, #300]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003e1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e24:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003e28:	4b47      	ldr	r3, [pc, #284]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e36:	4b44      	ldr	r3, [pc, #272]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e3c:	4a42      	ldr	r2, [pc, #264]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e3e:	f043 0310 	orr.w	r3, r3, #16
 8003e42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e46:	4b40      	ldr	r3, [pc, #256]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e54:	4b3c      	ldr	r3, [pc, #240]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e5a:	4a3b      	ldr	r2, [pc, #236]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e64:	4b38      	ldr	r3, [pc, #224]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e72:	4b35      	ldr	r3, [pc, #212]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e78:	4a33      	ldr	r2, [pc, #204]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e7a:	f043 0308 	orr.w	r3, r3, #8
 8003e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e82:	4b31      	ldr	r3, [pc, #196]	@ (8003f48 <HAL_OSPI_MspInit+0x1a4>)
 8003e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003e90:	2304      	movs	r3, #4
 8003e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e96:	2302      	movs	r3, #2
 8003e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003ea8:	2309      	movs	r3, #9
 8003eaa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4825      	ldr	r0, [pc, #148]	@ (8003f4c <HAL_OSPI_MspInit+0x1a8>)
 8003eb6:	f004 fca9 	bl	800880c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003eba:	2304      	movs	r3, #4
 8003ebc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003ed2:	2309      	movs	r3, #9
 8003ed4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003edc:	4619      	mov	r1, r3
 8003ede:	481c      	ldr	r0, [pc, #112]	@ (8003f50 <HAL_OSPI_MspInit+0x1ac>)
 8003ee0:	f004 fc94 	bl	800880c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003ee4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003ee8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eec:	2302      	movs	r3, #2
 8003eee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8003efe:	2309      	movs	r3, #9
 8003f00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f04:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4812      	ldr	r0, [pc, #72]	@ (8003f54 <HAL_OSPI_MspInit+0x1b0>)
 8003f0c:	f004 fc7e 	bl	800880c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f10:	2340      	movs	r3, #64	@ 0x40
 8003f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f22:	2303      	movs	r3, #3
 8003f24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8003f28:	230a      	movs	r3, #10
 8003f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003f32:	4619      	mov	r1, r3
 8003f34:	4806      	ldr	r0, [pc, #24]	@ (8003f50 <HAL_OSPI_MspInit+0x1ac>)
 8003f36:	f004 fc69 	bl	800880c <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	37f0      	adds	r7, #240	@ 0xf0
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	52005000 	.word	0x52005000
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	58021000 	.word	0x58021000
 8003f50:	58020400 	.word	0x58020400
 8003f54:	58020c00 	.word	0x58020c00

08003f58 <__NVIC_GetPriorityGrouping>:
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f5c:	4b04      	ldr	r3, [pc, #16]	@ (8003f70 <__NVIC_GetPriorityGrouping+0x18>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	0a1b      	lsrs	r3, r3, #8
 8003f62:	f003 0307 	and.w	r3, r3, #7
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <__NVIC_EnableIRQ>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	db0b      	blt.n	8003f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	f003 021f 	and.w	r2, r3, #31
 8003f8c:	4907      	ldr	r1, [pc, #28]	@ (8003fac <__NVIC_EnableIRQ+0x38>)
 8003f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	2001      	movs	r0, #1
 8003f96:	fa00 f202 	lsl.w	r2, r0, r2
 8003f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000e100 	.word	0xe000e100

08003fb0 <__NVIC_SetPriority>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	6039      	str	r1, [r7, #0]
 8003fba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	db0a      	blt.n	8003fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	490c      	ldr	r1, [pc, #48]	@ (8003ffc <__NVIC_SetPriority+0x4c>)
 8003fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fce:	0112      	lsls	r2, r2, #4
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003fd8:	e00a      	b.n	8003ff0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4908      	ldr	r1, [pc, #32]	@ (8004000 <__NVIC_SetPriority+0x50>)
 8003fe0:	88fb      	ldrh	r3, [r7, #6]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	0112      	lsls	r2, r2, #4
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	440b      	add	r3, r1
 8003fee:	761a      	strb	r2, [r3, #24]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	e000e100 	.word	0xe000e100
 8004000:	e000ed00 	.word	0xe000ed00

08004004 <NVIC_EncodePriority>:
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	@ 0x24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f1c3 0307 	rsb	r3, r3, #7
 800401e:	2b04      	cmp	r3, #4
 8004020:	bf28      	it	cs
 8004022:	2304      	movcs	r3, #4
 8004024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	3304      	adds	r3, #4
 800402a:	2b06      	cmp	r3, #6
 800402c:	d902      	bls.n	8004034 <NVIC_EncodePriority+0x30>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	3b03      	subs	r3, #3
 8004032:	e000      	b.n	8004036 <NVIC_EncodePriority+0x32>
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004038:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	401a      	ands	r2, r3
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800404c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	43d9      	mvns	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800405c:	4313      	orrs	r3, r2
}
 800405e:	4618      	mov	r0, r3
 8004060:	3724      	adds	r7, #36	@ 0x24
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <LL_SPI_SetStandard>:
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	60da      	str	r2, [r3, #12]
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_SPI_SetFIFOThreshold>:
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	609a      	str	r2, [r3, #8]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_SPI_EnableNSSPulseMgt>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60da      	str	r2, [r3, #12]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
	...

080040d8 <LL_AHB4_GRP1_EnableClock>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 80040e0:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <LL_AHB4_GRP1_EnableClock+0x34>)
 80040e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80040e6:	4909      	ldr	r1, [pc, #36]	@ (800410c <LL_AHB4_GRP1_EnableClock+0x34>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <LL_AHB4_GRP1_EnableClock+0x34>)
 80040f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4013      	ands	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	58024400 	.word	0x58024400

08004110 <LL_APB1_GRP1_EnableClock>:
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8004118:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <LL_APB1_GRP1_EnableClock+0x34>)
 800411a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800411e:	4909      	ldr	r1, [pc, #36]	@ (8004144 <LL_APB1_GRP1_EnableClock+0x34>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8004128:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <LL_APB1_GRP1_EnableClock+0x34>)
 800412a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004134:	68fb      	ldr	r3, [r7, #12]
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	58024400 	.word	0x58024400

08004148 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8004158:	4a0d      	ldr	r2, [pc, #52]	@ (8004190 <LL_DMA_SetDataTransferDirection+0x48>)
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4413      	add	r3, r2
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4413      	add	r3, r2
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800416c:	4908      	ldr	r1, [pc, #32]	@ (8004190 <LL_DMA_SetDataTransferDirection+0x48>)
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	440b      	add	r3, r1
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	4619      	mov	r1, r3
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	440b      	add	r3, r1
 800417a:	4619      	mov	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	08014f04 	.word	0x08014f04

08004194 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80041a4:	4a0d      	ldr	r2, [pc, #52]	@ (80041dc <LL_DMA_SetMode+0x48>)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4413      	add	r3, r2
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	4413      	add	r3, r2
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 80041b8:	4908      	ldr	r1, [pc, #32]	@ (80041dc <LL_DMA_SetMode+0x48>)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	440b      	add	r3, r1
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4619      	mov	r1, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	440b      	add	r3, r1
 80041c6:	4619      	mov	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	08014f04 	.word	0x08014f04

080041e0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 80041f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004228 <LL_DMA_SetPeriphIncMode+0x48>)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4413      	add	r3, r2
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	4413      	add	r3, r2
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004204:	4908      	ldr	r1, [pc, #32]	@ (8004228 <LL_DMA_SetPeriphIncMode+0x48>)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	440b      	add	r3, r1
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	4619      	mov	r1, r3
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	440b      	add	r3, r1
 8004212:	4619      	mov	r1, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	08014f04 	.word	0x08014f04

0800422c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 800423c:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <LL_DMA_SetMemoryIncMode+0x48>)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4413      	add	r3, r2
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4413      	add	r3, r2
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004250:	4908      	ldr	r1, [pc, #32]	@ (8004274 <LL_DMA_SetMemoryIncMode+0x48>)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	440b      	add	r3, r1
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	4619      	mov	r1, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	440b      	add	r3, r1
 800425e:	4619      	mov	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	08014f04 	.word	0x08014f04

08004278 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8004288:	4a0d      	ldr	r2, [pc, #52]	@ (80042c0 <LL_DMA_SetPeriphSize+0x48>)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	4413      	add	r3, r2
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	4413      	add	r3, r2
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800429c:	4908      	ldr	r1, [pc, #32]	@ (80042c0 <LL_DMA_SetPeriphSize+0x48>)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	440b      	add	r3, r1
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	4619      	mov	r1, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	440b      	add	r3, r1
 80042aa:	4619      	mov	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	600b      	str	r3, [r1, #0]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	08014f04 	.word	0x08014f04

080042c4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 80042d4:	4a0d      	ldr	r2, [pc, #52]	@ (800430c <LL_DMA_SetMemorySize+0x48>)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4413      	add	r3, r2
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4413      	add	r3, r2
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80042e8:	4908      	ldr	r1, [pc, #32]	@ (800430c <LL_DMA_SetMemorySize+0x48>)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	440b      	add	r3, r1
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	4619      	mov	r1, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	440b      	add	r3, r1
 80042f6:	4619      	mov	r1, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	08014f04 	.word	0x08014f04

08004310 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8004320:	4a0d      	ldr	r2, [pc, #52]	@ (8004358 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4413      	add	r3, r2
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	461a      	mov	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4413      	add	r3, r2
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004334:	4908      	ldr	r1, [pc, #32]	@ (8004358 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	440b      	add	r3, r1
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	4619      	mov	r1, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	440b      	add	r3, r1
 8004342:	4619      	mov	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	08014f04 	.word	0x08014f04

0800435c <LL_DMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <LL_DMA_SetPeriphRequest+0x58>)
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4911      	ldr	r1, [pc, #68]	@ (80043b8 <LL_DMA_SetPeriphRequest+0x5c>)
 8004374:	428a      	cmp	r2, r1
 8004376:	d101      	bne.n	800437c <LL_DMA_SetPeriphRequest+0x20>
 8004378:	2200      	movs	r2, #0
 800437a:	e000      	b.n	800437e <LL_DMA_SetPeriphRequest+0x22>
 800437c:	2220      	movs	r2, #32
 800437e:	4413      	add	r3, r2
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	4b0a      	ldr	r3, [pc, #40]	@ (80043b4 <LL_DMA_SetPeriphRequest+0x58>)
 800438a:	440b      	add	r3, r1
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	68f9      	ldr	r1, [r7, #12]
 8004390:	4809      	ldr	r0, [pc, #36]	@ (80043b8 <LL_DMA_SetPeriphRequest+0x5c>)
 8004392:	4281      	cmp	r1, r0
 8004394:	d101      	bne.n	800439a <LL_DMA_SetPeriphRequest+0x3e>
 8004396:	2100      	movs	r1, #0
 8004398:	e000      	b.n	800439c <LL_DMA_SetPeriphRequest+0x40>
 800439a:	2120      	movs	r1, #32
 800439c:	440b      	add	r3, r1
 800439e:	4619      	mov	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
}
 80043a6:	bf00      	nop
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	10008200 	.word	0x10008200
 80043b8:	40020000 	.word	0x40020000

080043bc <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 80043ca:	4a0c      	ldr	r2, [pc, #48]	@ (80043fc <LL_DMA_DisableFifoMode+0x40>)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4908      	ldr	r1, [pc, #32]	@ (80043fc <LL_DMA_DisableFifoMode+0x40>)
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	440a      	add	r2, r1
 80043e0:	7812      	ldrb	r2, [r2, #0]
 80043e2:	4611      	mov	r1, r2
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	440a      	add	r2, r1
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	6153      	str	r3, [r2, #20]
}
 80043ee:	bf00      	nop
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	08014f04 	.word	0x08014f04

08004400 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b0be      	sub	sp, #248	@ 0xf8
 8004404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004406:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800440a:	2228      	movs	r2, #40	@ 0x28
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f00c fe0a 	bl	8011028 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004414:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	611a      	str	r2, [r3, #16]
 8004424:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004426:	463b      	mov	r3, r7
 8004428:	22b8      	movs	r2, #184	@ 0xb8
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f00c fdfb 	bl	8011028 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004432:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800443e:	2300      	movs	r3, #0
 8004440:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004442:	463b      	mov	r3, r7
 8004444:	4618      	mov	r0, r3
 8004446:	f007 faaf 	bl	800b9a8 <HAL_RCCEx_PeriphCLKConfig>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_SPI3_Init+0x54>
  {
    Error_Handler();
 8004450:	f7ff fc42 	bl	8003cd8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8004454:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004458:	f7ff fe5a 	bl	8004110 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 800445c:	2004      	movs	r0, #4
 800445e:	f7ff fe3b 	bl	80040d8 <LL_AHB4_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8004462:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004466:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800446a:	2302      	movs	r3, #2
 800446c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004470:	2300      	movs	r3, #0
 8004472:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004476:	2300      	movs	r3, #0
 8004478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800447c:	2300      	movs	r3, #0
 800447e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8004482:	2306      	movs	r3, #6
 8004484:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004488:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800448c:	4619      	mov	r1, r3
 800448e:	4852      	ldr	r0, [pc, #328]	@ (80045d8 <MX_SPI3_Init+0x1d8>)
 8004490:	f00a fd30 	bl	800eef4 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_4, LL_DMAMUX1_REQ_SPI3_RX);
 8004494:	223d      	movs	r2, #61	@ 0x3d
 8004496:	2104      	movs	r1, #4
 8004498:	4850      	ldr	r0, [pc, #320]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 800449a:	f7ff ff5f 	bl	800435c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800449e:	2200      	movs	r2, #0
 80044a0:	2104      	movs	r1, #4
 80044a2:	484e      	ldr	r0, [pc, #312]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044a4:	f7ff fe50 	bl	8004148 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 80044a8:	2200      	movs	r2, #0
 80044aa:	2104      	movs	r1, #4
 80044ac:	484b      	ldr	r0, [pc, #300]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044ae:	f7ff ff2f 	bl	8004310 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 80044b2:	2200      	movs	r2, #0
 80044b4:	2104      	movs	r1, #4
 80044b6:	4849      	ldr	r0, [pc, #292]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044b8:	f7ff fe6c 	bl	8004194 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 80044bc:	2200      	movs	r2, #0
 80044be:	2104      	movs	r1, #4
 80044c0:	4846      	ldr	r0, [pc, #280]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044c2:	f7ff fe8d 	bl	80041e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 80044c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044ca:	2104      	movs	r1, #4
 80044cc:	4843      	ldr	r0, [pc, #268]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044ce:	f7ff fead 	bl	800422c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2104      	movs	r1, #4
 80044d6:	4841      	ldr	r0, [pc, #260]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044d8:	f7ff fece 	bl	8004278 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 80044dc:	2200      	movs	r2, #0
 80044de:	2104      	movs	r1, #4
 80044e0:	483e      	ldr	r0, [pc, #248]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044e2:	f7ff feef 	bl	80042c4 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 80044e6:	2104      	movs	r1, #4
 80044e8:	483c      	ldr	r0, [pc, #240]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044ea:	f7ff ff67 	bl	80043bc <LL_DMA_DisableFifoMode>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_3, LL_DMAMUX1_REQ_SPI3_TX);
 80044ee:	223e      	movs	r2, #62	@ 0x3e
 80044f0:	2103      	movs	r1, #3
 80044f2:	483a      	ldr	r0, [pc, #232]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044f4:	f7ff ff32 	bl	800435c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80044f8:	2240      	movs	r2, #64	@ 0x40
 80044fa:	2103      	movs	r1, #3
 80044fc:	4837      	ldr	r0, [pc, #220]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 80044fe:	f7ff fe23 	bl	8004148 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
 8004502:	2200      	movs	r2, #0
 8004504:	2103      	movs	r1, #3
 8004506:	4835      	ldr	r0, [pc, #212]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 8004508:	f7ff ff02 	bl	8004310 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MODE_NORMAL);
 800450c:	2200      	movs	r2, #0
 800450e:	2103      	movs	r1, #3
 8004510:	4832      	ldr	r0, [pc, #200]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 8004512:	f7ff fe3f 	bl	8004194 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
 8004516:	2200      	movs	r2, #0
 8004518:	2103      	movs	r1, #3
 800451a:	4830      	ldr	r0, [pc, #192]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 800451c:	f7ff fe60 	bl	80041e0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
 8004520:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004524:	2103      	movs	r1, #3
 8004526:	482d      	ldr	r0, [pc, #180]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 8004528:	f7ff fe80 	bl	800422c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
 800452c:	2200      	movs	r2, #0
 800452e:	2103      	movs	r1, #3
 8004530:	482a      	ldr	r0, [pc, #168]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 8004532:	f7ff fea1 	bl	8004278 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
 8004536:	2200      	movs	r2, #0
 8004538:	2103      	movs	r1, #3
 800453a:	4828      	ldr	r0, [pc, #160]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 800453c:	f7ff fec2 	bl	80042c4 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_3);
 8004540:	2103      	movs	r1, #3
 8004542:	4826      	ldr	r0, [pc, #152]	@ (80045dc <MX_SPI3_Init+0x1dc>)
 8004544:	f7ff ff3a 	bl	80043bc <LL_DMA_DisableFifoMode>

  /* SPI3 interrupt Init */
  NVIC_SetPriority(SPI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004548:	f7ff fd06 	bl	8003f58 <__NVIC_GetPriorityGrouping>
 800454c:	4603      	mov	r3, r0
 800454e:	2200      	movs	r2, #0
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff fd56 	bl	8004004 <NVIC_EncodePriority>
 8004558:	4603      	mov	r3, r0
 800455a:	4619      	mov	r1, r3
 800455c:	2033      	movs	r0, #51	@ 0x33
 800455e:	f7ff fd27 	bl	8003fb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI3_IRQn);
 8004562:	2033      	movs	r0, #51	@ 0x33
 8004564:	f7ff fd06 	bl	8003f74 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004568:	2300      	movs	r3, #0
 800456a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800456e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004576:	2307      	movs	r3, #7
 8004578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800457c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004580:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8004584:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800458c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004590:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8004594:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004598:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800459c:	2300      	movs	r3, #0
 800459e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80045a2:	2300      	movs	r3, #0
 80045a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.CRCPoly = 0x0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80045ae:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80045b2:	4619      	mov	r1, r3
 80045b4:	480a      	ldr	r0, [pc, #40]	@ (80045e0 <MX_SPI3_Init+0x1e0>)
 80045b6:	f00b fbef 	bl	800fd98 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80045ba:	2100      	movs	r1, #0
 80045bc:	4808      	ldr	r0, [pc, #32]	@ (80045e0 <MX_SPI3_Init+0x1e0>)
 80045be:	f7ff fd54 	bl	800406a <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
 80045c2:	2100      	movs	r1, #0
 80045c4:	4806      	ldr	r0, [pc, #24]	@ (80045e0 <MX_SPI3_Init+0x1e0>)
 80045c6:	f7ff fd63 	bl	8004090 <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI3);
 80045ca:	4805      	ldr	r0, [pc, #20]	@ (80045e0 <MX_SPI3_Init+0x1e0>)
 80045cc:	f7ff fd73 	bl	80040b6 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80045d0:	bf00      	nop
 80045d2:	37f8      	adds	r7, #248	@ 0xf8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	58020800 	.word	0x58020800
 80045dc:	40020000 	.word	0x40020000
 80045e0:	40003c00 	.word	0x40003c00

080045e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <HAL_MspInit+0x30>)
 80045ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045f0:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <HAL_MspInit+0x30>)
 80045f2:	f043 0302 	orr.w	r3, r3, #2
 80045f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80045fa:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <HAL_MspInit+0x30>)
 80045fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	58024400 	.word	0x58024400

08004618 <LL_TIM_ClearFlag_UPDATE>:
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f06f 0201 	mvn.w	r2, #1
 8004626:	611a      	str	r2, [r3, #16]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <LL_USART_IsActiveFlag_FE>:
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b02      	cmp	r3, #2
 800466c:	d101      	bne.n	8004672 <LL_USART_IsActiveFlag_FE+0x18>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <LL_USART_IsActiveFlag_FE+0x1a>
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_USART_IsActiveFlag_NE>:
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b04      	cmp	r3, #4
 8004692:	d101      	bne.n	8004698 <LL_USART_IsActiveFlag_NE+0x18>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <LL_USART_IsActiveFlag_NE+0x1a>
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <LL_USART_IsActiveFlag_ORE>:
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d101      	bne.n	80046be <LL_USART_IsActiveFlag_ORE+0x18>
 80046ba:	2301      	movs	r3, #1
 80046bc:	e000      	b.n	80046c0 <LL_USART_IsActiveFlag_ORE+0x1a>
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d101      	bne.n	80046e4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <LL_USART_ClearFlag_FE>:
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	621a      	str	r2, [r3, #32]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <LL_USART_ClearFlag_NE>:
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2204      	movs	r2, #4
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_USART_ClearFlag_ORE>:
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2208      	movs	r2, #8
 8004732:	621a      	str	r2, [r3, #32]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_USART_ReceiveData8>:
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474c:	b2db      	uxtb	r3, r3
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800475a:	b480      	push	{r7}
 800475c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800475e:	bf00      	nop
 8004760:	e7fd      	b.n	800475e <NMI_Handler+0x4>

08004762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004762:	b480      	push	{r7}
 8004764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004766:	bf00      	nop
 8004768:	e7fd      	b.n	8004766 <HardFault_Handler+0x4>

0800476a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800476e:	bf00      	nop
 8004770:	e7fd      	b.n	800476e <MemManage_Handler+0x4>

08004772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004772:	b480      	push	{r7}
 8004774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004776:	bf00      	nop
 8004778:	e7fd      	b.n	8004776 <BusFault_Handler+0x4>

0800477a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800477e:	bf00      	nop
 8004780:	e7fd      	b.n	800477e <UsageFault_Handler+0x4>

08004782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800479e:	b480      	push	{r7}
 80047a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047a2:	bf00      	nop
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047b0:	f001 fb46 	bl	8005e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047b4:	bf00      	nop
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 80047bc:	4802      	ldr	r0, [pc, #8]	@ (80047c8 <DMA1_Stream0_IRQHandler+0x10>)
 80047be:	f002 fd13 	bl	80071e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80047c2:	bf00      	nop
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	240008d4 	.word	0x240008d4

080047cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80047d0:	4802      	ldr	r0, [pc, #8]	@ (80047dc <DMA1_Stream1_IRQHandler+0x10>)
 80047d2:	f002 fd09 	bl	80071e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	2400094c 	.word	0x2400094c

080047e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3);
 80047e4:	4802      	ldr	r0, [pc, #8]	@ (80047f0 <DMA1_Stream2_IRQHandler+0x10>)
 80047e6:	f002 fcff 	bl	80071e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	240009c4 	.word	0x240009c4

080047f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80047f8:	bf00      	nop
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004802:	b480      	push	{r7}
 8004804:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004806:	bf00      	nop
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8004814:	4802      	ldr	r0, [pc, #8]	@ (8004820 <DMA1_Stream5_IRQHandler+0x10>)
 8004816:	f002 fce7 	bl	80071e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	24000a3c 	.word	0x24000a3c

08004824 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8004828:	4802      	ldr	r0, [pc, #8]	@ (8004834 <DMA1_Stream6_IRQHandler+0x10>)
 800482a:	f002 fcdd 	bl	80071e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	2400085c 	.word	0x2400085c

08004838 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800483c:	4802      	ldr	r0, [pc, #8]	@ (8004848 <DMA1_Stream7_IRQHandler+0x10>)
 800483e:	f002 fcd3 	bl	80071e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004842:	bf00      	nop
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	24000510 	.word	0x24000510

0800484c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004850:	4802      	ldr	r0, [pc, #8]	@ (800485c <TIM5_IRQHandler+0x10>)
 8004852:	f009 f953 	bl	800dafc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	24000810 	.word	0x24000810

08004860 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0

  /* USER CODE END SPI3_IRQn 0 */
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
	...

08004870 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

	static unsigned char cnt = 0;
	//    static uint8_t ibus_rx_buf[32];

	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8004874:	483f      	ldr	r0, [pc, #252]	@ (8004974 <UART4_IRQHandler+0x104>)
 8004876:	f7ff ff29 	bl	80046cc <LL_USART_IsActiveFlag_RXNE_RXFNE>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d059      	beq.n	8004934 <UART4_IRQHandler+0xc4>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 8004880:	483c      	ldr	r0, [pc, #240]	@ (8004974 <UART4_IRQHandler+0x104>)
 8004882:	f7ff ff5d 	bl	8004740 <LL_USART_ReceiveData8>
 8004886:	4603      	mov	r3, r0
 8004888:	461a      	mov	r2, r3
 800488a:	4b3b      	ldr	r3, [pc, #236]	@ (8004978 <UART4_IRQHandler+0x108>)
 800488c:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 800488e:	4b3b      	ldr	r3, [pc, #236]	@ (800497c <UART4_IRQHandler+0x10c>)
 8004890:	2201      	movs	r2, #1
 8004892:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 8004894:	4b3a      	ldr	r3, [pc, #232]	@ (8004980 <UART4_IRQHandler+0x110>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b1f      	cmp	r3, #31
 800489a:	d02e      	beq.n	80048fa <UART4_IRQHandler+0x8a>
 800489c:	2b1f      	cmp	r3, #31
 800489e:	dc3a      	bgt.n	8004916 <UART4_IRQHandler+0xa6>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <UART4_IRQHandler+0x3a>
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d012      	beq.n	80048ce <UART4_IRQHandler+0x5e>
 80048a8:	e035      	b.n	8004916 <UART4_IRQHandler+0xa6>
		case 0:
			if (uart4_rx_data == 0x20) {
 80048aa:	4b33      	ldr	r3, [pc, #204]	@ (8004978 <UART4_IRQHandler+0x108>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d13f      	bne.n	8004932 <UART4_IRQHandler+0xc2>
				ibus_rx_buf[cnt] = uart4_rx_data;
 80048b2:	4b33      	ldr	r3, [pc, #204]	@ (8004980 <UART4_IRQHandler+0x110>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004978 <UART4_IRQHandler+0x108>)
 80048ba:	7819      	ldrb	r1, [r3, #0]
 80048bc:	4b31      	ldr	r3, [pc, #196]	@ (8004984 <UART4_IRQHandler+0x114>)
 80048be:	5499      	strb	r1, [r3, r2]
				cnt++;
 80048c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004980 <UART4_IRQHandler+0x110>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004980 <UART4_IRQHandler+0x110>)
 80048ca:	701a      	strb	r2, [r3, #0]
			}
			break;
 80048cc:	e031      	b.n	8004932 <UART4_IRQHandler+0xc2>
		case 1:
			if (uart4_rx_data == 0x40) {
 80048ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004978 <UART4_IRQHandler+0x108>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b40      	cmp	r3, #64	@ 0x40
 80048d4:	d10d      	bne.n	80048f2 <UART4_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart4_rx_data;
 80048d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004980 <UART4_IRQHandler+0x110>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	4b26      	ldr	r3, [pc, #152]	@ (8004978 <UART4_IRQHandler+0x108>)
 80048de:	7819      	ldrb	r1, [r3, #0]
 80048e0:	4b28      	ldr	r3, [pc, #160]	@ (8004984 <UART4_IRQHandler+0x114>)
 80048e2:	5499      	strb	r1, [r3, r2]
				cnt++;
 80048e4:	4b26      	ldr	r3, [pc, #152]	@ (8004980 <UART4_IRQHandler+0x110>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	3301      	adds	r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <UART4_IRQHandler+0x110>)
 80048ee:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0; // Reset if invalid header
			}
			break;
 80048f0:	e020      	b.n	8004934 <UART4_IRQHandler+0xc4>
				cnt = 0; // Reset if invalid header
 80048f2:	4b23      	ldr	r3, [pc, #140]	@ (8004980 <UART4_IRQHandler+0x110>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]
			break;
 80048f8:	e01c      	b.n	8004934 <UART4_IRQHandler+0xc4>
		case 31:
			ibus_rx_buf[cnt] = uart4_rx_data;
 80048fa:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <UART4_IRQHandler+0x110>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	4b1d      	ldr	r3, [pc, #116]	@ (8004978 <UART4_IRQHandler+0x108>)
 8004902:	7819      	ldrb	r1, [r3, #0]
 8004904:	4b1f      	ldr	r3, [pc, #124]	@ (8004984 <UART4_IRQHandler+0x114>)
 8004906:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8004908:	4b1d      	ldr	r3, [pc, #116]	@ (8004980 <UART4_IRQHandler+0x110>)
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800490e:	4b1e      	ldr	r3, [pc, #120]	@ (8004988 <UART4_IRQHandler+0x118>)
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
			//	                for (uint8_t i = 0; i < len; i++) {
			//	                    while (!LL_USART_IsActiveFlag_TXE(USART6)) {}
			//	//                    LL_USART_TransmitData8(USART6, buffer[i]);
			//	                }
			//	                while (!LL_USART_IsActiveFlag_TC(USART6)) {}
			break;
 8004914:	e00e      	b.n	8004934 <UART4_IRQHandler+0xc4>
		default:
			ibus_rx_buf[cnt] = uart4_rx_data;
 8004916:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <UART4_IRQHandler+0x110>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	4b16      	ldr	r3, [pc, #88]	@ (8004978 <UART4_IRQHandler+0x108>)
 800491e:	7819      	ldrb	r1, [r3, #0]
 8004920:	4b18      	ldr	r3, [pc, #96]	@ (8004984 <UART4_IRQHandler+0x114>)
 8004922:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004924:	4b16      	ldr	r3, [pc, #88]	@ (8004980 <UART4_IRQHandler+0x110>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	b2da      	uxtb	r2, r3
 800492c:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <UART4_IRQHandler+0x110>)
 800492e:	701a      	strb	r2, [r3, #0]
			break;
 8004930:	e000      	b.n	8004934 <UART4_IRQHandler+0xc4>
			break;
 8004932:	bf00      	nop
		}
	}

	// Handle UART errors
	if (LL_USART_IsActiveFlag_ORE(UART4) || LL_USART_IsActiveFlag_FE(UART4) || LL_USART_IsActiveFlag_NE(UART4)) {
 8004934:	480f      	ldr	r0, [pc, #60]	@ (8004974 <UART4_IRQHandler+0x104>)
 8004936:	f7ff feb6 	bl	80046a6 <LL_USART_IsActiveFlag_ORE>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10b      	bne.n	8004958 <UART4_IRQHandler+0xe8>
 8004940:	480c      	ldr	r0, [pc, #48]	@ (8004974 <UART4_IRQHandler+0x104>)
 8004942:	f7ff fe8a 	bl	800465a <LL_USART_IsActiveFlag_FE>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d105      	bne.n	8004958 <UART4_IRQHandler+0xe8>
 800494c:	4809      	ldr	r0, [pc, #36]	@ (8004974 <UART4_IRQHandler+0x104>)
 800494e:	f7ff fe97 	bl	8004680 <LL_USART_IsActiveFlag_NE>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00b      	beq.n	8004970 <UART4_IRQHandler+0x100>
		LL_USART_ClearFlag_ORE(UART4);
 8004958:	4806      	ldr	r0, [pc, #24]	@ (8004974 <UART4_IRQHandler+0x104>)
 800495a:	f7ff fee4 	bl	8004726 <LL_USART_ClearFlag_ORE>
		LL_USART_ClearFlag_FE(UART4);
 800495e:	4805      	ldr	r0, [pc, #20]	@ (8004974 <UART4_IRQHandler+0x104>)
 8004960:	f7ff fec7 	bl	80046f2 <LL_USART_ClearFlag_FE>
		LL_USART_ClearFlag_NE(UART4);
 8004964:	4803      	ldr	r0, [pc, #12]	@ (8004974 <UART4_IRQHandler+0x104>)
 8004966:	f7ff fed1 	bl	800470c <LL_USART_ClearFlag_NE>
		cnt = 0; // Reset buffer on error
 800496a:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <UART4_IRQHandler+0x110>)
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004970:	bf00      	nop
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40004c00 	.word	0x40004c00
 8004978:	240006e9 	.word	0x240006e9
 800497c:	240006e8 	.word	0x240006e8
 8004980:	24000764 	.word	0x24000764
 8004984:	240006ec 	.word	0x240006ec
 8004988:	2400070c 	.word	0x2400070c

0800498c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
	static uint16_t tim7_50ms_count   = 0;
	static uint16_t tim7_100ms_count  = 0;
	static uint16_t tim7_200ms_count  = 0;
	static uint16_t tim7_1000ms_count = 0;

	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8004990:	483d      	ldr	r0, [pc, #244]	@ (8004a88 <TIM7_IRQHandler+0xfc>)
 8004992:	f7ff fe4f 	bl	8004634 <LL_TIM_IsActiveFlag_UPDATE>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d073      	beq.n	8004a84 <TIM7_IRQHandler+0xf8>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800499c:	483a      	ldr	r0, [pc, #232]	@ (8004a88 <TIM7_IRQHandler+0xfc>)
 800499e:	f7ff fe3b 	bl	8004618 <LL_TIM_ClearFlag_UPDATE>

		if (++tim7_1ms_count >= 1) {
 80049a2:	4b3a      	ldr	r3, [pc, #232]	@ (8004a8c <TIM7_IRQHandler+0x100>)
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	4b38      	ldr	r3, [pc, #224]	@ (8004a8c <TIM7_IRQHandler+0x100>)
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	4b37      	ldr	r3, [pc, #220]	@ (8004a8c <TIM7_IRQHandler+0x100>)
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <TIM7_IRQHandler+0x36>
			tim7_1ms_count = 0;
 80049b6:	4b35      	ldr	r3, [pc, #212]	@ (8004a8c <TIM7_IRQHandler+0x100>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	801a      	strh	r2, [r3, #0]
			tim7_1ms_flag = 1;
 80049bc:	4b34      	ldr	r3, [pc, #208]	@ (8004a90 <TIM7_IRQHandler+0x104>)
 80049be:	2201      	movs	r2, #1
 80049c0:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_2ms_count >= 2) {
 80049c2:	4b34      	ldr	r3, [pc, #208]	@ (8004a94 <TIM7_IRQHandler+0x108>)
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	4b32      	ldr	r3, [pc, #200]	@ (8004a94 <TIM7_IRQHandler+0x108>)
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	4b31      	ldr	r3, [pc, #196]	@ (8004a94 <TIM7_IRQHandler+0x108>)
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d905      	bls.n	80049e2 <TIM7_IRQHandler+0x56>
			tim7_2ms_count = 0;
 80049d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004a94 <TIM7_IRQHandler+0x108>)
 80049d8:	2200      	movs	r2, #0
 80049da:	801a      	strh	r2, [r3, #0]
			tim7_2ms_flag = 1;
 80049dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004a98 <TIM7_IRQHandler+0x10c>)
 80049de:	2201      	movs	r2, #1
 80049e0:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_20ms_count >= 20) {
 80049e2:	4b2e      	ldr	r3, [pc, #184]	@ (8004a9c <TIM7_IRQHandler+0x110>)
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	4b2c      	ldr	r3, [pc, #176]	@ (8004a9c <TIM7_IRQHandler+0x110>)
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	4b2b      	ldr	r3, [pc, #172]	@ (8004a9c <TIM7_IRQHandler+0x110>)
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	2b13      	cmp	r3, #19
 80049f4:	d905      	bls.n	8004a02 <TIM7_IRQHandler+0x76>
			tim7_20ms_count = 0;
 80049f6:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <TIM7_IRQHandler+0x110>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	801a      	strh	r2, [r3, #0]
			tim7_20ms_flag = 1;
 80049fc:	4b28      	ldr	r3, [pc, #160]	@ (8004aa0 <TIM7_IRQHandler+0x114>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_50ms_count >= 50) {
 8004a02:	4b28      	ldr	r3, [pc, #160]	@ (8004aa4 <TIM7_IRQHandler+0x118>)
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	4b26      	ldr	r3, [pc, #152]	@ (8004aa4 <TIM7_IRQHandler+0x118>)
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	4b25      	ldr	r3, [pc, #148]	@ (8004aa4 <TIM7_IRQHandler+0x118>)
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	2b31      	cmp	r3, #49	@ 0x31
 8004a14:	d905      	bls.n	8004a22 <TIM7_IRQHandler+0x96>
			tim7_50ms_count = 0;
 8004a16:	4b23      	ldr	r3, [pc, #140]	@ (8004aa4 <TIM7_IRQHandler+0x118>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	801a      	strh	r2, [r3, #0]
			tim7_50ms_flag = 1;
 8004a1c:	4b22      	ldr	r3, [pc, #136]	@ (8004aa8 <TIM7_IRQHandler+0x11c>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_100ms_count >= 100) {
 8004a22:	4b22      	ldr	r3, [pc, #136]	@ (8004aac <TIM7_IRQHandler+0x120>)
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	3301      	adds	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	4b20      	ldr	r3, [pc, #128]	@ (8004aac <TIM7_IRQHandler+0x120>)
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004aac <TIM7_IRQHandler+0x120>)
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	2b63      	cmp	r3, #99	@ 0x63
 8004a34:	d905      	bls.n	8004a42 <TIM7_IRQHandler+0xb6>
			tim7_100ms_count = 0;
 8004a36:	4b1d      	ldr	r3, [pc, #116]	@ (8004aac <TIM7_IRQHandler+0x120>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	801a      	strh	r2, [r3, #0]
			tim7_100ms_flag = 1;
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab0 <TIM7_IRQHandler+0x124>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_200ms_count >= 200) {
 8004a42:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab4 <TIM7_IRQHandler+0x128>)
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	3301      	adds	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab4 <TIM7_IRQHandler+0x128>)
 8004a4c:	801a      	strh	r2, [r3, #0]
 8004a4e:	4b19      	ldr	r3, [pc, #100]	@ (8004ab4 <TIM7_IRQHandler+0x128>)
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a54:	d905      	bls.n	8004a62 <TIM7_IRQHandler+0xd6>
			tim7_200ms_count = 0;
 8004a56:	4b17      	ldr	r3, [pc, #92]	@ (8004ab4 <TIM7_IRQHandler+0x128>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	801a      	strh	r2, [r3, #0]
			tim7_200ms_flag = 1;
 8004a5c:	4b16      	ldr	r3, [pc, #88]	@ (8004ab8 <TIM7_IRQHandler+0x12c>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_1000ms_count >= 1000) {
 8004a62:	4b16      	ldr	r3, [pc, #88]	@ (8004abc <TIM7_IRQHandler+0x130>)
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	4b14      	ldr	r3, [pc, #80]	@ (8004abc <TIM7_IRQHandler+0x130>)
 8004a6c:	801a      	strh	r2, [r3, #0]
 8004a6e:	4b13      	ldr	r3, [pc, #76]	@ (8004abc <TIM7_IRQHandler+0x130>)
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a76:	d305      	bcc.n	8004a84 <TIM7_IRQHandler+0xf8>
			tim7_1000ms_count = 0;
 8004a78:	4b10      	ldr	r3, [pc, #64]	@ (8004abc <TIM7_IRQHandler+0x130>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 8004a7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <TIM7_IRQHandler+0x134>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004a84:	bf00      	nop
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40001400 	.word	0x40001400
 8004a8c:	24000766 	.word	0x24000766
 8004a90:	2400070e 	.word	0x2400070e
 8004a94:	24000768 	.word	0x24000768
 8004a98:	24000710 	.word	0x24000710
 8004a9c:	2400076a 	.word	0x2400076a
 8004aa0:	24000712 	.word	0x24000712
 8004aa4:	2400076c 	.word	0x2400076c
 8004aa8:	24000714 	.word	0x24000714
 8004aac:	2400076e 	.word	0x2400076e
 8004ab0:	24000716 	.word	0x24000716
 8004ab4:	24000770 	.word	0x24000770
 8004ab8:	24000718 	.word	0x24000718
 8004abc:	24000772 	.word	0x24000772
 8004ac0:	2400071a 	.word	0x2400071a

08004ac4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004ac8:	4802      	ldr	r0, [pc, #8]	@ (8004ad4 <DMA2_Stream0_IRQHandler+0x10>)
 8004aca:	f002 fb8d 	bl	80071e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	24000588 	.word	0x24000588

08004ad8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 8004ade:	482b      	ldr	r0, [pc, #172]	@ (8004b8c <USART6_IRQHandler+0xb4>)
 8004ae0:	f7ff fdf4 	bl	80046cc <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04b      	beq.n	8004b82 <USART6_IRQHandler+0xaa>
		char c = LL_USART_ReceiveData8(USART6);
 8004aea:	4828      	ldr	r0, [pc, #160]	@ (8004b8c <USART6_IRQHandler+0xb4>)
 8004aec:	f7ff fe28 	bl	8004740 <LL_USART_ReceiveData8>
 8004af0:	4603      	mov	r3, r0
 8004af2:	71fb      	strb	r3, [r7, #7]
		last_char_time = HAL_GetTick();  // update timestamp
 8004af4:	f001 f9b8 	bl	8005e68 <HAL_GetTick>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4a25      	ldr	r2, [pc, #148]	@ (8004b90 <USART6_IRQHandler+0xb8>)
 8004afc:	6013      	str	r3, [r2, #0]

		if (!cmd_receiving) {
 8004afe:	4b25      	ldr	r3, [pc, #148]	@ (8004b94 <USART6_IRQHandler+0xbc>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	f083 0301 	eor.w	r3, r3, #1
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <USART6_IRQHandler+0x4a>
			if (c == '[') {
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	2b5b      	cmp	r3, #91	@ 0x5b
 8004b12:	d136      	bne.n	8004b82 <USART6_IRQHandler+0xaa>
				cmd_receiving = true;
 8004b14:	4b1f      	ldr	r3, [pc, #124]	@ (8004b94 <USART6_IRQHandler+0xbc>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b98 <USART6_IRQHandler+0xc0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004b20:	e02f      	b.n	8004b82 <USART6_IRQHandler+0xaa>
			if (c == ']') {
 8004b22:	79fb      	ldrb	r3, [r7, #7]
 8004b24:	2b5d      	cmp	r3, #93	@ 0x5d
 8004b26:	d115      	bne.n	8004b54 <USART6_IRQHandler+0x7c>
				if (cmd_index < CMD_BUFFER_SIZE) {
 8004b28:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <USART6_IRQHandler+0xc0>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b30:	d809      	bhi.n	8004b46 <USART6_IRQHandler+0x6e>
					cmd_buffer[cmd_index] = '\0';  // null-terminate
 8004b32:	4b19      	ldr	r3, [pc, #100]	@ (8004b98 <USART6_IRQHandler+0xc0>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4b18      	ldr	r3, [pc, #96]	@ (8004b9c <USART6_IRQHandler+0xc4>)
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	5499      	strb	r1, [r3, r2]
					process_command((char*)cmd_buffer);  // parse the command
 8004b40:	4816      	ldr	r0, [pc, #88]	@ (8004b9c <USART6_IRQHandler+0xc4>)
 8004b42:	f7fb fd0b 	bl	800055c <process_command>
				cmd_receiving = false;
 8004b46:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <USART6_IRQHandler+0xbc>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 8004b4c:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <USART6_IRQHandler+0xc0>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
}
 8004b52:	e016      	b.n	8004b82 <USART6_IRQHandler+0xaa>
				if (cmd_index < CMD_BUFFER_SIZE - 1) {
 8004b54:	4b10      	ldr	r3, [pc, #64]	@ (8004b98 <USART6_IRQHandler+0xc0>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b5c:	d80b      	bhi.n	8004b76 <USART6_IRQHandler+0x9e>
					cmd_buffer[cmd_index++] = c;
 8004b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b98 <USART6_IRQHandler+0xc0>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	b2d1      	uxtb	r1, r2
 8004b68:	4a0b      	ldr	r2, [pc, #44]	@ (8004b98 <USART6_IRQHandler+0xc0>)
 8004b6a:	7011      	strb	r1, [r2, #0]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8004b9c <USART6_IRQHandler+0xc4>)
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	5453      	strb	r3, [r2, r1]
}
 8004b74:	e005      	b.n	8004b82 <USART6_IRQHandler+0xaa>
					cmd_receiving = false;
 8004b76:	4b07      	ldr	r3, [pc, #28]	@ (8004b94 <USART6_IRQHandler+0xbc>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
					cmd_index = 0;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <USART6_IRQHandler+0xc0>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	40011400 	.word	0x40011400
 8004b90:	24000760 	.word	0x24000760
 8004b94:	2400075d 	.word	0x2400075d
 8004b98:	2400075c 	.word	0x2400075c
 8004b9c:	2400071c 	.word	0x2400071c

08004ba0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return 1;
 8004ba4:	2301      	movs	r3, #1
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <_kill>:

int _kill(int pid, int sig)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004bba:	f00c faa7 	bl	801110c <__errno>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2216      	movs	r2, #22
 8004bc2:	601a      	str	r2, [r3, #0]
  return -1;
 8004bc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_exit>:

void _exit (int status)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004bd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ffe7 	bl	8004bb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <_exit+0x12>

08004be6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b086      	sub	sp, #24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e00a      	b.n	8004c0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004bf8:	f3af 8000 	nop.w
 8004bfc:	4601      	mov	r1, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	60ba      	str	r2, [r7, #8]
 8004c04:	b2ca      	uxtb	r2, r1
 8004c06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	dbf0      	blt.n	8004bf8 <_read+0x12>
  }

  return len;
 8004c16:	687b      	ldr	r3, [r7, #4]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c48:	605a      	str	r2, [r3, #4]
  return 0;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <_isatty>:

int _isatty(int file)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c60:	2301      	movs	r3, #1
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c90:	4a14      	ldr	r2, [pc, #80]	@ (8004ce4 <_sbrk+0x5c>)
 8004c92:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <_sbrk+0x60>)
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c9c:	4b13      	ldr	r3, [pc, #76]	@ (8004cec <_sbrk+0x64>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ca4:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <_sbrk+0x64>)
 8004ca6:	4a12      	ldr	r2, [pc, #72]	@ (8004cf0 <_sbrk+0x68>)
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004caa:	4b10      	ldr	r3, [pc, #64]	@ (8004cec <_sbrk+0x64>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d207      	bcs.n	8004cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cb8:	f00c fa28 	bl	801110c <__errno>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	220c      	movs	r2, #12
 8004cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cc6:	e009      	b.n	8004cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cc8:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <_sbrk+0x64>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cce:	4b07      	ldr	r3, [pc, #28]	@ (8004cec <_sbrk+0x64>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	4a05      	ldr	r2, [pc, #20]	@ (8004cec <_sbrk+0x64>)
 8004cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cda:	68fb      	ldr	r3, [r7, #12]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	24050000 	.word	0x24050000
 8004ce8:	00000400 	.word	0x00000400
 8004cec:	24000774 	.word	0x24000774
 8004cf0:	24000c08 	.word	0x24000c08

08004cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8004df4 <SystemInit+0x100>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8004df4 <SystemInit+0x100>)
 8004d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004d08:	4b3b      	ldr	r3, [pc, #236]	@ (8004df8 <SystemInit+0x104>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d807      	bhi.n	8004d24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004d14:	4b38      	ldr	r3, [pc, #224]	@ (8004df8 <SystemInit+0x104>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 030f 	bic.w	r3, r3, #15
 8004d1c:	4a36      	ldr	r2, [pc, #216]	@ (8004df8 <SystemInit+0x104>)
 8004d1e:	f043 0307 	orr.w	r3, r3, #7
 8004d22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004d24:	4b35      	ldr	r3, [pc, #212]	@ (8004dfc <SystemInit+0x108>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a34      	ldr	r2, [pc, #208]	@ (8004dfc <SystemInit+0x108>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d30:	4b32      	ldr	r3, [pc, #200]	@ (8004dfc <SystemInit+0x108>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004d36:	4b31      	ldr	r3, [pc, #196]	@ (8004dfc <SystemInit+0x108>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4930      	ldr	r1, [pc, #192]	@ (8004dfc <SystemInit+0x108>)
 8004d3c:	4b30      	ldr	r3, [pc, #192]	@ (8004e00 <SystemInit+0x10c>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004d42:	4b2d      	ldr	r3, [pc, #180]	@ (8004df8 <SystemInit+0x104>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004df8 <SystemInit+0x104>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f023 030f 	bic.w	r3, r3, #15
 8004d56:	4a28      	ldr	r2, [pc, #160]	@ (8004df8 <SystemInit+0x104>)
 8004d58:	f043 0307 	orr.w	r3, r3, #7
 8004d5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004d5e:	4b27      	ldr	r3, [pc, #156]	@ (8004dfc <SystemInit+0x108>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004d64:	4b25      	ldr	r3, [pc, #148]	@ (8004dfc <SystemInit+0x108>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004d6a:	4b24      	ldr	r3, [pc, #144]	@ (8004dfc <SystemInit+0x108>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004d70:	4b22      	ldr	r3, [pc, #136]	@ (8004dfc <SystemInit+0x108>)
 8004d72:	4a24      	ldr	r2, [pc, #144]	@ (8004e04 <SystemInit+0x110>)
 8004d74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004d76:	4b21      	ldr	r3, [pc, #132]	@ (8004dfc <SystemInit+0x108>)
 8004d78:	4a23      	ldr	r2, [pc, #140]	@ (8004e08 <SystemInit+0x114>)
 8004d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dfc <SystemInit+0x108>)
 8004d7e:	4a23      	ldr	r2, [pc, #140]	@ (8004e0c <SystemInit+0x118>)
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004d82:	4b1e      	ldr	r3, [pc, #120]	@ (8004dfc <SystemInit+0x108>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004d88:	4b1c      	ldr	r3, [pc, #112]	@ (8004dfc <SystemInit+0x108>)
 8004d8a:	4a20      	ldr	r2, [pc, #128]	@ (8004e0c <SystemInit+0x118>)
 8004d8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <SystemInit+0x108>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004d94:	4b19      	ldr	r3, [pc, #100]	@ (8004dfc <SystemInit+0x108>)
 8004d96:	4a1d      	ldr	r2, [pc, #116]	@ (8004e0c <SystemInit+0x118>)
 8004d98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004d9a:	4b18      	ldr	r3, [pc, #96]	@ (8004dfc <SystemInit+0x108>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004da0:	4b16      	ldr	r3, [pc, #88]	@ (8004dfc <SystemInit+0x108>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a15      	ldr	r2, [pc, #84]	@ (8004dfc <SystemInit+0x108>)
 8004da6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004daa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004dac:	4b13      	ldr	r3, [pc, #76]	@ (8004dfc <SystemInit+0x108>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8004db2:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <SystemInit+0x108>)
 8004db4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d113      	bne.n	8004de8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dfc <SystemInit+0x108>)
 8004dc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8004dfc <SystemInit+0x108>)
 8004dc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dcc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e10 <SystemInit+0x11c>)
 8004dd2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004dd6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004dd8:	4b08      	ldr	r3, [pc, #32]	@ (8004dfc <SystemInit+0x108>)
 8004dda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004dde:	4a07      	ldr	r2, [pc, #28]	@ (8004dfc <SystemInit+0x108>)
 8004de0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004de4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e000ed00 	.word	0xe000ed00
 8004df8:	52002000 	.word	0x52002000
 8004dfc:	58024400 	.word	0x58024400
 8004e00:	eaf6ed7f 	.word	0xeaf6ed7f
 8004e04:	02020200 	.word	0x02020200
 8004e08:	01ff0000 	.word	0x01ff0000
 8004e0c:	01010280 	.word	0x01010280
 8004e10:	52004000 	.word	0x52004000

08004e14 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8004e18:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <ExitRun0Mode+0x2c>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4a08      	ldr	r2, [pc, #32]	@ (8004e40 <ExitRun0Mode+0x2c>)
 8004e1e:	f043 0302 	orr.w	r3, r3, #2
 8004e22:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8004e24:	bf00      	nop
 8004e26:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <ExitRun0Mode+0x2c>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f9      	beq.n	8004e26 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8004e32:	bf00      	nop
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	58024800 	.word	0x58024800

08004e44 <__NVIC_GetPriorityGrouping>:
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e48:	4b04      	ldr	r3, [pc, #16]	@ (8004e5c <__NVIC_GetPriorityGrouping+0x18>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	0a1b      	lsrs	r3, r3, #8
 8004e4e:	f003 0307 	and.w	r3, r3, #7
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <__NVIC_EnableIRQ>:
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	db0b      	blt.n	8004e8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	f003 021f 	and.w	r2, r3, #31
 8004e78:	4907      	ldr	r1, [pc, #28]	@ (8004e98 <__NVIC_EnableIRQ+0x38>)
 8004e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	2001      	movs	r0, #1
 8004e82:	fa00 f202 	lsl.w	r2, r0, r2
 8004e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	e000e100 	.word	0xe000e100

08004e9c <__NVIC_SetPriority>:
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	6039      	str	r1, [r7, #0]
 8004ea6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	db0a      	blt.n	8004ec6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	490c      	ldr	r1, [pc, #48]	@ (8004ee8 <__NVIC_SetPriority+0x4c>)
 8004eb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eba:	0112      	lsls	r2, r2, #4
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ec4:	e00a      	b.n	8004edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4908      	ldr	r1, [pc, #32]	@ (8004eec <__NVIC_SetPriority+0x50>)
 8004ecc:	88fb      	ldrh	r3, [r7, #6]
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	3b04      	subs	r3, #4
 8004ed4:	0112      	lsls	r2, r2, #4
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	440b      	add	r3, r1
 8004eda:	761a      	strb	r2, [r3, #24]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	e000e100 	.word	0xe000e100
 8004eec:	e000ed00 	.word	0xe000ed00

08004ef0 <NVIC_EncodePriority>:
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b089      	sub	sp, #36	@ 0x24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f1c3 0307 	rsb	r3, r3, #7
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	bf28      	it	cs
 8004f0e:	2304      	movcs	r3, #4
 8004f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d902      	bls.n	8004f20 <NVIC_EncodePriority+0x30>
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	3b03      	subs	r3, #3
 8004f1e:	e000      	b.n	8004f22 <NVIC_EncodePriority+0x32>
 8004f20:	2300      	movs	r3, #0
 8004f22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43da      	mvns	r2, r3
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	401a      	ands	r2, r3
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f42:	43d9      	mvns	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f48:	4313      	orrs	r3, r2
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3724      	adds	r7, #36	@ 0x24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <LL_TIM_EnableARRPreload>:
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <LL_TIM_SetTriggerOutput>:
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	605a      	str	r2, [r3, #4]
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <LL_TIM_DisableMasterSlaveMode>:
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_APB1_GRP1_EnableClock>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8004fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff0 <LL_APB1_GRP1_EnableClock+0x34>)
 8004fc6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8004fca:	4909      	ldr	r1, [pc, #36]	@ (8004ff0 <LL_APB1_GRP1_EnableClock+0x34>)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8004fd4:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <LL_APB1_GRP1_EnableClock+0x34>)
 8004fd6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	58024400 	.word	0x58024400

08004ff4 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch3;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08e      	sub	sp, #56	@ 0x38
 8004ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	609a      	str	r2, [r3, #8]
 8005006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005008:	f107 031c 	add.w	r3, r7, #28
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005014:	463b      	mov	r3, r7
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	609a      	str	r2, [r3, #8]
 800501e:	60da      	str	r2, [r3, #12]
 8005020:	611a      	str	r2, [r3, #16]
 8005022:	615a      	str	r2, [r3, #20]
 8005024:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005026:	4b2d      	ldr	r3, [pc, #180]	@ (80050dc <MX_TIM2_Init+0xe8>)
 8005028:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800502c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 546;
 800502e:	4b2b      	ldr	r3, [pc, #172]	@ (80050dc <MX_TIM2_Init+0xe8>)
 8005030:	f240 2222 	movw	r2, #546	@ 0x222
 8005034:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005036:	4b29      	ldr	r3, [pc, #164]	@ (80050dc <MX_TIM2_Init+0xe8>)
 8005038:	2200      	movs	r2, #0
 800503a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 800503c:	4b27      	ldr	r3, [pc, #156]	@ (80050dc <MX_TIM2_Init+0xe8>)
 800503e:	22f9      	movs	r2, #249	@ 0xf9
 8005040:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005042:	4b26      	ldr	r3, [pc, #152]	@ (80050dc <MX_TIM2_Init+0xe8>)
 8005044:	2200      	movs	r2, #0
 8005046:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005048:	4b24      	ldr	r3, [pc, #144]	@ (80050dc <MX_TIM2_Init+0xe8>)
 800504a:	2200      	movs	r2, #0
 800504c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800504e:	4823      	ldr	r0, [pc, #140]	@ (80050dc <MX_TIM2_Init+0xe8>)
 8005050:	f007 ffae 	bl	800cfb0 <HAL_TIM_Base_Init>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800505a:	f7fe fe3d 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800505e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005064:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005068:	4619      	mov	r1, r3
 800506a:	481c      	ldr	r0, [pc, #112]	@ (80050dc <MX_TIM2_Init+0xe8>)
 800506c:	f008 ff62 	bl	800df34 <HAL_TIM_ConfigClockSource>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005076:	f7fe fe2f 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800507a:	4818      	ldr	r0, [pc, #96]	@ (80050dc <MX_TIM2_Init+0xe8>)
 800507c:	f008 f895 	bl	800d1aa <HAL_TIM_PWM_Init>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005086:	f7fe fe27 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800508e:	2300      	movs	r3, #0
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005092:	f107 031c 	add.w	r3, r7, #28
 8005096:	4619      	mov	r1, r3
 8005098:	4810      	ldr	r0, [pc, #64]	@ (80050dc <MX_TIM2_Init+0xe8>)
 800509a:	f009 fd97 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80050a4:	f7fe fe18 	bl	8003cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050a8:	2360      	movs	r3, #96	@ 0x60
 80050aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 125;
 80050ac:	237d      	movs	r3, #125	@ 0x7d
 80050ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050b4:	2300      	movs	r3, #0
 80050b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050b8:	463b      	mov	r3, r7
 80050ba:	2200      	movs	r2, #0
 80050bc:	4619      	mov	r1, r3
 80050be:	4807      	ldr	r0, [pc, #28]	@ (80050dc <MX_TIM2_Init+0xe8>)
 80050c0:	f008 fe24 	bl	800dd0c <HAL_TIM_PWM_ConfigChannel>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80050ca:	f7fe fe05 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80050ce:	4803      	ldr	r0, [pc, #12]	@ (80050dc <MX_TIM2_Init+0xe8>)
 80050d0:	f000 fad0 	bl	8005674 <HAL_TIM_MspPostInit>

}
 80050d4:	bf00      	nop
 80050d6:	3738      	adds	r7, #56	@ 0x38
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	24000778 	.word	0x24000778

080050e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08e      	sub	sp, #56	@ 0x38
 80050e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	609a      	str	r2, [r3, #8]
 80050f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050f4:	f107 031c 	add.w	r3, r7, #28
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005100:	463b      	mov	r3, r7
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	609a      	str	r2, [r3, #8]
 800510a:	60da      	str	r2, [r3, #12]
 800510c:	611a      	str	r2, [r3, #16]
 800510e:	615a      	str	r2, [r3, #20]
 8005110:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005112:	4b2d      	ldr	r3, [pc, #180]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 8005114:	4a2d      	ldr	r2, [pc, #180]	@ (80051cc <MX_TIM3_Init+0xec>)
 8005116:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005118:	4b2b      	ldr	r3, [pc, #172]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 800511a:	2200      	movs	r2, #0
 800511c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800511e:	4b2a      	ldr	r3, [pc, #168]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 8005120:	2200      	movs	r2, #0
 8005122:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 343;
 8005124:	4b28      	ldr	r3, [pc, #160]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 8005126:	f240 1257 	movw	r2, #343	@ 0x157
 800512a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800512c:	4b26      	ldr	r3, [pc, #152]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 800512e:	2200      	movs	r2, #0
 8005130:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005132:	4b25      	ldr	r3, [pc, #148]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 8005134:	2200      	movs	r2, #0
 8005136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005138:	4823      	ldr	r0, [pc, #140]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 800513a:	f007 ff39 	bl	800cfb0 <HAL_TIM_Base_Init>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005144:	f7fe fdc8 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800514e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005152:	4619      	mov	r1, r3
 8005154:	481c      	ldr	r0, [pc, #112]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 8005156:	f008 feed 	bl	800df34 <HAL_TIM_ConfigClockSource>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005160:	f7fe fdba 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005164:	4818      	ldr	r0, [pc, #96]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 8005166:	f008 f820 	bl	800d1aa <HAL_TIM_PWM_Init>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005170:	f7fe fdb2 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005178:	2300      	movs	r3, #0
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800517c:	f107 031c 	add.w	r3, r7, #28
 8005180:	4619      	mov	r1, r3
 8005182:	4811      	ldr	r0, [pc, #68]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 8005184:	f009 fd22 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800518e:	f7fe fda3 	bl	8003cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005192:	2360      	movs	r3, #96	@ 0x60
 8005194:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800519a:	2300      	movs	r3, #0
 800519c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051a2:	463b      	mov	r3, r7
 80051a4:	2204      	movs	r2, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	4807      	ldr	r0, [pc, #28]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 80051aa:	f008 fdaf 	bl	800dd0c <HAL_TIM_PWM_ConfigChannel>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80051b4:	f7fe fd90 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80051b8:	4803      	ldr	r0, [pc, #12]	@ (80051c8 <MX_TIM3_Init+0xe8>)
 80051ba:	f000 fa5b 	bl	8005674 <HAL_TIM_MspPostInit>

}
 80051be:	bf00      	nop
 80051c0:	3738      	adds	r7, #56	@ 0x38
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	240007c4 	.word	0x240007c4
 80051cc:	40000400 	.word	0x40000400

080051d0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08e      	sub	sp, #56	@ 0x38
 80051d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	605a      	str	r2, [r3, #4]
 80051e0:	609a      	str	r2, [r3, #8]
 80051e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051e4:	f107 031c 	add.w	r3, r7, #28
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051f0:	463b      	mov	r3, r7
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	605a      	str	r2, [r3, #4]
 80051f8:	609a      	str	r2, [r3, #8]
 80051fa:	60da      	str	r2, [r3, #12]
 80051fc:	611a      	str	r2, [r3, #16]
 80051fe:	615a      	str	r2, [r3, #20]
 8005200:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005202:	4b3d      	ldr	r3, [pc, #244]	@ (80052f8 <MX_TIM5_Init+0x128>)
 8005204:	4a3d      	ldr	r2, [pc, #244]	@ (80052fc <MX_TIM5_Init+0x12c>)
 8005206:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005208:	4b3b      	ldr	r3, [pc, #236]	@ (80052f8 <MX_TIM5_Init+0x128>)
 800520a:	2200      	movs	r2, #0
 800520c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800520e:	4b3a      	ldr	r3, [pc, #232]	@ (80052f8 <MX_TIM5_Init+0x128>)
 8005210:	2200      	movs	r2, #0
 8005212:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8005214:	4b38      	ldr	r3, [pc, #224]	@ (80052f8 <MX_TIM5_Init+0x128>)
 8005216:	2200      	movs	r2, #0
 8005218:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800521a:	4b37      	ldr	r3, [pc, #220]	@ (80052f8 <MX_TIM5_Init+0x128>)
 800521c:	2200      	movs	r2, #0
 800521e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005220:	4b35      	ldr	r3, [pc, #212]	@ (80052f8 <MX_TIM5_Init+0x128>)
 8005222:	2200      	movs	r2, #0
 8005224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005226:	4834      	ldr	r0, [pc, #208]	@ (80052f8 <MX_TIM5_Init+0x128>)
 8005228:	f007 fec2 	bl	800cfb0 <HAL_TIM_Base_Init>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8005232:	f7fe fd51 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800523a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800523c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005240:	4619      	mov	r1, r3
 8005242:	482d      	ldr	r0, [pc, #180]	@ (80052f8 <MX_TIM5_Init+0x128>)
 8005244:	f008 fe76 	bl	800df34 <HAL_TIM_ConfigClockSource>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800524e:	f7fe fd43 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005252:	4829      	ldr	r0, [pc, #164]	@ (80052f8 <MX_TIM5_Init+0x128>)
 8005254:	f007 ffa9 	bl	800d1aa <HAL_TIM_PWM_Init>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800525e:	f7fe fd3b 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005262:	2300      	movs	r3, #0
 8005264:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800526a:	f107 031c 	add.w	r3, r7, #28
 800526e:	4619      	mov	r1, r3
 8005270:	4821      	ldr	r0, [pc, #132]	@ (80052f8 <MX_TIM5_Init+0x128>)
 8005272:	f009 fcab 	bl	800ebcc <HAL_TIMEx_MasterConfigSynchronization>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800527c:	f7fe fd2c 	bl	8003cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005280:	2360      	movs	r3, #96	@ 0x60
 8005282:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005288:	2300      	movs	r3, #0
 800528a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005290:	463b      	mov	r3, r7
 8005292:	2200      	movs	r2, #0
 8005294:	4619      	mov	r1, r3
 8005296:	4818      	ldr	r0, [pc, #96]	@ (80052f8 <MX_TIM5_Init+0x128>)
 8005298:	f008 fd38 	bl	800dd0c <HAL_TIM_PWM_ConfigChannel>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80052a2:	f7fe fd19 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80052a6:	463b      	mov	r3, r7
 80052a8:	2204      	movs	r2, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4812      	ldr	r0, [pc, #72]	@ (80052f8 <MX_TIM5_Init+0x128>)
 80052ae:	f008 fd2d 	bl	800dd0c <HAL_TIM_PWM_ConfigChannel>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 80052b8:	f7fe fd0e 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80052bc:	463b      	mov	r3, r7
 80052be:	2208      	movs	r2, #8
 80052c0:	4619      	mov	r1, r3
 80052c2:	480d      	ldr	r0, [pc, #52]	@ (80052f8 <MX_TIM5_Init+0x128>)
 80052c4:	f008 fd22 	bl	800dd0c <HAL_TIM_PWM_ConfigChannel>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 80052ce:	f7fe fd03 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80052d2:	463b      	mov	r3, r7
 80052d4:	220c      	movs	r2, #12
 80052d6:	4619      	mov	r1, r3
 80052d8:	4807      	ldr	r0, [pc, #28]	@ (80052f8 <MX_TIM5_Init+0x128>)
 80052da:	f008 fd17 	bl	800dd0c <HAL_TIM_PWM_ConfigChannel>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 80052e4:	f7fe fcf8 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80052e8:	4803      	ldr	r0, [pc, #12]	@ (80052f8 <MX_TIM5_Init+0x128>)
 80052ea:	f000 f9c3 	bl	8005674 <HAL_TIM_MspPostInit>

}
 80052ee:	bf00      	nop
 80052f0:	3738      	adds	r7, #56	@ 0x38
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	24000810 	.word	0x24000810
 80052fc:	40000c00 	.word	0x40000c00

08005300 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005306:	1d3b      	adds	r3, r7, #4
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8005314:	2020      	movs	r0, #32
 8005316:	f7ff fe51 	bl	8004fbc <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800531a:	f7ff fd93 	bl	8004e44 <__NVIC_GetPriorityGrouping>
 800531e:	4603      	mov	r3, r0
 8005320:	2200      	movs	r2, #0
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fde3 	bl	8004ef0 <NVIC_EncodePriority>
 800532a:	4603      	mov	r3, r0
 800532c:	4619      	mov	r1, r3
 800532e:	2037      	movs	r0, #55	@ 0x37
 8005330:	f7ff fdb4 	bl	8004e9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8005334:	2037      	movs	r0, #55	@ 0x37
 8005336:	f7ff fd93 	bl	8004e60 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800533a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800533e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005340:	2300      	movs	r3, #0
 8005342:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 274;
 8005344:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8005348:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4808      	ldr	r0, [pc, #32]	@ (8005370 <MX_TIM7_Init+0x70>)
 8005350:	f00a fdda 	bl	800ff08 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8005354:	4806      	ldr	r0, [pc, #24]	@ (8005370 <MX_TIM7_Init+0x70>)
 8005356:	f7ff fdfe 	bl	8004f56 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 800535a:	2100      	movs	r1, #0
 800535c:	4804      	ldr	r0, [pc, #16]	@ (8005370 <MX_TIM7_Init+0x70>)
 800535e:	f7ff fe0a 	bl	8004f76 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8005362:	4803      	ldr	r0, [pc, #12]	@ (8005370 <MX_TIM7_Init+0x70>)
 8005364:	f7ff fe1a 	bl	8004f9c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005368:	bf00      	nop
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40001400 	.word	0x40001400

08005374 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005384:	d10f      	bne.n	80053a6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005386:	4b2a      	ldr	r3, [pc, #168]	@ (8005430 <HAL_TIM_Base_MspInit+0xbc>)
 8005388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800538c:	4a28      	ldr	r2, [pc, #160]	@ (8005430 <HAL_TIM_Base_MspInit+0xbc>)
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005396:	4b26      	ldr	r3, [pc, #152]	@ (8005430 <HAL_TIM_Base_MspInit+0xbc>)
 8005398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
 80053a2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80053a4:	e14d      	b.n	8005642 <HAL_TIM_Base_MspInit+0x2ce>
  else if(tim_baseHandle->Instance==TIM3)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a22      	ldr	r2, [pc, #136]	@ (8005434 <HAL_TIM_Base_MspInit+0xc0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d147      	bne.n	8005440 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80053b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005430 <HAL_TIM_Base_MspInit+0xbc>)
 80053b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005430 <HAL_TIM_Base_MspInit+0xbc>)
 80053b8:	f043 0302 	orr.w	r3, r3, #2
 80053bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80053c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005430 <HAL_TIM_Base_MspInit+0xbc>)
 80053c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream6;
 80053ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 80053d0:	4a1a      	ldr	r2, [pc, #104]	@ (800543c <HAL_TIM_Base_MspInit+0xc8>)
 80053d2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80053d4:	4b18      	ldr	r3, [pc, #96]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 80053d6:	2218      	movs	r2, #24
 80053d8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053da:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 80053dc:	2240      	movs	r2, #64	@ 0x40
 80053de:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80053e0:	4b15      	ldr	r3, [pc, #84]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80053e6:	4b14      	ldr	r3, [pc, #80]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 80053e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053ec:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053ee:	4b12      	ldr	r3, [pc, #72]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 80053f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80053f4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053f6:	4b10      	ldr	r3, [pc, #64]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 80053f8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80053fc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80053fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 8005400:	2200      	movs	r2, #0
 8005402:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005404:	4b0c      	ldr	r3, [pc, #48]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 8005406:	2200      	movs	r2, #0
 8005408:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800540a:	4b0b      	ldr	r3, [pc, #44]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 800540c:	2200      	movs	r2, #0
 800540e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8005410:	4809      	ldr	r0, [pc, #36]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 8005412:	f000 fee1 	bl	80061d8 <HAL_DMA_Init>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_TIM_Base_MspInit+0xac>
      Error_Handler();
 800541c:	f7fe fc5c 	bl	8003cd8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a05      	ldr	r2, [pc, #20]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 8005424:	629a      	str	r2, [r3, #40]	@ 0x28
 8005426:	4a04      	ldr	r2, [pc, #16]	@ (8005438 <HAL_TIM_Base_MspInit+0xc4>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800542c:	e109      	b.n	8005642 <HAL_TIM_Base_MspInit+0x2ce>
 800542e:	bf00      	nop
 8005430:	58024400 	.word	0x58024400
 8005434:	40000400 	.word	0x40000400
 8005438:	2400085c 	.word	0x2400085c
 800543c:	400200a0 	.word	0x400200a0
  else if(tim_baseHandle->Instance==TIM5)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a81      	ldr	r2, [pc, #516]	@ (800564c <HAL_TIM_Base_MspInit+0x2d8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	f040 80fb 	bne.w	8005642 <HAL_TIM_Base_MspInit+0x2ce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800544c:	4b80      	ldr	r3, [pc, #512]	@ (8005650 <HAL_TIM_Base_MspInit+0x2dc>)
 800544e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005452:	4a7f      	ldr	r2, [pc, #508]	@ (8005650 <HAL_TIM_Base_MspInit+0x2dc>)
 8005454:	f043 0308 	orr.w	r3, r3, #8
 8005458:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800545c:	4b7c      	ldr	r3, [pc, #496]	@ (8005650 <HAL_TIM_Base_MspInit+0x2dc>)
 800545e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch1.Instance = DMA1_Stream0;
 800546a:	4b7a      	ldr	r3, [pc, #488]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 800546c:	4a7a      	ldr	r2, [pc, #488]	@ (8005658 <HAL_TIM_Base_MspInit+0x2e4>)
 800546e:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Request = DMA_REQUEST_TIM5_CH1;
 8005470:	4b78      	ldr	r3, [pc, #480]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 8005472:	2237      	movs	r2, #55	@ 0x37
 8005474:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005476:	4b77      	ldr	r3, [pc, #476]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 8005478:	2240      	movs	r2, #64	@ 0x40
 800547a:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800547c:	4b75      	ldr	r3, [pc, #468]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 800547e:	2200      	movs	r2, #0
 8005480:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005482:	4b74      	ldr	r3, [pc, #464]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 8005484:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005488:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800548a:	4b72      	ldr	r3, [pc, #456]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 800548c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005490:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005492:	4b70      	ldr	r3, [pc, #448]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 8005494:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005498:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 800549a:	4b6e      	ldr	r3, [pc, #440]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 800549c:	2200      	movs	r2, #0
 800549e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80054a0:	4b6c      	ldr	r3, [pc, #432]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 80054a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80054a6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80054a8:	4b6a      	ldr	r3, [pc, #424]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 80054aa:	2204      	movs	r2, #4
 80054ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80054ae:	4b69      	ldr	r3, [pc, #420]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80054b4:	4b67      	ldr	r3, [pc, #412]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80054ba:	4b66      	ldr	r3, [pc, #408]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 80054c0:	4864      	ldr	r0, [pc, #400]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 80054c2:	f000 fe89 	bl	80061d8 <HAL_DMA_Init>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 80054cc:	f7fe fc04 	bl	8003cd8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a60      	ldr	r2, [pc, #384]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 80054d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80054d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005654 <HAL_TIM_Base_MspInit+0x2e0>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream1;
 80054dc:	4b5f      	ldr	r3, [pc, #380]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 80054de:	4a60      	ldr	r2, [pc, #384]	@ (8005660 <HAL_TIM_Base_MspInit+0x2ec>)
 80054e0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 80054e2:	4b5e      	ldr	r3, [pc, #376]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 80054e4:	2238      	movs	r2, #56	@ 0x38
 80054e6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054e8:	4b5c      	ldr	r3, [pc, #368]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 80054ea:	2240      	movs	r2, #64	@ 0x40
 80054ec:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80054ee:	4b5b      	ldr	r3, [pc, #364]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80054f4:	4b59      	ldr	r3, [pc, #356]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 80054f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054fa:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80054fc:	4b57      	ldr	r3, [pc, #348]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 80054fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005502:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005504:	4b55      	ldr	r3, [pc, #340]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 8005506:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800550a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 800550c:	4b53      	ldr	r3, [pc, #332]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 800550e:	2200      	movs	r2, #0
 8005510:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8005512:	4b52      	ldr	r3, [pc, #328]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 8005514:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005518:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800551a:	4b50      	ldr	r3, [pc, #320]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 800551c:	2204      	movs	r2, #4
 800551e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8005520:	4b4e      	ldr	r3, [pc, #312]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 8005522:	2200      	movs	r2, #0
 8005524:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8005526:	4b4d      	ldr	r3, [pc, #308]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 8005528:	2200      	movs	r2, #0
 800552a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800552c:	4b4b      	ldr	r3, [pc, #300]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8005532:	484a      	ldr	r0, [pc, #296]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 8005534:	f000 fe50 	bl	80061d8 <HAL_DMA_Init>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_TIM_Base_MspInit+0x1ce>
      Error_Handler();
 800553e:	f7fe fbcb 	bl	8003cd8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a45      	ldr	r2, [pc, #276]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 8005546:	629a      	str	r2, [r3, #40]	@ 0x28
 8005548:	4a44      	ldr	r2, [pc, #272]	@ (800565c <HAL_TIM_Base_MspInit+0x2e8>)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch3.Instance = DMA1_Stream2;
 800554e:	4b45      	ldr	r3, [pc, #276]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 8005550:	4a45      	ldr	r2, [pc, #276]	@ (8005668 <HAL_TIM_Base_MspInit+0x2f4>)
 8005552:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3.Init.Request = DMA_REQUEST_TIM5_CH3;
 8005554:	4b43      	ldr	r3, [pc, #268]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 8005556:	2239      	movs	r2, #57	@ 0x39
 8005558:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800555a:	4b42      	ldr	r3, [pc, #264]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 800555c:	2240      	movs	r2, #64	@ 0x40
 800555e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8005560:	4b40      	ldr	r3, [pc, #256]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 8005562:	2200      	movs	r2, #0
 8005564:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8005566:	4b3f      	ldr	r3, [pc, #252]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 8005568:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800556c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800556e:	4b3d      	ldr	r3, [pc, #244]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 8005570:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005574:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005576:	4b3b      	ldr	r3, [pc, #236]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 8005578:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800557c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3.Init.Mode = DMA_NORMAL;
 800557e:	4b39      	ldr	r3, [pc, #228]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 8005580:	2200      	movs	r2, #0
 8005582:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8005584:	4b37      	ldr	r3, [pc, #220]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 8005586:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800558a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800558c:	4b35      	ldr	r3, [pc, #212]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 800558e:	2204      	movs	r2, #4
 8005590:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8005592:	4b34      	ldr	r3, [pc, #208]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 8005594:	2200      	movs	r2, #0
 8005596:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8005598:	4b32      	ldr	r3, [pc, #200]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 800559a:	2200      	movs	r2, #0
 800559c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800559e:	4b31      	ldr	r3, [pc, #196]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch3) != HAL_OK)
 80055a4:	482f      	ldr	r0, [pc, #188]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 80055a6:	f000 fe17 	bl	80061d8 <HAL_DMA_Init>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <HAL_TIM_Base_MspInit+0x240>
      Error_Handler();
 80055b0:	f7fe fb92 	bl	8003cd8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a2b      	ldr	r2, [pc, #172]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 80055b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005664 <HAL_TIM_Base_MspInit+0x2f0>)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream5;
 80055c0:	4b2a      	ldr	r3, [pc, #168]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 80055c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005670 <HAL_TIM_Base_MspInit+0x2fc>)
 80055c4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80055c6:	4b29      	ldr	r3, [pc, #164]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 80055c8:	223a      	movs	r2, #58	@ 0x3a
 80055ca:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055cc:	4b27      	ldr	r3, [pc, #156]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 80055ce:	2240      	movs	r2, #64	@ 0x40
 80055d0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80055d2:	4b26      	ldr	r3, [pc, #152]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80055d8:	4b24      	ldr	r3, [pc, #144]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 80055da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055de:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80055e0:	4b22      	ldr	r3, [pc, #136]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 80055e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80055e6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80055e8:	4b20      	ldr	r3, [pc, #128]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 80055ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80055ee:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80055f0:	4b1e      	ldr	r3, [pc, #120]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80055f6:	4b1d      	ldr	r3, [pc, #116]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 80055f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80055fc:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80055fe:	4b1b      	ldr	r3, [pc, #108]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 8005600:	2204      	movs	r2, #4
 8005602:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8005604:	4b19      	ldr	r3, [pc, #100]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 8005606:	2200      	movs	r2, #0
 8005608:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 800560a:	4b18      	ldr	r3, [pc, #96]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 800560c:	2200      	movs	r2, #0
 800560e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005610:	4b16      	ldr	r3, [pc, #88]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8005616:	4815      	ldr	r0, [pc, #84]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 8005618:	f000 fdde 	bl	80061d8 <HAL_DMA_Init>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_TIM_Base_MspInit+0x2b2>
      Error_Handler();
 8005622:	f7fe fb59 	bl	8003cd8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a10      	ldr	r2, [pc, #64]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
 800562c:	4a0f      	ldr	r2, [pc, #60]	@ (800566c <HAL_TIM_Base_MspInit+0x2f8>)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005632:	2200      	movs	r2, #0
 8005634:	2100      	movs	r1, #0
 8005636:	2032      	movs	r0, #50	@ 0x32
 8005638:	f000 fd21 	bl	800607e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800563c:	2032      	movs	r0, #50	@ 0x32
 800563e:	f000 fd38 	bl	80060b2 <HAL_NVIC_EnableIRQ>
}
 8005642:	bf00      	nop
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40000c00 	.word	0x40000c00
 8005650:	58024400 	.word	0x58024400
 8005654:	240008d4 	.word	0x240008d4
 8005658:	40020010 	.word	0x40020010
 800565c:	2400094c 	.word	0x2400094c
 8005660:	40020028 	.word	0x40020028
 8005664:	240009c4 	.word	0x240009c4
 8005668:	40020040 	.word	0x40020040
 800566c:	24000a3c 	.word	0x24000a3c
 8005670:	40020088 	.word	0x40020088

08005674 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	@ 0x28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800567c:	f107 0314 	add.w	r3, r7, #20
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	605a      	str	r2, [r3, #4]
 8005686:	609a      	str	r2, [r3, #8]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005694:	d11f      	bne.n	80056d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005696:	4b36      	ldr	r3, [pc, #216]	@ (8005770 <HAL_TIM_MspPostInit+0xfc>)
 8005698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800569c:	4a34      	ldr	r2, [pc, #208]	@ (8005770 <HAL_TIM_MspPostInit+0xfc>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056a6:	4b32      	ldr	r3, [pc, #200]	@ (8005770 <HAL_TIM_MspPostInit+0xfc>)
 80056a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80056b4:	2320      	movs	r3, #32
 80056b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b8:	2302      	movs	r3, #2
 80056ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056bc:	2300      	movs	r3, #0
 80056be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056c0:	2300      	movs	r3, #0
 80056c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056c4:	2301      	movs	r3, #1
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c8:	f107 0314 	add.w	r3, r7, #20
 80056cc:	4619      	mov	r1, r3
 80056ce:	4829      	ldr	r0, [pc, #164]	@ (8005774 <HAL_TIM_MspPostInit+0x100>)
 80056d0:	f003 f89c 	bl	800880c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80056d4:	e048      	b.n	8005768 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM3)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a27      	ldr	r2, [pc, #156]	@ (8005778 <HAL_TIM_MspPostInit+0x104>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d11f      	bne.n	8005720 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056e0:	4b23      	ldr	r3, [pc, #140]	@ (8005770 <HAL_TIM_MspPostInit+0xfc>)
 80056e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056e6:	4a22      	ldr	r2, [pc, #136]	@ (8005770 <HAL_TIM_MspPostInit+0xfc>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005770 <HAL_TIM_MspPostInit+0xfc>)
 80056f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005702:	2302      	movs	r3, #2
 8005704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005706:	2300      	movs	r3, #0
 8005708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800570a:	2300      	movs	r3, #0
 800570c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800570e:	2302      	movs	r3, #2
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005712:	f107 0314 	add.w	r3, r7, #20
 8005716:	4619      	mov	r1, r3
 8005718:	4816      	ldr	r0, [pc, #88]	@ (8005774 <HAL_TIM_MspPostInit+0x100>)
 800571a:	f003 f877 	bl	800880c <HAL_GPIO_Init>
}
 800571e:	e023      	b.n	8005768 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM5)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a15      	ldr	r2, [pc, #84]	@ (800577c <HAL_TIM_MspPostInit+0x108>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d11e      	bne.n	8005768 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800572a:	4b11      	ldr	r3, [pc, #68]	@ (8005770 <HAL_TIM_MspPostInit+0xfc>)
 800572c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005730:	4a0f      	ldr	r2, [pc, #60]	@ (8005770 <HAL_TIM_MspPostInit+0xfc>)
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800573a:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <HAL_TIM_MspPostInit+0xfc>)
 800573c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005748:	230f      	movs	r3, #15
 800574a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800574c:	2302      	movs	r3, #2
 800574e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005754:	2300      	movs	r3, #0
 8005756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005758:	2302      	movs	r3, #2
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800575c:	f107 0314 	add.w	r3, r7, #20
 8005760:	4619      	mov	r1, r3
 8005762:	4804      	ldr	r0, [pc, #16]	@ (8005774 <HAL_TIM_MspPostInit+0x100>)
 8005764:	f003 f852 	bl	800880c <HAL_GPIO_Init>
}
 8005768:	bf00      	nop
 800576a:	3728      	adds	r7, #40	@ 0x28
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	58024400 	.word	0x58024400
 8005774:	58020000 	.word	0x58020000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000c00 	.word	0x40000c00

08005780 <__NVIC_GetPriorityGrouping>:
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <__NVIC_GetPriorityGrouping+0x18>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	f003 0307 	and.w	r3, r3, #7
}
 800578e:	4618      	mov	r0, r3
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	e000ed00 	.word	0xe000ed00

0800579c <__NVIC_EnableIRQ>:
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	db0b      	blt.n	80057c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	f003 021f 	and.w	r2, r3, #31
 80057b4:	4907      	ldr	r1, [pc, #28]	@ (80057d4 <__NVIC_EnableIRQ+0x38>)
 80057b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	2001      	movs	r0, #1
 80057be:	fa00 f202 	lsl.w	r2, r0, r2
 80057c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	e000e100 	.word	0xe000e100

080057d8 <__NVIC_SetPriority>:
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	4603      	mov	r3, r0
 80057e0:	6039      	str	r1, [r7, #0]
 80057e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	db0a      	blt.n	8005802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	490c      	ldr	r1, [pc, #48]	@ (8005824 <__NVIC_SetPriority+0x4c>)
 80057f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057f6:	0112      	lsls	r2, r2, #4
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	440b      	add	r3, r1
 80057fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005800:	e00a      	b.n	8005818 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	b2da      	uxtb	r2, r3
 8005806:	4908      	ldr	r1, [pc, #32]	@ (8005828 <__NVIC_SetPriority+0x50>)
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	3b04      	subs	r3, #4
 8005810:	0112      	lsls	r2, r2, #4
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	440b      	add	r3, r1
 8005816:	761a      	strb	r2, [r3, #24]
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	e000e100 	.word	0xe000e100
 8005828:	e000ed00 	.word	0xe000ed00

0800582c <NVIC_EncodePriority>:
{
 800582c:	b480      	push	{r7}
 800582e:	b089      	sub	sp, #36	@ 0x24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f1c3 0307 	rsb	r3, r3, #7
 8005846:	2b04      	cmp	r3, #4
 8005848:	bf28      	it	cs
 800584a:	2304      	movcs	r3, #4
 800584c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	3304      	adds	r3, #4
 8005852:	2b06      	cmp	r3, #6
 8005854:	d902      	bls.n	800585c <NVIC_EncodePriority+0x30>
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3b03      	subs	r3, #3
 800585a:	e000      	b.n	800585e <NVIC_EncodePriority+0x32>
 800585c:	2300      	movs	r3, #0
 800585e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005860:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	fa02 f303 	lsl.w	r3, r2, r3
 800586a:	43da      	mvns	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	401a      	ands	r2, r3
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005874:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	43d9      	mvns	r1, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005884:	4313      	orrs	r3, r2
}
 8005886:	4618      	mov	r0, r3
 8005888:	3724      	adds	r7, #36	@ 0x24
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <LL_USART_Enable>:
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f043 0201 	orr.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	601a      	str	r2, [r3, #0]
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <LL_USART_DisableFIFO>:
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	601a      	str	r2, [r3, #0]
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <LL_USART_SetTXFIFOThreshold>:
{
 80058d2:	b480      	push	{r7}
 80058d4:	b089      	sub	sp, #36	@ 0x24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3308      	adds	r3, #8
 80058e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	075b      	lsls	r3, r3, #29
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3308      	adds	r3, #8
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	61ba      	str	r2, [r7, #24]
 8005900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	613b      	str	r3, [r7, #16]
   return(result);
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e4      	bne.n	80058dc <LL_USART_SetTXFIFOThreshold+0xa>
}
 8005912:	bf00      	nop
 8005914:	bf00      	nop
 8005916:	3724      	adds	r7, #36	@ 0x24
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <LL_USART_SetRXFIFOThreshold>:
{
 8005920:	b480      	push	{r7}
 8005922:	b089      	sub	sp, #36	@ 0x24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3308      	adds	r3, #8
 800592e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	60bb      	str	r3, [r7, #8]
   return(result);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	065b      	lsls	r3, r3, #25
 8005942:	4313      	orrs	r3, r2
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3308      	adds	r3, #8
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	61ba      	str	r2, [r7, #24]
 800594e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6979      	ldr	r1, [r7, #20]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	613b      	str	r3, [r7, #16]
   return(result);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e4      	bne.n	800592a <LL_USART_SetRXFIFOThreshold+0xa>
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	3724      	adds	r7, #36	@ 0x24
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <LL_USART_ConfigAsyncMode>:
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	609a      	str	r2, [r3, #8]
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <LL_USART_IsActiveFlag_TEACK>:
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059ae:	d101      	bne.n	80059b4 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <LL_USART_IsActiveFlag_REACK>:
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059d6:	d101      	bne.n	80059dc <LL_USART_IsActiveFlag_REACK+0x1a>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <LL_USART_IsActiveFlag_REACK+0x1c>
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <LL_AHB4_GRP1_EnableClock>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 80059f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005a20 <LL_AHB4_GRP1_EnableClock+0x34>)
 80059f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059fa:	4909      	ldr	r1, [pc, #36]	@ (8005a20 <LL_AHB4_GRP1_EnableClock+0x34>)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8005a04:	4b06      	ldr	r3, [pc, #24]	@ (8005a20 <LL_AHB4_GRP1_EnableClock+0x34>)
 8005a06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a10:	68fb      	ldr	r3, [r7, #12]
}
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400

08005a24 <LL_APB1_GRP1_EnableClock>:
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <LL_APB1_GRP1_EnableClock+0x34>)
 8005a2e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005a32:	4909      	ldr	r1, [pc, #36]	@ (8005a58 <LL_APB1_GRP1_EnableClock+0x34>)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8005a3c:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <LL_APB1_GRP1_EnableClock+0x34>)
 8005a3e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4013      	ands	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a48:	68fb      	ldr	r3, [r7, #12]
}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400

08005a5c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <LL_APB2_GRP1_EnableClock+0x34>)
 8005a66:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005a6a:	4909      	ldr	r1, [pc, #36]	@ (8005a90 <LL_APB2_GRP1_EnableClock+0x34>)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005a74:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <LL_APB2_GRP1_EnableClock+0x34>)
 8005a76:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a80:	68fb      	ldr	r3, [r7, #12]
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	58024400 	.word	0x58024400

08005a94 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b0bc      	sub	sp, #240	@ 0xf0
 8005a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8005a9a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f00b fac0 	bl	8011028 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	611a      	str	r2, [r3, #16]
 8005ab8:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005aba:	463b      	mov	r3, r7
 8005abc:	22b8      	movs	r2, #184	@ 0xb8
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f00b fab1 	bl	8011028 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005ac6:	f04f 0202 	mov.w	r2, #2
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f005 ff65 	bl	800b9a8 <HAL_RCCEx_PeriphCLKConfig>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8005ae4:	f7fe f8f8 	bl	8003cd8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8005ae8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005aec:	f7ff ff9a 	bl	8005a24 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8005af0:	2008      	movs	r0, #8
 8005af2:	f7ff ff7b 	bl	80059ec <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PD0   ------> UART4_RX
  PD1   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8005af6:	2303      	movs	r3, #3
 8005af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005afc:	2302      	movs	r3, #2
 8005afe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005b14:	2308      	movs	r3, #8
 8005b16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b1a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4827      	ldr	r0, [pc, #156]	@ (8005bc0 <MX_UART4_Init+0x12c>)
 8005b22:	f009 f9e7 	bl	800eef4 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005b26:	f7ff fe2b 	bl	8005780 <__NVIC_GetPriorityGrouping>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff fe7b 	bl	800582c <NVIC_EncodePriority>
 8005b36:	4603      	mov	r3, r0
 8005b38:	4619      	mov	r1, r3
 8005b3a:	2034      	movs	r0, #52	@ 0x34
 8005b3c:	f7ff fe4c 	bl	80057d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8005b40:	2034      	movs	r0, #52	@ 0x34
 8005b42:	f7ff fe2b 	bl	800579c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005b46:	2300      	movs	r3, #0
 8005b48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  UART_InitStruct.BaudRate = 115200;
 8005b4c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005b50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005b54:	2300      	movs	r3, #0
 8005b56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 8005b66:	2304      	movs	r3, #4
 8005b68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005b72:	2300      	movs	r3, #0
 8005b74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(UART4, &UART_InitStruct);
 8005b78:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4811      	ldr	r0, [pc, #68]	@ (8005bc4 <MX_UART4_Init+0x130>)
 8005b80:	f00a fb00 	bl	8010184 <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 8005b84:	480f      	ldr	r0, [pc, #60]	@ (8005bc4 <MX_UART4_Init+0x130>)
 8005b86:	f7ff fe94 	bl	80058b2 <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	480d      	ldr	r0, [pc, #52]	@ (8005bc4 <MX_UART4_Init+0x130>)
 8005b8e:	f7ff fea0 	bl	80058d2 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8005b92:	2100      	movs	r1, #0
 8005b94:	480b      	ldr	r0, [pc, #44]	@ (8005bc4 <MX_UART4_Init+0x130>)
 8005b96:	f7ff fec3 	bl	8005920 <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 8005b9a:	480a      	ldr	r0, [pc, #40]	@ (8005bc4 <MX_UART4_Init+0x130>)
 8005b9c:	f7ff fee7 	bl	800596e <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 8005ba0:	4808      	ldr	r0, [pc, #32]	@ (8005bc4 <MX_UART4_Init+0x130>)
 8005ba2:	f7ff fe76 	bl	8005892 <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while(!(LL_USART_IsActiveFlag_REACK(UART4)))
 8005ba6:	bf00      	nop
 8005ba8:	4806      	ldr	r0, [pc, #24]	@ (8005bc4 <MX_UART4_Init+0x130>)
 8005baa:	f7ff ff0a 	bl	80059c2 <LL_USART_IsActiveFlag_REACK>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f9      	beq.n	8005ba8 <MX_UART4_Init+0x114>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	37f0      	adds	r7, #240	@ 0xf0
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	58020c00 	.word	0x58020c00
 8005bc4:	40004c00 	.word	0x40004c00

08005bc8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b0bc      	sub	sp, #240	@ 0xf0
 8005bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005bce:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f00b fa26 	bl	8011028 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bdc:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	609a      	str	r2, [r3, #8]
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	611a      	str	r2, [r3, #16]
 8005bec:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bee:	463b      	mov	r3, r7
 8005bf0:	22b8      	movs	r2, #184	@ 0xb8
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f00b fa17 	bl	8011028 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005bfa:	f04f 0201 	mov.w	r2, #1
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8005c06:	2300      	movs	r3, #0
 8005c08:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f005 fecb 	bl	800b9a8 <HAL_RCCEx_PeriphCLKConfig>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 8005c18:	f7fe f85e 	bl	8003cd8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8005c1c:	2020      	movs	r0, #32
 8005c1e:	f7ff ff1d 	bl	8005a5c <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8005c22:	2004      	movs	r0, #4
 8005c24:	f7ff fee2 	bl	80059ec <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8005c28:	23c0      	movs	r3, #192	@ 0xc0
 8005c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005c2e:	2302      	movs	r3, #2
 8005c30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005c46:	2307      	movs	r3, #7
 8005c48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c4c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005c50:	4619      	mov	r1, r3
 8005c52:	482a      	ldr	r0, [pc, #168]	@ (8005cfc <MX_USART6_UART_Init+0x134>)
 8005c54:	f009 f94e 	bl	800eef4 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005c58:	f7ff fd92 	bl	8005780 <__NVIC_GetPriorityGrouping>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fde2 	bl	800582c <NVIC_EncodePriority>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	2047      	movs	r0, #71	@ 0x47
 8005c6e:	f7ff fdb3 	bl	80057d8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8005c72:	2047      	movs	r0, #71	@ 0x47
 8005c74:	f7ff fd92 	bl	800579c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  USART_InitStruct.BaudRate = 115200;
 8005c7e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005c86:	2300      	movs	r3, #0
 8005c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005c98:	230c      	movs	r3, #12
 8005c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(USART6, &USART_InitStruct);
 8005caa:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4813      	ldr	r0, [pc, #76]	@ (8005d00 <MX_USART6_UART_Init+0x138>)
 8005cb2:	f00a fa67 	bl	8010184 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	4811      	ldr	r0, [pc, #68]	@ (8005d00 <MX_USART6_UART_Init+0x138>)
 8005cba:	f7ff fe0a 	bl	80058d2 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	480f      	ldr	r0, [pc, #60]	@ (8005d00 <MX_USART6_UART_Init+0x138>)
 8005cc2:	f7ff fe2d 	bl	8005920 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8005cc6:	480e      	ldr	r0, [pc, #56]	@ (8005d00 <MX_USART6_UART_Init+0x138>)
 8005cc8:	f7ff fdf3 	bl	80058b2 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 8005ccc:	480c      	ldr	r0, [pc, #48]	@ (8005d00 <MX_USART6_UART_Init+0x138>)
 8005cce:	f7ff fe4e 	bl	800596e <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 8005cd2:	480b      	ldr	r0, [pc, #44]	@ (8005d00 <MX_USART6_UART_Init+0x138>)
 8005cd4:	f7ff fddd 	bl	8005892 <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8005cd8:	bf00      	nop
 8005cda:	4809      	ldr	r0, [pc, #36]	@ (8005d00 <MX_USART6_UART_Init+0x138>)
 8005cdc:	f7ff fe5d 	bl	800599a <LL_USART_IsActiveFlag_TEACK>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f9      	beq.n	8005cda <MX_USART6_UART_Init+0x112>
 8005ce6:	4806      	ldr	r0, [pc, #24]	@ (8005d00 <MX_USART6_UART_Init+0x138>)
 8005ce8:	f7ff fe6b 	bl	80059c2 <LL_USART_IsActiveFlag_REACK>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f3      	beq.n	8005cda <MX_USART6_UART_Init+0x112>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	37f0      	adds	r7, #240	@ 0xf0
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	58020800 	.word	0x58020800
 8005d00:	40011400 	.word	0x40011400

08005d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005d04:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005d40 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8005d08:	f7ff f884 	bl	8004e14 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005d0c:	f7fe fff2 	bl	8004cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d10:	480c      	ldr	r0, [pc, #48]	@ (8005d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d12:	490d      	ldr	r1, [pc, #52]	@ (8005d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d14:	4a0d      	ldr	r2, [pc, #52]	@ (8005d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d18:	e002      	b.n	8005d20 <LoopCopyDataInit>

08005d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d1e:	3304      	adds	r3, #4

08005d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d24:	d3f9      	bcc.n	8005d1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d26:	4a0a      	ldr	r2, [pc, #40]	@ (8005d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005d28:	4c0a      	ldr	r4, [pc, #40]	@ (8005d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d2c:	e001      	b.n	8005d32 <LoopFillZerobss>

08005d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d30:	3204      	adds	r2, #4

08005d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d34:	d3fb      	bcc.n	8005d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d36:	f00b f9ef 	bl	8011118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d3a:	f7fd f851 	bl	8002de0 <main>
  bx  lr
 8005d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005d40:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005d44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005d48:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8005d4c:	0801530c 	.word	0x0801530c
  ldr r2, =_sbss
 8005d50:	240001e4 	.word	0x240001e4
  ldr r4, =_ebss
 8005d54:	24000c04 	.word	0x24000c04

08005d58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d58:	e7fe      	b.n	8005d58 <ADC3_IRQHandler>
	...

08005d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d62:	2003      	movs	r0, #3
 8005d64:	f000 f980 	bl	8006068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d68:	f005 fca4 	bl	800b6b4 <HAL_RCC_GetSysClockFreq>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	4b15      	ldr	r3, [pc, #84]	@ (8005dc4 <HAL_Init+0x68>)
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	0a1b      	lsrs	r3, r3, #8
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	4913      	ldr	r1, [pc, #76]	@ (8005dc8 <HAL_Init+0x6c>)
 8005d7a:	5ccb      	ldrb	r3, [r1, r3]
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
 8005d84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d86:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc4 <HAL_Init+0x68>)
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8005dc8 <HAL_Init+0x6c>)
 8005d90:	5cd3      	ldrb	r3, [r2, r3]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9c:	4a0b      	ldr	r2, [pc, #44]	@ (8005dcc <HAL_Init+0x70>)
 8005d9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005da0:	4a0b      	ldr	r2, [pc, #44]	@ (8005dd0 <HAL_Init+0x74>)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005da6:	200f      	movs	r0, #15
 8005da8:	f000 f814 	bl	8005dd4 <HAL_InitTick>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e002      	b.n	8005dbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005db6:	f7fe fc15 	bl	80045e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	58024400 	.word	0x58024400
 8005dc8:	08014f0c 	.word	0x08014f0c
 8005dcc:	24000010 	.word	0x24000010
 8005dd0:	2400000c 	.word	0x2400000c

08005dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005ddc:	4b15      	ldr	r3, [pc, #84]	@ (8005e34 <HAL_InitTick+0x60>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e021      	b.n	8005e2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005de8:	4b13      	ldr	r3, [pc, #76]	@ (8005e38 <HAL_InitTick+0x64>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4b11      	ldr	r3, [pc, #68]	@ (8005e34 <HAL_InitTick+0x60>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	4619      	mov	r1, r3
 8005df2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f965 	bl	80060ce <HAL_SYSTICK_Config>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e00e      	b.n	8005e2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b0f      	cmp	r3, #15
 8005e12:	d80a      	bhi.n	8005e2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e14:	2200      	movs	r2, #0
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e1c:	f000 f92f 	bl	800607e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e20:	4a06      	ldr	r2, [pc, #24]	@ (8005e3c <HAL_InitTick+0x68>)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e000      	b.n	8005e2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3708      	adds	r7, #8
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	24000018 	.word	0x24000018
 8005e38:	2400000c 	.word	0x2400000c
 8005e3c:	24000014 	.word	0x24000014

08005e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e44:	4b06      	ldr	r3, [pc, #24]	@ (8005e60 <HAL_IncTick+0x20>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4b06      	ldr	r3, [pc, #24]	@ (8005e64 <HAL_IncTick+0x24>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4413      	add	r3, r2
 8005e50:	4a04      	ldr	r2, [pc, #16]	@ (8005e64 <HAL_IncTick+0x24>)
 8005e52:	6013      	str	r3, [r2, #0]
}
 8005e54:	bf00      	nop
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	24000018 	.word	0x24000018
 8005e64:	24000ab4 	.word	0x24000ab4

08005e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8005e6c:	4b03      	ldr	r3, [pc, #12]	@ (8005e7c <HAL_GetTick+0x14>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	24000ab4 	.word	0x24000ab4

08005e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e88:	f7ff ffee 	bl	8005e68 <HAL_GetTick>
 8005e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e98:	d005      	beq.n	8005ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec4 <HAL_Delay+0x44>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ea6:	bf00      	nop
 8005ea8:	f7ff ffde 	bl	8005e68 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d8f7      	bhi.n	8005ea8 <HAL_Delay+0x28>
  {
  }
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	24000018 	.word	0x24000018

08005ec8 <__NVIC_SetPriorityGrouping>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f08 <__NVIC_SetPriorityGrouping+0x40>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ef0:	4b06      	ldr	r3, [pc, #24]	@ (8005f0c <__NVIC_SetPriorityGrouping+0x44>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ef6:	4a04      	ldr	r2, [pc, #16]	@ (8005f08 <__NVIC_SetPriorityGrouping+0x40>)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	60d3      	str	r3, [r2, #12]
}
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	e000ed00 	.word	0xe000ed00
 8005f0c:	05fa0000 	.word	0x05fa0000

08005f10 <__NVIC_GetPriorityGrouping>:
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f14:	4b04      	ldr	r3, [pc, #16]	@ (8005f28 <__NVIC_GetPriorityGrouping+0x18>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	0a1b      	lsrs	r3, r3, #8
 8005f1a:	f003 0307 	and.w	r3, r3, #7
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	e000ed00 	.word	0xe000ed00

08005f2c <__NVIC_EnableIRQ>:
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	db0b      	blt.n	8005f56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	f003 021f 	and.w	r2, r3, #31
 8005f44:	4907      	ldr	r1, [pc, #28]	@ (8005f64 <__NVIC_EnableIRQ+0x38>)
 8005f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	e000e100 	.word	0xe000e100

08005f68 <__NVIC_SetPriority>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	4603      	mov	r3, r0
 8005f70:	6039      	str	r1, [r7, #0]
 8005f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	db0a      	blt.n	8005f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	490c      	ldr	r1, [pc, #48]	@ (8005fb4 <__NVIC_SetPriority+0x4c>)
 8005f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f86:	0112      	lsls	r2, r2, #4
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f90:	e00a      	b.n	8005fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	4908      	ldr	r1, [pc, #32]	@ (8005fb8 <__NVIC_SetPriority+0x50>)
 8005f98:	88fb      	ldrh	r3, [r7, #6]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	0112      	lsls	r2, r2, #4
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	440b      	add	r3, r1
 8005fa6:	761a      	strb	r2, [r3, #24]
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	e000e100 	.word	0xe000e100
 8005fb8:	e000ed00 	.word	0xe000ed00

08005fbc <NVIC_EncodePriority>:
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b089      	sub	sp, #36	@ 0x24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f1c3 0307 	rsb	r3, r3, #7
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	bf28      	it	cs
 8005fda:	2304      	movcs	r3, #4
 8005fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	2b06      	cmp	r3, #6
 8005fe4:	d902      	bls.n	8005fec <NVIC_EncodePriority+0x30>
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	3b03      	subs	r3, #3
 8005fea:	e000      	b.n	8005fee <NVIC_EncodePriority+0x32>
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffa:	43da      	mvns	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	401a      	ands	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	43d9      	mvns	r1, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006014:	4313      	orrs	r3, r2
}
 8006016:	4618      	mov	r0, r3
 8006018:	3724      	adds	r7, #36	@ 0x24
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3b01      	subs	r3, #1
 8006030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006034:	d301      	bcc.n	800603a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006036:	2301      	movs	r3, #1
 8006038:	e00f      	b.n	800605a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800603a:	4a0a      	ldr	r2, [pc, #40]	@ (8006064 <SysTick_Config+0x40>)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	3b01      	subs	r3, #1
 8006040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006042:	210f      	movs	r1, #15
 8006044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006048:	f7ff ff8e 	bl	8005f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800604c:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <SysTick_Config+0x40>)
 800604e:	2200      	movs	r2, #0
 8006050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006052:	4b04      	ldr	r3, [pc, #16]	@ (8006064 <SysTick_Config+0x40>)
 8006054:	2207      	movs	r2, #7
 8006056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	e000e010 	.word	0xe000e010

08006068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ff29 	bl	8005ec8 <__NVIC_SetPriorityGrouping>
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	4603      	mov	r3, r0
 8006086:	60b9      	str	r1, [r7, #8]
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800608c:	f7ff ff40 	bl	8005f10 <__NVIC_GetPriorityGrouping>
 8006090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	6978      	ldr	r0, [r7, #20]
 8006098:	f7ff ff90 	bl	8005fbc <NVIC_EncodePriority>
 800609c:	4602      	mov	r2, r0
 800609e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff ff5f 	bl	8005f68 <__NVIC_SetPriority>
}
 80060aa:	bf00      	nop
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	4603      	mov	r3, r0
 80060ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ff33 	bl	8005f2c <__NVIC_EnableIRQ>
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff ffa4 	bl	8006024 <SysTick_Config>
 80060dc:	4603      	mov	r3, r0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80060ec:	f3bf 8f5f 	dmb	sy
}
 80060f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80060f2:	4b07      	ldr	r3, [pc, #28]	@ (8006110 <HAL_MPU_Disable+0x28>)
 80060f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f6:	4a06      	ldr	r2, [pc, #24]	@ (8006110 <HAL_MPU_Disable+0x28>)
 80060f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80060fe:	4b05      	ldr	r3, [pc, #20]	@ (8006114 <HAL_MPU_Disable+0x2c>)
 8006100:	2200      	movs	r2, #0
 8006102:	605a      	str	r2, [r3, #4]
}
 8006104:	bf00      	nop
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	e000ed00 	.word	0xe000ed00
 8006114:	e000ed90 	.word	0xe000ed90

08006118 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006120:	4a0b      	ldr	r2, [pc, #44]	@ (8006150 <HAL_MPU_Enable+0x38>)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800612a:	4b0a      	ldr	r3, [pc, #40]	@ (8006154 <HAL_MPU_Enable+0x3c>)
 800612c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612e:	4a09      	ldr	r2, [pc, #36]	@ (8006154 <HAL_MPU_Enable+0x3c>)
 8006130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006134:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006136:	f3bf 8f4f 	dsb	sy
}
 800613a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800613c:	f3bf 8f6f 	isb	sy
}
 8006140:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	e000ed90 	.word	0xe000ed90
 8006154:	e000ed00 	.word	0xe000ed00

08006158 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	785a      	ldrb	r2, [r3, #1]
 8006164:	4b1b      	ldr	r3, [pc, #108]	@ (80061d4 <HAL_MPU_ConfigRegion+0x7c>)
 8006166:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006168:	4b1a      	ldr	r3, [pc, #104]	@ (80061d4 <HAL_MPU_ConfigRegion+0x7c>)
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	4a19      	ldr	r2, [pc, #100]	@ (80061d4 <HAL_MPU_ConfigRegion+0x7c>)
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006174:	4a17      	ldr	r2, [pc, #92]	@ (80061d4 <HAL_MPU_ConfigRegion+0x7c>)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	7b1b      	ldrb	r3, [r3, #12]
 8006180:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	7adb      	ldrb	r3, [r3, #11]
 8006186:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006188:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	7a9b      	ldrb	r3, [r3, #10]
 800618e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006190:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	7b5b      	ldrb	r3, [r3, #13]
 8006196:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006198:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7b9b      	ldrb	r3, [r3, #14]
 800619e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80061a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	7bdb      	ldrb	r3, [r3, #15]
 80061a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80061a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	7a5b      	ldrb	r3, [r3, #9]
 80061ae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80061b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	7a1b      	ldrb	r3, [r3, #8]
 80061b6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80061b8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	7812      	ldrb	r2, [r2, #0]
 80061be:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80061c0:	4a04      	ldr	r2, [pc, #16]	@ (80061d4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80061c2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80061c4:	6113      	str	r3, [r2, #16]
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	e000ed90 	.word	0xe000ed90

080061d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80061e0:	f7ff fe42 	bl	8005e68 <HAL_GetTick>
 80061e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e312      	b.n	8006816 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a66      	ldr	r2, [pc, #408]	@ (8006390 <HAL_DMA_Init+0x1b8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d04a      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a65      	ldr	r2, [pc, #404]	@ (8006394 <HAL_DMA_Init+0x1bc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d045      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a63      	ldr	r2, [pc, #396]	@ (8006398 <HAL_DMA_Init+0x1c0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d040      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a62      	ldr	r2, [pc, #392]	@ (800639c <HAL_DMA_Init+0x1c4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d03b      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a60      	ldr	r2, [pc, #384]	@ (80063a0 <HAL_DMA_Init+0x1c8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d036      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a5f      	ldr	r2, [pc, #380]	@ (80063a4 <HAL_DMA_Init+0x1cc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d031      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a5d      	ldr	r2, [pc, #372]	@ (80063a8 <HAL_DMA_Init+0x1d0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d02c      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a5c      	ldr	r2, [pc, #368]	@ (80063ac <HAL_DMA_Init+0x1d4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d027      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a5a      	ldr	r2, [pc, #360]	@ (80063b0 <HAL_DMA_Init+0x1d8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d022      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a59      	ldr	r2, [pc, #356]	@ (80063b4 <HAL_DMA_Init+0x1dc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d01d      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a57      	ldr	r2, [pc, #348]	@ (80063b8 <HAL_DMA_Init+0x1e0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d018      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a56      	ldr	r2, [pc, #344]	@ (80063bc <HAL_DMA_Init+0x1e4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a54      	ldr	r2, [pc, #336]	@ (80063c0 <HAL_DMA_Init+0x1e8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00e      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a53      	ldr	r2, [pc, #332]	@ (80063c4 <HAL_DMA_Init+0x1ec>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a51      	ldr	r2, [pc, #324]	@ (80063c8 <HAL_DMA_Init+0x1f0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_DMA_Init+0xb8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a50      	ldr	r2, [pc, #320]	@ (80063cc <HAL_DMA_Init+0x1f4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d101      	bne.n	8006294 <HAL_DMA_Init+0xbc>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <HAL_DMA_Init+0xbe>
 8006294:	2300      	movs	r3, #0
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 813c 	beq.w	8006514 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a37      	ldr	r2, [pc, #220]	@ (8006390 <HAL_DMA_Init+0x1b8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d04a      	beq.n	800634c <HAL_DMA_Init+0x174>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a36      	ldr	r2, [pc, #216]	@ (8006394 <HAL_DMA_Init+0x1bc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d045      	beq.n	800634c <HAL_DMA_Init+0x174>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a34      	ldr	r2, [pc, #208]	@ (8006398 <HAL_DMA_Init+0x1c0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d040      	beq.n	800634c <HAL_DMA_Init+0x174>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a33      	ldr	r2, [pc, #204]	@ (800639c <HAL_DMA_Init+0x1c4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d03b      	beq.n	800634c <HAL_DMA_Init+0x174>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a31      	ldr	r2, [pc, #196]	@ (80063a0 <HAL_DMA_Init+0x1c8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d036      	beq.n	800634c <HAL_DMA_Init+0x174>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a30      	ldr	r2, [pc, #192]	@ (80063a4 <HAL_DMA_Init+0x1cc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d031      	beq.n	800634c <HAL_DMA_Init+0x174>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2e      	ldr	r2, [pc, #184]	@ (80063a8 <HAL_DMA_Init+0x1d0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d02c      	beq.n	800634c <HAL_DMA_Init+0x174>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a2d      	ldr	r2, [pc, #180]	@ (80063ac <HAL_DMA_Init+0x1d4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d027      	beq.n	800634c <HAL_DMA_Init+0x174>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a2b      	ldr	r2, [pc, #172]	@ (80063b0 <HAL_DMA_Init+0x1d8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d022      	beq.n	800634c <HAL_DMA_Init+0x174>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2a      	ldr	r2, [pc, #168]	@ (80063b4 <HAL_DMA_Init+0x1dc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d01d      	beq.n	800634c <HAL_DMA_Init+0x174>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a28      	ldr	r2, [pc, #160]	@ (80063b8 <HAL_DMA_Init+0x1e0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d018      	beq.n	800634c <HAL_DMA_Init+0x174>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a27      	ldr	r2, [pc, #156]	@ (80063bc <HAL_DMA_Init+0x1e4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d013      	beq.n	800634c <HAL_DMA_Init+0x174>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a25      	ldr	r2, [pc, #148]	@ (80063c0 <HAL_DMA_Init+0x1e8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00e      	beq.n	800634c <HAL_DMA_Init+0x174>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a24      	ldr	r2, [pc, #144]	@ (80063c4 <HAL_DMA_Init+0x1ec>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d009      	beq.n	800634c <HAL_DMA_Init+0x174>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a22      	ldr	r2, [pc, #136]	@ (80063c8 <HAL_DMA_Init+0x1f0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d004      	beq.n	800634c <HAL_DMA_Init+0x174>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a21      	ldr	r2, [pc, #132]	@ (80063cc <HAL_DMA_Init+0x1f4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d108      	bne.n	800635e <HAL_DMA_Init+0x186>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 0201 	bic.w	r2, r2, #1
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	e007      	b.n	800636e <HAL_DMA_Init+0x196>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800636e:	e02f      	b.n	80063d0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006370:	f7ff fd7a 	bl	8005e68 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b05      	cmp	r3, #5
 800637c:	d928      	bls.n	80063d0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2220      	movs	r2, #32
 8006382:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2203      	movs	r2, #3
 8006388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e242      	b.n	8006816 <HAL_DMA_Init+0x63e>
 8006390:	40020010 	.word	0x40020010
 8006394:	40020028 	.word	0x40020028
 8006398:	40020040 	.word	0x40020040
 800639c:	40020058 	.word	0x40020058
 80063a0:	40020070 	.word	0x40020070
 80063a4:	40020088 	.word	0x40020088
 80063a8:	400200a0 	.word	0x400200a0
 80063ac:	400200b8 	.word	0x400200b8
 80063b0:	40020410 	.word	0x40020410
 80063b4:	40020428 	.word	0x40020428
 80063b8:	40020440 	.word	0x40020440
 80063bc:	40020458 	.word	0x40020458
 80063c0:	40020470 	.word	0x40020470
 80063c4:	40020488 	.word	0x40020488
 80063c8:	400204a0 	.word	0x400204a0
 80063cc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1c8      	bne.n	8006370 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4b83      	ldr	r3, [pc, #524]	@ (80065f8 <HAL_DMA_Init+0x420>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80063f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006402:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800640e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006420:	2b04      	cmp	r3, #4
 8006422:	d107      	bne.n	8006434 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642c:	4313      	orrs	r3, r2
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b28      	cmp	r3, #40	@ 0x28
 800643a:	d903      	bls.n	8006444 <HAL_DMA_Init+0x26c>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b2e      	cmp	r3, #46	@ 0x2e
 8006442:	d91f      	bls.n	8006484 <HAL_DMA_Init+0x2ac>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b3e      	cmp	r3, #62	@ 0x3e
 800644a:	d903      	bls.n	8006454 <HAL_DMA_Init+0x27c>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b42      	cmp	r3, #66	@ 0x42
 8006452:	d917      	bls.n	8006484 <HAL_DMA_Init+0x2ac>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b46      	cmp	r3, #70	@ 0x46
 800645a:	d903      	bls.n	8006464 <HAL_DMA_Init+0x28c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b48      	cmp	r3, #72	@ 0x48
 8006462:	d90f      	bls.n	8006484 <HAL_DMA_Init+0x2ac>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b4e      	cmp	r3, #78	@ 0x4e
 800646a:	d903      	bls.n	8006474 <HAL_DMA_Init+0x29c>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b52      	cmp	r3, #82	@ 0x52
 8006472:	d907      	bls.n	8006484 <HAL_DMA_Init+0x2ac>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b73      	cmp	r3, #115	@ 0x73
 800647a:	d905      	bls.n	8006488 <HAL_DMA_Init+0x2b0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b77      	cmp	r3, #119	@ 0x77
 8006482:	d801      	bhi.n	8006488 <HAL_DMA_Init+0x2b0>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <HAL_DMA_Init+0x2b2>
 8006488:	2300      	movs	r3, #0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006494:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 0307 	bic.w	r3, r3, #7
 80064ac:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d117      	bne.n	80064f0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00e      	beq.n	80064f0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f002 f810 	bl	80084f8 <DMA_CheckFifoParam>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2240      	movs	r2, #64	@ 0x40
 80064e2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e192      	b.n	8006816 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f001 ff4b 	bl	8008394 <DMA_CalcBaseAndBitshift>
 80064fe:	4603      	mov	r3, r0
 8006500:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	223f      	movs	r2, #63	@ 0x3f
 800650c:	409a      	lsls	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	609a      	str	r2, [r3, #8]
 8006512:	e0c8      	b.n	80066a6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a38      	ldr	r2, [pc, #224]	@ (80065fc <HAL_DMA_Init+0x424>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d022      	beq.n	8006564 <HAL_DMA_Init+0x38c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a37      	ldr	r2, [pc, #220]	@ (8006600 <HAL_DMA_Init+0x428>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d01d      	beq.n	8006564 <HAL_DMA_Init+0x38c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a35      	ldr	r2, [pc, #212]	@ (8006604 <HAL_DMA_Init+0x42c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d018      	beq.n	8006564 <HAL_DMA_Init+0x38c>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a34      	ldr	r2, [pc, #208]	@ (8006608 <HAL_DMA_Init+0x430>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d013      	beq.n	8006564 <HAL_DMA_Init+0x38c>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a32      	ldr	r2, [pc, #200]	@ (800660c <HAL_DMA_Init+0x434>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00e      	beq.n	8006564 <HAL_DMA_Init+0x38c>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a31      	ldr	r2, [pc, #196]	@ (8006610 <HAL_DMA_Init+0x438>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d009      	beq.n	8006564 <HAL_DMA_Init+0x38c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a2f      	ldr	r2, [pc, #188]	@ (8006614 <HAL_DMA_Init+0x43c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d004      	beq.n	8006564 <HAL_DMA_Init+0x38c>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2e      	ldr	r2, [pc, #184]	@ (8006618 <HAL_DMA_Init+0x440>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d101      	bne.n	8006568 <HAL_DMA_Init+0x390>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <HAL_DMA_Init+0x392>
 8006568:	2300      	movs	r3, #0
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8092 	beq.w	8006694 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a21      	ldr	r2, [pc, #132]	@ (80065fc <HAL_DMA_Init+0x424>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d021      	beq.n	80065be <HAL_DMA_Init+0x3e6>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a20      	ldr	r2, [pc, #128]	@ (8006600 <HAL_DMA_Init+0x428>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d01c      	beq.n	80065be <HAL_DMA_Init+0x3e6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1e      	ldr	r2, [pc, #120]	@ (8006604 <HAL_DMA_Init+0x42c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d017      	beq.n	80065be <HAL_DMA_Init+0x3e6>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <HAL_DMA_Init+0x430>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d012      	beq.n	80065be <HAL_DMA_Init+0x3e6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a1b      	ldr	r2, [pc, #108]	@ (800660c <HAL_DMA_Init+0x434>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00d      	beq.n	80065be <HAL_DMA_Init+0x3e6>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006610 <HAL_DMA_Init+0x438>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d008      	beq.n	80065be <HAL_DMA_Init+0x3e6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a18      	ldr	r2, [pc, #96]	@ (8006614 <HAL_DMA_Init+0x43c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <HAL_DMA_Init+0x3e6>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a17      	ldr	r2, [pc, #92]	@ (8006618 <HAL_DMA_Init+0x440>)
 80065bc:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4b10      	ldr	r3, [pc, #64]	@ (800661c <HAL_DMA_Init+0x444>)
 80065da:	4013      	ands	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b40      	cmp	r3, #64	@ 0x40
 80065e4:	d01c      	beq.n	8006620 <HAL_DMA_Init+0x448>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2b80      	cmp	r3, #128	@ 0x80
 80065ec:	d102      	bne.n	80065f4 <HAL_DMA_Init+0x41c>
 80065ee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065f2:	e016      	b.n	8006622 <HAL_DMA_Init+0x44a>
 80065f4:	2300      	movs	r3, #0
 80065f6:	e014      	b.n	8006622 <HAL_DMA_Init+0x44a>
 80065f8:	fe10803f 	.word	0xfe10803f
 80065fc:	58025408 	.word	0x58025408
 8006600:	5802541c 	.word	0x5802541c
 8006604:	58025430 	.word	0x58025430
 8006608:	58025444 	.word	0x58025444
 800660c:	58025458 	.word	0x58025458
 8006610:	5802546c 	.word	0x5802546c
 8006614:	58025480 	.word	0x58025480
 8006618:	58025494 	.word	0x58025494
 800661c:	fffe000f 	.word	0xfffe000f
 8006620:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	68d2      	ldr	r2, [r2, #12]
 8006626:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006628:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006630:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006638:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006640:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006648:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006650:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	461a      	mov	r2, r3
 8006666:	4b6e      	ldr	r3, [pc, #440]	@ (8006820 <HAL_DMA_Init+0x648>)
 8006668:	4413      	add	r3, r2
 800666a:	4a6e      	ldr	r2, [pc, #440]	@ (8006824 <HAL_DMA_Init+0x64c>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	009a      	lsls	r2, r3, #2
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 fe8b 	bl	8008394 <DMA_CalcBaseAndBitshift>
 800667e:	4603      	mov	r3, r0
 8006680:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	2201      	movs	r2, #1
 800668c:	409a      	lsls	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	605a      	str	r2, [r3, #4]
 8006692:	e008      	b.n	80066a6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2240      	movs	r2, #64	@ 0x40
 8006698:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2203      	movs	r2, #3
 800669e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e0b7      	b.n	8006816 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a5f      	ldr	r2, [pc, #380]	@ (8006828 <HAL_DMA_Init+0x650>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d072      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a5d      	ldr	r2, [pc, #372]	@ (800682c <HAL_DMA_Init+0x654>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d06d      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a5c      	ldr	r2, [pc, #368]	@ (8006830 <HAL_DMA_Init+0x658>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d068      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a5a      	ldr	r2, [pc, #360]	@ (8006834 <HAL_DMA_Init+0x65c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d063      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a59      	ldr	r2, [pc, #356]	@ (8006838 <HAL_DMA_Init+0x660>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d05e      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a57      	ldr	r2, [pc, #348]	@ (800683c <HAL_DMA_Init+0x664>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d059      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a56      	ldr	r2, [pc, #344]	@ (8006840 <HAL_DMA_Init+0x668>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d054      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a54      	ldr	r2, [pc, #336]	@ (8006844 <HAL_DMA_Init+0x66c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d04f      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a53      	ldr	r2, [pc, #332]	@ (8006848 <HAL_DMA_Init+0x670>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d04a      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a51      	ldr	r2, [pc, #324]	@ (800684c <HAL_DMA_Init+0x674>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d045      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a50      	ldr	r2, [pc, #320]	@ (8006850 <HAL_DMA_Init+0x678>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d040      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a4e      	ldr	r2, [pc, #312]	@ (8006854 <HAL_DMA_Init+0x67c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d03b      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a4d      	ldr	r2, [pc, #308]	@ (8006858 <HAL_DMA_Init+0x680>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d036      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a4b      	ldr	r2, [pc, #300]	@ (800685c <HAL_DMA_Init+0x684>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d031      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a4a      	ldr	r2, [pc, #296]	@ (8006860 <HAL_DMA_Init+0x688>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d02c      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a48      	ldr	r2, [pc, #288]	@ (8006864 <HAL_DMA_Init+0x68c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d027      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a47      	ldr	r2, [pc, #284]	@ (8006868 <HAL_DMA_Init+0x690>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a45      	ldr	r2, [pc, #276]	@ (800686c <HAL_DMA_Init+0x694>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01d      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a44      	ldr	r2, [pc, #272]	@ (8006870 <HAL_DMA_Init+0x698>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a42      	ldr	r2, [pc, #264]	@ (8006874 <HAL_DMA_Init+0x69c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a41      	ldr	r2, [pc, #260]	@ (8006878 <HAL_DMA_Init+0x6a0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a3f      	ldr	r2, [pc, #252]	@ (800687c <HAL_DMA_Init+0x6a4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a3e      	ldr	r2, [pc, #248]	@ (8006880 <HAL_DMA_Init+0x6a8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_DMA_Init+0x5be>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a3c      	ldr	r2, [pc, #240]	@ (8006884 <HAL_DMA_Init+0x6ac>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d101      	bne.n	800679a <HAL_DMA_Init+0x5c2>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_DMA_Init+0x5c4>
 800679a:	2300      	movs	r3, #0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d032      	beq.n	8006806 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 ff25 	bl	80085f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b80      	cmp	r3, #128	@ 0x80
 80067ac:	d102      	bne.n	80067b4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80067c8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d010      	beq.n	80067f4 <HAL_DMA_Init+0x61c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b08      	cmp	r3, #8
 80067d8:	d80c      	bhi.n	80067f4 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 ffa2 	bl	8008724 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067f0:	605a      	str	r2, [r3, #4]
 80067f2:	e008      	b.n	8006806 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	a7fdabf8 	.word	0xa7fdabf8
 8006824:	cccccccd 	.word	0xcccccccd
 8006828:	40020010 	.word	0x40020010
 800682c:	40020028 	.word	0x40020028
 8006830:	40020040 	.word	0x40020040
 8006834:	40020058 	.word	0x40020058
 8006838:	40020070 	.word	0x40020070
 800683c:	40020088 	.word	0x40020088
 8006840:	400200a0 	.word	0x400200a0
 8006844:	400200b8 	.word	0x400200b8
 8006848:	40020410 	.word	0x40020410
 800684c:	40020428 	.word	0x40020428
 8006850:	40020440 	.word	0x40020440
 8006854:	40020458 	.word	0x40020458
 8006858:	40020470 	.word	0x40020470
 800685c:	40020488 	.word	0x40020488
 8006860:	400204a0 	.word	0x400204a0
 8006864:	400204b8 	.word	0x400204b8
 8006868:	58025408 	.word	0x58025408
 800686c:	5802541c 	.word	0x5802541c
 8006870:	58025430 	.word	0x58025430
 8006874:	58025444 	.word	0x58025444
 8006878:	58025458 	.word	0x58025458
 800687c:	5802546c 	.word	0x5802546c
 8006880:	58025480 	.word	0x58025480
 8006884:	58025494 	.word	0x58025494

08006888 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e226      	b.n	8006cf2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_DMA_Start_IT+0x2a>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e21f      	b.n	8006cf2 <HAL_DMA_Start_IT+0x46a>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	f040 820a 	bne.w	8006cdc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a68      	ldr	r2, [pc, #416]	@ (8006a7c <HAL_DMA_Start_IT+0x1f4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d04a      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a66      	ldr	r2, [pc, #408]	@ (8006a80 <HAL_DMA_Start_IT+0x1f8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d045      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a65      	ldr	r2, [pc, #404]	@ (8006a84 <HAL_DMA_Start_IT+0x1fc>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d040      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a63      	ldr	r2, [pc, #396]	@ (8006a88 <HAL_DMA_Start_IT+0x200>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d03b      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a62      	ldr	r2, [pc, #392]	@ (8006a8c <HAL_DMA_Start_IT+0x204>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d036      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a60      	ldr	r2, [pc, #384]	@ (8006a90 <HAL_DMA_Start_IT+0x208>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d031      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a5f      	ldr	r2, [pc, #380]	@ (8006a94 <HAL_DMA_Start_IT+0x20c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d02c      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a5d      	ldr	r2, [pc, #372]	@ (8006a98 <HAL_DMA_Start_IT+0x210>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d027      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a5c      	ldr	r2, [pc, #368]	@ (8006a9c <HAL_DMA_Start_IT+0x214>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a5a      	ldr	r2, [pc, #360]	@ (8006aa0 <HAL_DMA_Start_IT+0x218>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01d      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a59      	ldr	r2, [pc, #356]	@ (8006aa4 <HAL_DMA_Start_IT+0x21c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d018      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a57      	ldr	r2, [pc, #348]	@ (8006aa8 <HAL_DMA_Start_IT+0x220>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a56      	ldr	r2, [pc, #344]	@ (8006aac <HAL_DMA_Start_IT+0x224>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a54      	ldr	r2, [pc, #336]	@ (8006ab0 <HAL_DMA_Start_IT+0x228>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a53      	ldr	r2, [pc, #332]	@ (8006ab4 <HAL_DMA_Start_IT+0x22c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_DMA_Start_IT+0xee>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a51      	ldr	r2, [pc, #324]	@ (8006ab8 <HAL_DMA_Start_IT+0x230>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d108      	bne.n	8006988 <HAL_DMA_Start_IT+0x100>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e007      	b.n	8006998 <HAL_DMA_Start_IT+0x110>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0201 	bic.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	68b9      	ldr	r1, [r7, #8]
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f001 fb4c 	bl	800803c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a34      	ldr	r2, [pc, #208]	@ (8006a7c <HAL_DMA_Start_IT+0x1f4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d04a      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a33      	ldr	r2, [pc, #204]	@ (8006a80 <HAL_DMA_Start_IT+0x1f8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d045      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a31      	ldr	r2, [pc, #196]	@ (8006a84 <HAL_DMA_Start_IT+0x1fc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d040      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a30      	ldr	r2, [pc, #192]	@ (8006a88 <HAL_DMA_Start_IT+0x200>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d03b      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a2e      	ldr	r2, [pc, #184]	@ (8006a8c <HAL_DMA_Start_IT+0x204>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d036      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a2d      	ldr	r2, [pc, #180]	@ (8006a90 <HAL_DMA_Start_IT+0x208>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d031      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006a94 <HAL_DMA_Start_IT+0x20c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d02c      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006a98 <HAL_DMA_Start_IT+0x210>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d027      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a28      	ldr	r2, [pc, #160]	@ (8006a9c <HAL_DMA_Start_IT+0x214>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d022      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a27      	ldr	r2, [pc, #156]	@ (8006aa0 <HAL_DMA_Start_IT+0x218>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d01d      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a25      	ldr	r2, [pc, #148]	@ (8006aa4 <HAL_DMA_Start_IT+0x21c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a24      	ldr	r2, [pc, #144]	@ (8006aa8 <HAL_DMA_Start_IT+0x220>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a22      	ldr	r2, [pc, #136]	@ (8006aac <HAL_DMA_Start_IT+0x224>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a21      	ldr	r2, [pc, #132]	@ (8006ab0 <HAL_DMA_Start_IT+0x228>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab4 <HAL_DMA_Start_IT+0x22c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_DMA_Start_IT+0x1bc>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab8 <HAL_DMA_Start_IT+0x230>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_DMA_Start_IT+0x1c0>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_DMA_Start_IT+0x1c2>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d036      	beq.n	8006abc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f023 021e 	bic.w	r2, r3, #30
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f042 0216 	orr.w	r2, r2, #22
 8006a60:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d03e      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f042 0208 	orr.w	r2, r2, #8
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e035      	b.n	8006ae8 <HAL_DMA_Start_IT+0x260>
 8006a7c:	40020010 	.word	0x40020010
 8006a80:	40020028 	.word	0x40020028
 8006a84:	40020040 	.word	0x40020040
 8006a88:	40020058 	.word	0x40020058
 8006a8c:	40020070 	.word	0x40020070
 8006a90:	40020088 	.word	0x40020088
 8006a94:	400200a0 	.word	0x400200a0
 8006a98:	400200b8 	.word	0x400200b8
 8006a9c:	40020410 	.word	0x40020410
 8006aa0:	40020428 	.word	0x40020428
 8006aa4:	40020440 	.word	0x40020440
 8006aa8:	40020458 	.word	0x40020458
 8006aac:	40020470 	.word	0x40020470
 8006ab0:	40020488 	.word	0x40020488
 8006ab4:	400204a0 	.word	0x400204a0
 8006ab8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 020e 	bic.w	r2, r3, #14
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 020a 	orr.w	r2, r2, #10
 8006ace:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d007      	beq.n	8006ae8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0204 	orr.w	r2, r2, #4
 8006ae6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a83      	ldr	r2, [pc, #524]	@ (8006cfc <HAL_DMA_Start_IT+0x474>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d072      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a82      	ldr	r2, [pc, #520]	@ (8006d00 <HAL_DMA_Start_IT+0x478>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d06d      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a80      	ldr	r2, [pc, #512]	@ (8006d04 <HAL_DMA_Start_IT+0x47c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d068      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a7f      	ldr	r2, [pc, #508]	@ (8006d08 <HAL_DMA_Start_IT+0x480>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d063      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a7d      	ldr	r2, [pc, #500]	@ (8006d0c <HAL_DMA_Start_IT+0x484>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d05e      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8006d10 <HAL_DMA_Start_IT+0x488>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d059      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a7a      	ldr	r2, [pc, #488]	@ (8006d14 <HAL_DMA_Start_IT+0x48c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d054      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a79      	ldr	r2, [pc, #484]	@ (8006d18 <HAL_DMA_Start_IT+0x490>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d04f      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a77      	ldr	r2, [pc, #476]	@ (8006d1c <HAL_DMA_Start_IT+0x494>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d04a      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a76      	ldr	r2, [pc, #472]	@ (8006d20 <HAL_DMA_Start_IT+0x498>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d045      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a74      	ldr	r2, [pc, #464]	@ (8006d24 <HAL_DMA_Start_IT+0x49c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d040      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a73      	ldr	r2, [pc, #460]	@ (8006d28 <HAL_DMA_Start_IT+0x4a0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d03b      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a71      	ldr	r2, [pc, #452]	@ (8006d2c <HAL_DMA_Start_IT+0x4a4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d036      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a70      	ldr	r2, [pc, #448]	@ (8006d30 <HAL_DMA_Start_IT+0x4a8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d031      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6e      	ldr	r2, [pc, #440]	@ (8006d34 <HAL_DMA_Start_IT+0x4ac>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d02c      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a6d      	ldr	r2, [pc, #436]	@ (8006d38 <HAL_DMA_Start_IT+0x4b0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d027      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8006d3c <HAL_DMA_Start_IT+0x4b4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d022      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a6a      	ldr	r2, [pc, #424]	@ (8006d40 <HAL_DMA_Start_IT+0x4b8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d01d      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a68      	ldr	r2, [pc, #416]	@ (8006d44 <HAL_DMA_Start_IT+0x4bc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d018      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a67      	ldr	r2, [pc, #412]	@ (8006d48 <HAL_DMA_Start_IT+0x4c0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d013      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a65      	ldr	r2, [pc, #404]	@ (8006d4c <HAL_DMA_Start_IT+0x4c4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00e      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a64      	ldr	r2, [pc, #400]	@ (8006d50 <HAL_DMA_Start_IT+0x4c8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d009      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a62      	ldr	r2, [pc, #392]	@ (8006d54 <HAL_DMA_Start_IT+0x4cc>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <HAL_DMA_Start_IT+0x350>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a61      	ldr	r2, [pc, #388]	@ (8006d58 <HAL_DMA_Start_IT+0x4d0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d101      	bne.n	8006bdc <HAL_DMA_Start_IT+0x354>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <HAL_DMA_Start_IT+0x356>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01a      	beq.n	8006c18 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bfe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d007      	beq.n	8006c18 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c16:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a37      	ldr	r2, [pc, #220]	@ (8006cfc <HAL_DMA_Start_IT+0x474>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d04a      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a36      	ldr	r2, [pc, #216]	@ (8006d00 <HAL_DMA_Start_IT+0x478>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d045      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a34      	ldr	r2, [pc, #208]	@ (8006d04 <HAL_DMA_Start_IT+0x47c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d040      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a33      	ldr	r2, [pc, #204]	@ (8006d08 <HAL_DMA_Start_IT+0x480>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d03b      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a31      	ldr	r2, [pc, #196]	@ (8006d0c <HAL_DMA_Start_IT+0x484>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d036      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a30      	ldr	r2, [pc, #192]	@ (8006d10 <HAL_DMA_Start_IT+0x488>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d031      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a2e      	ldr	r2, [pc, #184]	@ (8006d14 <HAL_DMA_Start_IT+0x48c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d02c      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a2d      	ldr	r2, [pc, #180]	@ (8006d18 <HAL_DMA_Start_IT+0x490>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d027      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8006d1c <HAL_DMA_Start_IT+0x494>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d022      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a2a      	ldr	r2, [pc, #168]	@ (8006d20 <HAL_DMA_Start_IT+0x498>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d01d      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a28      	ldr	r2, [pc, #160]	@ (8006d24 <HAL_DMA_Start_IT+0x49c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d018      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a27      	ldr	r2, [pc, #156]	@ (8006d28 <HAL_DMA_Start_IT+0x4a0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a25      	ldr	r2, [pc, #148]	@ (8006d2c <HAL_DMA_Start_IT+0x4a4>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00e      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a24      	ldr	r2, [pc, #144]	@ (8006d30 <HAL_DMA_Start_IT+0x4a8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d009      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a22      	ldr	r2, [pc, #136]	@ (8006d34 <HAL_DMA_Start_IT+0x4ac>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x430>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a21      	ldr	r2, [pc, #132]	@ (8006d38 <HAL_DMA_Start_IT+0x4b0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d108      	bne.n	8006cca <HAL_DMA_Start_IT+0x442>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e012      	b.n	8006cf0 <HAL_DMA_Start_IT+0x468>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f042 0201 	orr.w	r2, r2, #1
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e009      	b.n	8006cf0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ce2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40020010 	.word	0x40020010
 8006d00:	40020028 	.word	0x40020028
 8006d04:	40020040 	.word	0x40020040
 8006d08:	40020058 	.word	0x40020058
 8006d0c:	40020070 	.word	0x40020070
 8006d10:	40020088 	.word	0x40020088
 8006d14:	400200a0 	.word	0x400200a0
 8006d18:	400200b8 	.word	0x400200b8
 8006d1c:	40020410 	.word	0x40020410
 8006d20:	40020428 	.word	0x40020428
 8006d24:	40020440 	.word	0x40020440
 8006d28:	40020458 	.word	0x40020458
 8006d2c:	40020470 	.word	0x40020470
 8006d30:	40020488 	.word	0x40020488
 8006d34:	400204a0 	.word	0x400204a0
 8006d38:	400204b8 	.word	0x400204b8
 8006d3c:	58025408 	.word	0x58025408
 8006d40:	5802541c 	.word	0x5802541c
 8006d44:	58025430 	.word	0x58025430
 8006d48:	58025444 	.word	0x58025444
 8006d4c:	58025458 	.word	0x58025458
 8006d50:	5802546c 	.word	0x5802546c
 8006d54:	58025480 	.word	0x58025480
 8006d58:	58025494 	.word	0x58025494

08006d5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d101      	bne.n	8006d6e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e237      	b.n	80071de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d004      	beq.n	8006d84 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2280      	movs	r2, #128	@ 0x80
 8006d7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e22c      	b.n	80071de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a5c      	ldr	r2, [pc, #368]	@ (8006efc <HAL_DMA_Abort_IT+0x1a0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d04a      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a5b      	ldr	r2, [pc, #364]	@ (8006f00 <HAL_DMA_Abort_IT+0x1a4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d045      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a59      	ldr	r2, [pc, #356]	@ (8006f04 <HAL_DMA_Abort_IT+0x1a8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d040      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a58      	ldr	r2, [pc, #352]	@ (8006f08 <HAL_DMA_Abort_IT+0x1ac>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d03b      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a56      	ldr	r2, [pc, #344]	@ (8006f0c <HAL_DMA_Abort_IT+0x1b0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d036      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a55      	ldr	r2, [pc, #340]	@ (8006f10 <HAL_DMA_Abort_IT+0x1b4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d031      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a53      	ldr	r2, [pc, #332]	@ (8006f14 <HAL_DMA_Abort_IT+0x1b8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d02c      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a52      	ldr	r2, [pc, #328]	@ (8006f18 <HAL_DMA_Abort_IT+0x1bc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d027      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a50      	ldr	r2, [pc, #320]	@ (8006f1c <HAL_DMA_Abort_IT+0x1c0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d022      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a4f      	ldr	r2, [pc, #316]	@ (8006f20 <HAL_DMA_Abort_IT+0x1c4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d01d      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a4d      	ldr	r2, [pc, #308]	@ (8006f24 <HAL_DMA_Abort_IT+0x1c8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d018      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a4c      	ldr	r2, [pc, #304]	@ (8006f28 <HAL_DMA_Abort_IT+0x1cc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d013      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a4a      	ldr	r2, [pc, #296]	@ (8006f2c <HAL_DMA_Abort_IT+0x1d0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00e      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a49      	ldr	r2, [pc, #292]	@ (8006f30 <HAL_DMA_Abort_IT+0x1d4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d009      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a47      	ldr	r2, [pc, #284]	@ (8006f34 <HAL_DMA_Abort_IT+0x1d8>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d004      	beq.n	8006e24 <HAL_DMA_Abort_IT+0xc8>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a46      	ldr	r2, [pc, #280]	@ (8006f38 <HAL_DMA_Abort_IT+0x1dc>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d101      	bne.n	8006e28 <HAL_DMA_Abort_IT+0xcc>
 8006e24:	2301      	movs	r3, #1
 8006e26:	e000      	b.n	8006e2a <HAL_DMA_Abort_IT+0xce>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f000 8086 	beq.w	8006f3c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2204      	movs	r2, #4
 8006e34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8006efc <HAL_DMA_Abort_IT+0x1a0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d04a      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2e      	ldr	r2, [pc, #184]	@ (8006f00 <HAL_DMA_Abort_IT+0x1a4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d045      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2c      	ldr	r2, [pc, #176]	@ (8006f04 <HAL_DMA_Abort_IT+0x1a8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d040      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8006f08 <HAL_DMA_Abort_IT+0x1ac>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d03b      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a29      	ldr	r2, [pc, #164]	@ (8006f0c <HAL_DMA_Abort_IT+0x1b0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d036      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a28      	ldr	r2, [pc, #160]	@ (8006f10 <HAL_DMA_Abort_IT+0x1b4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d031      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a26      	ldr	r2, [pc, #152]	@ (8006f14 <HAL_DMA_Abort_IT+0x1b8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d02c      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a25      	ldr	r2, [pc, #148]	@ (8006f18 <HAL_DMA_Abort_IT+0x1bc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d027      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a23      	ldr	r2, [pc, #140]	@ (8006f1c <HAL_DMA_Abort_IT+0x1c0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d022      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a22      	ldr	r2, [pc, #136]	@ (8006f20 <HAL_DMA_Abort_IT+0x1c4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d01d      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a20      	ldr	r2, [pc, #128]	@ (8006f24 <HAL_DMA_Abort_IT+0x1c8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d018      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8006f28 <HAL_DMA_Abort_IT+0x1cc>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d013      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f2c <HAL_DMA_Abort_IT+0x1d0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00e      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8006f30 <HAL_DMA_Abort_IT+0x1d4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d009      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8006f34 <HAL_DMA_Abort_IT+0x1d8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <HAL_DMA_Abort_IT+0x17c>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a19      	ldr	r2, [pc, #100]	@ (8006f38 <HAL_DMA_Abort_IT+0x1dc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d108      	bne.n	8006eea <HAL_DMA_Abort_IT+0x18e>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0201 	bic.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	e178      	b.n	80071dc <HAL_DMA_Abort_IT+0x480>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0201 	bic.w	r2, r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
 8006efa:	e16f      	b.n	80071dc <HAL_DMA_Abort_IT+0x480>
 8006efc:	40020010 	.word	0x40020010
 8006f00:	40020028 	.word	0x40020028
 8006f04:	40020040 	.word	0x40020040
 8006f08:	40020058 	.word	0x40020058
 8006f0c:	40020070 	.word	0x40020070
 8006f10:	40020088 	.word	0x40020088
 8006f14:	400200a0 	.word	0x400200a0
 8006f18:	400200b8 	.word	0x400200b8
 8006f1c:	40020410 	.word	0x40020410
 8006f20:	40020428 	.word	0x40020428
 8006f24:	40020440 	.word	0x40020440
 8006f28:	40020458 	.word	0x40020458
 8006f2c:	40020470 	.word	0x40020470
 8006f30:	40020488 	.word	0x40020488
 8006f34:	400204a0 	.word	0x400204a0
 8006f38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 020e 	bic.w	r2, r2, #14
 8006f4a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a6c      	ldr	r2, [pc, #432]	@ (8007104 <HAL_DMA_Abort_IT+0x3a8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d04a      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a6b      	ldr	r2, [pc, #428]	@ (8007108 <HAL_DMA_Abort_IT+0x3ac>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d045      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a69      	ldr	r2, [pc, #420]	@ (800710c <HAL_DMA_Abort_IT+0x3b0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d040      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a68      	ldr	r2, [pc, #416]	@ (8007110 <HAL_DMA_Abort_IT+0x3b4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d03b      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a66      	ldr	r2, [pc, #408]	@ (8007114 <HAL_DMA_Abort_IT+0x3b8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d036      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a65      	ldr	r2, [pc, #404]	@ (8007118 <HAL_DMA_Abort_IT+0x3bc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d031      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a63      	ldr	r2, [pc, #396]	@ (800711c <HAL_DMA_Abort_IT+0x3c0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d02c      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a62      	ldr	r2, [pc, #392]	@ (8007120 <HAL_DMA_Abort_IT+0x3c4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d027      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a60      	ldr	r2, [pc, #384]	@ (8007124 <HAL_DMA_Abort_IT+0x3c8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d022      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a5f      	ldr	r2, [pc, #380]	@ (8007128 <HAL_DMA_Abort_IT+0x3cc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d01d      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a5d      	ldr	r2, [pc, #372]	@ (800712c <HAL_DMA_Abort_IT+0x3d0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d018      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8007130 <HAL_DMA_Abort_IT+0x3d4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d013      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a5a      	ldr	r2, [pc, #360]	@ (8007134 <HAL_DMA_Abort_IT+0x3d8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00e      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a59      	ldr	r2, [pc, #356]	@ (8007138 <HAL_DMA_Abort_IT+0x3dc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d009      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a57      	ldr	r2, [pc, #348]	@ (800713c <HAL_DMA_Abort_IT+0x3e0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d004      	beq.n	8006fec <HAL_DMA_Abort_IT+0x290>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a56      	ldr	r2, [pc, #344]	@ (8007140 <HAL_DMA_Abort_IT+0x3e4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d108      	bne.n	8006ffe <HAL_DMA_Abort_IT+0x2a2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0201 	bic.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e007      	b.n	800700e <HAL_DMA_Abort_IT+0x2b2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0201 	bic.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a3c      	ldr	r2, [pc, #240]	@ (8007104 <HAL_DMA_Abort_IT+0x3a8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d072      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a3a      	ldr	r2, [pc, #232]	@ (8007108 <HAL_DMA_Abort_IT+0x3ac>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d06d      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a39      	ldr	r2, [pc, #228]	@ (800710c <HAL_DMA_Abort_IT+0x3b0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d068      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a37      	ldr	r2, [pc, #220]	@ (8007110 <HAL_DMA_Abort_IT+0x3b4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d063      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a36      	ldr	r2, [pc, #216]	@ (8007114 <HAL_DMA_Abort_IT+0x3b8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d05e      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a34      	ldr	r2, [pc, #208]	@ (8007118 <HAL_DMA_Abort_IT+0x3bc>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d059      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a33      	ldr	r2, [pc, #204]	@ (800711c <HAL_DMA_Abort_IT+0x3c0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d054      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a31      	ldr	r2, [pc, #196]	@ (8007120 <HAL_DMA_Abort_IT+0x3c4>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d04f      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a30      	ldr	r2, [pc, #192]	@ (8007124 <HAL_DMA_Abort_IT+0x3c8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d04a      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2e      	ldr	r2, [pc, #184]	@ (8007128 <HAL_DMA_Abort_IT+0x3cc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d045      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a2d      	ldr	r2, [pc, #180]	@ (800712c <HAL_DMA_Abort_IT+0x3d0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d040      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a2b      	ldr	r2, [pc, #172]	@ (8007130 <HAL_DMA_Abort_IT+0x3d4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d03b      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a2a      	ldr	r2, [pc, #168]	@ (8007134 <HAL_DMA_Abort_IT+0x3d8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d036      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a28      	ldr	r2, [pc, #160]	@ (8007138 <HAL_DMA_Abort_IT+0x3dc>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d031      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a27      	ldr	r2, [pc, #156]	@ (800713c <HAL_DMA_Abort_IT+0x3e0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d02c      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a25      	ldr	r2, [pc, #148]	@ (8007140 <HAL_DMA_Abort_IT+0x3e4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d027      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a24      	ldr	r2, [pc, #144]	@ (8007144 <HAL_DMA_Abort_IT+0x3e8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d022      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a22      	ldr	r2, [pc, #136]	@ (8007148 <HAL_DMA_Abort_IT+0x3ec>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d01d      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a21      	ldr	r2, [pc, #132]	@ (800714c <HAL_DMA_Abort_IT+0x3f0>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d018      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007150 <HAL_DMA_Abort_IT+0x3f4>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d013      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1e      	ldr	r2, [pc, #120]	@ (8007154 <HAL_DMA_Abort_IT+0x3f8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00e      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007158 <HAL_DMA_Abort_IT+0x3fc>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d009      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a1b      	ldr	r2, [pc, #108]	@ (800715c <HAL_DMA_Abort_IT+0x400>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <HAL_DMA_Abort_IT+0x3a2>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a19      	ldr	r2, [pc, #100]	@ (8007160 <HAL_DMA_Abort_IT+0x404>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d132      	bne.n	8007164 <HAL_DMA_Abort_IT+0x408>
 80070fe:	2301      	movs	r3, #1
 8007100:	e031      	b.n	8007166 <HAL_DMA_Abort_IT+0x40a>
 8007102:	bf00      	nop
 8007104:	40020010 	.word	0x40020010
 8007108:	40020028 	.word	0x40020028
 800710c:	40020040 	.word	0x40020040
 8007110:	40020058 	.word	0x40020058
 8007114:	40020070 	.word	0x40020070
 8007118:	40020088 	.word	0x40020088
 800711c:	400200a0 	.word	0x400200a0
 8007120:	400200b8 	.word	0x400200b8
 8007124:	40020410 	.word	0x40020410
 8007128:	40020428 	.word	0x40020428
 800712c:	40020440 	.word	0x40020440
 8007130:	40020458 	.word	0x40020458
 8007134:	40020470 	.word	0x40020470
 8007138:	40020488 	.word	0x40020488
 800713c:	400204a0 	.word	0x400204a0
 8007140:	400204b8 	.word	0x400204b8
 8007144:	58025408 	.word	0x58025408
 8007148:	5802541c 	.word	0x5802541c
 800714c:	58025430 	.word	0x58025430
 8007150:	58025444 	.word	0x58025444
 8007154:	58025458 	.word	0x58025458
 8007158:	5802546c 	.word	0x5802546c
 800715c:	58025480 	.word	0x58025480
 8007160:	58025494 	.word	0x58025494
 8007164:	2300      	movs	r3, #0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d028      	beq.n	80071bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007178:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	2201      	movs	r2, #1
 800718a:	409a      	lsls	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007198:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00c      	beq.n	80071bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80071ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop

080071e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	@ 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80071f4:	4b67      	ldr	r3, [pc, #412]	@ (8007394 <HAL_DMA_IRQHandler+0x1ac>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a67      	ldr	r2, [pc, #412]	@ (8007398 <HAL_DMA_IRQHandler+0x1b0>)
 80071fa:	fba2 2303 	umull	r2, r3, r2, r3
 80071fe:	0a9b      	lsrs	r3, r3, #10
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007206:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a5f      	ldr	r2, [pc, #380]	@ (800739c <HAL_DMA_IRQHandler+0x1b4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d04a      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a5d      	ldr	r2, [pc, #372]	@ (80073a0 <HAL_DMA_IRQHandler+0x1b8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d045      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a5c      	ldr	r2, [pc, #368]	@ (80073a4 <HAL_DMA_IRQHandler+0x1bc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d040      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a5a      	ldr	r2, [pc, #360]	@ (80073a8 <HAL_DMA_IRQHandler+0x1c0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d03b      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a59      	ldr	r2, [pc, #356]	@ (80073ac <HAL_DMA_IRQHandler+0x1c4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d036      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a57      	ldr	r2, [pc, #348]	@ (80073b0 <HAL_DMA_IRQHandler+0x1c8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d031      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a56      	ldr	r2, [pc, #344]	@ (80073b4 <HAL_DMA_IRQHandler+0x1cc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d02c      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a54      	ldr	r2, [pc, #336]	@ (80073b8 <HAL_DMA_IRQHandler+0x1d0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d027      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a53      	ldr	r2, [pc, #332]	@ (80073bc <HAL_DMA_IRQHandler+0x1d4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d022      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a51      	ldr	r2, [pc, #324]	@ (80073c0 <HAL_DMA_IRQHandler+0x1d8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d01d      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a50      	ldr	r2, [pc, #320]	@ (80073c4 <HAL_DMA_IRQHandler+0x1dc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d018      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a4e      	ldr	r2, [pc, #312]	@ (80073c8 <HAL_DMA_IRQHandler+0x1e0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d013      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a4d      	ldr	r2, [pc, #308]	@ (80073cc <HAL_DMA_IRQHandler+0x1e4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00e      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a4b      	ldr	r2, [pc, #300]	@ (80073d0 <HAL_DMA_IRQHandler+0x1e8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d009      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a4a      	ldr	r2, [pc, #296]	@ (80073d4 <HAL_DMA_IRQHandler+0x1ec>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_DMA_IRQHandler+0xd2>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a48      	ldr	r2, [pc, #288]	@ (80073d8 <HAL_DMA_IRQHandler+0x1f0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d101      	bne.n	80072be <HAL_DMA_IRQHandler+0xd6>
 80072ba:	2301      	movs	r3, #1
 80072bc:	e000      	b.n	80072c0 <HAL_DMA_IRQHandler+0xd8>
 80072be:	2300      	movs	r3, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 842b 	beq.w	8007b1c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2208      	movs	r2, #8
 80072d0:	409a      	lsls	r2, r3
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	4013      	ands	r3, r2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80a2 	beq.w	8007420 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a2e      	ldr	r2, [pc, #184]	@ (800739c <HAL_DMA_IRQHandler+0x1b4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d04a      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a2d      	ldr	r2, [pc, #180]	@ (80073a0 <HAL_DMA_IRQHandler+0x1b8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d045      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a2b      	ldr	r2, [pc, #172]	@ (80073a4 <HAL_DMA_IRQHandler+0x1bc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d040      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a2a      	ldr	r2, [pc, #168]	@ (80073a8 <HAL_DMA_IRQHandler+0x1c0>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d03b      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a28      	ldr	r2, [pc, #160]	@ (80073ac <HAL_DMA_IRQHandler+0x1c4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d036      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a27      	ldr	r2, [pc, #156]	@ (80073b0 <HAL_DMA_IRQHandler+0x1c8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d031      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a25      	ldr	r2, [pc, #148]	@ (80073b4 <HAL_DMA_IRQHandler+0x1cc>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d02c      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a24      	ldr	r2, [pc, #144]	@ (80073b8 <HAL_DMA_IRQHandler+0x1d0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d027      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a22      	ldr	r2, [pc, #136]	@ (80073bc <HAL_DMA_IRQHandler+0x1d4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d022      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a21      	ldr	r2, [pc, #132]	@ (80073c0 <HAL_DMA_IRQHandler+0x1d8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d01d      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1f      	ldr	r2, [pc, #124]	@ (80073c4 <HAL_DMA_IRQHandler+0x1dc>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d018      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1e      	ldr	r2, [pc, #120]	@ (80073c8 <HAL_DMA_IRQHandler+0x1e0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1c      	ldr	r2, [pc, #112]	@ (80073cc <HAL_DMA_IRQHandler+0x1e4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1b      	ldr	r2, [pc, #108]	@ (80073d0 <HAL_DMA_IRQHandler+0x1e8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a19      	ldr	r2, [pc, #100]	@ (80073d4 <HAL_DMA_IRQHandler+0x1ec>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <HAL_DMA_IRQHandler+0x194>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a18      	ldr	r2, [pc, #96]	@ (80073d8 <HAL_DMA_IRQHandler+0x1f0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d12f      	bne.n	80073dc <HAL_DMA_IRQHandler+0x1f4>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	bf14      	ite	ne
 800738a:	2301      	movne	r3, #1
 800738c:	2300      	moveq	r3, #0
 800738e:	b2db      	uxtb	r3, r3
 8007390:	e02e      	b.n	80073f0 <HAL_DMA_IRQHandler+0x208>
 8007392:	bf00      	nop
 8007394:	2400000c 	.word	0x2400000c
 8007398:	1b4e81b5 	.word	0x1b4e81b5
 800739c:	40020010 	.word	0x40020010
 80073a0:	40020028 	.word	0x40020028
 80073a4:	40020040 	.word	0x40020040
 80073a8:	40020058 	.word	0x40020058
 80073ac:	40020070 	.word	0x40020070
 80073b0:	40020088 	.word	0x40020088
 80073b4:	400200a0 	.word	0x400200a0
 80073b8:	400200b8 	.word	0x400200b8
 80073bc:	40020410 	.word	0x40020410
 80073c0:	40020428 	.word	0x40020428
 80073c4:	40020440 	.word	0x40020440
 80073c8:	40020458 	.word	0x40020458
 80073cc:	40020470 	.word	0x40020470
 80073d0:	40020488 	.word	0x40020488
 80073d4:	400204a0 	.word	0x400204a0
 80073d8:	400204b8 	.word	0x400204b8
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0308 	and.w	r3, r3, #8
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bf14      	ite	ne
 80073ea:	2301      	movne	r3, #1
 80073ec:	2300      	moveq	r3, #0
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d015      	beq.n	8007420 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0204 	bic.w	r2, r2, #4
 8007402:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007408:	f003 031f 	and.w	r3, r3, #31
 800740c:	2208      	movs	r2, #8
 800740e:	409a      	lsls	r2, r3
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007418:	f043 0201 	orr.w	r2, r3, #1
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007424:	f003 031f 	and.w	r3, r3, #31
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	fa22 f303 	lsr.w	r3, r2, r3
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d06e      	beq.n	8007514 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a69      	ldr	r2, [pc, #420]	@ (80075e0 <HAL_DMA_IRQHandler+0x3f8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d04a      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a67      	ldr	r2, [pc, #412]	@ (80075e4 <HAL_DMA_IRQHandler+0x3fc>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d045      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a66      	ldr	r2, [pc, #408]	@ (80075e8 <HAL_DMA_IRQHandler+0x400>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d040      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a64      	ldr	r2, [pc, #400]	@ (80075ec <HAL_DMA_IRQHandler+0x404>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d03b      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a63      	ldr	r2, [pc, #396]	@ (80075f0 <HAL_DMA_IRQHandler+0x408>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d036      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a61      	ldr	r2, [pc, #388]	@ (80075f4 <HAL_DMA_IRQHandler+0x40c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d031      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a60      	ldr	r2, [pc, #384]	@ (80075f8 <HAL_DMA_IRQHandler+0x410>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d02c      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a5e      	ldr	r2, [pc, #376]	@ (80075fc <HAL_DMA_IRQHandler+0x414>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d027      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a5d      	ldr	r2, [pc, #372]	@ (8007600 <HAL_DMA_IRQHandler+0x418>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d022      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a5b      	ldr	r2, [pc, #364]	@ (8007604 <HAL_DMA_IRQHandler+0x41c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01d      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a5a      	ldr	r2, [pc, #360]	@ (8007608 <HAL_DMA_IRQHandler+0x420>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d018      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a58      	ldr	r2, [pc, #352]	@ (800760c <HAL_DMA_IRQHandler+0x424>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d013      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a57      	ldr	r2, [pc, #348]	@ (8007610 <HAL_DMA_IRQHandler+0x428>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d00e      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a55      	ldr	r2, [pc, #340]	@ (8007614 <HAL_DMA_IRQHandler+0x42c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d009      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a54      	ldr	r2, [pc, #336]	@ (8007618 <HAL_DMA_IRQHandler+0x430>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d004      	beq.n	80074d6 <HAL_DMA_IRQHandler+0x2ee>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a52      	ldr	r2, [pc, #328]	@ (800761c <HAL_DMA_IRQHandler+0x434>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d10a      	bne.n	80074ec <HAL_DMA_IRQHandler+0x304>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bf14      	ite	ne
 80074e4:	2301      	movne	r3, #1
 80074e6:	2300      	moveq	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	e003      	b.n	80074f4 <HAL_DMA_IRQHandler+0x30c>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00d      	beq.n	8007514 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	2201      	movs	r2, #1
 8007502:	409a      	lsls	r2, r3
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800750c:	f043 0202 	orr.w	r2, r3, #2
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	2204      	movs	r2, #4
 800751e:	409a      	lsls	r2, r3
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	4013      	ands	r3, r2
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 808f 	beq.w	8007648 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a2c      	ldr	r2, [pc, #176]	@ (80075e0 <HAL_DMA_IRQHandler+0x3f8>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d04a      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2a      	ldr	r2, [pc, #168]	@ (80075e4 <HAL_DMA_IRQHandler+0x3fc>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d045      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a29      	ldr	r2, [pc, #164]	@ (80075e8 <HAL_DMA_IRQHandler+0x400>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d040      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a27      	ldr	r2, [pc, #156]	@ (80075ec <HAL_DMA_IRQHandler+0x404>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d03b      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a26      	ldr	r2, [pc, #152]	@ (80075f0 <HAL_DMA_IRQHandler+0x408>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d036      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a24      	ldr	r2, [pc, #144]	@ (80075f4 <HAL_DMA_IRQHandler+0x40c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d031      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a23      	ldr	r2, [pc, #140]	@ (80075f8 <HAL_DMA_IRQHandler+0x410>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d02c      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a21      	ldr	r2, [pc, #132]	@ (80075fc <HAL_DMA_IRQHandler+0x414>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d027      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a20      	ldr	r2, [pc, #128]	@ (8007600 <HAL_DMA_IRQHandler+0x418>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d022      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <HAL_DMA_IRQHandler+0x41c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d01d      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1d      	ldr	r2, [pc, #116]	@ (8007608 <HAL_DMA_IRQHandler+0x420>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d018      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1b      	ldr	r2, [pc, #108]	@ (800760c <HAL_DMA_IRQHandler+0x424>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d013      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007610 <HAL_DMA_IRQHandler+0x428>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00e      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a18      	ldr	r2, [pc, #96]	@ (8007614 <HAL_DMA_IRQHandler+0x42c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d009      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a17      	ldr	r2, [pc, #92]	@ (8007618 <HAL_DMA_IRQHandler+0x430>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d004      	beq.n	80075ca <HAL_DMA_IRQHandler+0x3e2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a15      	ldr	r2, [pc, #84]	@ (800761c <HAL_DMA_IRQHandler+0x434>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d12a      	bne.n	8007620 <HAL_DMA_IRQHandler+0x438>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	bf14      	ite	ne
 80075d8:	2301      	movne	r3, #1
 80075da:	2300      	moveq	r3, #0
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	e023      	b.n	8007628 <HAL_DMA_IRQHandler+0x440>
 80075e0:	40020010 	.word	0x40020010
 80075e4:	40020028 	.word	0x40020028
 80075e8:	40020040 	.word	0x40020040
 80075ec:	40020058 	.word	0x40020058
 80075f0:	40020070 	.word	0x40020070
 80075f4:	40020088 	.word	0x40020088
 80075f8:	400200a0 	.word	0x400200a0
 80075fc:	400200b8 	.word	0x400200b8
 8007600:	40020410 	.word	0x40020410
 8007604:	40020428 	.word	0x40020428
 8007608:	40020440 	.word	0x40020440
 800760c:	40020458 	.word	0x40020458
 8007610:	40020470 	.word	0x40020470
 8007614:	40020488 	.word	0x40020488
 8007618:	400204a0 	.word	0x400204a0
 800761c:	400204b8 	.word	0x400204b8
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2300      	movs	r3, #0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00d      	beq.n	8007648 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007630:	f003 031f 	and.w	r3, r3, #31
 8007634:	2204      	movs	r2, #4
 8007636:	409a      	lsls	r2, r3
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007640:	f043 0204 	orr.w	r2, r3, #4
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	2210      	movs	r2, #16
 8007652:	409a      	lsls	r2, r3
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	4013      	ands	r3, r2
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80a6 	beq.w	80077aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a85      	ldr	r2, [pc, #532]	@ (8007878 <HAL_DMA_IRQHandler+0x690>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d04a      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a83      	ldr	r2, [pc, #524]	@ (800787c <HAL_DMA_IRQHandler+0x694>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d045      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a82      	ldr	r2, [pc, #520]	@ (8007880 <HAL_DMA_IRQHandler+0x698>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d040      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a80      	ldr	r2, [pc, #512]	@ (8007884 <HAL_DMA_IRQHandler+0x69c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d03b      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a7f      	ldr	r2, [pc, #508]	@ (8007888 <HAL_DMA_IRQHandler+0x6a0>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d036      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a7d      	ldr	r2, [pc, #500]	@ (800788c <HAL_DMA_IRQHandler+0x6a4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d031      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a7c      	ldr	r2, [pc, #496]	@ (8007890 <HAL_DMA_IRQHandler+0x6a8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d02c      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a7a      	ldr	r2, [pc, #488]	@ (8007894 <HAL_DMA_IRQHandler+0x6ac>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d027      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a79      	ldr	r2, [pc, #484]	@ (8007898 <HAL_DMA_IRQHandler+0x6b0>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d022      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a77      	ldr	r2, [pc, #476]	@ (800789c <HAL_DMA_IRQHandler+0x6b4>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d01d      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a76      	ldr	r2, [pc, #472]	@ (80078a0 <HAL_DMA_IRQHandler+0x6b8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d018      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a74      	ldr	r2, [pc, #464]	@ (80078a4 <HAL_DMA_IRQHandler+0x6bc>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d013      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a73      	ldr	r2, [pc, #460]	@ (80078a8 <HAL_DMA_IRQHandler+0x6c0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00e      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a71      	ldr	r2, [pc, #452]	@ (80078ac <HAL_DMA_IRQHandler+0x6c4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d009      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a70      	ldr	r2, [pc, #448]	@ (80078b0 <HAL_DMA_IRQHandler+0x6c8>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d004      	beq.n	80076fe <HAL_DMA_IRQHandler+0x516>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a6e      	ldr	r2, [pc, #440]	@ (80078b4 <HAL_DMA_IRQHandler+0x6cc>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d10a      	bne.n	8007714 <HAL_DMA_IRQHandler+0x52c>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	bf14      	ite	ne
 800770c:	2301      	movne	r3, #1
 800770e:	2300      	moveq	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	e009      	b.n	8007728 <HAL_DMA_IRQHandler+0x540>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0304 	and.w	r3, r3, #4
 800771e:	2b00      	cmp	r3, #0
 8007720:	bf14      	ite	ne
 8007722:	2301      	movne	r3, #1
 8007724:	2300      	moveq	r3, #0
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d03e      	beq.n	80077aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2210      	movs	r2, #16
 8007736:	409a      	lsls	r2, r3
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d018      	beq.n	800777c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d108      	bne.n	800776a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d024      	beq.n	80077aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	4798      	blx	r3
 8007768:	e01f      	b.n	80077aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800776e:	2b00      	cmp	r3, #0
 8007770:	d01b      	beq.n	80077aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
 800777a:	e016      	b.n	80077aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007786:	2b00      	cmp	r3, #0
 8007788:	d107      	bne.n	800779a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0208 	bic.w	r2, r2, #8
 8007798:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ae:	f003 031f 	and.w	r3, r3, #31
 80077b2:	2220      	movs	r2, #32
 80077b4:	409a      	lsls	r2, r3
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	4013      	ands	r3, r2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 8110 	beq.w	80079e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a2c      	ldr	r2, [pc, #176]	@ (8007878 <HAL_DMA_IRQHandler+0x690>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d04a      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a2b      	ldr	r2, [pc, #172]	@ (800787c <HAL_DMA_IRQHandler+0x694>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d045      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a29      	ldr	r2, [pc, #164]	@ (8007880 <HAL_DMA_IRQHandler+0x698>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d040      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a28      	ldr	r2, [pc, #160]	@ (8007884 <HAL_DMA_IRQHandler+0x69c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d03b      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a26      	ldr	r2, [pc, #152]	@ (8007888 <HAL_DMA_IRQHandler+0x6a0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d036      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a25      	ldr	r2, [pc, #148]	@ (800788c <HAL_DMA_IRQHandler+0x6a4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d031      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a23      	ldr	r2, [pc, #140]	@ (8007890 <HAL_DMA_IRQHandler+0x6a8>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d02c      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a22      	ldr	r2, [pc, #136]	@ (8007894 <HAL_DMA_IRQHandler+0x6ac>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d027      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a20      	ldr	r2, [pc, #128]	@ (8007898 <HAL_DMA_IRQHandler+0x6b0>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d022      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a1f      	ldr	r2, [pc, #124]	@ (800789c <HAL_DMA_IRQHandler+0x6b4>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d01d      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a1d      	ldr	r2, [pc, #116]	@ (80078a0 <HAL_DMA_IRQHandler+0x6b8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d018      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a1c      	ldr	r2, [pc, #112]	@ (80078a4 <HAL_DMA_IRQHandler+0x6bc>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d013      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1a      	ldr	r2, [pc, #104]	@ (80078a8 <HAL_DMA_IRQHandler+0x6c0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00e      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a19      	ldr	r2, [pc, #100]	@ (80078ac <HAL_DMA_IRQHandler+0x6c4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d009      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a17      	ldr	r2, [pc, #92]	@ (80078b0 <HAL_DMA_IRQHandler+0x6c8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d004      	beq.n	8007860 <HAL_DMA_IRQHandler+0x678>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a16      	ldr	r2, [pc, #88]	@ (80078b4 <HAL_DMA_IRQHandler+0x6cc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d12b      	bne.n	80078b8 <HAL_DMA_IRQHandler+0x6d0>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0310 	and.w	r3, r3, #16
 800786a:	2b00      	cmp	r3, #0
 800786c:	bf14      	ite	ne
 800786e:	2301      	movne	r3, #1
 8007870:	2300      	moveq	r3, #0
 8007872:	b2db      	uxtb	r3, r3
 8007874:	e02a      	b.n	80078cc <HAL_DMA_IRQHandler+0x6e4>
 8007876:	bf00      	nop
 8007878:	40020010 	.word	0x40020010
 800787c:	40020028 	.word	0x40020028
 8007880:	40020040 	.word	0x40020040
 8007884:	40020058 	.word	0x40020058
 8007888:	40020070 	.word	0x40020070
 800788c:	40020088 	.word	0x40020088
 8007890:	400200a0 	.word	0x400200a0
 8007894:	400200b8 	.word	0x400200b8
 8007898:	40020410 	.word	0x40020410
 800789c:	40020428 	.word	0x40020428
 80078a0:	40020440 	.word	0x40020440
 80078a4:	40020458 	.word	0x40020458
 80078a8:	40020470 	.word	0x40020470
 80078ac:	40020488 	.word	0x40020488
 80078b0:	400204a0 	.word	0x400204a0
 80078b4:	400204b8 	.word	0x400204b8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	bf14      	ite	ne
 80078c6:	2301      	movne	r3, #1
 80078c8:	2300      	moveq	r3, #0
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8087 	beq.w	80079e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078d6:	f003 031f 	and.w	r3, r3, #31
 80078da:	2220      	movs	r2, #32
 80078dc:	409a      	lsls	r2, r3
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d139      	bne.n	8007962 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0216 	bic.w	r2, r2, #22
 80078fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800790c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d103      	bne.n	800791e <HAL_DMA_IRQHandler+0x736>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0208 	bic.w	r2, r2, #8
 800792c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007932:	f003 031f 	and.w	r3, r3, #31
 8007936:	223f      	movs	r2, #63	@ 0x3f
 8007938:	409a      	lsls	r2, r3
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 834a 	beq.w	8007fec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	4798      	blx	r3
          }
          return;
 8007960:	e344      	b.n	8007fec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d018      	beq.n	80079a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d108      	bne.n	8007990 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007982:	2b00      	cmp	r3, #0
 8007984:	d02c      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	4798      	blx	r3
 800798e:	e027      	b.n	80079e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007994:	2b00      	cmp	r3, #0
 8007996:	d023      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	4798      	blx	r3
 80079a0:	e01e      	b.n	80079e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10f      	bne.n	80079d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0210 	bic.w	r2, r2, #16
 80079be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d003      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8306 	beq.w	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 8088 	beq.w	8007b08 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2204      	movs	r2, #4
 80079fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a7a      	ldr	r2, [pc, #488]	@ (8007bf0 <HAL_DMA_IRQHandler+0xa08>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d04a      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a79      	ldr	r2, [pc, #484]	@ (8007bf4 <HAL_DMA_IRQHandler+0xa0c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d045      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a77      	ldr	r2, [pc, #476]	@ (8007bf8 <HAL_DMA_IRQHandler+0xa10>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d040      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a76      	ldr	r2, [pc, #472]	@ (8007bfc <HAL_DMA_IRQHandler+0xa14>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d03b      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a74      	ldr	r2, [pc, #464]	@ (8007c00 <HAL_DMA_IRQHandler+0xa18>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d036      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a73      	ldr	r2, [pc, #460]	@ (8007c04 <HAL_DMA_IRQHandler+0xa1c>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d031      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a71      	ldr	r2, [pc, #452]	@ (8007c08 <HAL_DMA_IRQHandler+0xa20>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d02c      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a70      	ldr	r2, [pc, #448]	@ (8007c0c <HAL_DMA_IRQHandler+0xa24>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d027      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a6e      	ldr	r2, [pc, #440]	@ (8007c10 <HAL_DMA_IRQHandler+0xa28>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d022      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a6d      	ldr	r2, [pc, #436]	@ (8007c14 <HAL_DMA_IRQHandler+0xa2c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d01d      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a6b      	ldr	r2, [pc, #428]	@ (8007c18 <HAL_DMA_IRQHandler+0xa30>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d018      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a6a      	ldr	r2, [pc, #424]	@ (8007c1c <HAL_DMA_IRQHandler+0xa34>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d013      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a68      	ldr	r2, [pc, #416]	@ (8007c20 <HAL_DMA_IRQHandler+0xa38>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d00e      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a67      	ldr	r2, [pc, #412]	@ (8007c24 <HAL_DMA_IRQHandler+0xa3c>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d009      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a65      	ldr	r2, [pc, #404]	@ (8007c28 <HAL_DMA_IRQHandler+0xa40>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d004      	beq.n	8007aa0 <HAL_DMA_IRQHandler+0x8b8>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a64      	ldr	r2, [pc, #400]	@ (8007c2c <HAL_DMA_IRQHandler+0xa44>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d108      	bne.n	8007ab2 <HAL_DMA_IRQHandler+0x8ca>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0201 	bic.w	r2, r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	e007      	b.n	8007ac2 <HAL_DMA_IRQHandler+0x8da>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0201 	bic.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d307      	bcc.n	8007ade <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1f2      	bne.n	8007ac2 <HAL_DMA_IRQHandler+0x8da>
 8007adc:	e000      	b.n	8007ae0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007ade:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d004      	beq.n	8007af8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2203      	movs	r2, #3
 8007af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8007af6:	e003      	b.n	8007b00 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8272 	beq.w	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
 8007b1a:	e26c      	b.n	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a43      	ldr	r2, [pc, #268]	@ (8007c30 <HAL_DMA_IRQHandler+0xa48>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d022      	beq.n	8007b6c <HAL_DMA_IRQHandler+0x984>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a42      	ldr	r2, [pc, #264]	@ (8007c34 <HAL_DMA_IRQHandler+0xa4c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d01d      	beq.n	8007b6c <HAL_DMA_IRQHandler+0x984>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a40      	ldr	r2, [pc, #256]	@ (8007c38 <HAL_DMA_IRQHandler+0xa50>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d018      	beq.n	8007b6c <HAL_DMA_IRQHandler+0x984>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a3f      	ldr	r2, [pc, #252]	@ (8007c3c <HAL_DMA_IRQHandler+0xa54>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d013      	beq.n	8007b6c <HAL_DMA_IRQHandler+0x984>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a3d      	ldr	r2, [pc, #244]	@ (8007c40 <HAL_DMA_IRQHandler+0xa58>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d00e      	beq.n	8007b6c <HAL_DMA_IRQHandler+0x984>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a3c      	ldr	r2, [pc, #240]	@ (8007c44 <HAL_DMA_IRQHandler+0xa5c>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d009      	beq.n	8007b6c <HAL_DMA_IRQHandler+0x984>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8007c48 <HAL_DMA_IRQHandler+0xa60>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d004      	beq.n	8007b6c <HAL_DMA_IRQHandler+0x984>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a39      	ldr	r2, [pc, #228]	@ (8007c4c <HAL_DMA_IRQHandler+0xa64>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d101      	bne.n	8007b70 <HAL_DMA_IRQHandler+0x988>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <HAL_DMA_IRQHandler+0x98a>
 8007b70:	2300      	movs	r3, #0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 823f 	beq.w	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b84:	f003 031f 	and.w	r3, r3, #31
 8007b88:	2204      	movs	r2, #4
 8007b8a:	409a      	lsls	r2, r3
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 80cd 	beq.w	8007d30 <HAL_DMA_IRQHandler+0xb48>
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 80c7 	beq.w	8007d30 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ba6:	f003 031f 	and.w	r3, r3, #31
 8007baa:	2204      	movs	r2, #4
 8007bac:	409a      	lsls	r2, r3
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d049      	beq.n	8007c50 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 8210 	beq.w	8007ff0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bd8:	e20a      	b.n	8007ff0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8206 	beq.w	8007ff0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bec:	e200      	b.n	8007ff0 <HAL_DMA_IRQHandler+0xe08>
 8007bee:	bf00      	nop
 8007bf0:	40020010 	.word	0x40020010
 8007bf4:	40020028 	.word	0x40020028
 8007bf8:	40020040 	.word	0x40020040
 8007bfc:	40020058 	.word	0x40020058
 8007c00:	40020070 	.word	0x40020070
 8007c04:	40020088 	.word	0x40020088
 8007c08:	400200a0 	.word	0x400200a0
 8007c0c:	400200b8 	.word	0x400200b8
 8007c10:	40020410 	.word	0x40020410
 8007c14:	40020428 	.word	0x40020428
 8007c18:	40020440 	.word	0x40020440
 8007c1c:	40020458 	.word	0x40020458
 8007c20:	40020470 	.word	0x40020470
 8007c24:	40020488 	.word	0x40020488
 8007c28:	400204a0 	.word	0x400204a0
 8007c2c:	400204b8 	.word	0x400204b8
 8007c30:	58025408 	.word	0x58025408
 8007c34:	5802541c 	.word	0x5802541c
 8007c38:	58025430 	.word	0x58025430
 8007c3c:	58025444 	.word	0x58025444
 8007c40:	58025458 	.word	0x58025458
 8007c44:	5802546c 	.word	0x5802546c
 8007c48:	58025480 	.word	0x58025480
 8007c4c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d160      	bne.n	8007d1c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a7f      	ldr	r2, [pc, #508]	@ (8007e5c <HAL_DMA_IRQHandler+0xc74>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d04a      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a7d      	ldr	r2, [pc, #500]	@ (8007e60 <HAL_DMA_IRQHandler+0xc78>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d045      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a7c      	ldr	r2, [pc, #496]	@ (8007e64 <HAL_DMA_IRQHandler+0xc7c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d040      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a7a      	ldr	r2, [pc, #488]	@ (8007e68 <HAL_DMA_IRQHandler+0xc80>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d03b      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a79      	ldr	r2, [pc, #484]	@ (8007e6c <HAL_DMA_IRQHandler+0xc84>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d036      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a77      	ldr	r2, [pc, #476]	@ (8007e70 <HAL_DMA_IRQHandler+0xc88>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d031      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a76      	ldr	r2, [pc, #472]	@ (8007e74 <HAL_DMA_IRQHandler+0xc8c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d02c      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a74      	ldr	r2, [pc, #464]	@ (8007e78 <HAL_DMA_IRQHandler+0xc90>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d027      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a73      	ldr	r2, [pc, #460]	@ (8007e7c <HAL_DMA_IRQHandler+0xc94>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d022      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a71      	ldr	r2, [pc, #452]	@ (8007e80 <HAL_DMA_IRQHandler+0xc98>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d01d      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a70      	ldr	r2, [pc, #448]	@ (8007e84 <HAL_DMA_IRQHandler+0xc9c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d018      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8007e88 <HAL_DMA_IRQHandler+0xca0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d013      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a6d      	ldr	r2, [pc, #436]	@ (8007e8c <HAL_DMA_IRQHandler+0xca4>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00e      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a6b      	ldr	r2, [pc, #428]	@ (8007e90 <HAL_DMA_IRQHandler+0xca8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d009      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a6a      	ldr	r2, [pc, #424]	@ (8007e94 <HAL_DMA_IRQHandler+0xcac>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d004      	beq.n	8007cfa <HAL_DMA_IRQHandler+0xb12>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a68      	ldr	r2, [pc, #416]	@ (8007e98 <HAL_DMA_IRQHandler+0xcb0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d108      	bne.n	8007d0c <HAL_DMA_IRQHandler+0xb24>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 0208 	bic.w	r2, r2, #8
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	e007      	b.n	8007d1c <HAL_DMA_IRQHandler+0xb34>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0204 	bic.w	r2, r2, #4
 8007d1a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8165 	beq.w	8007ff0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d2e:	e15f      	b.n	8007ff0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d34:	f003 031f 	and.w	r3, r3, #31
 8007d38:	2202      	movs	r2, #2
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80c5 	beq.w	8007ed0 <HAL_DMA_IRQHandler+0xce8>
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80bf 	beq.w	8007ed0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	409a      	lsls	r2, r3
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d018      	beq.n	8007d9e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 813a 	beq.w	8007ff4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d88:	e134      	b.n	8007ff4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 8130 	beq.w	8007ff4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d9c:	e12a      	b.n	8007ff4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f040 8089 	bne.w	8007ebc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a2b      	ldr	r2, [pc, #172]	@ (8007e5c <HAL_DMA_IRQHandler+0xc74>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d04a      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a29      	ldr	r2, [pc, #164]	@ (8007e60 <HAL_DMA_IRQHandler+0xc78>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d045      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a28      	ldr	r2, [pc, #160]	@ (8007e64 <HAL_DMA_IRQHandler+0xc7c>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d040      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a26      	ldr	r2, [pc, #152]	@ (8007e68 <HAL_DMA_IRQHandler+0xc80>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d03b      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a25      	ldr	r2, [pc, #148]	@ (8007e6c <HAL_DMA_IRQHandler+0xc84>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d036      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a23      	ldr	r2, [pc, #140]	@ (8007e70 <HAL_DMA_IRQHandler+0xc88>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d031      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a22      	ldr	r2, [pc, #136]	@ (8007e74 <HAL_DMA_IRQHandler+0xc8c>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d02c      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a20      	ldr	r2, [pc, #128]	@ (8007e78 <HAL_DMA_IRQHandler+0xc90>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d027      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007e7c <HAL_DMA_IRQHandler+0xc94>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d022      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <HAL_DMA_IRQHandler+0xc98>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d01d      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a1c      	ldr	r2, [pc, #112]	@ (8007e84 <HAL_DMA_IRQHandler+0xc9c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d018      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8007e88 <HAL_DMA_IRQHandler+0xca0>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d013      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a19      	ldr	r2, [pc, #100]	@ (8007e8c <HAL_DMA_IRQHandler+0xca4>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d00e      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a17      	ldr	r2, [pc, #92]	@ (8007e90 <HAL_DMA_IRQHandler+0xca8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d009      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a16      	ldr	r2, [pc, #88]	@ (8007e94 <HAL_DMA_IRQHandler+0xcac>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d004      	beq.n	8007e4a <HAL_DMA_IRQHandler+0xc62>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a14      	ldr	r2, [pc, #80]	@ (8007e98 <HAL_DMA_IRQHandler+0xcb0>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d128      	bne.n	8007e9c <HAL_DMA_IRQHandler+0xcb4>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0214 	bic.w	r2, r2, #20
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	e027      	b.n	8007eac <HAL_DMA_IRQHandler+0xcc4>
 8007e5c:	40020010 	.word	0x40020010
 8007e60:	40020028 	.word	0x40020028
 8007e64:	40020040 	.word	0x40020040
 8007e68:	40020058 	.word	0x40020058
 8007e6c:	40020070 	.word	0x40020070
 8007e70:	40020088 	.word	0x40020088
 8007e74:	400200a0 	.word	0x400200a0
 8007e78:	400200b8 	.word	0x400200b8
 8007e7c:	40020410 	.word	0x40020410
 8007e80:	40020428 	.word	0x40020428
 8007e84:	40020440 	.word	0x40020440
 8007e88:	40020458 	.word	0x40020458
 8007e8c:	40020470 	.word	0x40020470
 8007e90:	40020488 	.word	0x40020488
 8007e94:	400204a0 	.word	0x400204a0
 8007e98:	400204b8 	.word	0x400204b8
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 020a 	bic.w	r2, r2, #10
 8007eaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 8097 	beq.w	8007ff4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ece:	e091      	b.n	8007ff4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed4:	f003 031f 	and.w	r3, r3, #31
 8007ed8:	2208      	movs	r2, #8
 8007eda:	409a      	lsls	r2, r3
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8088 	beq.w	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 8082 	beq.w	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a41      	ldr	r2, [pc, #260]	@ (8007ffc <HAL_DMA_IRQHandler+0xe14>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d04a      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a3f      	ldr	r2, [pc, #252]	@ (8008000 <HAL_DMA_IRQHandler+0xe18>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d045      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8008004 <HAL_DMA_IRQHandler+0xe1c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d040      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a3c      	ldr	r2, [pc, #240]	@ (8008008 <HAL_DMA_IRQHandler+0xe20>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d03b      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800800c <HAL_DMA_IRQHandler+0xe24>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d036      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a39      	ldr	r2, [pc, #228]	@ (8008010 <HAL_DMA_IRQHandler+0xe28>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d031      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a38      	ldr	r2, [pc, #224]	@ (8008014 <HAL_DMA_IRQHandler+0xe2c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d02c      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a36      	ldr	r2, [pc, #216]	@ (8008018 <HAL_DMA_IRQHandler+0xe30>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d027      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a35      	ldr	r2, [pc, #212]	@ (800801c <HAL_DMA_IRQHandler+0xe34>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d022      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a33      	ldr	r2, [pc, #204]	@ (8008020 <HAL_DMA_IRQHandler+0xe38>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d01d      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a32      	ldr	r2, [pc, #200]	@ (8008024 <HAL_DMA_IRQHandler+0xe3c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d018      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a30      	ldr	r2, [pc, #192]	@ (8008028 <HAL_DMA_IRQHandler+0xe40>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d013      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800802c <HAL_DMA_IRQHandler+0xe44>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d00e      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a2d      	ldr	r2, [pc, #180]	@ (8008030 <HAL_DMA_IRQHandler+0xe48>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d009      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a2c      	ldr	r2, [pc, #176]	@ (8008034 <HAL_DMA_IRQHandler+0xe4c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d004      	beq.n	8007f92 <HAL_DMA_IRQHandler+0xdaa>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8008038 <HAL_DMA_IRQHandler+0xe50>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d108      	bne.n	8007fa4 <HAL_DMA_IRQHandler+0xdbc>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 021c 	bic.w	r2, r2, #28
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	e007      	b.n	8007fb4 <HAL_DMA_IRQHandler+0xdcc>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 020e 	bic.w	r2, r2, #14
 8007fb2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb8:	f003 031f 	and.w	r3, r3, #31
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	409a      	lsls	r2, r3
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d009      	beq.n	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	4798      	blx	r3
 8007fea:	e004      	b.n	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007fec:	bf00      	nop
 8007fee:	e002      	b.n	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ff0:	bf00      	nop
 8007ff2:	e000      	b.n	8007ff6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ff4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ff6:	3728      	adds	r7, #40	@ 0x28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	40020010 	.word	0x40020010
 8008000:	40020028 	.word	0x40020028
 8008004:	40020040 	.word	0x40020040
 8008008:	40020058 	.word	0x40020058
 800800c:	40020070 	.word	0x40020070
 8008010:	40020088 	.word	0x40020088
 8008014:	400200a0 	.word	0x400200a0
 8008018:	400200b8 	.word	0x400200b8
 800801c:	40020410 	.word	0x40020410
 8008020:	40020428 	.word	0x40020428
 8008024:	40020440 	.word	0x40020440
 8008028:	40020458 	.word	0x40020458
 800802c:	40020470 	.word	0x40020470
 8008030:	40020488 	.word	0x40020488
 8008034:	400204a0 	.word	0x400204a0
 8008038:	400204b8 	.word	0x400204b8

0800803c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800804e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008054:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a7f      	ldr	r2, [pc, #508]	@ (8008258 <DMA_SetConfig+0x21c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d072      	beq.n	8008146 <DMA_SetConfig+0x10a>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a7d      	ldr	r2, [pc, #500]	@ (800825c <DMA_SetConfig+0x220>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d06d      	beq.n	8008146 <DMA_SetConfig+0x10a>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a7c      	ldr	r2, [pc, #496]	@ (8008260 <DMA_SetConfig+0x224>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d068      	beq.n	8008146 <DMA_SetConfig+0x10a>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a7a      	ldr	r2, [pc, #488]	@ (8008264 <DMA_SetConfig+0x228>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d063      	beq.n	8008146 <DMA_SetConfig+0x10a>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a79      	ldr	r2, [pc, #484]	@ (8008268 <DMA_SetConfig+0x22c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d05e      	beq.n	8008146 <DMA_SetConfig+0x10a>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a77      	ldr	r2, [pc, #476]	@ (800826c <DMA_SetConfig+0x230>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d059      	beq.n	8008146 <DMA_SetConfig+0x10a>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a76      	ldr	r2, [pc, #472]	@ (8008270 <DMA_SetConfig+0x234>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d054      	beq.n	8008146 <DMA_SetConfig+0x10a>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a74      	ldr	r2, [pc, #464]	@ (8008274 <DMA_SetConfig+0x238>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d04f      	beq.n	8008146 <DMA_SetConfig+0x10a>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a73      	ldr	r2, [pc, #460]	@ (8008278 <DMA_SetConfig+0x23c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d04a      	beq.n	8008146 <DMA_SetConfig+0x10a>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a71      	ldr	r2, [pc, #452]	@ (800827c <DMA_SetConfig+0x240>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d045      	beq.n	8008146 <DMA_SetConfig+0x10a>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a70      	ldr	r2, [pc, #448]	@ (8008280 <DMA_SetConfig+0x244>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d040      	beq.n	8008146 <DMA_SetConfig+0x10a>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a6e      	ldr	r2, [pc, #440]	@ (8008284 <DMA_SetConfig+0x248>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d03b      	beq.n	8008146 <DMA_SetConfig+0x10a>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a6d      	ldr	r2, [pc, #436]	@ (8008288 <DMA_SetConfig+0x24c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d036      	beq.n	8008146 <DMA_SetConfig+0x10a>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a6b      	ldr	r2, [pc, #428]	@ (800828c <DMA_SetConfig+0x250>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d031      	beq.n	8008146 <DMA_SetConfig+0x10a>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a6a      	ldr	r2, [pc, #424]	@ (8008290 <DMA_SetConfig+0x254>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d02c      	beq.n	8008146 <DMA_SetConfig+0x10a>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a68      	ldr	r2, [pc, #416]	@ (8008294 <DMA_SetConfig+0x258>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d027      	beq.n	8008146 <DMA_SetConfig+0x10a>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a67      	ldr	r2, [pc, #412]	@ (8008298 <DMA_SetConfig+0x25c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d022      	beq.n	8008146 <DMA_SetConfig+0x10a>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a65      	ldr	r2, [pc, #404]	@ (800829c <DMA_SetConfig+0x260>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d01d      	beq.n	8008146 <DMA_SetConfig+0x10a>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a64      	ldr	r2, [pc, #400]	@ (80082a0 <DMA_SetConfig+0x264>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d018      	beq.n	8008146 <DMA_SetConfig+0x10a>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a62      	ldr	r2, [pc, #392]	@ (80082a4 <DMA_SetConfig+0x268>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d013      	beq.n	8008146 <DMA_SetConfig+0x10a>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a61      	ldr	r2, [pc, #388]	@ (80082a8 <DMA_SetConfig+0x26c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00e      	beq.n	8008146 <DMA_SetConfig+0x10a>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a5f      	ldr	r2, [pc, #380]	@ (80082ac <DMA_SetConfig+0x270>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d009      	beq.n	8008146 <DMA_SetConfig+0x10a>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a5e      	ldr	r2, [pc, #376]	@ (80082b0 <DMA_SetConfig+0x274>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d004      	beq.n	8008146 <DMA_SetConfig+0x10a>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a5c      	ldr	r2, [pc, #368]	@ (80082b4 <DMA_SetConfig+0x278>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d101      	bne.n	800814a <DMA_SetConfig+0x10e>
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <DMA_SetConfig+0x110>
 800814a:	2300      	movs	r3, #0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00d      	beq.n	800816c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008158:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d004      	beq.n	800816c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800816a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a39      	ldr	r2, [pc, #228]	@ (8008258 <DMA_SetConfig+0x21c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d04a      	beq.n	800820c <DMA_SetConfig+0x1d0>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a38      	ldr	r2, [pc, #224]	@ (800825c <DMA_SetConfig+0x220>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d045      	beq.n	800820c <DMA_SetConfig+0x1d0>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a36      	ldr	r2, [pc, #216]	@ (8008260 <DMA_SetConfig+0x224>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d040      	beq.n	800820c <DMA_SetConfig+0x1d0>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a35      	ldr	r2, [pc, #212]	@ (8008264 <DMA_SetConfig+0x228>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d03b      	beq.n	800820c <DMA_SetConfig+0x1d0>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a33      	ldr	r2, [pc, #204]	@ (8008268 <DMA_SetConfig+0x22c>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d036      	beq.n	800820c <DMA_SetConfig+0x1d0>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a32      	ldr	r2, [pc, #200]	@ (800826c <DMA_SetConfig+0x230>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d031      	beq.n	800820c <DMA_SetConfig+0x1d0>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a30      	ldr	r2, [pc, #192]	@ (8008270 <DMA_SetConfig+0x234>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d02c      	beq.n	800820c <DMA_SetConfig+0x1d0>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a2f      	ldr	r2, [pc, #188]	@ (8008274 <DMA_SetConfig+0x238>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d027      	beq.n	800820c <DMA_SetConfig+0x1d0>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008278 <DMA_SetConfig+0x23c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d022      	beq.n	800820c <DMA_SetConfig+0x1d0>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a2c      	ldr	r2, [pc, #176]	@ (800827c <DMA_SetConfig+0x240>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d01d      	beq.n	800820c <DMA_SetConfig+0x1d0>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a2a      	ldr	r2, [pc, #168]	@ (8008280 <DMA_SetConfig+0x244>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d018      	beq.n	800820c <DMA_SetConfig+0x1d0>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a29      	ldr	r2, [pc, #164]	@ (8008284 <DMA_SetConfig+0x248>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d013      	beq.n	800820c <DMA_SetConfig+0x1d0>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a27      	ldr	r2, [pc, #156]	@ (8008288 <DMA_SetConfig+0x24c>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00e      	beq.n	800820c <DMA_SetConfig+0x1d0>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a26      	ldr	r2, [pc, #152]	@ (800828c <DMA_SetConfig+0x250>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d009      	beq.n	800820c <DMA_SetConfig+0x1d0>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a24      	ldr	r2, [pc, #144]	@ (8008290 <DMA_SetConfig+0x254>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d004      	beq.n	800820c <DMA_SetConfig+0x1d0>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a23      	ldr	r2, [pc, #140]	@ (8008294 <DMA_SetConfig+0x258>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d101      	bne.n	8008210 <DMA_SetConfig+0x1d4>
 800820c:	2301      	movs	r3, #1
 800820e:	e000      	b.n	8008212 <DMA_SetConfig+0x1d6>
 8008210:	2300      	movs	r3, #0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d059      	beq.n	80082ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800821a:	f003 031f 	and.w	r3, r3, #31
 800821e:	223f      	movs	r2, #63	@ 0x3f
 8008220:	409a      	lsls	r2, r3
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008234:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	2b40      	cmp	r3, #64	@ 0x40
 8008244:	d138      	bne.n	80082b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008256:	e086      	b.n	8008366 <DMA_SetConfig+0x32a>
 8008258:	40020010 	.word	0x40020010
 800825c:	40020028 	.word	0x40020028
 8008260:	40020040 	.word	0x40020040
 8008264:	40020058 	.word	0x40020058
 8008268:	40020070 	.word	0x40020070
 800826c:	40020088 	.word	0x40020088
 8008270:	400200a0 	.word	0x400200a0
 8008274:	400200b8 	.word	0x400200b8
 8008278:	40020410 	.word	0x40020410
 800827c:	40020428 	.word	0x40020428
 8008280:	40020440 	.word	0x40020440
 8008284:	40020458 	.word	0x40020458
 8008288:	40020470 	.word	0x40020470
 800828c:	40020488 	.word	0x40020488
 8008290:	400204a0 	.word	0x400204a0
 8008294:	400204b8 	.word	0x400204b8
 8008298:	58025408 	.word	0x58025408
 800829c:	5802541c 	.word	0x5802541c
 80082a0:	58025430 	.word	0x58025430
 80082a4:	58025444 	.word	0x58025444
 80082a8:	58025458 	.word	0x58025458
 80082ac:	5802546c 	.word	0x5802546c
 80082b0:	58025480 	.word	0x58025480
 80082b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	60da      	str	r2, [r3, #12]
}
 80082c8:	e04d      	b.n	8008366 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a29      	ldr	r2, [pc, #164]	@ (8008374 <DMA_SetConfig+0x338>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d022      	beq.n	800831a <DMA_SetConfig+0x2de>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a27      	ldr	r2, [pc, #156]	@ (8008378 <DMA_SetConfig+0x33c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d01d      	beq.n	800831a <DMA_SetConfig+0x2de>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a26      	ldr	r2, [pc, #152]	@ (800837c <DMA_SetConfig+0x340>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d018      	beq.n	800831a <DMA_SetConfig+0x2de>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a24      	ldr	r2, [pc, #144]	@ (8008380 <DMA_SetConfig+0x344>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d013      	beq.n	800831a <DMA_SetConfig+0x2de>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a23      	ldr	r2, [pc, #140]	@ (8008384 <DMA_SetConfig+0x348>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d00e      	beq.n	800831a <DMA_SetConfig+0x2de>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a21      	ldr	r2, [pc, #132]	@ (8008388 <DMA_SetConfig+0x34c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d009      	beq.n	800831a <DMA_SetConfig+0x2de>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a20      	ldr	r2, [pc, #128]	@ (800838c <DMA_SetConfig+0x350>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d004      	beq.n	800831a <DMA_SetConfig+0x2de>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a1e      	ldr	r2, [pc, #120]	@ (8008390 <DMA_SetConfig+0x354>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d101      	bne.n	800831e <DMA_SetConfig+0x2e2>
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <DMA_SetConfig+0x2e4>
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d020      	beq.n	8008366 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	2201      	movs	r2, #1
 800832e:	409a      	lsls	r2, r3
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b40      	cmp	r3, #64	@ 0x40
 8008342:	d108      	bne.n	8008356 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	60da      	str	r2, [r3, #12]
}
 8008354:	e007      	b.n	8008366 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	60da      	str	r2, [r3, #12]
}
 8008366:	bf00      	nop
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	58025408 	.word	0x58025408
 8008378:	5802541c 	.word	0x5802541c
 800837c:	58025430 	.word	0x58025430
 8008380:	58025444 	.word	0x58025444
 8008384:	58025458 	.word	0x58025458
 8008388:	5802546c 	.word	0x5802546c
 800838c:	58025480 	.word	0x58025480
 8008390:	58025494 	.word	0x58025494

08008394 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a42      	ldr	r2, [pc, #264]	@ (80084ac <DMA_CalcBaseAndBitshift+0x118>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d04a      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a41      	ldr	r2, [pc, #260]	@ (80084b0 <DMA_CalcBaseAndBitshift+0x11c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d045      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a3f      	ldr	r2, [pc, #252]	@ (80084b4 <DMA_CalcBaseAndBitshift+0x120>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d040      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a3e      	ldr	r2, [pc, #248]	@ (80084b8 <DMA_CalcBaseAndBitshift+0x124>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d03b      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a3c      	ldr	r2, [pc, #240]	@ (80084bc <DMA_CalcBaseAndBitshift+0x128>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d036      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a3b      	ldr	r2, [pc, #236]	@ (80084c0 <DMA_CalcBaseAndBitshift+0x12c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d031      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a39      	ldr	r2, [pc, #228]	@ (80084c4 <DMA_CalcBaseAndBitshift+0x130>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d02c      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a38      	ldr	r2, [pc, #224]	@ (80084c8 <DMA_CalcBaseAndBitshift+0x134>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d027      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a36      	ldr	r2, [pc, #216]	@ (80084cc <DMA_CalcBaseAndBitshift+0x138>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d022      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a35      	ldr	r2, [pc, #212]	@ (80084d0 <DMA_CalcBaseAndBitshift+0x13c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d01d      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a33      	ldr	r2, [pc, #204]	@ (80084d4 <DMA_CalcBaseAndBitshift+0x140>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d018      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a32      	ldr	r2, [pc, #200]	@ (80084d8 <DMA_CalcBaseAndBitshift+0x144>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d013      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a30      	ldr	r2, [pc, #192]	@ (80084dc <DMA_CalcBaseAndBitshift+0x148>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00e      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a2f      	ldr	r2, [pc, #188]	@ (80084e0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d009      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a2d      	ldr	r2, [pc, #180]	@ (80084e4 <DMA_CalcBaseAndBitshift+0x150>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d004      	beq.n	800843c <DMA_CalcBaseAndBitshift+0xa8>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a2c      	ldr	r2, [pc, #176]	@ (80084e8 <DMA_CalcBaseAndBitshift+0x154>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d101      	bne.n	8008440 <DMA_CalcBaseAndBitshift+0xac>
 800843c:	2301      	movs	r3, #1
 800843e:	e000      	b.n	8008442 <DMA_CalcBaseAndBitshift+0xae>
 8008440:	2300      	movs	r3, #0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d024      	beq.n	8008490 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	3b10      	subs	r3, #16
 800844e:	4a27      	ldr	r2, [pc, #156]	@ (80084ec <DMA_CalcBaseAndBitshift+0x158>)
 8008450:	fba2 2303 	umull	r2, r3, r2, r3
 8008454:	091b      	lsrs	r3, r3, #4
 8008456:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f003 0307 	and.w	r3, r3, #7
 800845e:	4a24      	ldr	r2, [pc, #144]	@ (80084f0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008460:	5cd3      	ldrb	r3, [r2, r3]
 8008462:	461a      	mov	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b03      	cmp	r3, #3
 800846c:	d908      	bls.n	8008480 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	4b1f      	ldr	r3, [pc, #124]	@ (80084f4 <DMA_CalcBaseAndBitshift+0x160>)
 8008476:	4013      	ands	r3, r2
 8008478:	1d1a      	adds	r2, r3, #4
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	659a      	str	r2, [r3, #88]	@ 0x58
 800847e:	e00d      	b.n	800849c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	461a      	mov	r2, r3
 8008486:	4b1b      	ldr	r3, [pc, #108]	@ (80084f4 <DMA_CalcBaseAndBitshift+0x160>)
 8008488:	4013      	ands	r3, r2
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	6593      	str	r3, [r2, #88]	@ 0x58
 800848e:	e005      	b.n	800849c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr
 80084ac:	40020010 	.word	0x40020010
 80084b0:	40020028 	.word	0x40020028
 80084b4:	40020040 	.word	0x40020040
 80084b8:	40020058 	.word	0x40020058
 80084bc:	40020070 	.word	0x40020070
 80084c0:	40020088 	.word	0x40020088
 80084c4:	400200a0 	.word	0x400200a0
 80084c8:	400200b8 	.word	0x400200b8
 80084cc:	40020410 	.word	0x40020410
 80084d0:	40020428 	.word	0x40020428
 80084d4:	40020440 	.word	0x40020440
 80084d8:	40020458 	.word	0x40020458
 80084dc:	40020470 	.word	0x40020470
 80084e0:	40020488 	.word	0x40020488
 80084e4:	400204a0 	.word	0x400204a0
 80084e8:	400204b8 	.word	0x400204b8
 80084ec:	aaaaaaab 	.word	0xaaaaaaab
 80084f0:	08014f1c 	.word	0x08014f1c
 80084f4:	fffffc00 	.word	0xfffffc00

080084f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d120      	bne.n	800854e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008510:	2b03      	cmp	r3, #3
 8008512:	d858      	bhi.n	80085c6 <DMA_CheckFifoParam+0xce>
 8008514:	a201      	add	r2, pc, #4	@ (adr r2, 800851c <DMA_CheckFifoParam+0x24>)
 8008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851a:	bf00      	nop
 800851c:	0800852d 	.word	0x0800852d
 8008520:	0800853f 	.word	0x0800853f
 8008524:	0800852d 	.word	0x0800852d
 8008528:	080085c7 	.word	0x080085c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008530:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d048      	beq.n	80085ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800853c:	e045      	b.n	80085ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008542:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008546:	d142      	bne.n	80085ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800854c:	e03f      	b.n	80085ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008556:	d123      	bne.n	80085a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855c:	2b03      	cmp	r3, #3
 800855e:	d838      	bhi.n	80085d2 <DMA_CheckFifoParam+0xda>
 8008560:	a201      	add	r2, pc, #4	@ (adr r2, 8008568 <DMA_CheckFifoParam+0x70>)
 8008562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008566:	bf00      	nop
 8008568:	08008579 	.word	0x08008579
 800856c:	0800857f 	.word	0x0800857f
 8008570:	08008579 	.word	0x08008579
 8008574:	08008591 	.word	0x08008591
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
        break;
 800857c:	e030      	b.n	80085e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008582:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d025      	beq.n	80085d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800858e:	e022      	b.n	80085d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008594:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008598:	d11f      	bne.n	80085da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800859e:	e01c      	b.n	80085da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d902      	bls.n	80085ae <DMA_CheckFifoParam+0xb6>
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d003      	beq.n	80085b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80085ac:	e018      	b.n	80085e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	73fb      	strb	r3, [r7, #15]
        break;
 80085b2:	e015      	b.n	80085e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
    break;
 80085c4:	e00b      	b.n	80085de <DMA_CheckFifoParam+0xe6>
        break;
 80085c6:	bf00      	nop
 80085c8:	e00a      	b.n	80085e0 <DMA_CheckFifoParam+0xe8>
        break;
 80085ca:	bf00      	nop
 80085cc:	e008      	b.n	80085e0 <DMA_CheckFifoParam+0xe8>
        break;
 80085ce:	bf00      	nop
 80085d0:	e006      	b.n	80085e0 <DMA_CheckFifoParam+0xe8>
        break;
 80085d2:	bf00      	nop
 80085d4:	e004      	b.n	80085e0 <DMA_CheckFifoParam+0xe8>
        break;
 80085d6:	bf00      	nop
 80085d8:	e002      	b.n	80085e0 <DMA_CheckFifoParam+0xe8>
        break;
 80085da:	bf00      	nop
 80085dc:	e000      	b.n	80085e0 <DMA_CheckFifoParam+0xe8>
    break;
 80085de:	bf00      	nop
    }
  }

  return status;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop

080085f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a38      	ldr	r2, [pc, #224]	@ (80086e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d022      	beq.n	800864e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a36      	ldr	r2, [pc, #216]	@ (80086e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d01d      	beq.n	800864e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a35      	ldr	r2, [pc, #212]	@ (80086ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d018      	beq.n	800864e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a33      	ldr	r2, [pc, #204]	@ (80086f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a32      	ldr	r2, [pc, #200]	@ (80086f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d00e      	beq.n	800864e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a30      	ldr	r2, [pc, #192]	@ (80086f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d009      	beq.n	800864e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a2f      	ldr	r2, [pc, #188]	@ (80086fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d004      	beq.n	800864e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a2d      	ldr	r2, [pc, #180]	@ (8008700 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d101      	bne.n	8008652 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800864e:	2301      	movs	r3, #1
 8008650:	e000      	b.n	8008654 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008652:	2300      	movs	r3, #0
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01a      	beq.n	800868e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	b2db      	uxtb	r3, r3
 800865e:	3b08      	subs	r3, #8
 8008660:	4a28      	ldr	r2, [pc, #160]	@ (8008704 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008662:	fba2 2303 	umull	r2, r3, r2, r3
 8008666:	091b      	lsrs	r3, r3, #4
 8008668:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	4b26      	ldr	r3, [pc, #152]	@ (8008708 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	461a      	mov	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a24      	ldr	r2, [pc, #144]	@ (800870c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800867c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f003 031f 	and.w	r3, r3, #31
 8008684:	2201      	movs	r2, #1
 8008686:	409a      	lsls	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800868c:	e024      	b.n	80086d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	3b10      	subs	r3, #16
 8008696:	4a1e      	ldr	r2, [pc, #120]	@ (8008710 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008698:	fba2 2303 	umull	r2, r3, r2, r3
 800869c:	091b      	lsrs	r3, r3, #4
 800869e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008714 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d806      	bhi.n	80086b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008718 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d902      	bls.n	80086b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3308      	adds	r3, #8
 80086b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	4b18      	ldr	r3, [pc, #96]	@ (800871c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a16      	ldr	r2, [pc, #88]	@ (8008720 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80086c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f003 031f 	and.w	r3, r3, #31
 80086d0:	2201      	movs	r2, #1
 80086d2:	409a      	lsls	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80086d8:	bf00      	nop
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	58025408 	.word	0x58025408
 80086e8:	5802541c 	.word	0x5802541c
 80086ec:	58025430 	.word	0x58025430
 80086f0:	58025444 	.word	0x58025444
 80086f4:	58025458 	.word	0x58025458
 80086f8:	5802546c 	.word	0x5802546c
 80086fc:	58025480 	.word	0x58025480
 8008700:	58025494 	.word	0x58025494
 8008704:	cccccccd 	.word	0xcccccccd
 8008708:	16009600 	.word	0x16009600
 800870c:	58025880 	.word	0x58025880
 8008710:	aaaaaaab 	.word	0xaaaaaaab
 8008714:	400204b8 	.word	0x400204b8
 8008718:	4002040f 	.word	0x4002040f
 800871c:	10008200 	.word	0x10008200
 8008720:	40020880 	.word	0x40020880

08008724 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d04a      	beq.n	80087d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b08      	cmp	r3, #8
 800873e:	d847      	bhi.n	80087d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a25      	ldr	r2, [pc, #148]	@ (80087dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d022      	beq.n	8008790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a24      	ldr	r2, [pc, #144]	@ (80087e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d01d      	beq.n	8008790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a22      	ldr	r2, [pc, #136]	@ (80087e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d018      	beq.n	8008790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a21      	ldr	r2, [pc, #132]	@ (80087e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a1f      	ldr	r2, [pc, #124]	@ (80087ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00e      	beq.n	8008790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a1e      	ldr	r2, [pc, #120]	@ (80087f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d009      	beq.n	8008790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a1c      	ldr	r2, [pc, #112]	@ (80087f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d004      	beq.n	8008790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a1b      	ldr	r2, [pc, #108]	@ (80087f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d101      	bne.n	8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008794:	2300      	movs	r3, #0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	4b17      	ldr	r3, [pc, #92]	@ (80087fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	461a      	mov	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a15      	ldr	r2, [pc, #84]	@ (8008800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80087ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80087ae:	e009      	b.n	80087c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4b14      	ldr	r3, [pc, #80]	@ (8008804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	461a      	mov	r2, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a11      	ldr	r2, [pc, #68]	@ (8008808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80087c2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3b01      	subs	r3, #1
 80087c8:	2201      	movs	r2, #1
 80087ca:	409a      	lsls	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80087d0:	bf00      	nop
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	58025408 	.word	0x58025408
 80087e0:	5802541c 	.word	0x5802541c
 80087e4:	58025430 	.word	0x58025430
 80087e8:	58025444 	.word	0x58025444
 80087ec:	58025458 	.word	0x58025458
 80087f0:	5802546c 	.word	0x5802546c
 80087f4:	58025480 	.word	0x58025480
 80087f8:	58025494 	.word	0x58025494
 80087fc:	1600963f 	.word	0x1600963f
 8008800:	58025940 	.word	0x58025940
 8008804:	1000823f 	.word	0x1000823f
 8008808:	40020940 	.word	0x40020940

0800880c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800880c:	b480      	push	{r7}
 800880e:	b089      	sub	sp, #36	@ 0x24
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800881a:	4b86      	ldr	r3, [pc, #536]	@ (8008a34 <HAL_GPIO_Init+0x228>)
 800881c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800881e:	e18c      	b.n	8008b3a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	2101      	movs	r1, #1
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	fa01 f303 	lsl.w	r3, r1, r3
 800882c:	4013      	ands	r3, r2
 800882e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 817e 	beq.w	8008b34 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f003 0303 	and.w	r3, r3, #3
 8008840:	2b01      	cmp	r3, #1
 8008842:	d005      	beq.n	8008850 <HAL_GPIO_Init+0x44>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f003 0303 	and.w	r3, r3, #3
 800884c:	2b02      	cmp	r3, #2
 800884e:	d130      	bne.n	80088b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	2203      	movs	r2, #3
 800885c:	fa02 f303 	lsl.w	r3, r2, r3
 8008860:	43db      	mvns	r3, r3
 8008862:	69ba      	ldr	r2, [r7, #24]
 8008864:	4013      	ands	r3, r2
 8008866:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	005b      	lsls	r3, r3, #1
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	4313      	orrs	r3, r2
 8008878:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008886:	2201      	movs	r2, #1
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	fa02 f303 	lsl.w	r3, r2, r3
 800888e:	43db      	mvns	r3, r3
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	4013      	ands	r3, r2
 8008894:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	091b      	lsrs	r3, r3, #4
 800889c:	f003 0201 	and.w	r2, r3, #1
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	fa02 f303 	lsl.w	r3, r2, r3
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d017      	beq.n	80088ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	2203      	movs	r2, #3
 80088ca:	fa02 f303 	lsl.w	r3, r2, r3
 80088ce:	43db      	mvns	r3, r3
 80088d0:	69ba      	ldr	r2, [r7, #24]
 80088d2:	4013      	ands	r3, r2
 80088d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	689a      	ldr	r2, [r3, #8]
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	fa02 f303 	lsl.w	r3, r2, r3
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f003 0303 	and.w	r3, r3, #3
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d123      	bne.n	8008942 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	08da      	lsrs	r2, r3, #3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3208      	adds	r2, #8
 8008902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	f003 0307 	and.w	r3, r3, #7
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	220f      	movs	r2, #15
 8008912:	fa02 f303 	lsl.w	r3, r2, r3
 8008916:	43db      	mvns	r3, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	4013      	ands	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	691a      	ldr	r2, [r3, #16]
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	fa02 f303 	lsl.w	r3, r2, r3
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	4313      	orrs	r3, r2
 8008932:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	08da      	lsrs	r2, r3, #3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3208      	adds	r2, #8
 800893c:	69b9      	ldr	r1, [r7, #24]
 800893e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	2203      	movs	r2, #3
 800894e:	fa02 f303 	lsl.w	r3, r2, r3
 8008952:	43db      	mvns	r3, r3
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	4013      	ands	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f003 0203 	and.w	r2, r3, #3
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	fa02 f303 	lsl.w	r3, r2, r3
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	4313      	orrs	r3, r2
 800896e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800897e:	2b00      	cmp	r3, #0
 8008980:	f000 80d8 	beq.w	8008b34 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008984:	4b2c      	ldr	r3, [pc, #176]	@ (8008a38 <HAL_GPIO_Init+0x22c>)
 8008986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800898a:	4a2b      	ldr	r2, [pc, #172]	@ (8008a38 <HAL_GPIO_Init+0x22c>)
 800898c:	f043 0302 	orr.w	r3, r3, #2
 8008990:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008994:	4b28      	ldr	r3, [pc, #160]	@ (8008a38 <HAL_GPIO_Init+0x22c>)
 8008996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089a2:	4a26      	ldr	r2, [pc, #152]	@ (8008a3c <HAL_GPIO_Init+0x230>)
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	089b      	lsrs	r3, r3, #2
 80089a8:	3302      	adds	r3, #2
 80089aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	220f      	movs	r2, #15
 80089ba:	fa02 f303 	lsl.w	r3, r2, r3
 80089be:	43db      	mvns	r3, r3
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	4013      	ands	r3, r2
 80089c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008a40 <HAL_GPIO_Init+0x234>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d04a      	beq.n	8008a64 <HAL_GPIO_Init+0x258>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a1c      	ldr	r2, [pc, #112]	@ (8008a44 <HAL_GPIO_Init+0x238>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d02b      	beq.n	8008a2e <HAL_GPIO_Init+0x222>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a1b      	ldr	r2, [pc, #108]	@ (8008a48 <HAL_GPIO_Init+0x23c>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d025      	beq.n	8008a2a <HAL_GPIO_Init+0x21e>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a1a      	ldr	r2, [pc, #104]	@ (8008a4c <HAL_GPIO_Init+0x240>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d01f      	beq.n	8008a26 <HAL_GPIO_Init+0x21a>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a19      	ldr	r2, [pc, #100]	@ (8008a50 <HAL_GPIO_Init+0x244>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d019      	beq.n	8008a22 <HAL_GPIO_Init+0x216>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a18      	ldr	r2, [pc, #96]	@ (8008a54 <HAL_GPIO_Init+0x248>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <HAL_GPIO_Init+0x212>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a17      	ldr	r2, [pc, #92]	@ (8008a58 <HAL_GPIO_Init+0x24c>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00d      	beq.n	8008a1a <HAL_GPIO_Init+0x20e>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a16      	ldr	r2, [pc, #88]	@ (8008a5c <HAL_GPIO_Init+0x250>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d007      	beq.n	8008a16 <HAL_GPIO_Init+0x20a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a15      	ldr	r2, [pc, #84]	@ (8008a60 <HAL_GPIO_Init+0x254>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d101      	bne.n	8008a12 <HAL_GPIO_Init+0x206>
 8008a0e:	2309      	movs	r3, #9
 8008a10:	e029      	b.n	8008a66 <HAL_GPIO_Init+0x25a>
 8008a12:	230a      	movs	r3, #10
 8008a14:	e027      	b.n	8008a66 <HAL_GPIO_Init+0x25a>
 8008a16:	2307      	movs	r3, #7
 8008a18:	e025      	b.n	8008a66 <HAL_GPIO_Init+0x25a>
 8008a1a:	2306      	movs	r3, #6
 8008a1c:	e023      	b.n	8008a66 <HAL_GPIO_Init+0x25a>
 8008a1e:	2305      	movs	r3, #5
 8008a20:	e021      	b.n	8008a66 <HAL_GPIO_Init+0x25a>
 8008a22:	2304      	movs	r3, #4
 8008a24:	e01f      	b.n	8008a66 <HAL_GPIO_Init+0x25a>
 8008a26:	2303      	movs	r3, #3
 8008a28:	e01d      	b.n	8008a66 <HAL_GPIO_Init+0x25a>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	e01b      	b.n	8008a66 <HAL_GPIO_Init+0x25a>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e019      	b.n	8008a66 <HAL_GPIO_Init+0x25a>
 8008a32:	bf00      	nop
 8008a34:	58000080 	.word	0x58000080
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	58000400 	.word	0x58000400
 8008a40:	58020000 	.word	0x58020000
 8008a44:	58020400 	.word	0x58020400
 8008a48:	58020800 	.word	0x58020800
 8008a4c:	58020c00 	.word	0x58020c00
 8008a50:	58021000 	.word	0x58021000
 8008a54:	58021400 	.word	0x58021400
 8008a58:	58021800 	.word	0x58021800
 8008a5c:	58021c00 	.word	0x58021c00
 8008a60:	58022400 	.word	0x58022400
 8008a64:	2300      	movs	r3, #0
 8008a66:	69fa      	ldr	r2, [r7, #28]
 8008a68:	f002 0203 	and.w	r2, r2, #3
 8008a6c:	0092      	lsls	r2, r2, #2
 8008a6e:	4093      	lsls	r3, r2
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a76:	4938      	ldr	r1, [pc, #224]	@ (8008b58 <HAL_GPIO_Init+0x34c>)
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	089b      	lsrs	r3, r3, #2
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	43db      	mvns	r3, r3
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	4013      	ands	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008aaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	43db      	mvns	r3, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d003      	beq.n	8008ad8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ad8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	43db      	mvns	r3, r3
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	4013      	ands	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	43db      	mvns	r3, r3
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	4013      	ands	r3, r2
 8008b18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	3301      	adds	r3, #1
 8008b38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	fa22 f303 	lsr.w	r3, r2, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f47f ae6b 	bne.w	8008820 <HAL_GPIO_Init+0x14>
  }
}
 8008b4a:	bf00      	nop
 8008b4c:	bf00      	nop
 8008b4e:	3724      	adds	r7, #36	@ 0x24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	58000400 	.word	0x58000400

08008b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	807b      	strh	r3, [r7, #2]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b6c:	787b      	ldrb	r3, [r7, #1]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b72:	887a      	ldrh	r2, [r7, #2]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008b78:	e003      	b.n	8008b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b7a:	887b      	ldrh	r3, [r7, #2]
 8008b7c:	041a      	lsls	r2, r3, #16
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	619a      	str	r2, [r3, #24]
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b085      	sub	sp, #20
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ba0:	887a      	ldrh	r2, [r7, #2]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	041a      	lsls	r2, r3, #16
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	43d9      	mvns	r1, r3
 8008bac:	887b      	ldrh	r3, [r7, #2]
 8008bae:	400b      	ands	r3, r1
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	619a      	str	r2, [r3, #24]
}
 8008bb6:	bf00      	nop
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
	...

08008bc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e08b      	b.n	8008cee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d106      	bne.n	8008bf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7f9 ff18 	bl	8002a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2224      	movs	r2, #36	@ 0x24
 8008bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 0201 	bic.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008c14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d107      	bne.n	8008c3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c3a:	609a      	str	r2, [r3, #8]
 8008c3c:	e006      	b.n	8008c4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689a      	ldr	r2, [r3, #8]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008c4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d108      	bne.n	8008c66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685a      	ldr	r2, [r3, #4]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c62:	605a      	str	r2, [r3, #4]
 8008c64:	e007      	b.n	8008c76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6859      	ldr	r1, [r3, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4b1d      	ldr	r3, [pc, #116]	@ (8008cf8 <HAL_I2C_Init+0x134>)
 8008c82:	430b      	orrs	r3, r1
 8008c84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691a      	ldr	r2, [r3, #16]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	69d9      	ldr	r1, [r3, #28]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a1a      	ldr	r2, [r3, #32]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f042 0201 	orr.w	r2, r2, #1
 8008cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	02008000 	.word	0x02008000

08008cfc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af02      	add	r7, sp, #8
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	607a      	str	r2, [r7, #4]
 8008d06:	461a      	mov	r2, r3
 8008d08:	460b      	mov	r3, r1
 8008d0a:	817b      	strh	r3, [r7, #10]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b20      	cmp	r3, #32
 8008d1a:	f040 80fd 	bne.w	8008f18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_I2C_Master_Transmit+0x30>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e0f6      	b.n	8008f1a <HAL_I2C_Master_Transmit+0x21e>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008d34:	f7fd f898 	bl	8005e68 <HAL_GetTick>
 8008d38:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	9300      	str	r3, [sp, #0]
 8008d3e:	2319      	movs	r3, #25
 8008d40:	2201      	movs	r2, #1
 8008d42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fa0a 	bl	8009160 <I2C_WaitOnFlagUntilTimeout>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e0e1      	b.n	8008f1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2221      	movs	r2, #33	@ 0x21
 8008d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2210      	movs	r2, #16
 8008d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	893a      	ldrh	r2, [r7, #8]
 8008d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	2bff      	cmp	r3, #255	@ 0xff
 8008d86:	d906      	bls.n	8008d96 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	22ff      	movs	r2, #255	@ 0xff
 8008d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008d8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d92:	617b      	str	r3, [r7, #20]
 8008d94:	e007      	b.n	8008da6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008da0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008da4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d024      	beq.n	8008df8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db2:	781a      	ldrb	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	3301      	adds	r3, #1
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	8979      	ldrh	r1, [r7, #10]
 8008dea:	4b4e      	ldr	r3, [pc, #312]	@ (8008f24 <HAL_I2C_Master_Transmit+0x228>)
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 fc05 	bl	8009600 <I2C_TransferConfig>
 8008df6:	e066      	b.n	8008ec6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	8979      	ldrh	r1, [r7, #10]
 8008e00:	4b48      	ldr	r3, [pc, #288]	@ (8008f24 <HAL_I2C_Master_Transmit+0x228>)
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 fbfa 	bl	8009600 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008e0c:	e05b      	b.n	8008ec6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	6a39      	ldr	r1, [r7, #32]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 f9fd 	bl	8009212 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e07b      	b.n	8008f1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e26:	781a      	ldrb	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d034      	beq.n	8008ec6 <HAL_I2C_Master_Transmit+0x1ca>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d130      	bne.n	8008ec6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	2180      	movs	r1, #128	@ 0x80
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 f976 	bl	8009160 <I2C_WaitOnFlagUntilTimeout>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d001      	beq.n	8008e7e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e04d      	b.n	8008f1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	2bff      	cmp	r3, #255	@ 0xff
 8008e86:	d90e      	bls.n	8008ea6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	22ff      	movs	r2, #255	@ 0xff
 8008e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	8979      	ldrh	r1, [r7, #10]
 8008e96:	2300      	movs	r3, #0
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 fbae 	bl	8009600 <I2C_TransferConfig>
 8008ea4:	e00f      	b.n	8008ec6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	8979      	ldrh	r1, [r7, #10]
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 fb9d 	bl	8009600 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d19e      	bne.n	8008e0e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	6a39      	ldr	r1, [r7, #32]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 f9e3 	bl	80092a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e01a      	b.n	8008f1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6859      	ldr	r1, [r3, #4]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8008f28 <HAL_I2C_Master_Transmit+0x22c>)
 8008ef8:	400b      	ands	r3, r1
 8008efa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	e000      	b.n	8008f1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008f18:	2302      	movs	r3, #2
  }
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3718      	adds	r7, #24
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	80002000 	.word	0x80002000
 8008f28:	fe00e800 	.word	0xfe00e800

08008f2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af02      	add	r7, sp, #8
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	461a      	mov	r2, r3
 8008f38:	460b      	mov	r3, r1
 8008f3a:	817b      	strh	r3, [r7, #10]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b20      	cmp	r3, #32
 8008f4a:	f040 80db 	bne.w	8009104 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_I2C_Master_Receive+0x30>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e0d4      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f64:	f7fc ff80 	bl	8005e68 <HAL_GetTick>
 8008f68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	2319      	movs	r3, #25
 8008f70:	2201      	movs	r2, #1
 8008f72:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f000 f8f2 	bl	8009160 <I2C_WaitOnFlagUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e0bf      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2222      	movs	r2, #34	@ 0x22
 8008f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2210      	movs	r2, #16
 8008f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	893a      	ldrh	r2, [r7, #8]
 8008fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	2bff      	cmp	r3, #255	@ 0xff
 8008fb6:	d90e      	bls.n	8008fd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	22ff      	movs	r2, #255	@ 0xff
 8008fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	8979      	ldrh	r1, [r7, #10]
 8008fc6:	4b52      	ldr	r3, [pc, #328]	@ (8009110 <HAL_I2C_Master_Receive+0x1e4>)
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fb16 	bl	8009600 <I2C_TransferConfig>
 8008fd4:	e06d      	b.n	80090b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	8979      	ldrh	r1, [r7, #10]
 8008fe8:	4b49      	ldr	r3, [pc, #292]	@ (8009110 <HAL_I2C_Master_Receive+0x1e4>)
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fb05 	bl	8009600 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008ff6:	e05c      	b.n	80090b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	6a39      	ldr	r1, [r7, #32]
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f993 	bl	8009328 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e07c      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009016:	b2d2      	uxtb	r2, r2
 8009018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009042:	b29b      	uxth	r3, r3
 8009044:	2b00      	cmp	r3, #0
 8009046:	d034      	beq.n	80090b2 <HAL_I2C_Master_Receive+0x186>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800904c:	2b00      	cmp	r3, #0
 800904e:	d130      	bne.n	80090b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	2200      	movs	r2, #0
 8009058:	2180      	movs	r1, #128	@ 0x80
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 f880 	bl	8009160 <I2C_WaitOnFlagUntilTimeout>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009066:	2301      	movs	r3, #1
 8009068:	e04d      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800906e:	b29b      	uxth	r3, r3
 8009070:	2bff      	cmp	r3, #255	@ 0xff
 8009072:	d90e      	bls.n	8009092 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	22ff      	movs	r2, #255	@ 0xff
 8009078:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800907e:	b2da      	uxtb	r2, r3
 8009080:	8979      	ldrh	r1, [r7, #10]
 8009082:	2300      	movs	r3, #0
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fab8 	bl	8009600 <I2C_TransferConfig>
 8009090:	e00f      	b.n	80090b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009096:	b29a      	uxth	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	8979      	ldrh	r1, [r7, #10]
 80090a4:	2300      	movs	r3, #0
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 faa7 	bl	8009600 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d19d      	bne.n	8008ff8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	6a39      	ldr	r1, [r7, #32]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 f8ed 	bl	80092a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e01a      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2220      	movs	r2, #32
 80090d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6859      	ldr	r1, [r3, #4]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009114 <HAL_I2C_Master_Receive+0x1e8>)
 80090e4:	400b      	ands	r3, r1
 80090e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	e000      	b.n	8009106 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009104:	2302      	movs	r3, #2
  }
}
 8009106:	4618      	mov	r0, r3
 8009108:	3718      	adds	r7, #24
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	80002400 	.word	0x80002400
 8009114:	fe00e800 	.word	0xfe00e800

08009118 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	f003 0302 	and.w	r3, r3, #2
 800912a:	2b02      	cmp	r3, #2
 800912c:	d103      	bne.n	8009136 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2200      	movs	r2, #0
 8009134:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	2b01      	cmp	r3, #1
 8009142:	d007      	beq.n	8009154 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	699a      	ldr	r2, [r3, #24]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0201 	orr.w	r2, r2, #1
 8009152:	619a      	str	r2, [r3, #24]
  }
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	4613      	mov	r3, r2
 800916e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009170:	e03b      	b.n	80091ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009172:	69ba      	ldr	r2, [r7, #24]
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 f962 	bl	8009440 <I2C_IsErrorOccurred>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d001      	beq.n	8009186 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e041      	b.n	800920a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800918c:	d02d      	beq.n	80091ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800918e:	f7fc fe6b 	bl	8005e68 <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	683a      	ldr	r2, [r7, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	d302      	bcc.n	80091a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d122      	bne.n	80091ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	699a      	ldr	r2, [r3, #24]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	4013      	ands	r3, r2
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	bf0c      	ite	eq
 80091b4:	2301      	moveq	r3, #1
 80091b6:	2300      	movne	r3, #0
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	461a      	mov	r2, r3
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d113      	bne.n	80091ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091c6:	f043 0220 	orr.w	r2, r3, #32
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2220      	movs	r2, #32
 80091d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e00f      	b.n	800920a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	4013      	ands	r3, r2
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	bf0c      	ite	eq
 80091fa:	2301      	moveq	r3, #1
 80091fc:	2300      	movne	r3, #0
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	461a      	mov	r2, r3
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	429a      	cmp	r2, r3
 8009206:	d0b4      	beq.n	8009172 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800921e:	e033      	b.n	8009288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	68b9      	ldr	r1, [r7, #8]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	f000 f90b 	bl	8009440 <I2C_IsErrorOccurred>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e031      	b.n	8009298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800923a:	d025      	beq.n	8009288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800923c:	f7fc fe14 	bl	8005e68 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	429a      	cmp	r2, r3
 800924a:	d302      	bcc.n	8009252 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d11a      	bne.n	8009288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b02      	cmp	r3, #2
 800925e:	d013      	beq.n	8009288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009264:	f043 0220 	orr.w	r2, r3, #32
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e007      	b.n	8009298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b02      	cmp	r3, #2
 8009294:	d1c4      	bne.n	8009220 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092ac:	e02f      	b.n	800930e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	68b9      	ldr	r1, [r7, #8]
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 f8c4 	bl	8009440 <I2C_IsErrorOccurred>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e02d      	b.n	800931e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092c2:	f7fc fdd1 	bl	8005e68 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d302      	bcc.n	80092d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d11a      	bne.n	800930e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f003 0320 	and.w	r3, r3, #32
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d013      	beq.n	800930e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ea:	f043 0220 	orr.w	r2, r3, #32
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2220      	movs	r2, #32
 80092f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e007      	b.n	800931e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	f003 0320 	and.w	r3, r3, #32
 8009318:	2b20      	cmp	r3, #32
 800931a:	d1c8      	bne.n	80092ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009338:	e071      	b.n	800941e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	68b9      	ldr	r1, [r7, #8]
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 f87e 	bl	8009440 <I2C_IsErrorOccurred>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b20      	cmp	r3, #32
 800935a:	d13b      	bne.n	80093d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d138      	bne.n	80093d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b04      	cmp	r3, #4
 800936e:	d105      	bne.n	800937c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f003 0310 	and.w	r3, r3, #16
 8009386:	2b10      	cmp	r3, #16
 8009388:	d121      	bne.n	80093ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2210      	movs	r2, #16
 8009390:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2204      	movs	r2, #4
 8009396:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2220      	movs	r2, #32
 800939e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6859      	ldr	r1, [r3, #4]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b24      	ldr	r3, [pc, #144]	@ (800943c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80093ac:	400b      	ands	r3, r1
 80093ae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2220      	movs	r2, #32
 80093b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]
 80093cc:	e002      	b.n	80093d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80093d4:	f7fc fd48 	bl	8005e68 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d302      	bcc.n	80093ea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d119      	bne.n	800941e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d116      	bne.n	800941e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	f003 0304 	and.w	r3, r3, #4
 80093fa:	2b04      	cmp	r3, #4
 80093fc:	d00f      	beq.n	800941e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009402:	f043 0220 	orr.w	r2, r3, #32
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2220      	movs	r2, #32
 800940e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b04      	cmp	r3, #4
 800942a:	d002      	beq.n	8009432 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800942c:	7dfb      	ldrb	r3, [r7, #23]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d083      	beq.n	800933a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009432:	7dfb      	ldrb	r3, [r7, #23]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	fe00e800 	.word	0xfe00e800

08009440 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08a      	sub	sp, #40	@ 0x28
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	d068      	beq.n	800953e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2210      	movs	r2, #16
 8009472:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009474:	e049      	b.n	800950a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800947c:	d045      	beq.n	800950a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800947e:	f7fc fcf3 	bl	8005e68 <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	d302      	bcc.n	8009494 <I2C_IsErrorOccurred+0x54>
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d13a      	bne.n	800950a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800949e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80094b6:	d121      	bne.n	80094fc <I2C_IsErrorOccurred+0xbc>
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094be:	d01d      	beq.n	80094fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80094c0:	7cfb      	ldrb	r3, [r7, #19]
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	d01a      	beq.n	80094fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80094d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80094d6:	f7fc fcc7 	bl	8005e68 <HAL_GetTick>
 80094da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094dc:	e00e      	b.n	80094fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80094de:	f7fc fcc3 	bl	8005e68 <HAL_GetTick>
 80094e2:	4602      	mov	r2, r0
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	2b19      	cmp	r3, #25
 80094ea:	d907      	bls.n	80094fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	f043 0320 	orr.w	r3, r3, #32
 80094f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80094fa:	e006      	b.n	800950a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b20      	cmp	r3, #32
 8009508:	d1e9      	bne.n	80094de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	f003 0320 	and.w	r3, r3, #32
 8009514:	2b20      	cmp	r3, #32
 8009516:	d003      	beq.n	8009520 <I2C_IsErrorOccurred+0xe0>
 8009518:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800951c:	2b00      	cmp	r3, #0
 800951e:	d0aa      	beq.n	8009476 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009524:	2b00      	cmp	r3, #0
 8009526:	d103      	bne.n	8009530 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2220      	movs	r2, #32
 800952e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	f043 0304 	orr.w	r3, r3, #4
 8009536:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00b      	beq.n	8009568 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	f043 0301 	orr.w	r3, r3, #1
 8009556:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009560:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00b      	beq.n	800958a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	f043 0308 	orr.w	r3, r3, #8
 8009578:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009582:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00b      	beq.n	80095ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	f043 0302 	orr.w	r3, r3, #2
 800959a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d01c      	beq.n	80095ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7ff fdaf 	bl	8009118 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6859      	ldr	r1, [r3, #4]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	4b0d      	ldr	r3, [pc, #52]	@ (80095fc <I2C_IsErrorOccurred+0x1bc>)
 80095c6:	400b      	ands	r3, r1
 80095c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	431a      	orrs	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2220      	movs	r2, #32
 80095da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80095ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3728      	adds	r7, #40	@ 0x28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	fe00e800 	.word	0xfe00e800

08009600 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	607b      	str	r3, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	817b      	strh	r3, [r7, #10]
 800960e:	4613      	mov	r3, r2
 8009610:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009612:	897b      	ldrh	r3, [r7, #10]
 8009614:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009618:	7a7b      	ldrb	r3, [r7, #9]
 800961a:	041b      	lsls	r3, r3, #16
 800961c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009620:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009626:	6a3b      	ldr	r3, [r7, #32]
 8009628:	4313      	orrs	r3, r2
 800962a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800962e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	6a3b      	ldr	r3, [r7, #32]
 8009638:	0d5b      	lsrs	r3, r3, #21
 800963a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800963e:	4b08      	ldr	r3, [pc, #32]	@ (8009660 <I2C_TransferConfig+0x60>)
 8009640:	430b      	orrs	r3, r1
 8009642:	43db      	mvns	r3, r3
 8009644:	ea02 0103 	and.w	r1, r2, r3
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009652:	bf00      	nop
 8009654:	371c      	adds	r7, #28
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	03ff63ff 	.word	0x03ff63ff

08009664 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b20      	cmp	r3, #32
 8009678:	d138      	bne.n	80096ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009680:	2b01      	cmp	r3, #1
 8009682:	d101      	bne.n	8009688 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009684:	2302      	movs	r3, #2
 8009686:	e032      	b.n	80096ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2224      	movs	r2, #36	@ 0x24
 8009694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 0201 	bic.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80096b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6819      	ldr	r1, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f042 0201 	orr.w	r2, r2, #1
 80096d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2220      	movs	r2, #32
 80096dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	e000      	b.n	80096ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096ec:	2302      	movs	r3, #2
  }
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b085      	sub	sp, #20
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b20      	cmp	r3, #32
 800970e:	d139      	bne.n	8009784 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800971a:	2302      	movs	r3, #2
 800971c:	e033      	b.n	8009786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2224      	movs	r2, #36	@ 0x24
 800972a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 0201 	bic.w	r2, r2, #1
 800973c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800974c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f042 0201 	orr.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2220      	movs	r2, #32
 8009774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	e000      	b.n	8009786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009784:	2302      	movs	r3, #2
  }
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
	...

08009794 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af02      	add	r7, sp, #8
 800979a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80097a0:	f7fc fb62 	bl	8005e68 <HAL_GetTick>
 80097a4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	73fb      	strb	r3, [r7, #15]
 80097b0:	e0a5      	b.n	80098fe <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 809e 	bne.w	80098fe <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7fa faee 	bl	8003da4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80097c8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fa40 	bl	8009c52 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689a      	ldr	r2, [r3, #8]
 80097d8:	4b4b      	ldr	r3, [pc, #300]	@ (8009908 <HAL_OSPI_Init+0x174>)
 80097da:	4013      	ands	r3, r2
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	68d1      	ldr	r1, [r2, #12]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	6912      	ldr	r2, [r2, #16]
 80097e4:	3a01      	subs	r2, #1
 80097e6:	0412      	lsls	r2, r2, #16
 80097e8:	4311      	orrs	r1, r2
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	6952      	ldr	r2, [r2, #20]
 80097ee:	3a01      	subs	r2, #1
 80097f0:	0212      	lsls	r2, r2, #8
 80097f2:	4311      	orrs	r1, r2
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80097f8:	4311      	orrs	r1, r2
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	69d2      	ldr	r2, [r2, #28]
 80097fe:	4311      	orrs	r1, r2
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6812      	ldr	r2, [r2, #0]
 8009804:	430b      	orrs	r3, r1
 8009806:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1a      	ldr	r2, [r3, #32]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	430a      	orrs	r2, r1
 800981c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009822:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	430a      	orrs	r2, r1
 800982e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009838:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	3b01      	subs	r3, #1
 800984a:	021a      	lsls	r2, r3, #8
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	430a      	orrs	r2, r1
 8009852:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	2200      	movs	r2, #0
 800985e:	2120      	movs	r1, #32
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fef1 	bl	800a648 <OSPI_WaitFlagStateUntilTimeout>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d146      	bne.n	80098fe <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987e:	1e5a      	subs	r2, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80098a6:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b2:	431a      	orrs	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	430a      	orrs	r2, r1
 80098ba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f042 0201 	orr.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d107      	bne.n	80098e6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0202 	orr.w	r2, r2, #2
 80098e4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80098ee:	d103      	bne.n	80098f8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80098f6:	e002      	b.n	80098fe <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2202      	movs	r2, #2
 80098fc:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80098fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009900:	4618      	mov	r0, r3
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	f8e0f8f4 	.word	0xf8e0f8f4

0800990c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	@ 0x28
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8009918:	f7fc faa6 	bl	8005e68 <HAL_GetTick>
 800991c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009922:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009928:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	2b02      	cmp	r3, #2
 800992e:	d104      	bne.n	800993a <HAL_OSPI_Command+0x2e>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009938:	d115      	bne.n	8009966 <HAL_OSPI_Command+0x5a>
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	2b14      	cmp	r3, #20
 800993e:	d107      	bne.n	8009950 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d00e      	beq.n	8009966 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2b03      	cmp	r3, #3
 800994e:	d00a      	beq.n	8009966 <HAL_OSPI_Command+0x5a>
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	2b24      	cmp	r3, #36	@ 0x24
 8009954:	d15b      	bne.n	8009a0e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d003      	beq.n	8009966 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8009962:	2b03      	cmp	r3, #3
 8009964:	d153      	bne.n	8009a0e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	2200      	movs	r2, #0
 800996e:	2120      	movs	r1, #32
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fe69 	bl	800a648 <OSPI_WaitFlagStateUntilTimeout>
 8009976:	4603      	mov	r3, r0
 8009978:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800997a:	7ffb      	ldrb	r3, [r7, #31]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d14c      	bne.n	8009a1a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8009986:	68b9      	ldr	r1, [r7, #8]
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 fe95 	bl	800a6b8 <OSPI_ConfigCmd>
 800998e:	4603      	mov	r3, r0
 8009990:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8009992:	7ffb      	ldrb	r3, [r7, #31]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d140      	bne.n	8009a1a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10e      	bne.n	80099be <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	2201      	movs	r2, #1
 80099a8:	2102      	movs	r1, #2
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 fe4c 	bl	800a648 <OSPI_WaitFlagStateUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2202      	movs	r2, #2
 80099ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80099bc:	e02d      	b.n	8009a1a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d103      	bne.n	80099ce <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2204      	movs	r2, #4
 80099ca:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80099cc:	e025      	b.n	8009a1a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d10b      	bne.n	80099ee <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099da:	2b24      	cmp	r3, #36	@ 0x24
 80099dc:	d103      	bne.n	80099e6 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2204      	movs	r2, #4
 80099e2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80099e4:	e019      	b.n	8009a1a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2214      	movs	r2, #20
 80099ea:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 80099ec:	e015      	b.n	8009a1a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d111      	bne.n	8009a1a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099fa:	2b14      	cmp	r3, #20
 80099fc:	d103      	bne.n	8009a06 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2204      	movs	r2, #4
 8009a02:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009a04:	e009      	b.n	8009a1a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2224      	movs	r2, #36	@ 0x24
 8009a0a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8009a0c:	e005      	b.n	8009a1a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2210      	movs	r2, #16
 8009a16:	655a      	str	r2, [r3, #84]	@ 0x54
 8009a18:	e000      	b.n	8009a1c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8009a1a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8009a1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b08a      	sub	sp, #40	@ 0x28
 8009a2a:	af02      	add	r7, sp, #8
 8009a2c:	60f8      	str	r0, [r7, #12]
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009a32:	f7fc fa19 	bl	8005e68 <HAL_GetTick>
 8009a36:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3350      	adds	r3, #80	@ 0x50
 8009a3e:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d105      	bne.n	8009a52 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2208      	movs	r2, #8
 8009a4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009a50:	e057      	b.n	8009b02 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a56:	2b04      	cmp	r3, #4
 8009a58:	d14e      	bne.n	8009af8 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009a82:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	2104      	movs	r1, #4
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 fdda 	bl	800a648 <OSPI_WaitFlagStateUntilTimeout>
 8009a94:	4603      	mov	r3, r0
 8009a96:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8009a98:	7ffb      	ldrb	r3, [r7, #31]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d113      	bne.n	8009ac6 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ab6:	1e5a      	subs	r2, r3, #1
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1df      	bne.n	8009a84 <HAL_OSPI_Transmit+0x5e>
 8009ac4:	e000      	b.n	8009ac8 <HAL_OSPI_Transmit+0xa2>
          break;
 8009ac6:	bf00      	nop

      if (status == HAL_OK)
 8009ac8:	7ffb      	ldrb	r3, [r7, #31]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d119      	bne.n	8009b02 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	2102      	movs	r1, #2
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 fdb5 	bl	800a648 <OSPI_WaitFlagStateUntilTimeout>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8009ae2:	7ffb      	ldrb	r3, [r7, #31]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10c      	bne.n	8009b02 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2202      	movs	r2, #2
 8009aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2202      	movs	r2, #2
 8009af4:	651a      	str	r2, [r3, #80]	@ 0x50
 8009af6:	e004      	b.n	8009b02 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2210      	movs	r2, #16
 8009b00:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8009b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3720      	adds	r7, #32
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08c      	sub	sp, #48	@ 0x30
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009b18:	f7fc f9a6 	bl	8005e68 <HAL_GetTick>
 8009b1c:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3350      	adds	r3, #80	@ 0x50
 8009b24:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b2c:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8009b36:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d106      	bne.n	8009b4c <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2208      	movs	r2, #8
 8009b48:	655a      	str	r2, [r3, #84]	@ 0x54
 8009b4a:	e07c      	b.n	8009c46 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b50:	2b04      	cmp	r3, #4
 8009b52:	d172      	bne.n	8009c3a <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009b80:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b8a:	d104      	bne.n	8009b96 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	649a      	str	r2, [r3, #72]	@ 0x48
 8009b94:	e011      	b.n	8009bba <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009b9e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d004      	beq.n	8009bb0 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69ba      	ldr	r2, [r7, #24]
 8009bac:	649a      	str	r2, [r3, #72]	@ 0x48
 8009bae:	e004      	b.n	8009bba <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	697a      	ldr	r2, [r7, #20]
 8009bb6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	2106      	movs	r1, #6
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 fd3f 	bl	800a648 <OSPI_WaitFlagStateUntilTimeout>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8009bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d114      	bne.n	8009c02 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bdc:	69fa      	ldr	r2, [r7, #28]
 8009bde:	7812      	ldrb	r2, [r2, #0]
 8009be0:	b2d2      	uxtb	r2, r2
 8009be2:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bf2:	1e5a      	subs	r2, r3, #1
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1dc      	bne.n	8009bba <HAL_OSPI_Receive+0xae>
 8009c00:	e000      	b.n	8009c04 <HAL_OSPI_Receive+0xf8>
          break;
 8009c02:	bf00      	nop

      if (status == HAL_OK)
 8009c04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d11c      	bne.n	8009c46 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	6a3b      	ldr	r3, [r7, #32]
 8009c12:	2201      	movs	r2, #1
 8009c14:	2102      	movs	r1, #2
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 fd16 	bl	800a648 <OSPI_WaitFlagStateUntilTimeout>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8009c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d10d      	bne.n	8009c46 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2202      	movs	r2, #2
 8009c36:	651a      	str	r2, [r3, #80]	@ 0x50
 8009c38:	e005      	b.n	8009c46 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2210      	movs	r2, #16
 8009c44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8009c46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3728      	adds	r7, #40	@ 0x28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b094      	sub	sp, #80	@ 0x50
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a9d      	ldr	r2, [pc, #628]	@ (8009f04 <HAL_OSPIM_Config+0x294>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d105      	bne.n	8009c9e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8009c9c:	e004      	b.n	8009ca8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009cae:	e01d      	b.n	8009cec <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8009cb0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	b2d8      	uxtb	r0, r3
 8009cb8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009cbc:	f107 0114 	add.w	r1, r7, #20
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	4413      	add	r3, r2
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	440b      	add	r3, r1
 8009cca:	4619      	mov	r1, r3
 8009ccc:	f000 fe6e 	bl	800a9ac <OSPIM_GetConfig>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2208      	movs	r2, #8
 8009ce0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8009ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009cec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d9dd      	bls.n	8009cb0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8009cf4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f040 8499 	bne.w	800a630 <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8009cfe:	4b81      	ldr	r3, [pc, #516]	@ (8009f04 <HAL_OSPIM_Config+0x294>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00b      	beq.n	8009d22 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8009d0a:	4b7e      	ldr	r3, [pc, #504]	@ (8009f04 <HAL_OSPIM_Config+0x294>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a7d      	ldr	r2, [pc, #500]	@ (8009f04 <HAL_OSPIM_Config+0x294>)
 8009d10:	f023 0301 	bic.w	r3, r3, #1
 8009d14:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8009d16:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d1a:	f043 0301 	orr.w	r3, r3, #1
 8009d1e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8009d22:	4b79      	ldr	r3, [pc, #484]	@ (8009f08 <HAL_OSPIM_Config+0x298>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00b      	beq.n	8009d46 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8009d2e:	4b76      	ldr	r3, [pc, #472]	@ (8009f08 <HAL_OSPIM_Config+0x298>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a75      	ldr	r2, [pc, #468]	@ (8009f08 <HAL_OSPIM_Config+0x298>)
 8009d34:	f023 0301 	bic.w	r3, r3, #1
 8009d38:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8009d3a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009d3e:	f043 0302 	orr.w	r3, r3, #2
 8009d42:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8009d46:	4971      	ldr	r1, [pc, #452]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009d48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	4413      	add	r3, r2
 8009d50:	00db      	lsls	r3, r3, #3
 8009d52:	3350      	adds	r3, #80	@ 0x50
 8009d54:	443b      	add	r3, r7
 8009d56:	3b34      	subs	r3, #52	@ 0x34
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	6859      	ldr	r1, [r3, #4]
 8009d62:	486a      	ldr	r0, [pc, #424]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009d64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d66:	4613      	mov	r3, r2
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	4413      	add	r3, r2
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	3350      	adds	r3, #80	@ 0x50
 8009d70:	443b      	add	r3, r7
 8009d72:	3b34      	subs	r3, #52	@ 0x34
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3b01      	subs	r3, #1
 8009d78:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4403      	add	r3, r0
 8009d80:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8009d82:	4b62      	ldr	r3, [pc, #392]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 80c0 	beq.w	8009f10 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8009d90:	4b5e      	ldr	r3, [pc, #376]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a5d      	ldr	r2, [pc, #372]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009d96:	f023 0301 	bic.w	r3, r3, #1
 8009d9a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8009d9c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	f040 8162 	bne.w	800a06a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8009da6:	4959      	ldr	r1, [pc, #356]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009da8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009dac:	4613      	mov	r3, r2
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	4413      	add	r3, r2
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	3350      	adds	r3, #80	@ 0x50
 8009db6:	443b      	add	r3, r7
 8009db8:	3b3c      	subs	r3, #60	@ 0x3c
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	440b      	add	r3, r1
 8009dc2:	6859      	ldr	r1, [r3, #4]
 8009dc4:	4851      	ldr	r0, [pc, #324]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009dc6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009dca:	4613      	mov	r3, r2
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	4413      	add	r3, r2
 8009dd0:	00db      	lsls	r3, r3, #3
 8009dd2:	3350      	adds	r3, #80	@ 0x50
 8009dd4:	443b      	add	r3, r7
 8009dd6:	3b3c      	subs	r3, #60	@ 0x3c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	f041 0202 	orr.w	r2, r1, #2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4403      	add	r3, r0
 8009de4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8009de6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009dea:	4613      	mov	r3, r2
 8009dec:	005b      	lsls	r3, r3, #1
 8009dee:	4413      	add	r3, r2
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	3350      	adds	r3, #80	@ 0x50
 8009df4:	443b      	add	r3, r7
 8009df6:	3b38      	subs	r3, #56	@ 0x38
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d01f      	beq.n	8009e3e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8009dfe:	4943      	ldr	r1, [pc, #268]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009e00:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009e04:	4613      	mov	r3, r2
 8009e06:	005b      	lsls	r3, r3, #1
 8009e08:	4413      	add	r3, r2
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	3350      	adds	r3, #80	@ 0x50
 8009e0e:	443b      	add	r3, r7
 8009e10:	3b38      	subs	r3, #56	@ 0x38
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3b01      	subs	r3, #1
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	6859      	ldr	r1, [r3, #4]
 8009e1c:	483b      	ldr	r0, [pc, #236]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009e1e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009e22:	4613      	mov	r3, r2
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	4413      	add	r3, r2
 8009e28:	00db      	lsls	r3, r3, #3
 8009e2a:	3350      	adds	r3, #80	@ 0x50
 8009e2c:	443b      	add	r3, r7
 8009e2e:	3b38      	subs	r3, #56	@ 0x38
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3b01      	subs	r3, #1
 8009e34:	f041 0220 	orr.w	r2, r1, #32
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4403      	add	r3, r0
 8009e3c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009e3e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009e42:	4613      	mov	r3, r2
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	4413      	add	r3, r2
 8009e48:	00db      	lsls	r3, r3, #3
 8009e4a:	3350      	adds	r3, #80	@ 0x50
 8009e4c:	443b      	add	r3, r7
 8009e4e:	3b30      	subs	r3, #48	@ 0x30
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d023      	beq.n	8009e9e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8009e56:	492d      	ldr	r1, [pc, #180]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009e58:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	005b      	lsls	r3, r3, #1
 8009e60:	4413      	add	r3, r2
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	3350      	adds	r3, #80	@ 0x50
 8009e66:	443b      	add	r3, r7
 8009e68:	3b30      	subs	r3, #48	@ 0x30
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	440b      	add	r3, r1
 8009e76:	6859      	ldr	r1, [r3, #4]
 8009e78:	4824      	ldr	r0, [pc, #144]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009e7a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009e7e:	4613      	mov	r3, r2
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	4413      	add	r3, r2
 8009e84:	00db      	lsls	r3, r3, #3
 8009e86:	3350      	adds	r3, #80	@ 0x50
 8009e88:	443b      	add	r3, r7
 8009e8a:	3b30      	subs	r3, #48	@ 0x30
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	f003 0301 	and.w	r3, r3, #1
 8009e94:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4403      	add	r3, r0
 8009e9c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8009e9e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	4413      	add	r3, r2
 8009ea8:	00db      	lsls	r3, r3, #3
 8009eaa:	3350      	adds	r3, #80	@ 0x50
 8009eac:	443b      	add	r3, r7
 8009eae:	3b2c      	subs	r3, #44	@ 0x2c
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 80d9 	beq.w	800a06a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8009eb8:	4914      	ldr	r1, [pc, #80]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009eba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	005b      	lsls	r3, r3, #1
 8009ec2:	4413      	add	r3, r2
 8009ec4:	00db      	lsls	r3, r3, #3
 8009ec6:	3350      	adds	r3, #80	@ 0x50
 8009ec8:	443b      	add	r3, r7
 8009eca:	3b2c      	subs	r3, #44	@ 0x2c
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	440b      	add	r3, r1
 8009ed8:	6859      	ldr	r1, [r3, #4]
 8009eda:	480c      	ldr	r0, [pc, #48]	@ (8009f0c <HAL_OSPIM_Config+0x29c>)
 8009edc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	4413      	add	r3, r2
 8009ee6:	00db      	lsls	r3, r3, #3
 8009ee8:	3350      	adds	r3, #80	@ 0x50
 8009eea:	443b      	add	r3, r7
 8009eec:	3b2c      	subs	r3, #44	@ 0x2c
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4403      	add	r3, r0
 8009efe:	605a      	str	r2, [r3, #4]
 8009f00:	e0b3      	b.n	800a06a <HAL_OSPIM_Config+0x3fa>
 8009f02:	bf00      	nop
 8009f04:	52005000 	.word	0x52005000
 8009f08:	5200a000 	.word	0x5200a000
 8009f0c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8009f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f12:	4613      	mov	r3, r2
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	4413      	add	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	3350      	adds	r3, #80	@ 0x50
 8009f1c:	443b      	add	r3, r7
 8009f1e:	3b3c      	subs	r3, #60	@ 0x3c
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 80a1 	beq.w	800a06a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8009f28:	4995      	ldr	r1, [pc, #596]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 8009f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	005b      	lsls	r3, r3, #1
 8009f30:	4413      	add	r3, r2
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	3350      	adds	r3, #80	@ 0x50
 8009f36:	443b      	add	r3, r7
 8009f38:	3b3c      	subs	r3, #60	@ 0x3c
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	440b      	add	r3, r1
 8009f42:	6859      	ldr	r1, [r3, #4]
 8009f44:	488e      	ldr	r0, [pc, #568]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 8009f46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f48:	4613      	mov	r3, r2
 8009f4a:	005b      	lsls	r3, r3, #1
 8009f4c:	4413      	add	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	3350      	adds	r3, #80	@ 0x50
 8009f52:	443b      	add	r3, r7
 8009f54:	3b3c      	subs	r3, #60	@ 0x3c
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	f021 0201 	bic.w	r2, r1, #1
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4403      	add	r3, r0
 8009f62:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8009f64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f66:	4613      	mov	r3, r2
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	4413      	add	r3, r2
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	3350      	adds	r3, #80	@ 0x50
 8009f70:	443b      	add	r3, r7
 8009f72:	3b38      	subs	r3, #56	@ 0x38
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d01d      	beq.n	8009fb6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8009f7a:	4981      	ldr	r1, [pc, #516]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 8009f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f7e:	4613      	mov	r3, r2
 8009f80:	005b      	lsls	r3, r3, #1
 8009f82:	4413      	add	r3, r2
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	3350      	adds	r3, #80	@ 0x50
 8009f88:	443b      	add	r3, r7
 8009f8a:	3b38      	subs	r3, #56	@ 0x38
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	6859      	ldr	r1, [r3, #4]
 8009f96:	487a      	ldr	r0, [pc, #488]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 8009f98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	4413      	add	r3, r2
 8009fa0:	00db      	lsls	r3, r3, #3
 8009fa2:	3350      	adds	r3, #80	@ 0x50
 8009fa4:	443b      	add	r3, r7
 8009fa6:	3b38      	subs	r3, #56	@ 0x38
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	f021 0210 	bic.w	r2, r1, #16
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4403      	add	r3, r0
 8009fb4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8009fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fb8:	4613      	mov	r3, r2
 8009fba:	005b      	lsls	r3, r3, #1
 8009fbc:	4413      	add	r3, r2
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	3350      	adds	r3, #80	@ 0x50
 8009fc2:	443b      	add	r3, r7
 8009fc4:	3b30      	subs	r3, #48	@ 0x30
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d021      	beq.n	800a010 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8009fcc:	496c      	ldr	r1, [pc, #432]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 8009fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	4413      	add	r3, r2
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	3350      	adds	r3, #80	@ 0x50
 8009fda:	443b      	add	r3, r7
 8009fdc:	3b30      	subs	r3, #48	@ 0x30
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	440b      	add	r3, r1
 8009fea:	6859      	ldr	r1, [r3, #4]
 8009fec:	4864      	ldr	r0, [pc, #400]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 8009fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	4413      	add	r3, r2
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	3350      	adds	r3, #80	@ 0x50
 8009ffa:	443b      	add	r3, r7
 8009ffc:	3b30      	subs	r3, #48	@ 0x30
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3b01      	subs	r3, #1
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4403      	add	r3, r0
 800a00e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a012:	4613      	mov	r3, r2
 800a014:	005b      	lsls	r3, r3, #1
 800a016:	4413      	add	r3, r2
 800a018:	00db      	lsls	r3, r3, #3
 800a01a:	3350      	adds	r3, #80	@ 0x50
 800a01c:	443b      	add	r3, r7
 800a01e:	3b2c      	subs	r3, #44	@ 0x2c
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d021      	beq.n	800a06a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800a026:	4956      	ldr	r1, [pc, #344]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 800a028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a02a:	4613      	mov	r3, r2
 800a02c:	005b      	lsls	r3, r3, #1
 800a02e:	4413      	add	r3, r2
 800a030:	00db      	lsls	r3, r3, #3
 800a032:	3350      	adds	r3, #80	@ 0x50
 800a034:	443b      	add	r3, r7
 800a036:	3b2c      	subs	r3, #44	@ 0x2c
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	f003 0301 	and.w	r3, r3, #1
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	440b      	add	r3, r1
 800a044:	6859      	ldr	r1, [r3, #4]
 800a046:	484e      	ldr	r0, [pc, #312]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 800a048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a04a:	4613      	mov	r3, r2
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	4413      	add	r3, r2
 800a050:	00db      	lsls	r3, r3, #3
 800a052:	3350      	adds	r3, #80	@ 0x50
 800a054:	443b      	add	r3, r7
 800a056:	3b2c      	subs	r3, #44	@ 0x2c
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4403      	add	r3, r0
 800a068:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6819      	ldr	r1, [r3, #0]
 800a06e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a072:	4613      	mov	r3, r2
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	4413      	add	r3, r2
 800a078:	00db      	lsls	r3, r3, #3
 800a07a:	3350      	adds	r3, #80	@ 0x50
 800a07c:	443b      	add	r3, r7
 800a07e:	3b3c      	subs	r3, #60	@ 0x3c
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4299      	cmp	r1, r3
 800a084:	d03c      	beq.n	800a100 <HAL_OSPIM_Config+0x490>
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	6899      	ldr	r1, [r3, #8]
 800a08a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a08e:	4613      	mov	r3, r2
 800a090:	005b      	lsls	r3, r3, #1
 800a092:	4413      	add	r3, r2
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	3350      	adds	r3, #80	@ 0x50
 800a098:	443b      	add	r3, r7
 800a09a:	3b34      	subs	r3, #52	@ 0x34
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	d02e      	beq.n	800a100 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	6859      	ldr	r1, [r3, #4]
 800a0a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	005b      	lsls	r3, r3, #1
 800a0ae:	4413      	add	r3, r2
 800a0b0:	00db      	lsls	r3, r3, #3
 800a0b2:	3350      	adds	r3, #80	@ 0x50
 800a0b4:	443b      	add	r3, r7
 800a0b6:	3b38      	subs	r3, #56	@ 0x38
 800a0b8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800a0ba:	4299      	cmp	r1, r3
 800a0bc:	d103      	bne.n	800a0c6 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d11c      	bne.n	800a100 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	68d9      	ldr	r1, [r3, #12]
 800a0ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	005b      	lsls	r3, r3, #1
 800a0d2:	4413      	add	r3, r2
 800a0d4:	00db      	lsls	r3, r3, #3
 800a0d6:	3350      	adds	r3, #80	@ 0x50
 800a0d8:	443b      	add	r3, r7
 800a0da:	3b30      	subs	r3, #48	@ 0x30
 800a0dc:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	d00e      	beq.n	800a100 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	6919      	ldr	r1, [r3, #16]
 800a0e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	4413      	add	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	3350      	adds	r3, #80	@ 0x50
 800a0f4:	443b      	add	r3, r7
 800a0f6:	3b2c      	subs	r3, #44	@ 0x2c
 800a0f8:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	f040 810e 	bne.w	800a31c <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	6819      	ldr	r1, [r3, #0]
 800a104:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a108:	4613      	mov	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	3350      	adds	r3, #80	@ 0x50
 800a112:	443b      	add	r3, r7
 800a114:	3b3c      	subs	r3, #60	@ 0x3c
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4299      	cmp	r1, r3
 800a11a:	d133      	bne.n	800a184 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	6859      	ldr	r1, [r3, #4]
 800a120:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a124:	4613      	mov	r3, r2
 800a126:	005b      	lsls	r3, r3, #1
 800a128:	4413      	add	r3, r2
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	3350      	adds	r3, #80	@ 0x50
 800a12e:	443b      	add	r3, r7
 800a130:	3b38      	subs	r3, #56	@ 0x38
 800a132:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800a134:	4299      	cmp	r1, r3
 800a136:	d125      	bne.n	800a184 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	68d9      	ldr	r1, [r3, #12]
 800a13c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a140:	4613      	mov	r3, r2
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	4413      	add	r3, r2
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	3350      	adds	r3, #80	@ 0x50
 800a14a:	443b      	add	r3, r7
 800a14c:	3b30      	subs	r3, #48	@ 0x30
 800a14e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800a150:	4299      	cmp	r1, r3
 800a152:	d117      	bne.n	800a184 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	6919      	ldr	r1, [r3, #16]
 800a158:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a15c:	4613      	mov	r3, r2
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	4413      	add	r3, r2
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	3350      	adds	r3, #80	@ 0x50
 800a166:	443b      	add	r3, r7
 800a168:	3b2c      	subs	r3, #44	@ 0x2c
 800a16a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800a16c:	4299      	cmp	r1, r3
 800a16e:	d109      	bne.n	800a184 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a170:	4b03      	ldr	r3, [pc, #12]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a02      	ldr	r2, [pc, #8]	@ (800a180 <HAL_OSPIM_Config+0x510>)
 800a176:	f043 0301 	orr.w	r3, r3, #1
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	e0ce      	b.n	800a31c <HAL_OSPIM_Config+0x6ac>
 800a17e:	bf00      	nop
 800a180:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800a184:	49bb      	ldr	r1, [pc, #748]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a186:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a18a:	4613      	mov	r3, r2
 800a18c:	005b      	lsls	r3, r3, #1
 800a18e:	4413      	add	r3, r2
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	3350      	adds	r3, #80	@ 0x50
 800a194:	443b      	add	r3, r7
 800a196:	3b3c      	subs	r3, #60	@ 0x3c
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	440b      	add	r3, r1
 800a1a0:	6859      	ldr	r1, [r3, #4]
 800a1a2:	48b4      	ldr	r0, [pc, #720]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a1a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	4413      	add	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	3350      	adds	r3, #80	@ 0x50
 800a1b2:	443b      	add	r3, r7
 800a1b4:	3b3c      	subs	r3, #60	@ 0x3c
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	f021 0201 	bic.w	r2, r1, #1
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4403      	add	r3, r0
 800a1c2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a1c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	4413      	add	r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	3350      	adds	r3, #80	@ 0x50
 800a1d2:	443b      	add	r3, r7
 800a1d4:	3b38      	subs	r3, #56	@ 0x38
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d01f      	beq.n	800a21c <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800a1dc:	49a5      	ldr	r1, [pc, #660]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a1de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	4413      	add	r3, r2
 800a1e8:	00db      	lsls	r3, r3, #3
 800a1ea:	3350      	adds	r3, #80	@ 0x50
 800a1ec:	443b      	add	r3, r7
 800a1ee:	3b38      	subs	r3, #56	@ 0x38
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	440b      	add	r3, r1
 800a1f8:	6859      	ldr	r1, [r3, #4]
 800a1fa:	489e      	ldr	r0, [pc, #632]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a1fc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a200:	4613      	mov	r3, r2
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	4413      	add	r3, r2
 800a206:	00db      	lsls	r3, r3, #3
 800a208:	3350      	adds	r3, #80	@ 0x50
 800a20a:	443b      	add	r3, r7
 800a20c:	3b38      	subs	r3, #56	@ 0x38
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	3b01      	subs	r3, #1
 800a212:	f021 0210 	bic.w	r2, r1, #16
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4403      	add	r3, r0
 800a21a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a21c:	4995      	ldr	r1, [pc, #596]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a21e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a222:	4613      	mov	r3, r2
 800a224:	005b      	lsls	r3, r3, #1
 800a226:	4413      	add	r3, r2
 800a228:	00db      	lsls	r3, r3, #3
 800a22a:	3350      	adds	r3, #80	@ 0x50
 800a22c:	443b      	add	r3, r7
 800a22e:	3b34      	subs	r3, #52	@ 0x34
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3b01      	subs	r3, #1
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	440b      	add	r3, r1
 800a238:	6859      	ldr	r1, [r3, #4]
 800a23a:	488e      	ldr	r0, [pc, #568]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a23c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a240:	4613      	mov	r3, r2
 800a242:	005b      	lsls	r3, r3, #1
 800a244:	4413      	add	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	3350      	adds	r3, #80	@ 0x50
 800a24a:	443b      	add	r3, r7
 800a24c:	3b34      	subs	r3, #52	@ 0x34
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	3b01      	subs	r3, #1
 800a252:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4403      	add	r3, r0
 800a25a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a25c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a260:	4613      	mov	r3, r2
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	4413      	add	r3, r2
 800a266:	00db      	lsls	r3, r3, #3
 800a268:	3350      	adds	r3, #80	@ 0x50
 800a26a:	443b      	add	r3, r7
 800a26c:	3b30      	subs	r3, #48	@ 0x30
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d023      	beq.n	800a2bc <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a274:	497f      	ldr	r1, [pc, #508]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a276:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a27a:	4613      	mov	r3, r2
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	4413      	add	r3, r2
 800a280:	00db      	lsls	r3, r3, #3
 800a282:	3350      	adds	r3, #80	@ 0x50
 800a284:	443b      	add	r3, r7
 800a286:	3b30      	subs	r3, #48	@ 0x30
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	f003 0301 	and.w	r3, r3, #1
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	440b      	add	r3, r1
 800a294:	6859      	ldr	r1, [r3, #4]
 800a296:	4877      	ldr	r0, [pc, #476]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a298:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a29c:	4613      	mov	r3, r2
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	4413      	add	r3, r2
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	3350      	adds	r3, #80	@ 0x50
 800a2a6:	443b      	add	r3, r7
 800a2a8:	3b30      	subs	r3, #48	@ 0x30
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4403      	add	r3, r0
 800a2ba:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a2bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	4413      	add	r3, r2
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	3350      	adds	r3, #80	@ 0x50
 800a2ca:	443b      	add	r3, r7
 800a2cc:	3b2c      	subs	r3, #44	@ 0x2c
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d023      	beq.n	800a31c <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a2d4:	4967      	ldr	r1, [pc, #412]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a2d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2da:	4613      	mov	r3, r2
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	4413      	add	r3, r2
 800a2e0:	00db      	lsls	r3, r3, #3
 800a2e2:	3350      	adds	r3, #80	@ 0x50
 800a2e4:	443b      	add	r3, r7
 800a2e6:	3b2c      	subs	r3, #44	@ 0x2c
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3b01      	subs	r3, #1
 800a2ec:	f003 0301 	and.w	r3, r3, #1
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	440b      	add	r3, r1
 800a2f4:	6859      	ldr	r1, [r3, #4]
 800a2f6:	485f      	ldr	r0, [pc, #380]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a2f8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	005b      	lsls	r3, r3, #1
 800a300:	4413      	add	r3, r2
 800a302:	00db      	lsls	r3, r3, #3
 800a304:	3350      	adds	r3, #80	@ 0x50
 800a306:	443b      	add	r3, r7
 800a308:	3b2c      	subs	r3, #44	@ 0x2c
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4403      	add	r3, r0
 800a31a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800a31c:	4a55      	ldr	r2, [pc, #340]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	3b01      	subs	r3, #1
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a32e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a330:	025b      	lsls	r3, r3, #9
 800a332:	431a      	orrs	r2, r3
 800a334:	494f      	ldr	r1, [pc, #316]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	440b      	add	r3, r1
 800a344:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	1e5a      	subs	r2, r3, #1
 800a34c:	4b49      	ldr	r3, [pc, #292]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	0c1b      	lsrs	r3, r3, #16
 800a352:	b2db      	uxtb	r3, r3
 800a354:	429a      	cmp	r2, r3
 800a356:	d90a      	bls.n	800a36e <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800a358:	4b46      	ldr	r3, [pc, #280]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	695b      	ldr	r3, [r3, #20]
 800a364:	3b01      	subs	r3, #1
 800a366:	041b      	lsls	r3, r3, #16
 800a368:	4942      	ldr	r1, [pc, #264]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a36e:	4b41      	ldr	r3, [pc, #260]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 809a 	beq.w	800a4b0 <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800a37c:	4a3d      	ldr	r2, [pc, #244]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	3b01      	subs	r3, #1
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f023 0203 	bic.w	r2, r3, #3
 800a38e:	4939      	ldr	r1, [pc, #228]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	3b01      	subs	r3, #1
 800a396:	f042 0201 	orr.w	r2, r2, #1
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	440b      	add	r3, r1
 800a39e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d011      	beq.n	800a3cc <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800a3a8:	4a32      	ldr	r2, [pc, #200]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4413      	add	r3, r2
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a3ba:	492e      	ldr	r1, [pc, #184]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	f042 0210 	orr.w	r2, r2, #16
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	440b      	add	r3, r1
 800a3ca:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d016      	beq.n	800a406 <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a3d8:	4a26      	ldr	r2, [pc, #152]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	f003 0301 	and.w	r3, r3, #1
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a3ee:	4921      	ldr	r1, [pc, #132]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	440b      	add	r3, r1
 800a402:	605a      	str	r2, [r3, #4]
 800a404:	e019      	b.n	800a43a <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d015      	beq.n	800a43a <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a40e:	4a19      	ldr	r2, [pc, #100]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	3b01      	subs	r3, #1
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a424:	4913      	ldr	r1, [pc, #76]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	440b      	add	r3, r1
 800a438:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d018      	beq.n	800a478 <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a446:	4a0b      	ldr	r2, [pc, #44]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a45c:	4905      	ldr	r1, [pc, #20]	@ (800a474 <HAL_OSPIM_Config+0x804>)
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	3b01      	subs	r3, #1
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	440b      	add	r3, r1
 800a470:	605a      	str	r2, [r3, #4]
 800a472:	e0c5      	b.n	800a600 <HAL_OSPIM_Config+0x990>
 800a474:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 80bf 	beq.w	800a600 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a482:	4a6e      	ldr	r2, [pc, #440]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	3b01      	subs	r3, #1
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4413      	add	r3, r2
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a498:	4968      	ldr	r1, [pc, #416]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	440b      	add	r3, r1
 800a4ac:	605a      	str	r2, [r3, #4]
 800a4ae:	e0a7      	b.n	800a600 <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800a4b0:	4a62      	ldr	r2, [pc, #392]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4413      	add	r3, r2
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f023 0203 	bic.w	r2, r3, #3
 800a4c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	495c      	ldr	r1, [pc, #368]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	f042 0201 	orr.w	r2, r2, #1
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	440b      	add	r3, r1
 800a4d8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d014      	beq.n	800a50c <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800a4e2:	4a56      	ldr	r2, [pc, #344]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	009b      	lsls	r3, r3, #2
 800a4ec:	4413      	add	r3, r2
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a4f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4f6:	015b      	lsls	r3, r3, #5
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	4950      	ldr	r1, [pc, #320]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	3b01      	subs	r3, #1
 800a502:	f042 0210 	orr.w	r2, r2, #16
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	440b      	add	r3, r1
 800a50a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d019      	beq.n	800a54c <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a518:	4a48      	ldr	r2, [pc, #288]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	3b01      	subs	r3, #1
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	4413      	add	r3, r2
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a52e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a530:	049b      	lsls	r3, r3, #18
 800a532:	431a      	orrs	r2, r3
 800a534:	4941      	ldr	r1, [pc, #260]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	440b      	add	r3, r1
 800a548:	605a      	str	r2, [r3, #4]
 800a54a:	e01c      	b.n	800a586 <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d018      	beq.n	800a586 <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a554:	4a39      	ldr	r2, [pc, #228]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	f003 0301 	and.w	r3, r3, #1
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a56a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a56c:	069b      	lsls	r3, r3, #26
 800a56e:	431a      	orrs	r2, r3
 800a570:	4932      	ldr	r1, [pc, #200]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	3b01      	subs	r3, #1
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	440b      	add	r3, r1
 800a584:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d019      	beq.n	800a5c6 <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a592:	4a2a      	ldr	r2, [pc, #168]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	3b01      	subs	r3, #1
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800a5a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5aa:	049b      	lsls	r3, r3, #18
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	4923      	ldr	r1, [pc, #140]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	440b      	add	r3, r1
 800a5c2:	605a      	str	r2, [r3, #4]
 800a5c4:	e01c      	b.n	800a600 <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d018      	beq.n	800a600 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800a5ce:	4a1b      	ldr	r2, [pc, #108]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	691b      	ldr	r3, [r3, #16]
 800a5d4:	3b01      	subs	r3, #1
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	4413      	add	r3, r2
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800a5e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5e6:	069b      	lsls	r3, r3, #26
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	4914      	ldr	r1, [pc, #80]	@ (800a63c <HAL_OSPIM_Config+0x9cc>)
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	440b      	add	r3, r1
 800a5fe:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800a600:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a604:	f003 0301 	and.w	r3, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d005      	beq.n	800a618 <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a60c:	4b0c      	ldr	r3, [pc, #48]	@ (800a640 <HAL_OSPIM_Config+0x9d0>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a0b      	ldr	r2, [pc, #44]	@ (800a640 <HAL_OSPIM_Config+0x9d0>)
 800a612:	f043 0301 	orr.w	r3, r3, #1
 800a616:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800a618:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a61c:	f003 0302 	and.w	r3, r3, #2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a624:	4b07      	ldr	r3, [pc, #28]	@ (800a644 <HAL_OSPIM_Config+0x9d4>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a06      	ldr	r2, [pc, #24]	@ (800a644 <HAL_OSPIM_Config+0x9d4>)
 800a62a:	f043 0301 	orr.w	r3, r3, #1
 800a62e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800a630:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a634:	4618      	mov	r0, r3
 800a636:	3750      	adds	r7, #80	@ 0x50
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	5200b400 	.word	0x5200b400
 800a640:	52005000 	.word	0x52005000
 800a644:	5200a000 	.word	0x5200a000

0800a648 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	603b      	str	r3, [r7, #0]
 800a654:	4613      	mov	r3, r2
 800a656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a658:	e01a      	b.n	800a690 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a660:	d016      	beq.n	800a690 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a662:	f7fb fc01 	bl	8005e68 <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	69ba      	ldr	r2, [r7, #24]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d302      	bcc.n	800a678 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10b      	bne.n	800a690 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a67e:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a684:	f043 0201 	orr.w	r2, r3, #1
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e00e      	b.n	800a6ae <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6a1a      	ldr	r2, [r3, #32]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	4013      	ands	r3, r2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	bf14      	ite	ne
 800a69e:	2301      	movne	r3, #1
 800a6a0:	2300      	moveq	r3, #0
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	79fb      	ldrb	r3, [r7, #7]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d1d6      	bne.n	800a65a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
	...

0800a6b8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b089      	sub	sp, #36	@ 0x24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a6d4:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10a      	bne.n	800a6f4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d114      	bne.n	800a726 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800a704:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800a70e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800a718:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	e02c      	b.n	800a780 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d114      	bne.n	800a758 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800a736:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800a740:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a74a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a754:	60fb      	str	r3, [r7, #12]
 800a756:	e013      	b.n	800a780 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800a760:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800a76a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800a774:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800a77e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a788:	431a      	orrs	r2, r3
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d012      	beq.n	800a7bc <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ae:	4319      	orrs	r1, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b4:	430b      	orrs	r3, r1
 800a7b6:	431a      	orrs	r2, r3
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f023 021f 	bic.w	r2, r3, #31
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7c8:	431a      	orrs	r2, r3
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d009      	beq.n	800a7ea <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d105      	bne.n	800a7ea <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	3a01      	subs	r2, #1
 800a7e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 8095 	beq.w	800a91e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	69db      	ldr	r3, [r3, #28]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d053      	beq.n	800a8a4 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a800:	2b00      	cmp	r3, #0
 800a802:	d01e      	beq.n	800a842 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	4b64      	ldr	r3, [pc, #400]	@ (800a99c <OSPI_ConfigCmd+0x2e4>)
 800a80a:	4013      	ands	r3, r2
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	68d1      	ldr	r1, [r2, #12]
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	6952      	ldr	r2, [r2, #20]
 800a814:	4311      	orrs	r1, r2
 800a816:	683a      	ldr	r2, [r7, #0]
 800a818:	6912      	ldr	r2, [r2, #16]
 800a81a:	4311      	orrs	r1, r2
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	69d2      	ldr	r2, [r2, #28]
 800a820:	4311      	orrs	r1, r2
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a826:	4311      	orrs	r1, r2
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	6a12      	ldr	r2, [r2, #32]
 800a82c:	4311      	orrs	r1, r2
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a832:	4311      	orrs	r1, r2
 800a834:	683a      	ldr	r2, [r7, #0]
 800a836:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a838:	430a      	orrs	r2, r1
 800a83a:	431a      	orrs	r2, r3
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	e026      	b.n	800a890 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	4b56      	ldr	r3, [pc, #344]	@ (800a9a0 <OSPI_ConfigCmd+0x2e8>)
 800a848:	4013      	ands	r3, r2
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	68d1      	ldr	r1, [r2, #12]
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	6952      	ldr	r2, [r2, #20]
 800a852:	4311      	orrs	r1, r2
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	6912      	ldr	r2, [r2, #16]
 800a858:	4311      	orrs	r1, r2
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	69d2      	ldr	r2, [r2, #28]
 800a85e:	4311      	orrs	r1, r2
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a864:	4311      	orrs	r1, r2
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	6a12      	ldr	r2, [r2, #32]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	431a      	orrs	r2, r3
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a87a:	d109      	bne.n	800a890 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a880:	2b08      	cmp	r3, #8
 800a882:	d105      	bne.n	800a890 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	689a      	ldr	r2, [r3, #8]
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	6992      	ldr	r2, [r2, #24]
 800a8a0:	649a      	str	r2, [r3, #72]	@ 0x48
 800a8a2:	e074      	b.n	800a98e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d015      	beq.n	800a8d8 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	4b3c      	ldr	r3, [pc, #240]	@ (800a9a4 <OSPI_ConfigCmd+0x2ec>)
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	683a      	ldr	r2, [r7, #0]
 800a8b6:	68d1      	ldr	r1, [r2, #12]
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	6952      	ldr	r2, [r2, #20]
 800a8bc:	4311      	orrs	r1, r2
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	6912      	ldr	r2, [r2, #16]
 800a8c2:	4311      	orrs	r1, r2
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a8c8:	4311      	orrs	r1, r2
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	431a      	orrs	r2, r3
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	e01d      	b.n	800a914 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	68d9      	ldr	r1, [r3, #12]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	4319      	orrs	r1, r3
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	430b      	orrs	r3, r1
 800a8f0:	431a      	orrs	r2, r3
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8fe:	d109      	bne.n	800a914 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800a904:	2b08      	cmp	r3, #8
 800a906:	d105      	bne.n	800a914 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a910:	69bb      	ldr	r3, [r7, #24]
 800a912:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	e037      	b.n	800a98e <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d02e      	beq.n	800a984 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d015      	beq.n	800a95a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	4b1d      	ldr	r3, [pc, #116]	@ (800a9a8 <OSPI_ConfigCmd+0x2f0>)
 800a934:	4013      	ands	r3, r2
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	69d1      	ldr	r1, [r2, #28]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a93e:	4311      	orrs	r1, r2
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	6a12      	ldr	r2, [r2, #32]
 800a944:	4311      	orrs	r1, r2
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a94a:	4311      	orrs	r1, r2
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800a950:	430a      	orrs	r2, r1
 800a952:	431a      	orrs	r2, r3
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	e00e      	b.n	800a978 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	69d9      	ldr	r1, [r3, #28]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96a:	4319      	orrs	r1, r3
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	6a1b      	ldr	r3, [r3, #32]
 800a970:	430b      	orrs	r3, r1
 800a972:	431a      	orrs	r2, r3
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	6992      	ldr	r2, [r2, #24]
 800a980:	649a      	str	r2, [r3, #72]	@ 0x48
 800a982:	e004      	b.n	800a98e <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2208      	movs	r2, #8
 800a98c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800a98e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a990:	4618      	mov	r0, r3
 800a992:	3724      	adds	r7, #36	@ 0x24
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	f0ffc0c0 	.word	0xf0ffc0c0
 800a9a0:	ffffc0c0 	.word	0xffffc0c0
 800a9a4:	f0ffffc0 	.word	0xf0ffffc0
 800a9a8:	f0ffc0ff 	.word	0xf0ffc0ff

0800a9ac <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	6039      	str	r1, [r7, #0]
 800a9b6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800a9c0:	79fb      	ldrb	r3, [r7, #7]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d005      	beq.n	800a9d2 <OSPIM_GetConfig+0x26>
 800a9c6:	79fb      	ldrb	r3, [r7, #7]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d802      	bhi.n	800a9d2 <OSPIM_GetConfig+0x26>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d102      	bne.n	800a9d8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	75fb      	strb	r3, [r7, #23]
 800a9d6:	e098      	b.n	800ab0a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800a9f6:	79fb      	ldrb	r3, [r7, #7]
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d10b      	bne.n	800aa14 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800a9fc:	4b46      	ldr	r3, [pc, #280]	@ (800ab18 <OSPIM_GetConfig+0x16c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0301 	and.w	r3, r3, #1
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d102      	bne.n	800aa0e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800aa08:	4b44      	ldr	r3, [pc, #272]	@ (800ab1c <OSPIM_GetConfig+0x170>)
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	e002      	b.n	800aa14 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800aa0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa12:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800aa14:	2300      	movs	r3, #0
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	e074      	b.n	800ab04 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800aa1a:	4a3f      	ldr	r2, [pc, #252]	@ (800ab18 <OSPIM_GetConfig+0x16c>)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f003 0301 	and.w	r3, r3, #1
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00a      	beq.n	800aa46 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	4053      	eors	r3, r2
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d103      	bne.n	800aa46 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	f003 0310 	and.w	r3, r3, #16
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00a      	beq.n	800aa66 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800aa50:	68ba      	ldr	r2, [r7, #8]
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	4053      	eors	r3, r2
 800aa56:	f003 0320 	and.w	r3, r3, #32
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d103      	bne.n	800aa66 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00a      	beq.n	800aa86 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800aa70:	68ba      	ldr	r2, [r7, #8]
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	4053      	eors	r3, r2
 800aa76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d103      	bne.n	800aa86 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d018      	beq.n	800aac2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800aa90:	68ba      	ldr	r2, [r7, #8]
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	4053      	eors	r3, r2
 800aa96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d111      	bne.n	800aac2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d106      	bne.n	800aab6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	60da      	str	r2, [r3, #12]
 800aab4:	e005      	b.n	800aac2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3301      	adds	r3, #1
 800aaba:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d018      	beq.n	800aafe <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	4053      	eors	r3, r2
 800aad2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d111      	bne.n	800aafe <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d106      	bne.n	800aaf2 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	3301      	adds	r3, #1
 800aae8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	611a      	str	r2, [r3, #16]
 800aaf0:	e005      	b.n	800aafe <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3301      	adds	r3, #1
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d987      	bls.n	800aa1a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	371c      	adds	r7, #28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	5200b400 	.word	0x5200b400
 800ab1c:	04040222 	.word	0x04040222

0800ab20 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ab28:	4b19      	ldr	r3, [pc, #100]	@ (800ab90 <HAL_PWREx_ConfigSupply+0x70>)
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b04      	cmp	r3, #4
 800ab32:	d00a      	beq.n	800ab4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ab34:	4b16      	ldr	r3, [pc, #88]	@ (800ab90 <HAL_PWREx_ConfigSupply+0x70>)
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	f003 0307 	and.w	r3, r3, #7
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d001      	beq.n	800ab46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e01f      	b.n	800ab86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ab46:	2300      	movs	r3, #0
 800ab48:	e01d      	b.n	800ab86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ab4a:	4b11      	ldr	r3, [pc, #68]	@ (800ab90 <HAL_PWREx_ConfigSupply+0x70>)
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f023 0207 	bic.w	r2, r3, #7
 800ab52:	490f      	ldr	r1, [pc, #60]	@ (800ab90 <HAL_PWREx_ConfigSupply+0x70>)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ab5a:	f7fb f985 	bl	8005e68 <HAL_GetTick>
 800ab5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ab60:	e009      	b.n	800ab76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ab62:	f7fb f981 	bl	8005e68 <HAL_GetTick>
 800ab66:	4602      	mov	r2, r0
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	1ad3      	subs	r3, r2, r3
 800ab6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ab70:	d901      	bls.n	800ab76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e007      	b.n	800ab86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ab76:	4b06      	ldr	r3, [pc, #24]	@ (800ab90 <HAL_PWREx_ConfigSupply+0x70>)
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab82:	d1ee      	bne.n	800ab62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	58024800 	.word	0x58024800

0800ab94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08c      	sub	sp, #48	@ 0x30
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e3c8      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 8087 	beq.w	800acc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800abb4:	4b88      	ldr	r3, [pc, #544]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800abbe:	4b86      	ldr	r3, [pc, #536]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800abc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800abc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc6:	2b10      	cmp	r3, #16
 800abc8:	d007      	beq.n	800abda <HAL_RCC_OscConfig+0x46>
 800abca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abcc:	2b18      	cmp	r3, #24
 800abce:	d110      	bne.n	800abf2 <HAL_RCC_OscConfig+0x5e>
 800abd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd2:	f003 0303 	and.w	r3, r3, #3
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d10b      	bne.n	800abf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abda:	4b7f      	ldr	r3, [pc, #508]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d06c      	beq.n	800acc0 <HAL_RCC_OscConfig+0x12c>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d168      	bne.n	800acc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e3a2      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abfa:	d106      	bne.n	800ac0a <HAL_RCC_OscConfig+0x76>
 800abfc:	4b76      	ldr	r3, [pc, #472]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a75      	ldr	r2, [pc, #468]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac06:	6013      	str	r3, [r2, #0]
 800ac08:	e02e      	b.n	800ac68 <HAL_RCC_OscConfig+0xd4>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10c      	bne.n	800ac2c <HAL_RCC_OscConfig+0x98>
 800ac12:	4b71      	ldr	r3, [pc, #452]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a70      	ldr	r2, [pc, #448]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	4b6e      	ldr	r3, [pc, #440]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a6d      	ldr	r2, [pc, #436]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac28:	6013      	str	r3, [r2, #0]
 800ac2a:	e01d      	b.n	800ac68 <HAL_RCC_OscConfig+0xd4>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac34:	d10c      	bne.n	800ac50 <HAL_RCC_OscConfig+0xbc>
 800ac36:	4b68      	ldr	r3, [pc, #416]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a67      	ldr	r2, [pc, #412]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ac40:	6013      	str	r3, [r2, #0]
 800ac42:	4b65      	ldr	r3, [pc, #404]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a64      	ldr	r2, [pc, #400]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	e00b      	b.n	800ac68 <HAL_RCC_OscConfig+0xd4>
 800ac50:	4b61      	ldr	r3, [pc, #388]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a60      	ldr	r2, [pc, #384]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac5a:	6013      	str	r3, [r2, #0]
 800ac5c:	4b5e      	ldr	r3, [pc, #376]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a5d      	ldr	r2, [pc, #372]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d013      	beq.n	800ac98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac70:	f7fb f8fa 	bl	8005e68 <HAL_GetTick>
 800ac74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac76:	e008      	b.n	800ac8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac78:	f7fb f8f6 	bl	8005e68 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	2b64      	cmp	r3, #100	@ 0x64
 800ac84:	d901      	bls.n	800ac8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e356      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac8a:	4b53      	ldr	r3, [pc, #332]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0f0      	beq.n	800ac78 <HAL_RCC_OscConfig+0xe4>
 800ac96:	e014      	b.n	800acc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac98:	f7fb f8e6 	bl	8005e68 <HAL_GetTick>
 800ac9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ac9e:	e008      	b.n	800acb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aca0:	f7fb f8e2 	bl	8005e68 <HAL_GetTick>
 800aca4:	4602      	mov	r2, r0
 800aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	2b64      	cmp	r3, #100	@ 0x64
 800acac:	d901      	bls.n	800acb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800acae:	2303      	movs	r3, #3
 800acb0:	e342      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800acb2:	4b49      	ldr	r3, [pc, #292]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1f0      	bne.n	800aca0 <HAL_RCC_OscConfig+0x10c>
 800acbe:	e000      	b.n	800acc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0302 	and.w	r3, r3, #2
 800acca:	2b00      	cmp	r3, #0
 800accc:	f000 808c 	beq.w	800ade8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acd0:	4b41      	ldr	r3, [pc, #260]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800acda:	4b3f      	ldr	r3, [pc, #252]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800acdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acde:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d007      	beq.n	800acf6 <HAL_RCC_OscConfig+0x162>
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	2b18      	cmp	r3, #24
 800acea:	d137      	bne.n	800ad5c <HAL_RCC_OscConfig+0x1c8>
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	f003 0303 	and.w	r3, r3, #3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d132      	bne.n	800ad5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800acf6:	4b38      	ldr	r3, [pc, #224]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0304 	and.w	r3, r3, #4
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d005      	beq.n	800ad0e <HAL_RCC_OscConfig+0x17a>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e314      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad0e:	4b32      	ldr	r3, [pc, #200]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f023 0219 	bic.w	r2, r3, #25
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	492f      	ldr	r1, [pc, #188]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad20:	f7fb f8a2 	bl	8005e68 <HAL_GetTick>
 800ad24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad26:	e008      	b.n	800ad3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad28:	f7fb f89e 	bl	8005e68 <HAL_GetTick>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d901      	bls.n	800ad3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ad36:	2303      	movs	r3, #3
 800ad38:	e2fe      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad3a:	4b27      	ldr	r3, [pc, #156]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f003 0304 	and.w	r3, r3, #4
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0f0      	beq.n	800ad28 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad46:	4b24      	ldr	r3, [pc, #144]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	061b      	lsls	r3, r3, #24
 800ad54:	4920      	ldr	r1, [pc, #128]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad5a:	e045      	b.n	800ade8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d026      	beq.n	800adb2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad64:	4b1c      	ldr	r3, [pc, #112]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f023 0219 	bic.w	r2, r3, #25
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	68db      	ldr	r3, [r3, #12]
 800ad70:	4919      	ldr	r1, [pc, #100]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad72:	4313      	orrs	r3, r2
 800ad74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad76:	f7fb f877 	bl	8005e68 <HAL_GetTick>
 800ad7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad7c:	e008      	b.n	800ad90 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad7e:	f7fb f873 	bl	8005e68 <HAL_GetTick>
 800ad82:	4602      	mov	r2, r0
 800ad84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d901      	bls.n	800ad90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e2d3      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad90:	4b11      	ldr	r3, [pc, #68]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d0f0      	beq.n	800ad7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad9c:	4b0e      	ldr	r3, [pc, #56]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	691b      	ldr	r3, [r3, #16]
 800ada8:	061b      	lsls	r3, r3, #24
 800adaa:	490b      	ldr	r1, [pc, #44]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800adac:	4313      	orrs	r3, r2
 800adae:	604b      	str	r3, [r1, #4]
 800adb0:	e01a      	b.n	800ade8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adb2:	4b09      	ldr	r3, [pc, #36]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a08      	ldr	r2, [pc, #32]	@ (800add8 <HAL_RCC_OscConfig+0x244>)
 800adb8:	f023 0301 	bic.w	r3, r3, #1
 800adbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adbe:	f7fb f853 	bl	8005e68 <HAL_GetTick>
 800adc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800adc4:	e00a      	b.n	800addc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adc6:	f7fb f84f 	bl	8005e68 <HAL_GetTick>
 800adca:	4602      	mov	r2, r0
 800adcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	2b02      	cmp	r3, #2
 800add2:	d903      	bls.n	800addc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800add4:	2303      	movs	r3, #3
 800add6:	e2af      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
 800add8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800addc:	4b96      	ldr	r3, [pc, #600]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f003 0304 	and.w	r3, r3, #4
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1ee      	bne.n	800adc6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0310 	and.w	r3, r3, #16
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d06a      	beq.n	800aeca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adf4:	4b90      	ldr	r3, [pc, #576]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800adfc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800adfe:	4b8e      	ldr	r3, [pc, #568]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae02:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	2b08      	cmp	r3, #8
 800ae08:	d007      	beq.n	800ae1a <HAL_RCC_OscConfig+0x286>
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b18      	cmp	r3, #24
 800ae0e:	d11b      	bne.n	800ae48 <HAL_RCC_OscConfig+0x2b4>
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f003 0303 	and.w	r3, r3, #3
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d116      	bne.n	800ae48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae1a:	4b87      	ldr	r3, [pc, #540]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d005      	beq.n	800ae32 <HAL_RCC_OscConfig+0x29e>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	69db      	ldr	r3, [r3, #28]
 800ae2a:	2b80      	cmp	r3, #128	@ 0x80
 800ae2c:	d001      	beq.n	800ae32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e282      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae32:	4b81      	ldr	r3, [pc, #516]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	061b      	lsls	r3, r3, #24
 800ae40:	497d      	ldr	r1, [pc, #500]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae46:	e040      	b.n	800aeca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d023      	beq.n	800ae98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ae50:	4b79      	ldr	r3, [pc, #484]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a78      	ldr	r2, [pc, #480]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae5c:	f7fb f804 	bl	8005e68 <HAL_GetTick>
 800ae60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae62:	e008      	b.n	800ae76 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ae64:	f7fb f800 	bl	8005e68 <HAL_GetTick>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d901      	bls.n	800ae76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e260      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ae76:	4b70      	ldr	r3, [pc, #448]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d0f0      	beq.n	800ae64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae82:	4b6d      	ldr	r3, [pc, #436]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae84:	68db      	ldr	r3, [r3, #12]
 800ae86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	061b      	lsls	r3, r3, #24
 800ae90:	4969      	ldr	r1, [pc, #420]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60cb      	str	r3, [r1, #12]
 800ae96:	e018      	b.n	800aeca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ae98:	4b67      	ldr	r3, [pc, #412]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a66      	ldr	r2, [pc, #408]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800ae9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aea4:	f7fa ffe0 	bl	8005e68 <HAL_GetTick>
 800aea8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aeaa:	e008      	b.n	800aebe <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aeac:	f7fa ffdc 	bl	8005e68 <HAL_GetTick>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d901      	bls.n	800aebe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e23c      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aebe:	4b5e      	ldr	r3, [pc, #376]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1f0      	bne.n	800aeac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0308 	and.w	r3, r3, #8
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d036      	beq.n	800af44 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d019      	beq.n	800af12 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aede:	4b56      	ldr	r3, [pc, #344]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800aee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aee2:	4a55      	ldr	r2, [pc, #340]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800aee4:	f043 0301 	orr.w	r3, r3, #1
 800aee8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeea:	f7fa ffbd 	bl	8005e68 <HAL_GetTick>
 800aeee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aef0:	e008      	b.n	800af04 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aef2:	f7fa ffb9 	bl	8005e68 <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d901      	bls.n	800af04 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e219      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af04:	4b4c      	ldr	r3, [pc, #304]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800af06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af08:	f003 0302 	and.w	r3, r3, #2
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0f0      	beq.n	800aef2 <HAL_RCC_OscConfig+0x35e>
 800af10:	e018      	b.n	800af44 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af12:	4b49      	ldr	r3, [pc, #292]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800af14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af16:	4a48      	ldr	r2, [pc, #288]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800af18:	f023 0301 	bic.w	r3, r3, #1
 800af1c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af1e:	f7fa ffa3 	bl	8005e68 <HAL_GetTick>
 800af22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af24:	e008      	b.n	800af38 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af26:	f7fa ff9f 	bl	8005e68 <HAL_GetTick>
 800af2a:	4602      	mov	r2, r0
 800af2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	2b02      	cmp	r3, #2
 800af32:	d901      	bls.n	800af38 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800af34:	2303      	movs	r3, #3
 800af36:	e1ff      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af38:	4b3f      	ldr	r3, [pc, #252]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800af3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af3c:	f003 0302 	and.w	r3, r3, #2
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1f0      	bne.n	800af26 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0320 	and.w	r3, r3, #32
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d036      	beq.n	800afbe <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d019      	beq.n	800af8c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800af58:	4b37      	ldr	r3, [pc, #220]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a36      	ldr	r2, [pc, #216]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800af5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800af62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af64:	f7fa ff80 	bl	8005e68 <HAL_GetTick>
 800af68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af6a:	e008      	b.n	800af7e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af6c:	f7fa ff7c 	bl	8005e68 <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	2b02      	cmp	r3, #2
 800af78:	d901      	bls.n	800af7e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e1dc      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af7e:	4b2e      	ldr	r3, [pc, #184]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <HAL_RCC_OscConfig+0x3d8>
 800af8a:	e018      	b.n	800afbe <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800af8c:	4b2a      	ldr	r3, [pc, #168]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a29      	ldr	r2, [pc, #164]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800af92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800af98:	f7fa ff66 	bl	8005e68 <HAL_GetTick>
 800af9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800af9e:	e008      	b.n	800afb2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afa0:	f7fa ff62 	bl	8005e68 <HAL_GetTick>
 800afa4:	4602      	mov	r2, r0
 800afa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d901      	bls.n	800afb2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e1c2      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800afb2:	4b21      	ldr	r3, [pc, #132]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1f0      	bne.n	800afa0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f003 0304 	and.w	r3, r3, #4
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 8086 	beq.w	800b0d8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800afcc:	4b1b      	ldr	r3, [pc, #108]	@ (800b03c <HAL_RCC_OscConfig+0x4a8>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a1a      	ldr	r2, [pc, #104]	@ (800b03c <HAL_RCC_OscConfig+0x4a8>)
 800afd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afd8:	f7fa ff46 	bl	8005e68 <HAL_GetTick>
 800afdc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afde:	e008      	b.n	800aff2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afe0:	f7fa ff42 	bl	8005e68 <HAL_GetTick>
 800afe4:	4602      	mov	r2, r0
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	2b64      	cmp	r3, #100	@ 0x64
 800afec:	d901      	bls.n	800aff2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e1a2      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aff2:	4b12      	ldr	r3, [pc, #72]	@ (800b03c <HAL_RCC_OscConfig+0x4a8>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0f0      	beq.n	800afe0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d106      	bne.n	800b014 <HAL_RCC_OscConfig+0x480>
 800b006:	4b0c      	ldr	r3, [pc, #48]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800b008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b00a:	4a0b      	ldr	r2, [pc, #44]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800b00c:	f043 0301 	orr.w	r3, r3, #1
 800b010:	6713      	str	r3, [r2, #112]	@ 0x70
 800b012:	e032      	b.n	800b07a <HAL_RCC_OscConfig+0x4e6>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d111      	bne.n	800b040 <HAL_RCC_OscConfig+0x4ac>
 800b01c:	4b06      	ldr	r3, [pc, #24]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800b01e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b020:	4a05      	ldr	r2, [pc, #20]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800b022:	f023 0301 	bic.w	r3, r3, #1
 800b026:	6713      	str	r3, [r2, #112]	@ 0x70
 800b028:	4b03      	ldr	r3, [pc, #12]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800b02a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b02c:	4a02      	ldr	r2, [pc, #8]	@ (800b038 <HAL_RCC_OscConfig+0x4a4>)
 800b02e:	f023 0304 	bic.w	r3, r3, #4
 800b032:	6713      	str	r3, [r2, #112]	@ 0x70
 800b034:	e021      	b.n	800b07a <HAL_RCC_OscConfig+0x4e6>
 800b036:	bf00      	nop
 800b038:	58024400 	.word	0x58024400
 800b03c:	58024800 	.word	0x58024800
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	2b05      	cmp	r3, #5
 800b046:	d10c      	bne.n	800b062 <HAL_RCC_OscConfig+0x4ce>
 800b048:	4b83      	ldr	r3, [pc, #524]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b04a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b04c:	4a82      	ldr	r2, [pc, #520]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b04e:	f043 0304 	orr.w	r3, r3, #4
 800b052:	6713      	str	r3, [r2, #112]	@ 0x70
 800b054:	4b80      	ldr	r3, [pc, #512]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b058:	4a7f      	ldr	r2, [pc, #508]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b05a:	f043 0301 	orr.w	r3, r3, #1
 800b05e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b060:	e00b      	b.n	800b07a <HAL_RCC_OscConfig+0x4e6>
 800b062:	4b7d      	ldr	r3, [pc, #500]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b066:	4a7c      	ldr	r2, [pc, #496]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b068:	f023 0301 	bic.w	r3, r3, #1
 800b06c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b06e:	4b7a      	ldr	r3, [pc, #488]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b072:	4a79      	ldr	r2, [pc, #484]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b074:	f023 0304 	bic.w	r3, r3, #4
 800b078:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d015      	beq.n	800b0ae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b082:	f7fa fef1 	bl	8005e68 <HAL_GetTick>
 800b086:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b088:	e00a      	b.n	800b0a0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b08a:	f7fa feed 	bl	8005e68 <HAL_GetTick>
 800b08e:	4602      	mov	r2, r0
 800b090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b098:	4293      	cmp	r3, r2
 800b09a:	d901      	bls.n	800b0a0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e14b      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0a0:	4b6d      	ldr	r3, [pc, #436]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b0a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0a4:	f003 0302 	and.w	r3, r3, #2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d0ee      	beq.n	800b08a <HAL_RCC_OscConfig+0x4f6>
 800b0ac:	e014      	b.n	800b0d8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0ae:	f7fa fedb 	bl	8005e68 <HAL_GetTick>
 800b0b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b0b4:	e00a      	b.n	800b0cc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0b6:	f7fa fed7 	bl	8005e68 <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d901      	bls.n	800b0cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e135      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b0cc:	4b62      	ldr	r3, [pc, #392]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b0ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0d0:	f003 0302 	and.w	r3, r3, #2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1ee      	bne.n	800b0b6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 812a 	beq.w	800b336 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b0e2:	4b5d      	ldr	r3, [pc, #372]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0ea:	2b18      	cmp	r3, #24
 800b0ec:	f000 80ba 	beq.w	800b264 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	f040 8095 	bne.w	800b224 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0fa:	4b57      	ldr	r3, [pc, #348]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a56      	ldr	r2, [pc, #344]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b100:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b106:	f7fa feaf 	bl	8005e68 <HAL_GetTick>
 800b10a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b10c:	e008      	b.n	800b120 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b10e:	f7fa feab 	bl	8005e68 <HAL_GetTick>
 800b112:	4602      	mov	r2, r0
 800b114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d901      	bls.n	800b120 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e10b      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b120:	4b4d      	ldr	r3, [pc, #308]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1f0      	bne.n	800b10e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b12c:	4b4a      	ldr	r3, [pc, #296]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b12e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b130:	4b4a      	ldr	r3, [pc, #296]	@ (800b25c <HAL_RCC_OscConfig+0x6c8>)
 800b132:	4013      	ands	r3, r2
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b13c:	0112      	lsls	r2, r2, #4
 800b13e:	430a      	orrs	r2, r1
 800b140:	4945      	ldr	r1, [pc, #276]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b142:	4313      	orrs	r3, r2
 800b144:	628b      	str	r3, [r1, #40]	@ 0x28
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b14a:	3b01      	subs	r3, #1
 800b14c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b154:	3b01      	subs	r3, #1
 800b156:	025b      	lsls	r3, r3, #9
 800b158:	b29b      	uxth	r3, r3
 800b15a:	431a      	orrs	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b160:	3b01      	subs	r3, #1
 800b162:	041b      	lsls	r3, r3, #16
 800b164:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b168:	431a      	orrs	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b16e:	3b01      	subs	r3, #1
 800b170:	061b      	lsls	r3, r3, #24
 800b172:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b176:	4938      	ldr	r1, [pc, #224]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b178:	4313      	orrs	r3, r2
 800b17a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b17c:	4b36      	ldr	r3, [pc, #216]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b180:	4a35      	ldr	r2, [pc, #212]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b182:	f023 0301 	bic.w	r3, r3, #1
 800b186:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b188:	4b33      	ldr	r3, [pc, #204]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b18a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b18c:	4b34      	ldr	r3, [pc, #208]	@ (800b260 <HAL_RCC_OscConfig+0x6cc>)
 800b18e:	4013      	ands	r3, r2
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b194:	00d2      	lsls	r2, r2, #3
 800b196:	4930      	ldr	r1, [pc, #192]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b198:	4313      	orrs	r3, r2
 800b19a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b19c:	4b2e      	ldr	r3, [pc, #184]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b19e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a0:	f023 020c 	bic.w	r2, r3, #12
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a8:	492b      	ldr	r1, [pc, #172]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b1ae:	4b2a      	ldr	r3, [pc, #168]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b2:	f023 0202 	bic.w	r2, r3, #2
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1ba:	4927      	ldr	r1, [pc, #156]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b1c0:	4b25      	ldr	r3, [pc, #148]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c4:	4a24      	ldr	r2, [pc, #144]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b1ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1cc:	4b22      	ldr	r3, [pc, #136]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d0:	4a21      	ldr	r2, [pc, #132]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b1d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b1d8:	4b1f      	ldr	r3, [pc, #124]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1dc:	4a1e      	ldr	r2, [pc, #120]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b1e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b1e4:	4b1c      	ldr	r3, [pc, #112]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e8:	4a1b      	ldr	r2, [pc, #108]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1ea:	f043 0301 	orr.w	r3, r3, #1
 800b1ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1f0:	4b19      	ldr	r3, [pc, #100]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a18      	ldr	r2, [pc, #96]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b1f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b1fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1fc:	f7fa fe34 	bl	8005e68 <HAL_GetTick>
 800b200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b202:	e008      	b.n	800b216 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b204:	f7fa fe30 	bl	8005e68 <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	2b02      	cmp	r3, #2
 800b210:	d901      	bls.n	800b216 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b212:	2303      	movs	r3, #3
 800b214:	e090      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b216:	4b10      	ldr	r3, [pc, #64]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d0f0      	beq.n	800b204 <HAL_RCC_OscConfig+0x670>
 800b222:	e088      	b.n	800b336 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b224:	4b0c      	ldr	r3, [pc, #48]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a0b      	ldr	r2, [pc, #44]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b22a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b22e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b230:	f7fa fe1a 	bl	8005e68 <HAL_GetTick>
 800b234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b236:	e008      	b.n	800b24a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b238:	f7fa fe16 	bl	8005e68 <HAL_GetTick>
 800b23c:	4602      	mov	r2, r0
 800b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	2b02      	cmp	r3, #2
 800b244:	d901      	bls.n	800b24a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e076      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b24a:	4b03      	ldr	r3, [pc, #12]	@ (800b258 <HAL_RCC_OscConfig+0x6c4>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1f0      	bne.n	800b238 <HAL_RCC_OscConfig+0x6a4>
 800b256:	e06e      	b.n	800b336 <HAL_RCC_OscConfig+0x7a2>
 800b258:	58024400 	.word	0x58024400
 800b25c:	fffffc0c 	.word	0xfffffc0c
 800b260:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b264:	4b36      	ldr	r3, [pc, #216]	@ (800b340 <HAL_RCC_OscConfig+0x7ac>)
 800b266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b268:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b26a:	4b35      	ldr	r3, [pc, #212]	@ (800b340 <HAL_RCC_OscConfig+0x7ac>)
 800b26c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b26e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b274:	2b01      	cmp	r3, #1
 800b276:	d031      	beq.n	800b2dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	f003 0203 	and.w	r2, r3, #3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b282:	429a      	cmp	r2, r3
 800b284:	d12a      	bne.n	800b2dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	091b      	lsrs	r3, r3, #4
 800b28a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b292:	429a      	cmp	r2, r3
 800b294:	d122      	bne.n	800b2dc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d11a      	bne.n	800b2dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	0a5b      	lsrs	r3, r3, #9
 800b2aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d111      	bne.n	800b2dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	0c1b      	lsrs	r3, r3, #16
 800b2bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d108      	bne.n	800b2dc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	0e1b      	lsrs	r3, r3, #24
 800b2ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d001      	beq.n	800b2e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e02b      	b.n	800b338 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b2e0:	4b17      	ldr	r3, [pc, #92]	@ (800b340 <HAL_RCC_OscConfig+0x7ac>)
 800b2e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2e4:	08db      	lsrs	r3, r3, #3
 800b2e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d01f      	beq.n	800b336 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b2f6:	4b12      	ldr	r3, [pc, #72]	@ (800b340 <HAL_RCC_OscConfig+0x7ac>)
 800b2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2fa:	4a11      	ldr	r2, [pc, #68]	@ (800b340 <HAL_RCC_OscConfig+0x7ac>)
 800b2fc:	f023 0301 	bic.w	r3, r3, #1
 800b300:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b302:	f7fa fdb1 	bl	8005e68 <HAL_GetTick>
 800b306:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b308:	bf00      	nop
 800b30a:	f7fa fdad 	bl	8005e68 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b312:	4293      	cmp	r3, r2
 800b314:	d0f9      	beq.n	800b30a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b316:	4b0a      	ldr	r3, [pc, #40]	@ (800b340 <HAL_RCC_OscConfig+0x7ac>)
 800b318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b31a:	4b0a      	ldr	r3, [pc, #40]	@ (800b344 <HAL_RCC_OscConfig+0x7b0>)
 800b31c:	4013      	ands	r3, r2
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b322:	00d2      	lsls	r2, r2, #3
 800b324:	4906      	ldr	r1, [pc, #24]	@ (800b340 <HAL_RCC_OscConfig+0x7ac>)
 800b326:	4313      	orrs	r3, r2
 800b328:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b32a:	4b05      	ldr	r3, [pc, #20]	@ (800b340 <HAL_RCC_OscConfig+0x7ac>)
 800b32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b32e:	4a04      	ldr	r2, [pc, #16]	@ (800b340 <HAL_RCC_OscConfig+0x7ac>)
 800b330:	f043 0301 	orr.w	r3, r3, #1
 800b334:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3730      	adds	r7, #48	@ 0x30
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	58024400 	.word	0x58024400
 800b344:	ffff0007 	.word	0xffff0007

0800b348 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e19c      	b.n	800b696 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b35c:	4b8a      	ldr	r3, [pc, #552]	@ (800b588 <HAL_RCC_ClockConfig+0x240>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 030f 	and.w	r3, r3, #15
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d910      	bls.n	800b38c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b36a:	4b87      	ldr	r3, [pc, #540]	@ (800b588 <HAL_RCC_ClockConfig+0x240>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f023 020f 	bic.w	r2, r3, #15
 800b372:	4985      	ldr	r1, [pc, #532]	@ (800b588 <HAL_RCC_ClockConfig+0x240>)
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	4313      	orrs	r3, r2
 800b378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b37a:	4b83      	ldr	r3, [pc, #524]	@ (800b588 <HAL_RCC_ClockConfig+0x240>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f003 030f 	and.w	r3, r3, #15
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	429a      	cmp	r2, r3
 800b386:	d001      	beq.n	800b38c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e184      	b.n	800b696 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b00      	cmp	r3, #0
 800b396:	d010      	beq.n	800b3ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	691a      	ldr	r2, [r3, #16]
 800b39c:	4b7b      	ldr	r3, [pc, #492]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d908      	bls.n	800b3ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b3a8:	4b78      	ldr	r3, [pc, #480]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	4975      	ldr	r1, [pc, #468]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0308 	and.w	r3, r3, #8
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d010      	beq.n	800b3e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	695a      	ldr	r2, [r3, #20]
 800b3ca:	4b70      	ldr	r3, [pc, #448]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d908      	bls.n	800b3e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b3d6:	4b6d      	ldr	r3, [pc, #436]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	496a      	ldr	r1, [pc, #424]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0310 	and.w	r3, r3, #16
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d010      	beq.n	800b416 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	699a      	ldr	r2, [r3, #24]
 800b3f8:	4b64      	ldr	r3, [pc, #400]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b3fa:	69db      	ldr	r3, [r3, #28]
 800b3fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b400:	429a      	cmp	r2, r3
 800b402:	d908      	bls.n	800b416 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b404:	4b61      	ldr	r3, [pc, #388]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b406:	69db      	ldr	r3, [r3, #28]
 800b408:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	495e      	ldr	r1, [pc, #376]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b412:	4313      	orrs	r3, r2
 800b414:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0320 	and.w	r3, r3, #32
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d010      	beq.n	800b444 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	69da      	ldr	r2, [r3, #28]
 800b426:	4b59      	ldr	r3, [pc, #356]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b42e:	429a      	cmp	r2, r3
 800b430:	d908      	bls.n	800b444 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b432:	4b56      	ldr	r3, [pc, #344]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	69db      	ldr	r3, [r3, #28]
 800b43e:	4953      	ldr	r1, [pc, #332]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b440:	4313      	orrs	r3, r2
 800b442:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0302 	and.w	r3, r3, #2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d010      	beq.n	800b472 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	68da      	ldr	r2, [r3, #12]
 800b454:	4b4d      	ldr	r3, [pc, #308]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	f003 030f 	and.w	r3, r3, #15
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d908      	bls.n	800b472 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b460:	4b4a      	ldr	r3, [pc, #296]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b462:	699b      	ldr	r3, [r3, #24]
 800b464:	f023 020f 	bic.w	r2, r3, #15
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	4947      	ldr	r1, [pc, #284]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d055      	beq.n	800b52a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b47e:	4b43      	ldr	r3, [pc, #268]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	4940      	ldr	r1, [pc, #256]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b48c:	4313      	orrs	r3, r2
 800b48e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d107      	bne.n	800b4a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b498:	4b3c      	ldr	r3, [pc, #240]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d121      	bne.n	800b4e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e0f6      	b.n	800b696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	2b03      	cmp	r3, #3
 800b4ae:	d107      	bne.n	800b4c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b4b0:	4b36      	ldr	r3, [pc, #216]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d115      	bne.n	800b4e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e0ea      	b.n	800b696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d107      	bne.n	800b4d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b4c8:	4b30      	ldr	r3, [pc, #192]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d109      	bne.n	800b4e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e0de      	b.n	800b696 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4d8:	4b2c      	ldr	r3, [pc, #176]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0304 	and.w	r3, r3, #4
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e0d6      	b.n	800b696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b4e8:	4b28      	ldr	r3, [pc, #160]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	f023 0207 	bic.w	r2, r3, #7
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	4925      	ldr	r1, [pc, #148]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4fa:	f7fa fcb5 	bl	8005e68 <HAL_GetTick>
 800b4fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b500:	e00a      	b.n	800b518 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b502:	f7fa fcb1 	bl	8005e68 <HAL_GetTick>
 800b506:	4602      	mov	r2, r0
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	1ad3      	subs	r3, r2, r3
 800b50c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b510:	4293      	cmp	r3, r2
 800b512:	d901      	bls.n	800b518 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e0be      	b.n	800b696 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b518:	4b1c      	ldr	r3, [pc, #112]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	00db      	lsls	r3, r3, #3
 800b526:	429a      	cmp	r2, r3
 800b528:	d1eb      	bne.n	800b502 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0302 	and.w	r3, r3, #2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d010      	beq.n	800b558 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68da      	ldr	r2, [r3, #12]
 800b53a:	4b14      	ldr	r3, [pc, #80]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	f003 030f 	and.w	r3, r3, #15
 800b542:	429a      	cmp	r2, r3
 800b544:	d208      	bcs.n	800b558 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b546:	4b11      	ldr	r3, [pc, #68]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b548:	699b      	ldr	r3, [r3, #24]
 800b54a:	f023 020f 	bic.w	r2, r3, #15
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	490e      	ldr	r1, [pc, #56]	@ (800b58c <HAL_RCC_ClockConfig+0x244>)
 800b554:	4313      	orrs	r3, r2
 800b556:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b558:	4b0b      	ldr	r3, [pc, #44]	@ (800b588 <HAL_RCC_ClockConfig+0x240>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 030f 	and.w	r3, r3, #15
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	429a      	cmp	r2, r3
 800b564:	d214      	bcs.n	800b590 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b566:	4b08      	ldr	r3, [pc, #32]	@ (800b588 <HAL_RCC_ClockConfig+0x240>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f023 020f 	bic.w	r2, r3, #15
 800b56e:	4906      	ldr	r1, [pc, #24]	@ (800b588 <HAL_RCC_ClockConfig+0x240>)
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	4313      	orrs	r3, r2
 800b574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b576:	4b04      	ldr	r3, [pc, #16]	@ (800b588 <HAL_RCC_ClockConfig+0x240>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 030f 	and.w	r3, r3, #15
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	d005      	beq.n	800b590 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	e086      	b.n	800b696 <HAL_RCC_ClockConfig+0x34e>
 800b588:	52002000 	.word	0x52002000
 800b58c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d010      	beq.n	800b5be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	691a      	ldr	r2, [r3, #16]
 800b5a0:	4b3f      	ldr	r3, [pc, #252]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d208      	bcs.n	800b5be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b5ac:	4b3c      	ldr	r3, [pc, #240]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	4939      	ldr	r1, [pc, #228]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f003 0308 	and.w	r3, r3, #8
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d010      	beq.n	800b5ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	695a      	ldr	r2, [r3, #20]
 800b5ce:	4b34      	ldr	r3, [pc, #208]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b5d0:	69db      	ldr	r3, [r3, #28]
 800b5d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d208      	bcs.n	800b5ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b5da:	4b31      	ldr	r3, [pc, #196]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b5dc:	69db      	ldr	r3, [r3, #28]
 800b5de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	492e      	ldr	r1, [pc, #184]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0310 	and.w	r3, r3, #16
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d010      	beq.n	800b61a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	699a      	ldr	r2, [r3, #24]
 800b5fc:	4b28      	ldr	r3, [pc, #160]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b604:	429a      	cmp	r2, r3
 800b606:	d208      	bcs.n	800b61a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b608:	4b25      	ldr	r3, [pc, #148]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	699b      	ldr	r3, [r3, #24]
 800b614:	4922      	ldr	r1, [pc, #136]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b616:	4313      	orrs	r3, r2
 800b618:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 0320 	and.w	r3, r3, #32
 800b622:	2b00      	cmp	r3, #0
 800b624:	d010      	beq.n	800b648 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	69da      	ldr	r2, [r3, #28]
 800b62a:	4b1d      	ldr	r3, [pc, #116]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b632:	429a      	cmp	r2, r3
 800b634:	d208      	bcs.n	800b648 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b636:	4b1a      	ldr	r3, [pc, #104]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	69db      	ldr	r3, [r3, #28]
 800b642:	4917      	ldr	r1, [pc, #92]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b644:	4313      	orrs	r3, r2
 800b646:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b648:	f000 f834 	bl	800b6b4 <HAL_RCC_GetSysClockFreq>
 800b64c:	4602      	mov	r2, r0
 800b64e:	4b14      	ldr	r3, [pc, #80]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b650:	699b      	ldr	r3, [r3, #24]
 800b652:	0a1b      	lsrs	r3, r3, #8
 800b654:	f003 030f 	and.w	r3, r3, #15
 800b658:	4912      	ldr	r1, [pc, #72]	@ (800b6a4 <HAL_RCC_ClockConfig+0x35c>)
 800b65a:	5ccb      	ldrb	r3, [r1, r3]
 800b65c:	f003 031f 	and.w	r3, r3, #31
 800b660:	fa22 f303 	lsr.w	r3, r2, r3
 800b664:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b666:	4b0e      	ldr	r3, [pc, #56]	@ (800b6a0 <HAL_RCC_ClockConfig+0x358>)
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	f003 030f 	and.w	r3, r3, #15
 800b66e:	4a0d      	ldr	r2, [pc, #52]	@ (800b6a4 <HAL_RCC_ClockConfig+0x35c>)
 800b670:	5cd3      	ldrb	r3, [r2, r3]
 800b672:	f003 031f 	and.w	r3, r3, #31
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	fa22 f303 	lsr.w	r3, r2, r3
 800b67c:	4a0a      	ldr	r2, [pc, #40]	@ (800b6a8 <HAL_RCC_ClockConfig+0x360>)
 800b67e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b680:	4a0a      	ldr	r2, [pc, #40]	@ (800b6ac <HAL_RCC_ClockConfig+0x364>)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b686:	4b0a      	ldr	r3, [pc, #40]	@ (800b6b0 <HAL_RCC_ClockConfig+0x368>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fa fba2 	bl	8005dd4 <HAL_InitTick>
 800b690:	4603      	mov	r3, r0
 800b692:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b694:	7bfb      	ldrb	r3, [r7, #15]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	58024400 	.word	0x58024400
 800b6a4:	08014f0c 	.word	0x08014f0c
 800b6a8:	24000010 	.word	0x24000010
 800b6ac:	2400000c 	.word	0x2400000c
 800b6b0:	24000014 	.word	0x24000014

0800b6b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b089      	sub	sp, #36	@ 0x24
 800b6b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6ba:	4bb3      	ldr	r3, [pc, #716]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b6c2:	2b18      	cmp	r3, #24
 800b6c4:	f200 8155 	bhi.w	800b972 <HAL_RCC_GetSysClockFreq+0x2be>
 800b6c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b6d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ce:	bf00      	nop
 800b6d0:	0800b735 	.word	0x0800b735
 800b6d4:	0800b973 	.word	0x0800b973
 800b6d8:	0800b973 	.word	0x0800b973
 800b6dc:	0800b973 	.word	0x0800b973
 800b6e0:	0800b973 	.word	0x0800b973
 800b6e4:	0800b973 	.word	0x0800b973
 800b6e8:	0800b973 	.word	0x0800b973
 800b6ec:	0800b973 	.word	0x0800b973
 800b6f0:	0800b75b 	.word	0x0800b75b
 800b6f4:	0800b973 	.word	0x0800b973
 800b6f8:	0800b973 	.word	0x0800b973
 800b6fc:	0800b973 	.word	0x0800b973
 800b700:	0800b973 	.word	0x0800b973
 800b704:	0800b973 	.word	0x0800b973
 800b708:	0800b973 	.word	0x0800b973
 800b70c:	0800b973 	.word	0x0800b973
 800b710:	0800b761 	.word	0x0800b761
 800b714:	0800b973 	.word	0x0800b973
 800b718:	0800b973 	.word	0x0800b973
 800b71c:	0800b973 	.word	0x0800b973
 800b720:	0800b973 	.word	0x0800b973
 800b724:	0800b973 	.word	0x0800b973
 800b728:	0800b973 	.word	0x0800b973
 800b72c:	0800b973 	.word	0x0800b973
 800b730:	0800b767 	.word	0x0800b767
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b734:	4b94      	ldr	r3, [pc, #592]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0320 	and.w	r3, r3, #32
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d009      	beq.n	800b754 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b740:	4b91      	ldr	r3, [pc, #580]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	08db      	lsrs	r3, r3, #3
 800b746:	f003 0303 	and.w	r3, r3, #3
 800b74a:	4a90      	ldr	r2, [pc, #576]	@ (800b98c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b74c:	fa22 f303 	lsr.w	r3, r2, r3
 800b750:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b752:	e111      	b.n	800b978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b754:	4b8d      	ldr	r3, [pc, #564]	@ (800b98c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b756:	61bb      	str	r3, [r7, #24]
      break;
 800b758:	e10e      	b.n	800b978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b75a:	4b8d      	ldr	r3, [pc, #564]	@ (800b990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b75c:	61bb      	str	r3, [r7, #24]
      break;
 800b75e:	e10b      	b.n	800b978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b760:	4b8c      	ldr	r3, [pc, #560]	@ (800b994 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b762:	61bb      	str	r3, [r7, #24]
      break;
 800b764:	e108      	b.n	800b978 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b766:	4b88      	ldr	r3, [pc, #544]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76a:	f003 0303 	and.w	r3, r3, #3
 800b76e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b770:	4b85      	ldr	r3, [pc, #532]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b774:	091b      	lsrs	r3, r3, #4
 800b776:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b77a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b77c:	4b82      	ldr	r3, [pc, #520]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b77e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b780:	f003 0301 	and.w	r3, r3, #1
 800b784:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b786:	4b80      	ldr	r3, [pc, #512]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b78a:	08db      	lsrs	r3, r3, #3
 800b78c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	fb02 f303 	mul.w	r3, r2, r3
 800b796:	ee07 3a90 	vmov	s15, r3
 800b79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b79e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 80e1 	beq.w	800b96c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	f000 8083 	beq.w	800b8b8 <HAL_RCC_GetSysClockFreq+0x204>
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	f200 80a1 	bhi.w	800b8fc <HAL_RCC_GetSysClockFreq+0x248>
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d003      	beq.n	800b7c8 <HAL_RCC_GetSysClockFreq+0x114>
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d056      	beq.n	800b874 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b7c6:	e099      	b.n	800b8fc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7c8:	4b6f      	ldr	r3, [pc, #444]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 0320 	and.w	r3, r3, #32
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d02d      	beq.n	800b830 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7d4:	4b6c      	ldr	r3, [pc, #432]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	08db      	lsrs	r3, r3, #3
 800b7da:	f003 0303 	and.w	r3, r3, #3
 800b7de:	4a6b      	ldr	r2, [pc, #428]	@ (800b98c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b7e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	ee07 3a90 	vmov	s15, r3
 800b7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7fe:	4b62      	ldr	r3, [pc, #392]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b806:	ee07 3a90 	vmov	s15, r3
 800b80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b80e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b812:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b81e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b82a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b82e:	e087      	b.n	800b940 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b99c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b842:	4b51      	ldr	r3, [pc, #324]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b84a:	ee07 3a90 	vmov	s15, r3
 800b84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b852:	ed97 6a02 	vldr	s12, [r7, #8]
 800b856:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b86e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b872:	e065      	b.n	800b940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	ee07 3a90 	vmov	s15, r3
 800b87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b87e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b9a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b886:	4b40      	ldr	r3, [pc, #256]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b88e:	ee07 3a90 	vmov	s15, r3
 800b892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b896:	ed97 6a02 	vldr	s12, [r7, #8]
 800b89a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b8b6:	e043      	b.n	800b940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	ee07 3a90 	vmov	s15, r3
 800b8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b9a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8d2:	ee07 3a90 	vmov	s15, r3
 800b8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8da:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b8fa:	e021      	b.n	800b940 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	ee07 3a90 	vmov	s15, r3
 800b902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b906:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b9a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b90a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b90e:	4b1e      	ldr	r3, [pc, #120]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b916:	ee07 3a90 	vmov	s15, r3
 800b91a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b91e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b922:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b92a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b92e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b93a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b93e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b940:	4b11      	ldr	r3, [pc, #68]	@ (800b988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b944:	0a5b      	lsrs	r3, r3, #9
 800b946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b94a:	3301      	adds	r3, #1
 800b94c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	ee07 3a90 	vmov	s15, r3
 800b954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b958:	edd7 6a07 	vldr	s13, [r7, #28]
 800b95c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b964:	ee17 3a90 	vmov	r3, s15
 800b968:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b96a:	e005      	b.n	800b978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b96c:	2300      	movs	r3, #0
 800b96e:	61bb      	str	r3, [r7, #24]
      break;
 800b970:	e002      	b.n	800b978 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b972:	4b07      	ldr	r3, [pc, #28]	@ (800b990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b974:	61bb      	str	r3, [r7, #24]
      break;
 800b976:	bf00      	nop
  }

  return sysclockfreq;
 800b978:	69bb      	ldr	r3, [r7, #24]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3724      	adds	r7, #36	@ 0x24
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
 800b986:	bf00      	nop
 800b988:	58024400 	.word	0x58024400
 800b98c:	03d09000 	.word	0x03d09000
 800b990:	003d0900 	.word	0x003d0900
 800b994:	017d7840 	.word	0x017d7840
 800b998:	46000000 	.word	0x46000000
 800b99c:	4c742400 	.word	0x4c742400
 800b9a0:	4a742400 	.word	0x4a742400
 800b9a4:	4bbebc20 	.word	0x4bbebc20

0800b9a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b9a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9ac:	b0c6      	sub	sp, #280	@ 0x118
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b9cc:	2500      	movs	r5, #0
 800b9ce:	ea54 0305 	orrs.w	r3, r4, r5
 800b9d2:	d049      	beq.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9de:	d02f      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b9e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b9e4:	d828      	bhi.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b9e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9ea:	d01a      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b9ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b9f0:	d822      	bhi.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d003      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b9f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9fa:	d007      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b9fc:	e01c      	b.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9fe:	4bab      	ldr	r3, [pc, #684]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba02:	4aaa      	ldr	r2, [pc, #680]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba0a:	e01a      	b.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba10:	3308      	adds	r3, #8
 800ba12:	2102      	movs	r1, #2
 800ba14:	4618      	mov	r0, r3
 800ba16:	f001 f967 	bl	800cce8 <RCCEx_PLL2_Config>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba20:	e00f      	b.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba26:	3328      	adds	r3, #40	@ 0x28
 800ba28:	2102      	movs	r1, #2
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f001 fa0e 	bl	800ce4c <RCCEx_PLL3_Config>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ba36:	e004      	b.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba3e:	e000      	b.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ba40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10a      	bne.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ba4a:	4b98      	ldr	r3, [pc, #608]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba4e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ba52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba58:	4a94      	ldr	r2, [pc, #592]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba5a:	430b      	orrs	r3, r1
 800ba5c:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba5e:	e003      	b.n	800ba68 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ba68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ba74:	f04f 0900 	mov.w	r9, #0
 800ba78:	ea58 0309 	orrs.w	r3, r8, r9
 800ba7c:	d047      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba84:	2b04      	cmp	r3, #4
 800ba86:	d82a      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ba88:	a201      	add	r2, pc, #4	@ (adr r2, 800ba90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ba8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8e:	bf00      	nop
 800ba90:	0800baa5 	.word	0x0800baa5
 800ba94:	0800bab3 	.word	0x0800bab3
 800ba98:	0800bac9 	.word	0x0800bac9
 800ba9c:	0800bae7 	.word	0x0800bae7
 800baa0:	0800bae7 	.word	0x0800bae7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baa4:	4b81      	ldr	r3, [pc, #516]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baa8:	4a80      	ldr	r2, [pc, #512]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800baae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bab0:	e01a      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bab6:	3308      	adds	r3, #8
 800bab8:	2100      	movs	r1, #0
 800baba:	4618      	mov	r0, r3
 800babc:	f001 f914 	bl	800cce8 <RCCEx_PLL2_Config>
 800bac0:	4603      	mov	r3, r0
 800bac2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bac6:	e00f      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bacc:	3328      	adds	r3, #40	@ 0x28
 800bace:	2100      	movs	r1, #0
 800bad0:	4618      	mov	r0, r3
 800bad2:	f001 f9bb 	bl	800ce4c <RCCEx_PLL3_Config>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800badc:	e004      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bae4:	e000      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bae8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10a      	bne.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800baf0:	4b6e      	ldr	r3, [pc, #440]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baf4:	f023 0107 	bic.w	r1, r3, #7
 800baf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bafc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bafe:	4a6b      	ldr	r2, [pc, #428]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb00:	430b      	orrs	r3, r1
 800bb02:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb04:	e003      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bb0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb16:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800bb1a:	f04f 0b00 	mov.w	fp, #0
 800bb1e:	ea5a 030b 	orrs.w	r3, sl, fp
 800bb22:	d05b      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb2c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bb30:	d03b      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bb32:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bb36:	d834      	bhi.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bb38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bb3c:	d037      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bb3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bb42:	d82e      	bhi.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bb44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bb48:	d033      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bb4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bb4e:	d828      	bhi.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bb50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb54:	d01a      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bb56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb5a:	d822      	bhi.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bb60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb64:	d007      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bb66:	e01c      	b.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb68:	4b50      	ldr	r3, [pc, #320]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb6c:	4a4f      	ldr	r2, [pc, #316]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb74:	e01e      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f001 f8b2 	bl	800cce8 <RCCEx_PLL2_Config>
 800bb84:	4603      	mov	r3, r0
 800bb86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bb8a:	e013      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb90:	3328      	adds	r3, #40	@ 0x28
 800bb92:	2100      	movs	r1, #0
 800bb94:	4618      	mov	r0, r3
 800bb96:	f001 f959 	bl	800ce4c <RCCEx_PLL3_Config>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bba0:	e008      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bba2:	2301      	movs	r3, #1
 800bba4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bba8:	e004      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bbaa:	bf00      	nop
 800bbac:	e002      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bbae:	bf00      	nop
 800bbb0:	e000      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bbb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10b      	bne.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bbbc:	4b3b      	ldr	r3, [pc, #236]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbc0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bbc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbc8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bbcc:	4a37      	ldr	r2, [pc, #220]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbce:	430b      	orrs	r3, r1
 800bbd0:	6593      	str	r3, [r2, #88]	@ 0x58
 800bbd2:	e003      	b.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bbe8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bbec:	2300      	movs	r3, #0
 800bbee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bbf2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	d05d      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bc04:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bc08:	d03b      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bc0a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bc0e:	d834      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bc10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc14:	d037      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bc16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc1a:	d82e      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bc1c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bc20:	d033      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bc22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bc26:	d828      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bc28:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc2c:	d01a      	beq.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bc2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc32:	d822      	bhi.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d003      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bc38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc3c:	d007      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bc3e:	e01c      	b.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc40:	4b1a      	ldr	r3, [pc, #104]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc44:	4a19      	ldr	r2, [pc, #100]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc4c:	e01e      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc52:	3308      	adds	r3, #8
 800bc54:	2100      	movs	r1, #0
 800bc56:	4618      	mov	r0, r3
 800bc58:	f001 f846 	bl	800cce8 <RCCEx_PLL2_Config>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bc62:	e013      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc68:	3328      	adds	r3, #40	@ 0x28
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f001 f8ed 	bl	800ce4c <RCCEx_PLL3_Config>
 800bc72:	4603      	mov	r3, r0
 800bc74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc78:	e008      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc80:	e004      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc82:	bf00      	nop
 800bc84:	e002      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc86:	bf00      	nop
 800bc88:	e000      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10d      	bne.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc94:	4b05      	ldr	r3, [pc, #20]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bca0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bca4:	4a01      	ldr	r2, [pc, #4]	@ (800bcac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bca6:	430b      	orrs	r3, r1
 800bca8:	6593      	str	r3, [r2, #88]	@ 0x58
 800bcaa:	e005      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bcac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bcb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bcc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bcce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	d03a      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bcd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcde:	2b30      	cmp	r3, #48	@ 0x30
 800bce0:	d01f      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bce2:	2b30      	cmp	r3, #48	@ 0x30
 800bce4:	d819      	bhi.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bce6:	2b20      	cmp	r3, #32
 800bce8:	d00c      	beq.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bcea:	2b20      	cmp	r3, #32
 800bcec:	d815      	bhi.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d019      	beq.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bcf2:	2b10      	cmp	r3, #16
 800bcf4:	d111      	bne.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcf6:	4baa      	ldr	r3, [pc, #680]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfa:	4aa9      	ldr	r2, [pc, #676]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bd02:	e011      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd08:	3308      	adds	r3, #8
 800bd0a:	2102      	movs	r1, #2
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 ffeb 	bl	800cce8 <RCCEx_PLL2_Config>
 800bd12:	4603      	mov	r3, r0
 800bd14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bd18:	e006      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd20:	e002      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bd22:	bf00      	nop
 800bd24:	e000      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bd26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d10a      	bne.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bd30:	4b9b      	ldr	r3, [pc, #620]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd34:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bd38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd3e:	4a98      	ldr	r2, [pc, #608]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd40:	430b      	orrs	r3, r1
 800bd42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bd44:	e003      	b.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bd4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bd5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bd5e:	2300      	movs	r3, #0
 800bd60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bd64:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bd68:	460b      	mov	r3, r1
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	d051      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bd6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd78:	d035      	beq.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bd7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd7e:	d82e      	bhi.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd84:	d031      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bd86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd8a:	d828      	bhi.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd90:	d01a      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bd92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd96:	d822      	bhi.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d003      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bd9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bda0:	d007      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bda2:	e01c      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bda4:	4b7e      	ldr	r3, [pc, #504]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda8:	4a7d      	ldr	r2, [pc, #500]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bdaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bdb0:	e01c      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	2100      	movs	r1, #0
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 ff94 	bl	800cce8 <RCCEx_PLL2_Config>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bdc6:	e011      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdcc:	3328      	adds	r3, #40	@ 0x28
 800bdce:	2100      	movs	r1, #0
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f001 f83b 	bl	800ce4c <RCCEx_PLL3_Config>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bddc:	e006      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bde4:	e002      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bde6:	bf00      	nop
 800bde8:	e000      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bdea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10a      	bne.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bdf4:	4b6a      	ldr	r3, [pc, #424]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bdf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdf8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bdfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be02:	4a67      	ldr	r2, [pc, #412]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be04:	430b      	orrs	r3, r1
 800be06:	6513      	str	r3, [r2, #80]	@ 0x50
 800be08:	e003      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800be12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800be1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800be22:	2300      	movs	r3, #0
 800be24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800be28:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4313      	orrs	r3, r2
 800be30:	d053      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800be32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be3c:	d033      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800be3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be42:	d82c      	bhi.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800be44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be48:	d02f      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800be4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be4e:	d826      	bhi.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800be50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be54:	d02b      	beq.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x506>
 800be56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be5a:	d820      	bhi.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800be5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be60:	d012      	beq.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800be62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be66:	d81a      	bhi.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d022      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800be6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be70:	d115      	bne.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be76:	3308      	adds	r3, #8
 800be78:	2101      	movs	r1, #1
 800be7a:	4618      	mov	r0, r3
 800be7c:	f000 ff34 	bl	800cce8 <RCCEx_PLL2_Config>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be86:	e015      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be8c:	3328      	adds	r3, #40	@ 0x28
 800be8e:	2101      	movs	r1, #1
 800be90:	4618      	mov	r0, r3
 800be92:	f000 ffdb 	bl	800ce4c <RCCEx_PLL3_Config>
 800be96:	4603      	mov	r3, r0
 800be98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be9c:	e00a      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bea4:	e006      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bea6:	bf00      	nop
 800bea8:	e004      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800beaa:	bf00      	nop
 800beac:	e002      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800beae:	bf00      	nop
 800beb0:	e000      	b.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800beb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10a      	bne.n	800bed2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bebc:	4b38      	ldr	r3, [pc, #224]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bec0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800beca:	4a35      	ldr	r2, [pc, #212]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800becc:	430b      	orrs	r3, r1
 800bece:	6513      	str	r3, [r2, #80]	@ 0x50
 800bed0:	e003      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bed6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800beda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bee6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800beea:	2300      	movs	r3, #0
 800beec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bef0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bef4:	460b      	mov	r3, r1
 800bef6:	4313      	orrs	r3, r2
 800bef8:	d058      	beq.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800befa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800befe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bf02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf06:	d033      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bf08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf0c:	d82c      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bf0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf12:	d02f      	beq.n	800bf74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bf14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf18:	d826      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bf1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf1e:	d02b      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bf20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf24:	d820      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bf26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf2a:	d012      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bf2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf30:	d81a      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d022      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bf36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf3a:	d115      	bne.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf40:	3308      	adds	r3, #8
 800bf42:	2101      	movs	r1, #1
 800bf44:	4618      	mov	r0, r3
 800bf46:	f000 fecf 	bl	800cce8 <RCCEx_PLL2_Config>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bf50:	e015      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf56:	3328      	adds	r3, #40	@ 0x28
 800bf58:	2101      	movs	r1, #1
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 ff76 	bl	800ce4c <RCCEx_PLL3_Config>
 800bf60:	4603      	mov	r3, r0
 800bf62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bf66:	e00a      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf6e:	e006      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf70:	bf00      	nop
 800bf72:	e004      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf74:	bf00      	nop
 800bf76:	e002      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf78:	bf00      	nop
 800bf7a:	e000      	b.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10e      	bne.n	800bfa4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bf86:	4b06      	ldr	r3, [pc, #24]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bf8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bf96:	4a02      	ldr	r2, [pc, #8]	@ (800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf98:	430b      	orrs	r3, r1
 800bf9a:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf9c:	e006      	b.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bf9e:	bf00      	nop
 800bfa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfa8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bfac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bfb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bfc2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	d037      	beq.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bfcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfd6:	d00e      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bfd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfdc:	d816      	bhi.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d018      	beq.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bfe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfe6:	d111      	bne.n	800c00c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfe8:	4bc4      	ldr	r3, [pc, #784]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfec:	4ac3      	ldr	r2, [pc, #780]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bff4:	e00f      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bffa:	3308      	adds	r3, #8
 800bffc:	2101      	movs	r1, #1
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 fe72 	bl	800cce8 <RCCEx_PLL2_Config>
 800c004:	4603      	mov	r3, r0
 800c006:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c00a:	e004      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c012:	e000      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c014:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10a      	bne.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c01e:	4bb7      	ldr	r3, [pc, #732]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c022:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c02a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c02c:	4ab3      	ldr	r2, [pc, #716]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c02e:	430b      	orrs	r3, r1
 800c030:	6513      	str	r3, [r2, #80]	@ 0x50
 800c032:	e003      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c04c:	2300      	movs	r3, #0
 800c04e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c052:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c056:	460b      	mov	r3, r1
 800c058:	4313      	orrs	r3, r2
 800c05a:	d039      	beq.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c062:	2b03      	cmp	r3, #3
 800c064:	d81c      	bhi.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c066:	a201      	add	r2, pc, #4	@ (adr r2, 800c06c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06c:	0800c0a9 	.word	0x0800c0a9
 800c070:	0800c07d 	.word	0x0800c07d
 800c074:	0800c08b 	.word	0x0800c08b
 800c078:	0800c0a9 	.word	0x0800c0a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c07c:	4b9f      	ldr	r3, [pc, #636]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c080:	4a9e      	ldr	r2, [pc, #632]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c088:	e00f      	b.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c08e:	3308      	adds	r3, #8
 800c090:	2102      	movs	r1, #2
 800c092:	4618      	mov	r0, r3
 800c094:	f000 fe28 	bl	800cce8 <RCCEx_PLL2_Config>
 800c098:	4603      	mov	r3, r0
 800c09a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c09e:	e004      	b.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c0a6:	e000      	b.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c0a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10a      	bne.n	800c0c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c0b2:	4b92      	ldr	r3, [pc, #584]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0b6:	f023 0103 	bic.w	r1, r3, #3
 800c0ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0c0:	4a8e      	ldr	r2, [pc, #568]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0c2:	430b      	orrs	r3, r1
 800c0c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c0c6:	e003      	b.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c0dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c0e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	f000 8099 	beq.w	800c224 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c0f2:	4b83      	ldr	r3, [pc, #524]	@ (800c300 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	4a82      	ldr	r2, [pc, #520]	@ (800c300 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c0f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c0fe:	f7f9 feb3 	bl	8005e68 <HAL_GetTick>
 800c102:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c106:	e00b      	b.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c108:	f7f9 feae 	bl	8005e68 <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c112:	1ad3      	subs	r3, r2, r3
 800c114:	2b64      	cmp	r3, #100	@ 0x64
 800c116:	d903      	bls.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c11e:	e005      	b.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c120:	4b77      	ldr	r3, [pc, #476]	@ (800c300 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0ed      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c12c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c130:	2b00      	cmp	r3, #0
 800c132:	d173      	bne.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c134:	4b71      	ldr	r3, [pc, #452]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c136:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c140:	4053      	eors	r3, r2
 800c142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c146:	2b00      	cmp	r3, #0
 800c148:	d015      	beq.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c14a:	4b6c      	ldr	r3, [pc, #432]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c14c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c14e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c152:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c156:	4b69      	ldr	r3, [pc, #420]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c15a:	4a68      	ldr	r2, [pc, #416]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c15c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c160:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c162:	4b66      	ldr	r3, [pc, #408]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c166:	4a65      	ldr	r2, [pc, #404]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c16c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c16e:	4a63      	ldr	r2, [pc, #396]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c170:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c174:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c17a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c17e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c182:	d118      	bne.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c184:	f7f9 fe70 	bl	8005e68 <HAL_GetTick>
 800c188:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c18c:	e00d      	b.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c18e:	f7f9 fe6b 	bl	8005e68 <HAL_GetTick>
 800c192:	4602      	mov	r2, r0
 800c194:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c198:	1ad2      	subs	r2, r2, r3
 800c19a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d903      	bls.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c1a8:	e005      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c1aa:	4b54      	ldr	r3, [pc, #336]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ae:	f003 0302 	and.w	r3, r3, #2
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d0eb      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c1b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d129      	bne.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c1c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c1ce:	d10e      	bne.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c1d0:	4b4a      	ldr	r3, [pc, #296]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c1e0:	091a      	lsrs	r2, r3, #4
 800c1e2:	4b48      	ldr	r3, [pc, #288]	@ (800c304 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	4a45      	ldr	r2, [pc, #276]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1e8:	430b      	orrs	r3, r1
 800c1ea:	6113      	str	r3, [r2, #16]
 800c1ec:	e005      	b.n	800c1fa <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c1ee:	4b43      	ldr	r3, [pc, #268]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	4a42      	ldr	r2, [pc, #264]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c1f8:	6113      	str	r3, [r2, #16]
 800c1fa:	4b40      	ldr	r3, [pc, #256]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c202:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c20a:	4a3c      	ldr	r2, [pc, #240]	@ (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c20c:	430b      	orrs	r3, r1
 800c20e:	6713      	str	r3, [r2, #112]	@ 0x70
 800c210:	e008      	b.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c212:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c216:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c21a:	e003      	b.n	800c224 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c21c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c220:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	f002 0301 	and.w	r3, r2, #1
 800c230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c234:	2300      	movs	r3, #0
 800c236:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c23a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c23e:	460b      	mov	r3, r1
 800c240:	4313      	orrs	r3, r2
 800c242:	f000 808f 	beq.w	800c364 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c24a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c24c:	2b28      	cmp	r3, #40	@ 0x28
 800c24e:	d871      	bhi.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c250:	a201      	add	r2, pc, #4	@ (adr r2, 800c258 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c256:	bf00      	nop
 800c258:	0800c33d 	.word	0x0800c33d
 800c25c:	0800c335 	.word	0x0800c335
 800c260:	0800c335 	.word	0x0800c335
 800c264:	0800c335 	.word	0x0800c335
 800c268:	0800c335 	.word	0x0800c335
 800c26c:	0800c335 	.word	0x0800c335
 800c270:	0800c335 	.word	0x0800c335
 800c274:	0800c335 	.word	0x0800c335
 800c278:	0800c309 	.word	0x0800c309
 800c27c:	0800c335 	.word	0x0800c335
 800c280:	0800c335 	.word	0x0800c335
 800c284:	0800c335 	.word	0x0800c335
 800c288:	0800c335 	.word	0x0800c335
 800c28c:	0800c335 	.word	0x0800c335
 800c290:	0800c335 	.word	0x0800c335
 800c294:	0800c335 	.word	0x0800c335
 800c298:	0800c31f 	.word	0x0800c31f
 800c29c:	0800c335 	.word	0x0800c335
 800c2a0:	0800c335 	.word	0x0800c335
 800c2a4:	0800c335 	.word	0x0800c335
 800c2a8:	0800c335 	.word	0x0800c335
 800c2ac:	0800c335 	.word	0x0800c335
 800c2b0:	0800c335 	.word	0x0800c335
 800c2b4:	0800c335 	.word	0x0800c335
 800c2b8:	0800c33d 	.word	0x0800c33d
 800c2bc:	0800c335 	.word	0x0800c335
 800c2c0:	0800c335 	.word	0x0800c335
 800c2c4:	0800c335 	.word	0x0800c335
 800c2c8:	0800c335 	.word	0x0800c335
 800c2cc:	0800c335 	.word	0x0800c335
 800c2d0:	0800c335 	.word	0x0800c335
 800c2d4:	0800c335 	.word	0x0800c335
 800c2d8:	0800c33d 	.word	0x0800c33d
 800c2dc:	0800c335 	.word	0x0800c335
 800c2e0:	0800c335 	.word	0x0800c335
 800c2e4:	0800c335 	.word	0x0800c335
 800c2e8:	0800c335 	.word	0x0800c335
 800c2ec:	0800c335 	.word	0x0800c335
 800c2f0:	0800c335 	.word	0x0800c335
 800c2f4:	0800c335 	.word	0x0800c335
 800c2f8:	0800c33d 	.word	0x0800c33d
 800c2fc:	58024400 	.word	0x58024400
 800c300:	58024800 	.word	0x58024800
 800c304:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c30c:	3308      	adds	r3, #8
 800c30e:	2101      	movs	r1, #1
 800c310:	4618      	mov	r0, r3
 800c312:	f000 fce9 	bl	800cce8 <RCCEx_PLL2_Config>
 800c316:	4603      	mov	r3, r0
 800c318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c31c:	e00f      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c322:	3328      	adds	r3, #40	@ 0x28
 800c324:	2101      	movs	r1, #1
 800c326:	4618      	mov	r0, r3
 800c328:	f000 fd90 	bl	800ce4c <RCCEx_PLL3_Config>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c332:	e004      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c33a:	e000      	b.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c33c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c33e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10a      	bne.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c346:	4bbf      	ldr	r3, [pc, #764]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c34a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c352:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c354:	4abb      	ldr	r2, [pc, #748]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c356:	430b      	orrs	r3, r1
 800c358:	6553      	str	r3, [r2, #84]	@ 0x54
 800c35a:	e003      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c35c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c360:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f002 0302 	and.w	r3, r2, #2
 800c370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c374:	2300      	movs	r3, #0
 800c376:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c37a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c37e:	460b      	mov	r3, r1
 800c380:	4313      	orrs	r3, r2
 800c382:	d041      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c384:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c38a:	2b05      	cmp	r3, #5
 800c38c:	d824      	bhi.n	800c3d8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c38e:	a201      	add	r2, pc, #4	@ (adr r2, 800c394 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c394:	0800c3e1 	.word	0x0800c3e1
 800c398:	0800c3ad 	.word	0x0800c3ad
 800c39c:	0800c3c3 	.word	0x0800c3c3
 800c3a0:	0800c3e1 	.word	0x0800c3e1
 800c3a4:	0800c3e1 	.word	0x0800c3e1
 800c3a8:	0800c3e1 	.word	0x0800c3e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b0:	3308      	adds	r3, #8
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 fc97 	bl	800cce8 <RCCEx_PLL2_Config>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c3c0:	e00f      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3c6:	3328      	adds	r3, #40	@ 0x28
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fd3e 	bl	800ce4c <RCCEx_PLL3_Config>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c3d6:	e004      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c3de:	e000      	b.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c3e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10a      	bne.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c3ea:	4b96      	ldr	r3, [pc, #600]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3ee:	f023 0107 	bic.w	r1, r3, #7
 800c3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3f8:	4a92      	ldr	r2, [pc, #584]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c3fa:	430b      	orrs	r3, r1
 800c3fc:	6553      	str	r3, [r2, #84]	@ 0x54
 800c3fe:	e003      	b.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c404:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c410:	f002 0304 	and.w	r3, r2, #4
 800c414:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c418:	2300      	movs	r3, #0
 800c41a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c41e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c422:	460b      	mov	r3, r1
 800c424:	4313      	orrs	r3, r2
 800c426:	d044      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c42c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c430:	2b05      	cmp	r3, #5
 800c432:	d825      	bhi.n	800c480 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c434:	a201      	add	r2, pc, #4	@ (adr r2, 800c43c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43a:	bf00      	nop
 800c43c:	0800c489 	.word	0x0800c489
 800c440:	0800c455 	.word	0x0800c455
 800c444:	0800c46b 	.word	0x0800c46b
 800c448:	0800c489 	.word	0x0800c489
 800c44c:	0800c489 	.word	0x0800c489
 800c450:	0800c489 	.word	0x0800c489
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c458:	3308      	adds	r3, #8
 800c45a:	2101      	movs	r1, #1
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fc43 	bl	800cce8 <RCCEx_PLL2_Config>
 800c462:	4603      	mov	r3, r0
 800c464:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c468:	e00f      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c46e:	3328      	adds	r3, #40	@ 0x28
 800c470:	2101      	movs	r1, #1
 800c472:	4618      	mov	r0, r3
 800c474:	f000 fcea 	bl	800ce4c <RCCEx_PLL3_Config>
 800c478:	4603      	mov	r3, r0
 800c47a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c47e:	e004      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c486:	e000      	b.n	800c48a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c48a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10b      	bne.n	800c4aa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c492:	4b6c      	ldr	r3, [pc, #432]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c496:	f023 0107 	bic.w	r1, r3, #7
 800c49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4a2:	4a68      	ldr	r2, [pc, #416]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4a4:	430b      	orrs	r3, r1
 800c4a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4a8:	e003      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	f002 0320 	and.w	r3, r2, #32
 800c4be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c4c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	d055      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c4de:	d033      	beq.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c4e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c4e4:	d82c      	bhi.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4ea:	d02f      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c4ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4f0:	d826      	bhi.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c4f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c4f6:	d02b      	beq.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c4f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c4fc:	d820      	bhi.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c4fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c502:	d012      	beq.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c504:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c508:	d81a      	bhi.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d022      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c50e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c512:	d115      	bne.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c514:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c518:	3308      	adds	r3, #8
 800c51a:	2100      	movs	r1, #0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 fbe3 	bl	800cce8 <RCCEx_PLL2_Config>
 800c522:	4603      	mov	r3, r0
 800c524:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c528:	e015      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c52e:	3328      	adds	r3, #40	@ 0x28
 800c530:	2102      	movs	r1, #2
 800c532:	4618      	mov	r0, r3
 800c534:	f000 fc8a 	bl	800ce4c <RCCEx_PLL3_Config>
 800c538:	4603      	mov	r3, r0
 800c53a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c53e:	e00a      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c546:	e006      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c548:	bf00      	nop
 800c54a:	e004      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c54c:	bf00      	nop
 800c54e:	e002      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c550:	bf00      	nop
 800c552:	e000      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c554:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c556:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10b      	bne.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c55e:	4b39      	ldr	r3, [pc, #228]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c562:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c56a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c56e:	4a35      	ldr	r2, [pc, #212]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c570:	430b      	orrs	r3, r1
 800c572:	6553      	str	r3, [r2, #84]	@ 0x54
 800c574:	e003      	b.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c57a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c586:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c58a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c58e:	2300      	movs	r3, #0
 800c590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c594:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c598:	460b      	mov	r3, r1
 800c59a:	4313      	orrs	r3, r2
 800c59c:	d058      	beq.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5a6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c5aa:	d033      	beq.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c5ac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c5b0:	d82c      	bhi.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c5b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5b6:	d02f      	beq.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c5b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c5bc:	d826      	bhi.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c5be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c5c2:	d02b      	beq.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c5c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c5c8:	d820      	bhi.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c5ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c5ce:	d012      	beq.n	800c5f6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c5d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c5d4:	d81a      	bhi.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d022      	beq.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c5da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c5de:	d115      	bne.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f000 fb7d 	bl	800cce8 <RCCEx_PLL2_Config>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c5f4:	e015      	b.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5fa:	3328      	adds	r3, #40	@ 0x28
 800c5fc:	2102      	movs	r1, #2
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 fc24 	bl	800ce4c <RCCEx_PLL3_Config>
 800c604:	4603      	mov	r3, r0
 800c606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c60a:	e00a      	b.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c60c:	2301      	movs	r3, #1
 800c60e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c612:	e006      	b.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c614:	bf00      	nop
 800c616:	e004      	b.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c618:	bf00      	nop
 800c61a:	e002      	b.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c61c:	bf00      	nop
 800c61e:	e000      	b.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c620:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10e      	bne.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c62a:	4b06      	ldr	r3, [pc, #24]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c62c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c62e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c63a:	4a02      	ldr	r2, [pc, #8]	@ (800c644 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c63c:	430b      	orrs	r3, r1
 800c63e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c640:	e006      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c642:	bf00      	nop
 800c644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c648:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c64c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c65c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c660:	2300      	movs	r3, #0
 800c662:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c666:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c66a:	460b      	mov	r3, r1
 800c66c:	4313      	orrs	r3, r2
 800c66e:	d055      	beq.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c674:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c678:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c67c:	d033      	beq.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c67e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c682:	d82c      	bhi.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c688:	d02f      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c68a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c68e:	d826      	bhi.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c690:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c694:	d02b      	beq.n	800c6ee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c696:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c69a:	d820      	bhi.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c69c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c6a0:	d012      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c6a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c6a6:	d81a      	bhi.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d022      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c6ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6b0:	d115      	bne.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b6:	3308      	adds	r3, #8
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 fb14 	bl	800cce8 <RCCEx_PLL2_Config>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c6c6:	e015      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6cc:	3328      	adds	r3, #40	@ 0x28
 800c6ce:	2102      	movs	r1, #2
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fbbb 	bl	800ce4c <RCCEx_PLL3_Config>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c6dc:	e00a      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c6e4:	e006      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c6e6:	bf00      	nop
 800c6e8:	e004      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c6ea:	bf00      	nop
 800c6ec:	e002      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c6ee:	bf00      	nop
 800c6f0:	e000      	b.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c6f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c6f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d10b      	bne.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c6fc:	4ba0      	ldr	r3, [pc, #640]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c700:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c708:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c70c:	4a9c      	ldr	r2, [pc, #624]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c70e:	430b      	orrs	r3, r1
 800c710:	6593      	str	r3, [r2, #88]	@ 0x58
 800c712:	e003      	b.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c718:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c724:	f002 0308 	and.w	r3, r2, #8
 800c728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c72c:	2300      	movs	r3, #0
 800c72e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c732:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c736:	460b      	mov	r3, r1
 800c738:	4313      	orrs	r3, r2
 800c73a:	d01e      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c748:	d10c      	bne.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74e:	3328      	adds	r3, #40	@ 0x28
 800c750:	2102      	movs	r1, #2
 800c752:	4618      	mov	r0, r3
 800c754:	f000 fb7a 	bl	800ce4c <RCCEx_PLL3_Config>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d002      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c764:	4b86      	ldr	r3, [pc, #536]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c768:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c774:	4a82      	ldr	r2, [pc, #520]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c776:	430b      	orrs	r3, r1
 800c778:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c77a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	f002 0310 	and.w	r3, r2, #16
 800c786:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c78a:	2300      	movs	r3, #0
 800c78c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c790:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c794:	460b      	mov	r3, r1
 800c796:	4313      	orrs	r3, r2
 800c798:	d01e      	beq.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c79e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7a6:	d10c      	bne.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ac:	3328      	adds	r3, #40	@ 0x28
 800c7ae:	2102      	movs	r1, #2
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f000 fb4b 	bl	800ce4c <RCCEx_PLL3_Config>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c7c2:	4b6f      	ldr	r3, [pc, #444]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c7d2:	4a6b      	ldr	r2, [pc, #428]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7d4:	430b      	orrs	r3, r1
 800c7d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c7e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c7ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	d03e      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c800:	d022      	beq.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c802:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c806:	d81b      	bhi.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d003      	beq.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c80c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c810:	d00b      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c812:	e015      	b.n	800c840 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c818:	3308      	adds	r3, #8
 800c81a:	2100      	movs	r1, #0
 800c81c:	4618      	mov	r0, r3
 800c81e:	f000 fa63 	bl	800cce8 <RCCEx_PLL2_Config>
 800c822:	4603      	mov	r3, r0
 800c824:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c828:	e00f      	b.n	800c84a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c82e:	3328      	adds	r3, #40	@ 0x28
 800c830:	2102      	movs	r1, #2
 800c832:	4618      	mov	r0, r3
 800c834:	f000 fb0a 	bl	800ce4c <RCCEx_PLL3_Config>
 800c838:	4603      	mov	r3, r0
 800c83a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c83e:	e004      	b.n	800c84a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c846:	e000      	b.n	800c84a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c84a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10b      	bne.n	800c86a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c852:	4b4b      	ldr	r3, [pc, #300]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c856:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c85e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c862:	4a47      	ldr	r2, [pc, #284]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c864:	430b      	orrs	r3, r1
 800c866:	6593      	str	r3, [r2, #88]	@ 0x58
 800c868:	e003      	b.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c86a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c86e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c87e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c880:	2300      	movs	r3, #0
 800c882:	677b      	str	r3, [r7, #116]	@ 0x74
 800c884:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c888:	460b      	mov	r3, r1
 800c88a:	4313      	orrs	r3, r2
 800c88c:	d03b      	beq.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c896:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c89a:	d01f      	beq.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c89c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c8a0:	d818      	bhi.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c8a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8a6:	d003      	beq.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c8a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c8ac:	d007      	beq.n	800c8be <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c8ae:	e011      	b.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8b0:	4b33      	ldr	r3, [pc, #204]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8b4:	4a32      	ldr	r2, [pc, #200]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c8bc:	e00f      	b.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c2:	3328      	adds	r3, #40	@ 0x28
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 fac0 	bl	800ce4c <RCCEx_PLL3_Config>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c8d2:	e004      	b.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c8da:	e000      	b.n	800c8de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c8dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10b      	bne.n	800c8fe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c8e6:	4b26      	ldr	r3, [pc, #152]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8f6:	4a22      	ldr	r2, [pc, #136]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8f8:	430b      	orrs	r3, r1
 800c8fa:	6553      	str	r3, [r2, #84]	@ 0x54
 800c8fc:	e003      	b.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c902:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c912:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c914:	2300      	movs	r3, #0
 800c916:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c918:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c91c:	460b      	mov	r3, r1
 800c91e:	4313      	orrs	r3, r2
 800c920:	d034      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d003      	beq.n	800c934 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c92c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c930:	d007      	beq.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c932:	e011      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c934:	4b12      	ldr	r3, [pc, #72]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c938:	4a11      	ldr	r2, [pc, #68]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c93a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c93e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c940:	e00e      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c946:	3308      	adds	r3, #8
 800c948:	2102      	movs	r1, #2
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 f9cc 	bl	800cce8 <RCCEx_PLL2_Config>
 800c950:	4603      	mov	r3, r0
 800c952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c956:	e003      	b.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c95e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c964:	2b00      	cmp	r3, #0
 800c966:	d10d      	bne.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c968:	4b05      	ldr	r3, [pc, #20]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c96a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c96c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c976:	4a02      	ldr	r2, [pc, #8]	@ (800c980 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c978:	430b      	orrs	r3, r1
 800c97a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c97c:	e006      	b.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c97e:	bf00      	nop
 800c980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c988:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c994:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c998:	663b      	str	r3, [r7, #96]	@ 0x60
 800c99a:	2300      	movs	r3, #0
 800c99c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c99e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	d00c      	beq.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ac:	3328      	adds	r3, #40	@ 0x28
 800c9ae:	2102      	movs	r1, #2
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 fa4b 	bl	800ce4c <RCCEx_PLL3_Config>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c9ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c9d4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c9d8:	460b      	mov	r3, r1
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	d036      	beq.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c9e8:	d018      	beq.n	800ca1c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c9ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c9ee:	d811      	bhi.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c9f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9f4:	d014      	beq.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c9f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9fa:	d80b      	bhi.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d011      	beq.n	800ca24 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800ca00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca04:	d106      	bne.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca06:	4bb7      	ldr	r3, [pc, #732]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca0a:	4ab6      	ldr	r2, [pc, #728]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ca12:	e008      	b.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca1a:	e004      	b.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ca1c:	bf00      	nop
 800ca1e:	e002      	b.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ca20:	bf00      	nop
 800ca22:	e000      	b.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800ca24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10a      	bne.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ca2e:	4bad      	ldr	r3, [pc, #692]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ca36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca3c:	4aa9      	ldr	r2, [pc, #676]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca3e:	430b      	orrs	r3, r1
 800ca40:	6553      	str	r3, [r2, #84]	@ 0x54
 800ca42:	e003      	b.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ca4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ca58:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca5e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800ca62:	460b      	mov	r3, r1
 800ca64:	4313      	orrs	r3, r2
 800ca66:	d009      	beq.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ca68:	4b9e      	ldr	r3, [pc, #632]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ca70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca76:	4a9b      	ldr	r2, [pc, #620]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca78:	430b      	orrs	r3, r1
 800ca7a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ca7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca84:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ca88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca8e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ca92:	460b      	mov	r3, r1
 800ca94:	4313      	orrs	r3, r2
 800ca96:	d009      	beq.n	800caac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ca98:	4b92      	ldr	r3, [pc, #584]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca9c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800caa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800caa6:	4a8f      	ldr	r2, [pc, #572]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800caa8:	430b      	orrs	r3, r1
 800caaa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800caac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cab8:	643b      	str	r3, [r7, #64]	@ 0x40
 800caba:	2300      	movs	r3, #0
 800cabc:	647b      	str	r3, [r7, #68]	@ 0x44
 800cabe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cac2:	460b      	mov	r3, r1
 800cac4:	4313      	orrs	r3, r2
 800cac6:	d00e      	beq.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cac8:	4b86      	ldr	r3, [pc, #536]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	4a85      	ldr	r2, [pc, #532]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cace:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cad2:	6113      	str	r3, [r2, #16]
 800cad4:	4b83      	ldr	r3, [pc, #524]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cad6:	6919      	ldr	r1, [r3, #16]
 800cad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cadc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cae0:	4a80      	ldr	r2, [pc, #512]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cae2:	430b      	orrs	r3, r1
 800cae4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800caf2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800caf4:	2300      	movs	r3, #0
 800caf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800caf8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cafc:	460b      	mov	r3, r1
 800cafe:	4313      	orrs	r3, r2
 800cb00:	d009      	beq.n	800cb16 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cb02:	4b78      	ldr	r3, [pc, #480]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb06:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cb0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb10:	4a74      	ldr	r2, [pc, #464]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb12:	430b      	orrs	r3, r1
 800cb14:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cb22:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb24:	2300      	movs	r3, #0
 800cb26:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb28:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	d00a      	beq.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cb32:	4b6c      	ldr	r3, [pc, #432]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb36:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb42:	4a68      	ldr	r2, [pc, #416]	@ (800cce4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb44:	430b      	orrs	r3, r1
 800cb46:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb50:	2100      	movs	r1, #0
 800cb52:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cb54:	f003 0301 	and.w	r3, r3, #1
 800cb58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb5a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4313      	orrs	r3, r2
 800cb62:	d011      	beq.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb68:	3308      	adds	r3, #8
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 f8bb 	bl	800cce8 <RCCEx_PLL2_Config>
 800cb72:	4603      	mov	r3, r0
 800cb74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d003      	beq.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	2100      	movs	r1, #0
 800cb92:	6239      	str	r1, [r7, #32]
 800cb94:	f003 0302 	and.w	r3, r3, #2
 800cb98:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4313      	orrs	r3, r2
 800cba2:	d011      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cba8:	3308      	adds	r3, #8
 800cbaa:	2101      	movs	r1, #1
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 f89b 	bl	800cce8 <RCCEx_PLL2_Config>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cbb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d003      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	61b9      	str	r1, [r7, #24]
 800cbd4:	f003 0304 	and.w	r3, r3, #4
 800cbd8:	61fb      	str	r3, [r7, #28]
 800cbda:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	4313      	orrs	r3, r2
 800cbe2:	d011      	beq.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cbe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe8:	3308      	adds	r3, #8
 800cbea:	2102      	movs	r1, #2
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 f87b 	bl	800cce8 <RCCEx_PLL2_Config>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cbf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d003      	beq.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	2100      	movs	r1, #0
 800cc12:	6139      	str	r1, [r7, #16]
 800cc14:	f003 0308 	and.w	r3, r3, #8
 800cc18:	617b      	str	r3, [r7, #20]
 800cc1a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cc1e:	460b      	mov	r3, r1
 800cc20:	4313      	orrs	r3, r2
 800cc22:	d011      	beq.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc28:	3328      	adds	r3, #40	@ 0x28
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 f90d 	bl	800ce4c <RCCEx_PLL3_Config>
 800cc32:	4603      	mov	r3, r0
 800cc34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800cc38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d003      	beq.n	800cc48 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cc48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	2100      	movs	r1, #0
 800cc52:	60b9      	str	r1, [r7, #8]
 800cc54:	f003 0310 	and.w	r3, r3, #16
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cc5e:	460b      	mov	r3, r1
 800cc60:	4313      	orrs	r3, r2
 800cc62:	d011      	beq.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc68:	3328      	adds	r3, #40	@ 0x28
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 f8ed 	bl	800ce4c <RCCEx_PLL3_Config>
 800cc72:	4603      	mov	r3, r0
 800cc74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cc78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d003      	beq.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cc88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	2100      	movs	r1, #0
 800cc92:	6039      	str	r1, [r7, #0]
 800cc94:	f003 0320 	and.w	r3, r3, #32
 800cc98:	607b      	str	r3, [r7, #4]
 800cc9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4313      	orrs	r3, r2
 800cca2:	d011      	beq.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca8:	3328      	adds	r3, #40	@ 0x28
 800ccaa:	2102      	movs	r1, #2
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 f8cd 	bl	800ce4c <RCCEx_PLL3_Config>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ccb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d003      	beq.n	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800ccc8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d101      	bne.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	e000      	b.n	800ccd6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cce2:	bf00      	nop
 800cce4:	58024400 	.word	0x58024400

0800cce8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccf6:	4b53      	ldr	r3, [pc, #332]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800ccf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccfa:	f003 0303 	and.w	r3, r3, #3
 800ccfe:	2b03      	cmp	r3, #3
 800cd00:	d101      	bne.n	800cd06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e099      	b.n	800ce3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd06:	4b4f      	ldr	r3, [pc, #316]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a4e      	ldr	r2, [pc, #312]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cd0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd12:	f7f9 f8a9 	bl	8005e68 <HAL_GetTick>
 800cd16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd18:	e008      	b.n	800cd2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd1a:	f7f9 f8a5 	bl	8005e68 <HAL_GetTick>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d901      	bls.n	800cd2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	e086      	b.n	800ce3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd2c:	4b45      	ldr	r3, [pc, #276]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1f0      	bne.n	800cd1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd38:	4b42      	ldr	r3, [pc, #264]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	031b      	lsls	r3, r3, #12
 800cd46:	493f      	ldr	r1, [pc, #252]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	628b      	str	r3, [r1, #40]	@ 0x28
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	3b01      	subs	r3, #1
 800cd52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	025b      	lsls	r3, r3, #9
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	431a      	orrs	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	041b      	lsls	r3, r3, #16
 800cd6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800cd6e:	431a      	orrs	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	691b      	ldr	r3, [r3, #16]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	061b      	lsls	r3, r3, #24
 800cd78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cd7c:	4931      	ldr	r1, [pc, #196]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cd7e:	4313      	orrs	r3, r2
 800cd80:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cd82:	4b30      	ldr	r3, [pc, #192]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cd84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	695b      	ldr	r3, [r3, #20]
 800cd8e:	492d      	ldr	r1, [pc, #180]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cd90:	4313      	orrs	r3, r2
 800cd92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd94:	4b2b      	ldr	r3, [pc, #172]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cd96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd98:	f023 0220 	bic.w	r2, r3, #32
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	4928      	ldr	r1, [pc, #160]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cda2:	4313      	orrs	r3, r2
 800cda4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cda6:	4b27      	ldr	r3, [pc, #156]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdaa:	4a26      	ldr	r2, [pc, #152]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdac:	f023 0310 	bic.w	r3, r3, #16
 800cdb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cdb2:	4b24      	ldr	r3, [pc, #144]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cdb6:	4b24      	ldr	r3, [pc, #144]	@ (800ce48 <RCCEx_PLL2_Config+0x160>)
 800cdb8:	4013      	ands	r3, r2
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	69d2      	ldr	r2, [r2, #28]
 800cdbe:	00d2      	lsls	r2, r2, #3
 800cdc0:	4920      	ldr	r1, [pc, #128]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cdc6:	4b1f      	ldr	r3, [pc, #124]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdca:	4a1e      	ldr	r2, [pc, #120]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdcc:	f043 0310 	orr.w	r3, r3, #16
 800cdd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d106      	bne.n	800cde6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cdd8:	4b1a      	ldr	r3, [pc, #104]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cddc:	4a19      	ldr	r2, [pc, #100]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cde2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cde4:	e00f      	b.n	800ce06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d106      	bne.n	800cdfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cdec:	4b15      	ldr	r3, [pc, #84]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf0:	4a14      	ldr	r2, [pc, #80]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cdf8:	e005      	b.n	800ce06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cdfa:	4b12      	ldr	r3, [pc, #72]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800cdfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfe:	4a11      	ldr	r2, [pc, #68]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800ce00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ce04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce06:	4b0f      	ldr	r3, [pc, #60]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a0e      	ldr	r2, [pc, #56]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800ce0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce12:	f7f9 f829 	bl	8005e68 <HAL_GetTick>
 800ce16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce18:	e008      	b.n	800ce2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce1a:	f7f9 f825 	bl	8005e68 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d901      	bls.n	800ce2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	e006      	b.n	800ce3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce2c:	4b05      	ldr	r3, [pc, #20]	@ (800ce44 <RCCEx_PLL2_Config+0x15c>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d0f0      	beq.n	800ce1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3710      	adds	r7, #16
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	58024400 	.word	0x58024400
 800ce48:	ffff0007 	.word	0xffff0007

0800ce4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce5a:	4b53      	ldr	r3, [pc, #332]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800ce5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce5e:	f003 0303 	and.w	r3, r3, #3
 800ce62:	2b03      	cmp	r3, #3
 800ce64:	d101      	bne.n	800ce6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ce66:	2301      	movs	r3, #1
 800ce68:	e099      	b.n	800cf9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce6a:	4b4f      	ldr	r3, [pc, #316]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a4e      	ldr	r2, [pc, #312]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800ce70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce76:	f7f8 fff7 	bl	8005e68 <HAL_GetTick>
 800ce7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce7c:	e008      	b.n	800ce90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ce7e:	f7f8 fff3 	bl	8005e68 <HAL_GetTick>
 800ce82:	4602      	mov	r2, r0
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d901      	bls.n	800ce90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e086      	b.n	800cf9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce90:	4b45      	ldr	r3, [pc, #276]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d1f0      	bne.n	800ce7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce9c:	4b42      	ldr	r3, [pc, #264]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800ce9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cea0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	051b      	lsls	r3, r3, #20
 800ceaa:	493f      	ldr	r1, [pc, #252]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800ceac:	4313      	orrs	r3, r2
 800ceae:	628b      	str	r3, [r1, #40]	@ 0x28
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	025b      	lsls	r3, r3, #9
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	431a      	orrs	r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	3b01      	subs	r3, #1
 800cecc:	041b      	lsls	r3, r3, #16
 800cece:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ced2:	431a      	orrs	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	061b      	lsls	r3, r3, #24
 800cedc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800cee0:	4931      	ldr	r1, [pc, #196]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cee2:	4313      	orrs	r3, r2
 800cee4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cee6:	4b30      	ldr	r3, [pc, #192]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	492d      	ldr	r1, [pc, #180]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cef4:	4313      	orrs	r3, r2
 800cef6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cef8:	4b2b      	ldr	r3, [pc, #172]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cefa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cefc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	699b      	ldr	r3, [r3, #24]
 800cf04:	4928      	ldr	r1, [pc, #160]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf06:	4313      	orrs	r3, r2
 800cf08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf0a:	4b27      	ldr	r3, [pc, #156]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf0e:	4a26      	ldr	r2, [pc, #152]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf16:	4b24      	ldr	r3, [pc, #144]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf1a:	4b24      	ldr	r3, [pc, #144]	@ (800cfac <RCCEx_PLL3_Config+0x160>)
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	69d2      	ldr	r2, [r2, #28]
 800cf22:	00d2      	lsls	r2, r2, #3
 800cf24:	4920      	ldr	r1, [pc, #128]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf26:	4313      	orrs	r3, r2
 800cf28:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf2a:	4b1f      	ldr	r3, [pc, #124]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2e:	4a1e      	ldr	r2, [pc, #120]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cf34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf3c:	4b1a      	ldr	r3, [pc, #104]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf40:	4a19      	ldr	r2, [pc, #100]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cf46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf48:	e00f      	b.n	800cf6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d106      	bne.n	800cf5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf50:	4b15      	ldr	r3, [pc, #84]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf54:	4a14      	ldr	r2, [pc, #80]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cf5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800cf5c:	e005      	b.n	800cf6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf5e:	4b12      	ldr	r3, [pc, #72]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf62:	4a11      	ldr	r2, [pc, #68]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf6a:	4b0f      	ldr	r3, [pc, #60]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a0e      	ldr	r2, [pc, #56]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf76:	f7f8 ff77 	bl	8005e68 <HAL_GetTick>
 800cf7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf7c:	e008      	b.n	800cf90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cf7e:	f7f8 ff73 	bl	8005e68 <HAL_GetTick>
 800cf82:	4602      	mov	r2, r0
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d901      	bls.n	800cf90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e006      	b.n	800cf9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf90:	4b05      	ldr	r3, [pc, #20]	@ (800cfa8 <RCCEx_PLL3_Config+0x15c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d0f0      	beq.n	800cf7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	58024400 	.word	0x58024400
 800cfac:	ffff0007 	.word	0xffff0007

0800cfb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d101      	bne.n	800cfc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e049      	b.n	800d056 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d106      	bne.n	800cfdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f7f8 f9cc 	bl	8005374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2202      	movs	r2, #2
 800cfe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	3304      	adds	r3, #4
 800cfec:	4619      	mov	r1, r3
 800cfee:	4610      	mov	r0, r2
 800cff0:	f001 f9a6 	bl	800e340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2201      	movs	r2, #1
 800d038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2201      	movs	r2, #1
 800d050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
	...

0800d060 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b01      	cmp	r3, #1
 800d072:	d001      	beq.n	800d078 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e056      	b.n	800d126 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2202      	movs	r2, #2
 800d07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a2b      	ldr	r2, [pc, #172]	@ (800d134 <HAL_TIM_Base_Start+0xd4>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d02c      	beq.n	800d0e4 <HAL_TIM_Base_Start+0x84>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d092:	d027      	beq.n	800d0e4 <HAL_TIM_Base_Start+0x84>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a27      	ldr	r2, [pc, #156]	@ (800d138 <HAL_TIM_Base_Start+0xd8>)
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d022      	beq.n	800d0e4 <HAL_TIM_Base_Start+0x84>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4a26      	ldr	r2, [pc, #152]	@ (800d13c <HAL_TIM_Base_Start+0xdc>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d01d      	beq.n	800d0e4 <HAL_TIM_Base_Start+0x84>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a24      	ldr	r2, [pc, #144]	@ (800d140 <HAL_TIM_Base_Start+0xe0>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d018      	beq.n	800d0e4 <HAL_TIM_Base_Start+0x84>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4a23      	ldr	r2, [pc, #140]	@ (800d144 <HAL_TIM_Base_Start+0xe4>)
 800d0b8:	4293      	cmp	r3, r2
 800d0ba:	d013      	beq.n	800d0e4 <HAL_TIM_Base_Start+0x84>
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a21      	ldr	r2, [pc, #132]	@ (800d148 <HAL_TIM_Base_Start+0xe8>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d00e      	beq.n	800d0e4 <HAL_TIM_Base_Start+0x84>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a20      	ldr	r2, [pc, #128]	@ (800d14c <HAL_TIM_Base_Start+0xec>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d009      	beq.n	800d0e4 <HAL_TIM_Base_Start+0x84>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a1e      	ldr	r2, [pc, #120]	@ (800d150 <HAL_TIM_Base_Start+0xf0>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d004      	beq.n	800d0e4 <HAL_TIM_Base_Start+0x84>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a1d      	ldr	r2, [pc, #116]	@ (800d154 <HAL_TIM_Base_Start+0xf4>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d115      	bne.n	800d110 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	689a      	ldr	r2, [r3, #8]
 800d0ea:	4b1b      	ldr	r3, [pc, #108]	@ (800d158 <HAL_TIM_Base_Start+0xf8>)
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2b06      	cmp	r3, #6
 800d0f4:	d015      	beq.n	800d122 <HAL_TIM_Base_Start+0xc2>
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0fc:	d011      	beq.n	800d122 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f042 0201 	orr.w	r2, r2, #1
 800d10c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d10e:	e008      	b.n	800d122 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f042 0201 	orr.w	r2, r2, #1
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	e000      	b.n	800d124 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d122:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3714      	adds	r7, #20
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	40010000 	.word	0x40010000
 800d138:	40000400 	.word	0x40000400
 800d13c:	40000800 	.word	0x40000800
 800d140:	40000c00 	.word	0x40000c00
 800d144:	40010400 	.word	0x40010400
 800d148:	40001800 	.word	0x40001800
 800d14c:	40014000 	.word	0x40014000
 800d150:	4000e000 	.word	0x4000e000
 800d154:	4000e400 	.word	0x4000e400
 800d158:	00010007 	.word	0x00010007

0800d15c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	6a1a      	ldr	r2, [r3, #32]
 800d16a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800d16e:	4013      	ands	r3, r2
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10f      	bne.n	800d194 <HAL_TIM_Base_Stop+0x38>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6a1a      	ldr	r2, [r3, #32]
 800d17a:	f240 4344 	movw	r3, #1092	@ 0x444
 800d17e:	4013      	ands	r3, r2
 800d180:	2b00      	cmp	r3, #0
 800d182:	d107      	bne.n	800d194 <HAL_TIM_Base_Stop+0x38>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f022 0201 	bic.w	r2, r2, #1
 800d192:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr

0800d1aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d1aa:	b580      	push	{r7, lr}
 800d1ac:	b082      	sub	sp, #8
 800d1ae:	af00      	add	r7, sp, #0
 800d1b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d101      	bne.n	800d1bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	e049      	b.n	800d250 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d106      	bne.n	800d1d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 f841 	bl	800d258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2202      	movs	r2, #2
 800d1da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	f001 f8a9 	bl	800e340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3708      	adds	r7, #8
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d260:	bf00      	nop
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d109      	bne.n	800d290 <HAL_TIM_PWM_Start+0x24>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b01      	cmp	r3, #1
 800d286:	bf14      	ite	ne
 800d288:	2301      	movne	r3, #1
 800d28a:	2300      	moveq	r3, #0
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	e03c      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	2b04      	cmp	r3, #4
 800d294:	d109      	bne.n	800d2aa <HAL_TIM_PWM_Start+0x3e>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	bf14      	ite	ne
 800d2a2:	2301      	movne	r3, #1
 800d2a4:	2300      	moveq	r3, #0
 800d2a6:	b2db      	uxtb	r3, r3
 800d2a8:	e02f      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2b08      	cmp	r3, #8
 800d2ae:	d109      	bne.n	800d2c4 <HAL_TIM_PWM_Start+0x58>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	bf14      	ite	ne
 800d2bc:	2301      	movne	r3, #1
 800d2be:	2300      	moveq	r3, #0
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	e022      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2b0c      	cmp	r3, #12
 800d2c8:	d109      	bne.n	800d2de <HAL_TIM_PWM_Start+0x72>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	bf14      	ite	ne
 800d2d6:	2301      	movne	r3, #1
 800d2d8:	2300      	moveq	r3, #0
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	e015      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	2b10      	cmp	r3, #16
 800d2e2:	d109      	bne.n	800d2f8 <HAL_TIM_PWM_Start+0x8c>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	bf14      	ite	ne
 800d2f0:	2301      	movne	r3, #1
 800d2f2:	2300      	moveq	r3, #0
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	e008      	b.n	800d30a <HAL_TIM_PWM_Start+0x9e>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b01      	cmp	r3, #1
 800d302:	bf14      	ite	ne
 800d304:	2301      	movne	r3, #1
 800d306:	2300      	moveq	r3, #0
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	e0ab      	b.n	800d46a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d104      	bne.n	800d322 <HAL_TIM_PWM_Start+0xb6>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2202      	movs	r2, #2
 800d31c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d320:	e023      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b04      	cmp	r3, #4
 800d326:	d104      	bne.n	800d332 <HAL_TIM_PWM_Start+0xc6>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2202      	movs	r2, #2
 800d32c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d330:	e01b      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2b08      	cmp	r3, #8
 800d336:	d104      	bne.n	800d342 <HAL_TIM_PWM_Start+0xd6>
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2202      	movs	r2, #2
 800d33c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d340:	e013      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	2b0c      	cmp	r3, #12
 800d346:	d104      	bne.n	800d352 <HAL_TIM_PWM_Start+0xe6>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2202      	movs	r2, #2
 800d34c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d350:	e00b      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b10      	cmp	r3, #16
 800d356:	d104      	bne.n	800d362 <HAL_TIM_PWM_Start+0xf6>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2202      	movs	r2, #2
 800d35c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d360:	e003      	b.n	800d36a <HAL_TIM_PWM_Start+0xfe>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2202      	movs	r2, #2
 800d366:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2201      	movs	r2, #1
 800d370:	6839      	ldr	r1, [r7, #0]
 800d372:	4618      	mov	r0, r3
 800d374:	f001 fc04 	bl	800eb80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a3d      	ldr	r2, [pc, #244]	@ (800d474 <HAL_TIM_PWM_Start+0x208>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d013      	beq.n	800d3aa <HAL_TIM_PWM_Start+0x13e>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a3c      	ldr	r2, [pc, #240]	@ (800d478 <HAL_TIM_PWM_Start+0x20c>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d00e      	beq.n	800d3aa <HAL_TIM_PWM_Start+0x13e>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a3a      	ldr	r2, [pc, #232]	@ (800d47c <HAL_TIM_PWM_Start+0x210>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d009      	beq.n	800d3aa <HAL_TIM_PWM_Start+0x13e>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a39      	ldr	r2, [pc, #228]	@ (800d480 <HAL_TIM_PWM_Start+0x214>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d004      	beq.n	800d3aa <HAL_TIM_PWM_Start+0x13e>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4a37      	ldr	r2, [pc, #220]	@ (800d484 <HAL_TIM_PWM_Start+0x218>)
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d101      	bne.n	800d3ae <HAL_TIM_PWM_Start+0x142>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e000      	b.n	800d3b0 <HAL_TIM_PWM_Start+0x144>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d007      	beq.n	800d3c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d3c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a2a      	ldr	r2, [pc, #168]	@ (800d474 <HAL_TIM_PWM_Start+0x208>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d02c      	beq.n	800d428 <HAL_TIM_PWM_Start+0x1bc>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3d6:	d027      	beq.n	800d428 <HAL_TIM_PWM_Start+0x1bc>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a2a      	ldr	r2, [pc, #168]	@ (800d488 <HAL_TIM_PWM_Start+0x21c>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d022      	beq.n	800d428 <HAL_TIM_PWM_Start+0x1bc>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a29      	ldr	r2, [pc, #164]	@ (800d48c <HAL_TIM_PWM_Start+0x220>)
 800d3e8:	4293      	cmp	r3, r2
 800d3ea:	d01d      	beq.n	800d428 <HAL_TIM_PWM_Start+0x1bc>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4a27      	ldr	r2, [pc, #156]	@ (800d490 <HAL_TIM_PWM_Start+0x224>)
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	d018      	beq.n	800d428 <HAL_TIM_PWM_Start+0x1bc>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	4a1f      	ldr	r2, [pc, #124]	@ (800d478 <HAL_TIM_PWM_Start+0x20c>)
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d013      	beq.n	800d428 <HAL_TIM_PWM_Start+0x1bc>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a23      	ldr	r2, [pc, #140]	@ (800d494 <HAL_TIM_PWM_Start+0x228>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d00e      	beq.n	800d428 <HAL_TIM_PWM_Start+0x1bc>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4a1b      	ldr	r2, [pc, #108]	@ (800d47c <HAL_TIM_PWM_Start+0x210>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d009      	beq.n	800d428 <HAL_TIM_PWM_Start+0x1bc>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a1f      	ldr	r2, [pc, #124]	@ (800d498 <HAL_TIM_PWM_Start+0x22c>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d004      	beq.n	800d428 <HAL_TIM_PWM_Start+0x1bc>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a1e      	ldr	r2, [pc, #120]	@ (800d49c <HAL_TIM_PWM_Start+0x230>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d115      	bne.n	800d454 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	689a      	ldr	r2, [r3, #8]
 800d42e:	4b1c      	ldr	r3, [pc, #112]	@ (800d4a0 <HAL_TIM_PWM_Start+0x234>)
 800d430:	4013      	ands	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2b06      	cmp	r3, #6
 800d438:	d015      	beq.n	800d466 <HAL_TIM_PWM_Start+0x1fa>
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d440:	d011      	beq.n	800d466 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f042 0201 	orr.w	r2, r2, #1
 800d450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d452:	e008      	b.n	800d466 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f042 0201 	orr.w	r2, r2, #1
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	e000      	b.n	800d468 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d466:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	40010000 	.word	0x40010000
 800d478:	40010400 	.word	0x40010400
 800d47c:	40014000 	.word	0x40014000
 800d480:	40014400 	.word	0x40014400
 800d484:	40014800 	.word	0x40014800
 800d488:	40000400 	.word	0x40000400
 800d48c:	40000800 	.word	0x40000800
 800d490:	40000c00 	.word	0x40000c00
 800d494:	40001800 	.word	0x40001800
 800d498:	4000e000 	.word	0x4000e000
 800d49c:	4000e400 	.word	0x4000e400
 800d4a0:	00010007 	.word	0x00010007

0800d4a4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d109      	bne.n	800d4d0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d4c2:	b2db      	uxtb	r3, r3
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	bf0c      	ite	eq
 800d4c8:	2301      	moveq	r3, #1
 800d4ca:	2300      	movne	r3, #0
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	e03c      	b.n	800d54a <HAL_TIM_PWM_Start_DMA+0xa6>
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	2b04      	cmp	r3, #4
 800d4d4:	d109      	bne.n	800d4ea <HAL_TIM_PWM_Start_DMA+0x46>
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	bf0c      	ite	eq
 800d4e2:	2301      	moveq	r3, #1
 800d4e4:	2300      	movne	r3, #0
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	e02f      	b.n	800d54a <HAL_TIM_PWM_Start_DMA+0xa6>
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2b08      	cmp	r3, #8
 800d4ee:	d109      	bne.n	800d504 <HAL_TIM_PWM_Start_DMA+0x60>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	bf0c      	ite	eq
 800d4fc:	2301      	moveq	r3, #1
 800d4fe:	2300      	movne	r3, #0
 800d500:	b2db      	uxtb	r3, r3
 800d502:	e022      	b.n	800d54a <HAL_TIM_PWM_Start_DMA+0xa6>
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	2b0c      	cmp	r3, #12
 800d508:	d109      	bne.n	800d51e <HAL_TIM_PWM_Start_DMA+0x7a>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b02      	cmp	r3, #2
 800d514:	bf0c      	ite	eq
 800d516:	2301      	moveq	r3, #1
 800d518:	2300      	movne	r3, #0
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	e015      	b.n	800d54a <HAL_TIM_PWM_Start_DMA+0xa6>
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b10      	cmp	r3, #16
 800d522:	d109      	bne.n	800d538 <HAL_TIM_PWM_Start_DMA+0x94>
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	bf0c      	ite	eq
 800d530:	2301      	moveq	r3, #1
 800d532:	2300      	movne	r3, #0
 800d534:	b2db      	uxtb	r3, r3
 800d536:	e008      	b.n	800d54a <HAL_TIM_PWM_Start_DMA+0xa6>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	2b02      	cmp	r3, #2
 800d542:	bf0c      	ite	eq
 800d544:	2301      	moveq	r3, #1
 800d546:	2300      	movne	r3, #0
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d001      	beq.n	800d552 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800d54e:	2302      	movs	r3, #2
 800d550:	e1ba      	b.n	800d8c8 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d109      	bne.n	800d56c <HAL_TIM_PWM_Start_DMA+0xc8>
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	2b01      	cmp	r3, #1
 800d562:	bf0c      	ite	eq
 800d564:	2301      	moveq	r3, #1
 800d566:	2300      	movne	r3, #0
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	e03c      	b.n	800d5e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	2b04      	cmp	r3, #4
 800d570:	d109      	bne.n	800d586 <HAL_TIM_PWM_Start_DMA+0xe2>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	bf0c      	ite	eq
 800d57e:	2301      	moveq	r3, #1
 800d580:	2300      	movne	r3, #0
 800d582:	b2db      	uxtb	r3, r3
 800d584:	e02f      	b.n	800d5e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b08      	cmp	r3, #8
 800d58a:	d109      	bne.n	800d5a0 <HAL_TIM_PWM_Start_DMA+0xfc>
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d592:	b2db      	uxtb	r3, r3
 800d594:	2b01      	cmp	r3, #1
 800d596:	bf0c      	ite	eq
 800d598:	2301      	moveq	r3, #1
 800d59a:	2300      	movne	r3, #0
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	e022      	b.n	800d5e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	2b0c      	cmp	r3, #12
 800d5a4:	d109      	bne.n	800d5ba <HAL_TIM_PWM_Start_DMA+0x116>
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	bf0c      	ite	eq
 800d5b2:	2301      	moveq	r3, #1
 800d5b4:	2300      	movne	r3, #0
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	e015      	b.n	800d5e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	2b10      	cmp	r3, #16
 800d5be:	d109      	bne.n	800d5d4 <HAL_TIM_PWM_Start_DMA+0x130>
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	bf0c      	ite	eq
 800d5cc:	2301      	moveq	r3, #1
 800d5ce:	2300      	movne	r3, #0
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	e008      	b.n	800d5e6 <HAL_TIM_PWM_Start_DMA+0x142>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	bf0c      	ite	eq
 800d5e0:	2301      	moveq	r3, #1
 800d5e2:	2300      	movne	r3, #0
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d034      	beq.n	800d654 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <HAL_TIM_PWM_Start_DMA+0x152>
 800d5f0:	887b      	ldrh	r3, [r7, #2]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d101      	bne.n	800d5fa <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e166      	b.n	800d8c8 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d104      	bne.n	800d60a <HAL_TIM_PWM_Start_DMA+0x166>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2202      	movs	r2, #2
 800d604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d608:	e026      	b.n	800d658 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	2b04      	cmp	r3, #4
 800d60e:	d104      	bne.n	800d61a <HAL_TIM_PWM_Start_DMA+0x176>
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2202      	movs	r2, #2
 800d614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d618:	e01e      	b.n	800d658 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b08      	cmp	r3, #8
 800d61e:	d104      	bne.n	800d62a <HAL_TIM_PWM_Start_DMA+0x186>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2202      	movs	r2, #2
 800d624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d628:	e016      	b.n	800d658 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2b0c      	cmp	r3, #12
 800d62e:	d104      	bne.n	800d63a <HAL_TIM_PWM_Start_DMA+0x196>
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2202      	movs	r2, #2
 800d634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d638:	e00e      	b.n	800d658 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2b10      	cmp	r3, #16
 800d63e:	d104      	bne.n	800d64a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2202      	movs	r2, #2
 800d644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d648:	e006      	b.n	800d658 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2202      	movs	r2, #2
 800d64e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d652:	e001      	b.n	800d658 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	e137      	b.n	800d8c8 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2b0c      	cmp	r3, #12
 800d65c:	f200 80ae 	bhi.w	800d7bc <HAL_TIM_PWM_Start_DMA+0x318>
 800d660:	a201      	add	r2, pc, #4	@ (adr r2, 800d668 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800d662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d666:	bf00      	nop
 800d668:	0800d69d 	.word	0x0800d69d
 800d66c:	0800d7bd 	.word	0x0800d7bd
 800d670:	0800d7bd 	.word	0x0800d7bd
 800d674:	0800d7bd 	.word	0x0800d7bd
 800d678:	0800d6e5 	.word	0x0800d6e5
 800d67c:	0800d7bd 	.word	0x0800d7bd
 800d680:	0800d7bd 	.word	0x0800d7bd
 800d684:	0800d7bd 	.word	0x0800d7bd
 800d688:	0800d72d 	.word	0x0800d72d
 800d68c:	0800d7bd 	.word	0x0800d7bd
 800d690:	0800d7bd 	.word	0x0800d7bd
 800d694:	0800d7bd 	.word	0x0800d7bd
 800d698:	0800d775 	.word	0x0800d775
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6a0:	4a8b      	ldr	r2, [pc, #556]	@ (800d8d0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d6a2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6a8:	4a8a      	ldr	r2, [pc, #552]	@ (800d8d4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800d6aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6b0:	4a89      	ldr	r2, [pc, #548]	@ (800d8d8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d6b2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800d6b8:	6879      	ldr	r1, [r7, #4]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	3334      	adds	r3, #52	@ 0x34
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	887b      	ldrh	r3, [r7, #2]
 800d6c4:	f7f9 f8e0 	bl	8006888 <HAL_DMA_Start_IT>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d001      	beq.n	800d6d2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e0fa      	b.n	800d8c8 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	68da      	ldr	r2, [r3, #12]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6e0:	60da      	str	r2, [r3, #12]
      break;
 800d6e2:	e06e      	b.n	800d7c2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e8:	4a79      	ldr	r2, [pc, #484]	@ (800d8d0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d6ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f0:	4a78      	ldr	r2, [pc, #480]	@ (800d8d4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800d6f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f8:	4a77      	ldr	r2, [pc, #476]	@ (800d8d8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d6fa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800d700:	6879      	ldr	r1, [r7, #4]
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	3338      	adds	r3, #56	@ 0x38
 800d708:	461a      	mov	r2, r3
 800d70a:	887b      	ldrh	r3, [r7, #2]
 800d70c:	f7f9 f8bc 	bl	8006888 <HAL_DMA_Start_IT>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e0d6      	b.n	800d8c8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68da      	ldr	r2, [r3, #12]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d728:	60da      	str	r2, [r3, #12]
      break;
 800d72a:	e04a      	b.n	800d7c2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d730:	4a67      	ldr	r2, [pc, #412]	@ (800d8d0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d732:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d738:	4a66      	ldr	r2, [pc, #408]	@ (800d8d4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800d73a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d740:	4a65      	ldr	r2, [pc, #404]	@ (800d8d8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d742:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d748:	6879      	ldr	r1, [r7, #4]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	333c      	adds	r3, #60	@ 0x3c
 800d750:	461a      	mov	r2, r3
 800d752:	887b      	ldrh	r3, [r7, #2]
 800d754:	f7f9 f898 	bl	8006888 <HAL_DMA_Start_IT>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d75e:	2301      	movs	r3, #1
 800d760:	e0b2      	b.n	800d8c8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68da      	ldr	r2, [r3, #12]
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d770:	60da      	str	r2, [r3, #12]
      break;
 800d772:	e026      	b.n	800d7c2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d778:	4a55      	ldr	r2, [pc, #340]	@ (800d8d0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800d77a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d780:	4a54      	ldr	r2, [pc, #336]	@ (800d8d4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800d782:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d788:	4a53      	ldr	r2, [pc, #332]	@ (800d8d8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800d78a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d790:	6879      	ldr	r1, [r7, #4]
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	3340      	adds	r3, #64	@ 0x40
 800d798:	461a      	mov	r2, r3
 800d79a:	887b      	ldrh	r3, [r7, #2]
 800d79c:	f7f9 f874 	bl	8006888 <HAL_DMA_Start_IT>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d001      	beq.n	800d7aa <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e08e      	b.n	800d8c8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68da      	ldr	r2, [r3, #12]
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d7b8:	60da      	str	r2, [r3, #12]
      break;
 800d7ba:	e002      	b.n	800d7c2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	75fb      	strb	r3, [r7, #23]
      break;
 800d7c0:	bf00      	nop
  }

  if (status == HAL_OK)
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d17e      	bne.n	800d8c6 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	68b9      	ldr	r1, [r7, #8]
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f001 f9d5 	bl	800eb80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a40      	ldr	r2, [pc, #256]	@ (800d8dc <HAL_TIM_PWM_Start_DMA+0x438>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d013      	beq.n	800d808 <HAL_TIM_PWM_Start_DMA+0x364>
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a3e      	ldr	r2, [pc, #248]	@ (800d8e0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d00e      	beq.n	800d808 <HAL_TIM_PWM_Start_DMA+0x364>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a3d      	ldr	r2, [pc, #244]	@ (800d8e4 <HAL_TIM_PWM_Start_DMA+0x440>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d009      	beq.n	800d808 <HAL_TIM_PWM_Start_DMA+0x364>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a3b      	ldr	r2, [pc, #236]	@ (800d8e8 <HAL_TIM_PWM_Start_DMA+0x444>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d004      	beq.n	800d808 <HAL_TIM_PWM_Start_DMA+0x364>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4a3a      	ldr	r2, [pc, #232]	@ (800d8ec <HAL_TIM_PWM_Start_DMA+0x448>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d101      	bne.n	800d80c <HAL_TIM_PWM_Start_DMA+0x368>
 800d808:	2301      	movs	r3, #1
 800d80a:	e000      	b.n	800d80e <HAL_TIM_PWM_Start_DMA+0x36a>
 800d80c:	2300      	movs	r3, #0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d007      	beq.n	800d822 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a2d      	ldr	r2, [pc, #180]	@ (800d8dc <HAL_TIM_PWM_Start_DMA+0x438>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d02c      	beq.n	800d886 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d834:	d027      	beq.n	800d886 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a2d      	ldr	r2, [pc, #180]	@ (800d8f0 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d022      	beq.n	800d886 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a2b      	ldr	r2, [pc, #172]	@ (800d8f4 <HAL_TIM_PWM_Start_DMA+0x450>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d01d      	beq.n	800d886 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4a2a      	ldr	r2, [pc, #168]	@ (800d8f8 <HAL_TIM_PWM_Start_DMA+0x454>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d018      	beq.n	800d886 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a21      	ldr	r2, [pc, #132]	@ (800d8e0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d013      	beq.n	800d886 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a26      	ldr	r2, [pc, #152]	@ (800d8fc <HAL_TIM_PWM_Start_DMA+0x458>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d00e      	beq.n	800d886 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a1d      	ldr	r2, [pc, #116]	@ (800d8e4 <HAL_TIM_PWM_Start_DMA+0x440>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d009      	beq.n	800d886 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	4a22      	ldr	r2, [pc, #136]	@ (800d900 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d004      	beq.n	800d886 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a20      	ldr	r2, [pc, #128]	@ (800d904 <HAL_TIM_PWM_Start_DMA+0x460>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d115      	bne.n	800d8b2 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	689a      	ldr	r2, [r3, #8]
 800d88c:	4b1e      	ldr	r3, [pc, #120]	@ (800d908 <HAL_TIM_PWM_Start_DMA+0x464>)
 800d88e:	4013      	ands	r3, r2
 800d890:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	2b06      	cmp	r3, #6
 800d896:	d015      	beq.n	800d8c4 <HAL_TIM_PWM_Start_DMA+0x420>
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d89e:	d011      	beq.n	800d8c4 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	681a      	ldr	r2, [r3, #0]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f042 0201 	orr.w	r2, r2, #1
 800d8ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8b0:	e008      	b.n	800d8c4 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f042 0201 	orr.w	r2, r2, #1
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	e000      	b.n	800d8c6 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d8c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3718      	adds	r7, #24
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	0800e22f 	.word	0x0800e22f
 800d8d4:	0800e2d7 	.word	0x0800e2d7
 800d8d8:	0800e19d 	.word	0x0800e19d
 800d8dc:	40010000 	.word	0x40010000
 800d8e0:	40010400 	.word	0x40010400
 800d8e4:	40014000 	.word	0x40014000
 800d8e8:	40014400 	.word	0x40014400
 800d8ec:	40014800 	.word	0x40014800
 800d8f0:	40000400 	.word	0x40000400
 800d8f4:	40000800 	.word	0x40000800
 800d8f8:	40000c00 	.word	0x40000c00
 800d8fc:	40001800 	.word	0x40001800
 800d900:	4000e000 	.word	0x4000e000
 800d904:	4000e400 	.word	0x4000e400
 800d908:	00010007 	.word	0x00010007

0800d90c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d916:	2300      	movs	r3, #0
 800d918:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	2b0c      	cmp	r3, #12
 800d91e:	d855      	bhi.n	800d9cc <HAL_TIM_PWM_Stop_DMA+0xc0>
 800d920:	a201      	add	r2, pc, #4	@ (adr r2, 800d928 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800d922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d926:	bf00      	nop
 800d928:	0800d95d 	.word	0x0800d95d
 800d92c:	0800d9cd 	.word	0x0800d9cd
 800d930:	0800d9cd 	.word	0x0800d9cd
 800d934:	0800d9cd 	.word	0x0800d9cd
 800d938:	0800d979 	.word	0x0800d979
 800d93c:	0800d9cd 	.word	0x0800d9cd
 800d940:	0800d9cd 	.word	0x0800d9cd
 800d944:	0800d9cd 	.word	0x0800d9cd
 800d948:	0800d995 	.word	0x0800d995
 800d94c:	0800d9cd 	.word	0x0800d9cd
 800d950:	0800d9cd 	.word	0x0800d9cd
 800d954:	0800d9cd 	.word	0x0800d9cd
 800d958:	0800d9b1 	.word	0x0800d9b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	68da      	ldr	r2, [r3, #12]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800d96a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d970:	4618      	mov	r0, r3
 800d972:	f7f9 f9f3 	bl	8006d5c <HAL_DMA_Abort_IT>
      break;
 800d976:	e02c      	b.n	800d9d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	68da      	ldr	r2, [r3, #12]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d986:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7f9 f9e5 	bl	8006d5c <HAL_DMA_Abort_IT>
      break;
 800d992:	e01e      	b.n	800d9d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	68da      	ldr	r2, [r3, #12]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d9a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f7f9 f9d7 	bl	8006d5c <HAL_DMA_Abort_IT>
      break;
 800d9ae:	e010      	b.n	800d9d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68da      	ldr	r2, [r3, #12]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d9be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7f9 f9c9 	bl	8006d5c <HAL_DMA_Abort_IT>
      break;
 800d9ca:	e002      	b.n	800d9d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	73fb      	strb	r3, [r7, #15]
      break;
 800d9d0:	bf00      	nop
  }

  if (status == HAL_OK)
 800d9d2:	7bfb      	ldrb	r3, [r7, #15]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f040 8081 	bne.w	800dadc <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	6839      	ldr	r1, [r7, #0]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f001 f8cc 	bl	800eb80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a3e      	ldr	r2, [pc, #248]	@ (800dae8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d013      	beq.n	800da1a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a3d      	ldr	r2, [pc, #244]	@ (800daec <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d00e      	beq.n	800da1a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a3b      	ldr	r2, [pc, #236]	@ (800daf0 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d009      	beq.n	800da1a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4a3a      	ldr	r2, [pc, #232]	@ (800daf4 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800da0c:	4293      	cmp	r3, r2
 800da0e:	d004      	beq.n	800da1a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a38      	ldr	r2, [pc, #224]	@ (800daf8 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d101      	bne.n	800da1e <HAL_TIM_PWM_Stop_DMA+0x112>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e000      	b.n	800da20 <HAL_TIM_PWM_Stop_DMA+0x114>
 800da1e:	2300      	movs	r3, #0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d017      	beq.n	800da54 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	6a1a      	ldr	r2, [r3, #32]
 800da2a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800da2e:	4013      	ands	r3, r2
 800da30:	2b00      	cmp	r3, #0
 800da32:	d10f      	bne.n	800da54 <HAL_TIM_PWM_Stop_DMA+0x148>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6a1a      	ldr	r2, [r3, #32]
 800da3a:	f240 4344 	movw	r3, #1092	@ 0x444
 800da3e:	4013      	ands	r3, r2
 800da40:	2b00      	cmp	r3, #0
 800da42:	d107      	bne.n	800da54 <HAL_TIM_PWM_Stop_DMA+0x148>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800da52:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6a1a      	ldr	r2, [r3, #32]
 800da5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800da5e:	4013      	ands	r3, r2
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10f      	bne.n	800da84 <HAL_TIM_PWM_Stop_DMA+0x178>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6a1a      	ldr	r2, [r3, #32]
 800da6a:	f240 4344 	movw	r3, #1092	@ 0x444
 800da6e:	4013      	ands	r3, r2
 800da70:	2b00      	cmp	r3, #0
 800da72:	d107      	bne.n	800da84 <HAL_TIM_PWM_Stop_DMA+0x178>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f022 0201 	bic.w	r2, r2, #1
 800da82:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d104      	bne.n	800da94 <HAL_TIM_PWM_Stop_DMA+0x188>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2201      	movs	r2, #1
 800da8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da92:	e023      	b.n	800dadc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b04      	cmp	r3, #4
 800da98:	d104      	bne.n	800daa4 <HAL_TIM_PWM_Stop_DMA+0x198>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2201      	movs	r2, #1
 800da9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800daa2:	e01b      	b.n	800dadc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	2b08      	cmp	r3, #8
 800daa8:	d104      	bne.n	800dab4 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2201      	movs	r2, #1
 800daae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dab2:	e013      	b.n	800dadc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	2b0c      	cmp	r3, #12
 800dab8:	d104      	bne.n	800dac4 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dac2:	e00b      	b.n	800dadc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	2b10      	cmp	r3, #16
 800dac8:	d104      	bne.n	800dad4 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dad2:	e003      	b.n	800dadc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800dadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}
 800dae6:	bf00      	nop
 800dae8:	40010000 	.word	0x40010000
 800daec:	40010400 	.word	0x40010400
 800daf0:	40014000 	.word	0x40014000
 800daf4:	40014400 	.word	0x40014400
 800daf8:	40014800 	.word	0x40014800

0800dafc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	691b      	ldr	r3, [r3, #16]
 800db12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	f003 0302 	and.w	r3, r3, #2
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d020      	beq.n	800db60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f003 0302 	and.w	r3, r3, #2
 800db24:	2b00      	cmp	r3, #0
 800db26:	d01b      	beq.n	800db60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f06f 0202 	mvn.w	r2, #2
 800db30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	f003 0303 	and.w	r3, r3, #3
 800db42:	2b00      	cmp	r3, #0
 800db44:	d003      	beq.n	800db4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 fb00 	bl	800e14c <HAL_TIM_IC_CaptureCallback>
 800db4c:	e005      	b.n	800db5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 faf2 	bl	800e138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7f4 fa49 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	f003 0304 	and.w	r3, r3, #4
 800db66:	2b00      	cmp	r3, #0
 800db68:	d020      	beq.n	800dbac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f003 0304 	and.w	r3, r3, #4
 800db70:	2b00      	cmp	r3, #0
 800db72:	d01b      	beq.n	800dbac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f06f 0204 	mvn.w	r2, #4
 800db7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2202      	movs	r2, #2
 800db82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	699b      	ldr	r3, [r3, #24]
 800db8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fada 	bl	800e14c <HAL_TIM_IC_CaptureCallback>
 800db98:	e005      	b.n	800dba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f000 facc 	bl	800e138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7f4 fa23 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f003 0308 	and.w	r3, r3, #8
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d020      	beq.n	800dbf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f003 0308 	and.w	r3, r3, #8
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d01b      	beq.n	800dbf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f06f 0208 	mvn.w	r2, #8
 800dbc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2204      	movs	r2, #4
 800dbce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	69db      	ldr	r3, [r3, #28]
 800dbd6:	f003 0303 	and.w	r3, r3, #3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d003      	beq.n	800dbe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 fab4 	bl	800e14c <HAL_TIM_IC_CaptureCallback>
 800dbe4:	e005      	b.n	800dbf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 faa6 	bl	800e138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7f4 f9fd 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	f003 0310 	and.w	r3, r3, #16
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d020      	beq.n	800dc44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f003 0310 	and.w	r3, r3, #16
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d01b      	beq.n	800dc44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f06f 0210 	mvn.w	r2, #16
 800dc14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2208      	movs	r2, #8
 800dc1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	69db      	ldr	r3, [r3, #28]
 800dc22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d003      	beq.n	800dc32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fa8e 	bl	800e14c <HAL_TIM_IC_CaptureCallback>
 800dc30:	e005      	b.n	800dc3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fa80 	bl	800e138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7f4 f9d7 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	f003 0301 	and.w	r3, r3, #1
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00c      	beq.n	800dc68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d007      	beq.n	800dc68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f06f 0201 	mvn.w	r2, #1
 800dc60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fa5e 	bl	800e124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d104      	bne.n	800dc7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00c      	beq.n	800dc96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d007      	beq.n	800dc96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dc8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f001 f841 	bl	800ed18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00c      	beq.n	800dcba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d007      	beq.n	800dcba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dcb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f001 f839 	bl	800ed2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00c      	beq.n	800dcde <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d007      	beq.n	800dcde <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dcd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 fa4b 	bl	800e174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	f003 0320 	and.w	r3, r3, #32
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00c      	beq.n	800dd02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f003 0320 	and.w	r3, r3, #32
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d007      	beq.n	800dd02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f06f 0220 	mvn.w	r2, #32
 800dcfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f001 f801 	bl	800ed04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd02:	bf00      	nop
 800dd04:	3710      	adds	r7, #16
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
	...

0800dd0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d101      	bne.n	800dd2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd26:	2302      	movs	r3, #2
 800dd28:	e0ff      	b.n	800df2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2b14      	cmp	r3, #20
 800dd36:	f200 80f0 	bhi.w	800df1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dd3a:	a201      	add	r2, pc, #4	@ (adr r2, 800dd40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd40:	0800dd95 	.word	0x0800dd95
 800dd44:	0800df1b 	.word	0x0800df1b
 800dd48:	0800df1b 	.word	0x0800df1b
 800dd4c:	0800df1b 	.word	0x0800df1b
 800dd50:	0800ddd5 	.word	0x0800ddd5
 800dd54:	0800df1b 	.word	0x0800df1b
 800dd58:	0800df1b 	.word	0x0800df1b
 800dd5c:	0800df1b 	.word	0x0800df1b
 800dd60:	0800de17 	.word	0x0800de17
 800dd64:	0800df1b 	.word	0x0800df1b
 800dd68:	0800df1b 	.word	0x0800df1b
 800dd6c:	0800df1b 	.word	0x0800df1b
 800dd70:	0800de57 	.word	0x0800de57
 800dd74:	0800df1b 	.word	0x0800df1b
 800dd78:	0800df1b 	.word	0x0800df1b
 800dd7c:	0800df1b 	.word	0x0800df1b
 800dd80:	0800de99 	.word	0x0800de99
 800dd84:	0800df1b 	.word	0x0800df1b
 800dd88:	0800df1b 	.word	0x0800df1b
 800dd8c:	0800df1b 	.word	0x0800df1b
 800dd90:	0800ded9 	.word	0x0800ded9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68b9      	ldr	r1, [r7, #8]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f000 fb7c 	bl	800e498 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	699a      	ldr	r2, [r3, #24]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f042 0208 	orr.w	r2, r2, #8
 800ddae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	699a      	ldr	r2, [r3, #24]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f022 0204 	bic.w	r2, r2, #4
 800ddbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	6999      	ldr	r1, [r3, #24]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	691a      	ldr	r2, [r3, #16]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	430a      	orrs	r2, r1
 800ddd0:	619a      	str	r2, [r3, #24]
      break;
 800ddd2:	e0a5      	b.n	800df20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	68b9      	ldr	r1, [r7, #8]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f000 fbec 	bl	800e5b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	699a      	ldr	r2, [r3, #24]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ddee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	699a      	ldr	r2, [r3, #24]
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ddfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	6999      	ldr	r1, [r3, #24]
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	691b      	ldr	r3, [r3, #16]
 800de0a:	021a      	lsls	r2, r3, #8
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	430a      	orrs	r2, r1
 800de12:	619a      	str	r2, [r3, #24]
      break;
 800de14:	e084      	b.n	800df20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68b9      	ldr	r1, [r7, #8]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f000 fc55 	bl	800e6cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	69da      	ldr	r2, [r3, #28]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f042 0208 	orr.w	r2, r2, #8
 800de30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	69da      	ldr	r2, [r3, #28]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f022 0204 	bic.w	r2, r2, #4
 800de40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	69d9      	ldr	r1, [r3, #28]
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	691a      	ldr	r2, [r3, #16]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	430a      	orrs	r2, r1
 800de52:	61da      	str	r2, [r3, #28]
      break;
 800de54:	e064      	b.n	800df20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	68b9      	ldr	r1, [r7, #8]
 800de5c:	4618      	mov	r0, r3
 800de5e:	f000 fcbd 	bl	800e7dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	69da      	ldr	r2, [r3, #28]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	69da      	ldr	r2, [r3, #28]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	69d9      	ldr	r1, [r3, #28]
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	021a      	lsls	r2, r3, #8
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	430a      	orrs	r2, r1
 800de94:	61da      	str	r2, [r3, #28]
      break;
 800de96:	e043      	b.n	800df20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	68b9      	ldr	r1, [r7, #8]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f000 fd06 	bl	800e8b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f042 0208 	orr.w	r2, r2, #8
 800deb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f022 0204 	bic.w	r2, r2, #4
 800dec2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	691a      	ldr	r2, [r3, #16]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	430a      	orrs	r2, r1
 800ded4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ded6:	e023      	b.n	800df20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68b9      	ldr	r1, [r7, #8]
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 fd4a 	bl	800e978 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800def2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	691b      	ldr	r3, [r3, #16]
 800df0e:	021a      	lsls	r2, r3, #8
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	430a      	orrs	r2, r1
 800df16:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800df18:	e002      	b.n	800df20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	75fb      	strb	r3, [r7, #23]
      break;
 800df1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2200      	movs	r2, #0
 800df24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df28:	7dfb      	ldrb	r3, [r7, #23]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3718      	adds	r7, #24
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop

0800df34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df3e:	2300      	movs	r3, #0
 800df40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d101      	bne.n	800df50 <HAL_TIM_ConfigClockSource+0x1c>
 800df4c:	2302      	movs	r3, #2
 800df4e:	e0dc      	b.n	800e10a <HAL_TIM_ConfigClockSource+0x1d6>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2202      	movs	r2, #2
 800df5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df68:	68ba      	ldr	r2, [r7, #8]
 800df6a:	4b6a      	ldr	r3, [pc, #424]	@ (800e114 <HAL_TIM_ConfigClockSource+0x1e0>)
 800df6c:	4013      	ands	r3, r2
 800df6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800df76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a64      	ldr	r2, [pc, #400]	@ (800e118 <HAL_TIM_ConfigClockSource+0x1e4>)
 800df86:	4293      	cmp	r3, r2
 800df88:	f000 80a9 	beq.w	800e0de <HAL_TIM_ConfigClockSource+0x1aa>
 800df8c:	4a62      	ldr	r2, [pc, #392]	@ (800e118 <HAL_TIM_ConfigClockSource+0x1e4>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	f200 80ae 	bhi.w	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800df94:	4a61      	ldr	r2, [pc, #388]	@ (800e11c <HAL_TIM_ConfigClockSource+0x1e8>)
 800df96:	4293      	cmp	r3, r2
 800df98:	f000 80a1 	beq.w	800e0de <HAL_TIM_ConfigClockSource+0x1aa>
 800df9c:	4a5f      	ldr	r2, [pc, #380]	@ (800e11c <HAL_TIM_ConfigClockSource+0x1e8>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	f200 80a6 	bhi.w	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfa4:	4a5e      	ldr	r2, [pc, #376]	@ (800e120 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	f000 8099 	beq.w	800e0de <HAL_TIM_ConfigClockSource+0x1aa>
 800dfac:	4a5c      	ldr	r2, [pc, #368]	@ (800e120 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	f200 809e 	bhi.w	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfb4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dfb8:	f000 8091 	beq.w	800e0de <HAL_TIM_ConfigClockSource+0x1aa>
 800dfbc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dfc0:	f200 8096 	bhi.w	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfc8:	f000 8089 	beq.w	800e0de <HAL_TIM_ConfigClockSource+0x1aa>
 800dfcc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dfd0:	f200 808e 	bhi.w	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfd8:	d03e      	beq.n	800e058 <HAL_TIM_ConfigClockSource+0x124>
 800dfda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfde:	f200 8087 	bhi.w	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dfe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfe6:	f000 8086 	beq.w	800e0f6 <HAL_TIM_ConfigClockSource+0x1c2>
 800dfea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dfee:	d87f      	bhi.n	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dff0:	2b70      	cmp	r3, #112	@ 0x70
 800dff2:	d01a      	beq.n	800e02a <HAL_TIM_ConfigClockSource+0xf6>
 800dff4:	2b70      	cmp	r3, #112	@ 0x70
 800dff6:	d87b      	bhi.n	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800dff8:	2b60      	cmp	r3, #96	@ 0x60
 800dffa:	d050      	beq.n	800e09e <HAL_TIM_ConfigClockSource+0x16a>
 800dffc:	2b60      	cmp	r3, #96	@ 0x60
 800dffe:	d877      	bhi.n	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e000:	2b50      	cmp	r3, #80	@ 0x50
 800e002:	d03c      	beq.n	800e07e <HAL_TIM_ConfigClockSource+0x14a>
 800e004:	2b50      	cmp	r3, #80	@ 0x50
 800e006:	d873      	bhi.n	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e008:	2b40      	cmp	r3, #64	@ 0x40
 800e00a:	d058      	beq.n	800e0be <HAL_TIM_ConfigClockSource+0x18a>
 800e00c:	2b40      	cmp	r3, #64	@ 0x40
 800e00e:	d86f      	bhi.n	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e010:	2b30      	cmp	r3, #48	@ 0x30
 800e012:	d064      	beq.n	800e0de <HAL_TIM_ConfigClockSource+0x1aa>
 800e014:	2b30      	cmp	r3, #48	@ 0x30
 800e016:	d86b      	bhi.n	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e018:	2b20      	cmp	r3, #32
 800e01a:	d060      	beq.n	800e0de <HAL_TIM_ConfigClockSource+0x1aa>
 800e01c:	2b20      	cmp	r3, #32
 800e01e:	d867      	bhi.n	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e020:	2b00      	cmp	r3, #0
 800e022:	d05c      	beq.n	800e0de <HAL_TIM_ConfigClockSource+0x1aa>
 800e024:	2b10      	cmp	r3, #16
 800e026:	d05a      	beq.n	800e0de <HAL_TIM_ConfigClockSource+0x1aa>
 800e028:	e062      	b.n	800e0f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e03a:	f000 fd81 	bl	800eb40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e04c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	609a      	str	r2, [r3, #8]
      break;
 800e056:	e04f      	b.n	800e0f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e068:	f000 fd6a 	bl	800eb40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	689a      	ldr	r2, [r3, #8]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e07a:	609a      	str	r2, [r3, #8]
      break;
 800e07c:	e03c      	b.n	800e0f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e08a:	461a      	mov	r2, r3
 800e08c:	f000 fcda 	bl	800ea44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2150      	movs	r1, #80	@ 0x50
 800e096:	4618      	mov	r0, r3
 800e098:	f000 fd34 	bl	800eb04 <TIM_ITRx_SetConfig>
      break;
 800e09c:	e02c      	b.n	800e0f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	f000 fcf9 	bl	800eaa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2160      	movs	r1, #96	@ 0x60
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 fd24 	bl	800eb04 <TIM_ITRx_SetConfig>
      break;
 800e0bc:	e01c      	b.n	800e0f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	f000 fcba 	bl	800ea44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2140      	movs	r1, #64	@ 0x40
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 fd14 	bl	800eb04 <TIM_ITRx_SetConfig>
      break;
 800e0dc:	e00c      	b.n	800e0f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	f000 fd0b 	bl	800eb04 <TIM_ITRx_SetConfig>
      break;
 800e0ee:	e003      	b.n	800e0f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800e0f4:	e000      	b.n	800e0f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e0f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2200      	movs	r2, #0
 800e104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e108:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3710      	adds	r7, #16
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	ffceff88 	.word	0xffceff88
 800e118:	00100040 	.word	0x00100040
 800e11c:	00100030 	.word	0x00100030
 800e120:	00100020 	.word	0x00100020

0800e124 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e12c:	bf00      	nop
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e140:	bf00      	nop
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e154:	bf00      	nop
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e168:	bf00      	nop
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e174:	b480      	push	{r7}
 800e176:	b083      	sub	sp, #12
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e17c:	bf00      	nop
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e190:	bf00      	nop
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1a8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d107      	bne.n	800e1c4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e1c2:	e02a      	b.n	800e21a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d107      	bne.n	800e1de <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2202      	movs	r2, #2
 800e1d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e1dc:	e01d      	b.n	800e21a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d107      	bne.n	800e1f8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2204      	movs	r2, #4
 800e1ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e1f6:	e010      	b.n	800e21a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	429a      	cmp	r2, r3
 800e200:	d107      	bne.n	800e212 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2208      	movs	r2, #8
 800e206:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e210:	e003      	b.n	800e21a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800e21a:	68f8      	ldr	r0, [r7, #12]
 800e21c:	f7ff ffb4 	bl	800e188 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	771a      	strb	r2, [r3, #28]
}
 800e226:	bf00      	nop
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800e22e:	b580      	push	{r7, lr}
 800e230:	b084      	sub	sp, #16
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e23a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	429a      	cmp	r2, r3
 800e244:	d10b      	bne.n	800e25e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2201      	movs	r2, #1
 800e24a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	69db      	ldr	r3, [r3, #28]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d136      	bne.n	800e2c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2201      	movs	r2, #1
 800e258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e25c:	e031      	b.n	800e2c2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	429a      	cmp	r2, r3
 800e266:	d10b      	bne.n	800e280 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2202      	movs	r2, #2
 800e26c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	69db      	ldr	r3, [r3, #28]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d125      	bne.n	800e2c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e27e:	e020      	b.n	800e2c2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	429a      	cmp	r2, r3
 800e288:	d10b      	bne.n	800e2a2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2204      	movs	r2, #4
 800e28e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	69db      	ldr	r3, [r3, #28]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d114      	bne.n	800e2c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2201      	movs	r2, #1
 800e29c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e2a0:	e00f      	b.n	800e2c2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d10a      	bne.n	800e2c2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2208      	movs	r2, #8
 800e2b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	69db      	ldr	r3, [r3, #28]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d103      	bne.n	800e2c2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f7f3 fe92 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	771a      	strb	r2, [r3, #28]
}
 800e2ce:	bf00      	nop
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b084      	sub	sp, #16
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d103      	bne.n	800e2f6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	771a      	strb	r2, [r3, #28]
 800e2f4:	e019      	b.n	800e32a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d103      	bne.n	800e308 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2202      	movs	r2, #2
 800e304:	771a      	strb	r2, [r3, #28]
 800e306:	e010      	b.n	800e32a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e30c:	687a      	ldr	r2, [r7, #4]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d103      	bne.n	800e31a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2204      	movs	r2, #4
 800e316:	771a      	strb	r2, [r3, #28]
 800e318:	e007      	b.n	800e32a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	429a      	cmp	r2, r3
 800e322:	d102      	bne.n	800e32a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2208      	movs	r2, #8
 800e328:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800e32a:	68f8      	ldr	r0, [r7, #12]
 800e32c:	f7ff ff18 	bl	800e160 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2200      	movs	r2, #0
 800e334:	771a      	strb	r2, [r3, #28]
}
 800e336:	bf00      	nop
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
	...

0800e340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a47      	ldr	r2, [pc, #284]	@ (800e470 <TIM_Base_SetConfig+0x130>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d013      	beq.n	800e380 <TIM_Base_SetConfig+0x40>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e35e:	d00f      	beq.n	800e380 <TIM_Base_SetConfig+0x40>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a44      	ldr	r2, [pc, #272]	@ (800e474 <TIM_Base_SetConfig+0x134>)
 800e364:	4293      	cmp	r3, r2
 800e366:	d00b      	beq.n	800e380 <TIM_Base_SetConfig+0x40>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	4a43      	ldr	r2, [pc, #268]	@ (800e478 <TIM_Base_SetConfig+0x138>)
 800e36c:	4293      	cmp	r3, r2
 800e36e:	d007      	beq.n	800e380 <TIM_Base_SetConfig+0x40>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4a42      	ldr	r2, [pc, #264]	@ (800e47c <TIM_Base_SetConfig+0x13c>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d003      	beq.n	800e380 <TIM_Base_SetConfig+0x40>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	4a41      	ldr	r2, [pc, #260]	@ (800e480 <TIM_Base_SetConfig+0x140>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d108      	bne.n	800e392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	68fa      	ldr	r2, [r7, #12]
 800e38e:	4313      	orrs	r3, r2
 800e390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4a36      	ldr	r2, [pc, #216]	@ (800e470 <TIM_Base_SetConfig+0x130>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d027      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3a0:	d023      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4a33      	ldr	r2, [pc, #204]	@ (800e474 <TIM_Base_SetConfig+0x134>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d01f      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4a32      	ldr	r2, [pc, #200]	@ (800e478 <TIM_Base_SetConfig+0x138>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d01b      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4a31      	ldr	r2, [pc, #196]	@ (800e47c <TIM_Base_SetConfig+0x13c>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d017      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4a30      	ldr	r2, [pc, #192]	@ (800e480 <TIM_Base_SetConfig+0x140>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d013      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	4a2f      	ldr	r2, [pc, #188]	@ (800e484 <TIM_Base_SetConfig+0x144>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d00f      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	4a2e      	ldr	r2, [pc, #184]	@ (800e488 <TIM_Base_SetConfig+0x148>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d00b      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	4a2d      	ldr	r2, [pc, #180]	@ (800e48c <TIM_Base_SetConfig+0x14c>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	d007      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	4a2c      	ldr	r2, [pc, #176]	@ (800e490 <TIM_Base_SetConfig+0x150>)
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d003      	beq.n	800e3ea <TIM_Base_SetConfig+0xaa>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	4a2b      	ldr	r2, [pc, #172]	@ (800e494 <TIM_Base_SetConfig+0x154>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d108      	bne.n	800e3fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e3f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	68fa      	ldr	r2, [r7, #12]
 800e3f8:	4313      	orrs	r3, r2
 800e3fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	695b      	ldr	r3, [r3, #20]
 800e406:	4313      	orrs	r3, r2
 800e408:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	689a      	ldr	r2, [r3, #8]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4a14      	ldr	r2, [pc, #80]	@ (800e470 <TIM_Base_SetConfig+0x130>)
 800e41e:	4293      	cmp	r3, r2
 800e420:	d00f      	beq.n	800e442 <TIM_Base_SetConfig+0x102>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4a16      	ldr	r2, [pc, #88]	@ (800e480 <TIM_Base_SetConfig+0x140>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d00b      	beq.n	800e442 <TIM_Base_SetConfig+0x102>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4a15      	ldr	r2, [pc, #84]	@ (800e484 <TIM_Base_SetConfig+0x144>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d007      	beq.n	800e442 <TIM_Base_SetConfig+0x102>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4a14      	ldr	r2, [pc, #80]	@ (800e488 <TIM_Base_SetConfig+0x148>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d003      	beq.n	800e442 <TIM_Base_SetConfig+0x102>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4a13      	ldr	r2, [pc, #76]	@ (800e48c <TIM_Base_SetConfig+0x14c>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d103      	bne.n	800e44a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	691a      	ldr	r2, [r3, #16]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f043 0204 	orr.w	r2, r3, #4
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2201      	movs	r2, #1
 800e45a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	68fa      	ldr	r2, [r7, #12]
 800e460:	601a      	str	r2, [r3, #0]
}
 800e462:	bf00      	nop
 800e464:	3714      	adds	r7, #20
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	40010000 	.word	0x40010000
 800e474:	40000400 	.word	0x40000400
 800e478:	40000800 	.word	0x40000800
 800e47c:	40000c00 	.word	0x40000c00
 800e480:	40010400 	.word	0x40010400
 800e484:	40014000 	.word	0x40014000
 800e488:	40014400 	.word	0x40014400
 800e48c:	40014800 	.word	0x40014800
 800e490:	4000e000 	.word	0x4000e000
 800e494:	4000e400 	.word	0x4000e400

0800e498 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e498:	b480      	push	{r7}
 800e49a:	b087      	sub	sp, #28
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6a1b      	ldr	r3, [r3, #32]
 800e4ac:	f023 0201 	bic.w	r2, r3, #1
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	699b      	ldr	r3, [r3, #24]
 800e4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e4c0:	68fa      	ldr	r2, [r7, #12]
 800e4c2:	4b37      	ldr	r3, [pc, #220]	@ (800e5a0 <TIM_OC1_SetConfig+0x108>)
 800e4c4:	4013      	ands	r3, r2
 800e4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	f023 0303 	bic.w	r3, r3, #3
 800e4ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	f023 0302 	bic.w	r3, r3, #2
 800e4e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	689b      	ldr	r3, [r3, #8]
 800e4e6:	697a      	ldr	r2, [r7, #20]
 800e4e8:	4313      	orrs	r3, r2
 800e4ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4a2d      	ldr	r2, [pc, #180]	@ (800e5a4 <TIM_OC1_SetConfig+0x10c>)
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	d00f      	beq.n	800e514 <TIM_OC1_SetConfig+0x7c>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	4a2c      	ldr	r2, [pc, #176]	@ (800e5a8 <TIM_OC1_SetConfig+0x110>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d00b      	beq.n	800e514 <TIM_OC1_SetConfig+0x7c>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	4a2b      	ldr	r2, [pc, #172]	@ (800e5ac <TIM_OC1_SetConfig+0x114>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d007      	beq.n	800e514 <TIM_OC1_SetConfig+0x7c>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	4a2a      	ldr	r2, [pc, #168]	@ (800e5b0 <TIM_OC1_SetConfig+0x118>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d003      	beq.n	800e514 <TIM_OC1_SetConfig+0x7c>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4a29      	ldr	r2, [pc, #164]	@ (800e5b4 <TIM_OC1_SetConfig+0x11c>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d10c      	bne.n	800e52e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	f023 0308 	bic.w	r3, r3, #8
 800e51a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	697a      	ldr	r2, [r7, #20]
 800e522:	4313      	orrs	r3, r2
 800e524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	f023 0304 	bic.w	r3, r3, #4
 800e52c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	4a1c      	ldr	r2, [pc, #112]	@ (800e5a4 <TIM_OC1_SetConfig+0x10c>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d00f      	beq.n	800e556 <TIM_OC1_SetConfig+0xbe>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4a1b      	ldr	r2, [pc, #108]	@ (800e5a8 <TIM_OC1_SetConfig+0x110>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d00b      	beq.n	800e556 <TIM_OC1_SetConfig+0xbe>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4a1a      	ldr	r2, [pc, #104]	@ (800e5ac <TIM_OC1_SetConfig+0x114>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d007      	beq.n	800e556 <TIM_OC1_SetConfig+0xbe>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4a19      	ldr	r2, [pc, #100]	@ (800e5b0 <TIM_OC1_SetConfig+0x118>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d003      	beq.n	800e556 <TIM_OC1_SetConfig+0xbe>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	4a18      	ldr	r2, [pc, #96]	@ (800e5b4 <TIM_OC1_SetConfig+0x11c>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d111      	bne.n	800e57a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e55c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	695b      	ldr	r3, [r3, #20]
 800e56a:	693a      	ldr	r2, [r7, #16]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	699b      	ldr	r3, [r3, #24]
 800e574:	693a      	ldr	r2, [r7, #16]
 800e576:	4313      	orrs	r3, r2
 800e578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	685a      	ldr	r2, [r3, #4]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	697a      	ldr	r2, [r7, #20]
 800e592:	621a      	str	r2, [r3, #32]
}
 800e594:	bf00      	nop
 800e596:	371c      	adds	r7, #28
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr
 800e5a0:	fffeff8f 	.word	0xfffeff8f
 800e5a4:	40010000 	.word	0x40010000
 800e5a8:	40010400 	.word	0x40010400
 800e5ac:	40014000 	.word	0x40014000
 800e5b0:	40014400 	.word	0x40014400
 800e5b4:	40014800 	.word	0x40014800

0800e5b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b087      	sub	sp, #28
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6a1b      	ldr	r3, [r3, #32]
 800e5c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6a1b      	ldr	r3, [r3, #32]
 800e5cc:	f023 0210 	bic.w	r2, r3, #16
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	699b      	ldr	r3, [r3, #24]
 800e5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	4b34      	ldr	r3, [pc, #208]	@ (800e6b4 <TIM_OC2_SetConfig+0xfc>)
 800e5e4:	4013      	ands	r3, r2
 800e5e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e5ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	021b      	lsls	r3, r3, #8
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	f023 0320 	bic.w	r3, r3, #32
 800e602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	011b      	lsls	r3, r3, #4
 800e60a:	697a      	ldr	r2, [r7, #20]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	4a29      	ldr	r2, [pc, #164]	@ (800e6b8 <TIM_OC2_SetConfig+0x100>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d003      	beq.n	800e620 <TIM_OC2_SetConfig+0x68>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4a28      	ldr	r2, [pc, #160]	@ (800e6bc <TIM_OC2_SetConfig+0x104>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d10d      	bne.n	800e63c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	011b      	lsls	r3, r3, #4
 800e62e:	697a      	ldr	r2, [r7, #20]
 800e630:	4313      	orrs	r3, r2
 800e632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e63a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a1e      	ldr	r2, [pc, #120]	@ (800e6b8 <TIM_OC2_SetConfig+0x100>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d00f      	beq.n	800e664 <TIM_OC2_SetConfig+0xac>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4a1d      	ldr	r2, [pc, #116]	@ (800e6bc <TIM_OC2_SetConfig+0x104>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d00b      	beq.n	800e664 <TIM_OC2_SetConfig+0xac>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a1c      	ldr	r2, [pc, #112]	@ (800e6c0 <TIM_OC2_SetConfig+0x108>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d007      	beq.n	800e664 <TIM_OC2_SetConfig+0xac>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a1b      	ldr	r2, [pc, #108]	@ (800e6c4 <TIM_OC2_SetConfig+0x10c>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d003      	beq.n	800e664 <TIM_OC2_SetConfig+0xac>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4a1a      	ldr	r2, [pc, #104]	@ (800e6c8 <TIM_OC2_SetConfig+0x110>)
 800e660:	4293      	cmp	r3, r2
 800e662:	d113      	bne.n	800e68c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e66a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	695b      	ldr	r3, [r3, #20]
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	4313      	orrs	r3, r2
 800e67e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	693a      	ldr	r2, [r7, #16]
 800e688:	4313      	orrs	r3, r2
 800e68a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	693a      	ldr	r2, [r7, #16]
 800e690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	68fa      	ldr	r2, [r7, #12]
 800e696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	685a      	ldr	r2, [r3, #4]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	697a      	ldr	r2, [r7, #20]
 800e6a4:	621a      	str	r2, [r3, #32]
}
 800e6a6:	bf00      	nop
 800e6a8:	371c      	adds	r7, #28
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	feff8fff 	.word	0xfeff8fff
 800e6b8:	40010000 	.word	0x40010000
 800e6bc:	40010400 	.word	0x40010400
 800e6c0:	40014000 	.word	0x40014000
 800e6c4:	40014400 	.word	0x40014400
 800e6c8:	40014800 	.word	0x40014800

0800e6cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6a1b      	ldr	r3, [r3, #32]
 800e6da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6a1b      	ldr	r3, [r3, #32]
 800e6e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	69db      	ldr	r3, [r3, #28]
 800e6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	4b33      	ldr	r3, [pc, #204]	@ (800e7c4 <TIM_OC3_SetConfig+0xf8>)
 800e6f8:	4013      	ands	r3, r2
 800e6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f023 0303 	bic.w	r3, r3, #3
 800e702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	4313      	orrs	r3, r2
 800e70c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	021b      	lsls	r3, r3, #8
 800e71c:	697a      	ldr	r2, [r7, #20]
 800e71e:	4313      	orrs	r3, r2
 800e720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4a28      	ldr	r2, [pc, #160]	@ (800e7c8 <TIM_OC3_SetConfig+0xfc>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d003      	beq.n	800e732 <TIM_OC3_SetConfig+0x66>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4a27      	ldr	r2, [pc, #156]	@ (800e7cc <TIM_OC3_SetConfig+0x100>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d10d      	bne.n	800e74e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	021b      	lsls	r3, r3, #8
 800e740:	697a      	ldr	r2, [r7, #20]
 800e742:	4313      	orrs	r3, r2
 800e744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e74c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a1d      	ldr	r2, [pc, #116]	@ (800e7c8 <TIM_OC3_SetConfig+0xfc>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d00f      	beq.n	800e776 <TIM_OC3_SetConfig+0xaa>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a1c      	ldr	r2, [pc, #112]	@ (800e7cc <TIM_OC3_SetConfig+0x100>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d00b      	beq.n	800e776 <TIM_OC3_SetConfig+0xaa>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a1b      	ldr	r2, [pc, #108]	@ (800e7d0 <TIM_OC3_SetConfig+0x104>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d007      	beq.n	800e776 <TIM_OC3_SetConfig+0xaa>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4a1a      	ldr	r2, [pc, #104]	@ (800e7d4 <TIM_OC3_SetConfig+0x108>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d003      	beq.n	800e776 <TIM_OC3_SetConfig+0xaa>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a19      	ldr	r2, [pc, #100]	@ (800e7d8 <TIM_OC3_SetConfig+0x10c>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d113      	bne.n	800e79e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e77c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	695b      	ldr	r3, [r3, #20]
 800e78a:	011b      	lsls	r3, r3, #4
 800e78c:	693a      	ldr	r2, [r7, #16]
 800e78e:	4313      	orrs	r3, r2
 800e790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	011b      	lsls	r3, r3, #4
 800e798:	693a      	ldr	r2, [r7, #16]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	693a      	ldr	r2, [r7, #16]
 800e7a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	68fa      	ldr	r2, [r7, #12]
 800e7a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	685a      	ldr	r2, [r3, #4]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	697a      	ldr	r2, [r7, #20]
 800e7b6:	621a      	str	r2, [r3, #32]
}
 800e7b8:	bf00      	nop
 800e7ba:	371c      	adds	r7, #28
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr
 800e7c4:	fffeff8f 	.word	0xfffeff8f
 800e7c8:	40010000 	.word	0x40010000
 800e7cc:	40010400 	.word	0x40010400
 800e7d0:	40014000 	.word	0x40014000
 800e7d4:	40014400 	.word	0x40014400
 800e7d8:	40014800 	.word	0x40014800

0800e7dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b087      	sub	sp, #28
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a1b      	ldr	r3, [r3, #32]
 800e7ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a1b      	ldr	r3, [r3, #32]
 800e7f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	69db      	ldr	r3, [r3, #28]
 800e802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	4b24      	ldr	r3, [pc, #144]	@ (800e898 <TIM_OC4_SetConfig+0xbc>)
 800e808:	4013      	ands	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	021b      	lsls	r3, r3, #8
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	689b      	ldr	r3, [r3, #8]
 800e82c:	031b      	lsls	r3, r3, #12
 800e82e:	693a      	ldr	r2, [r7, #16]
 800e830:	4313      	orrs	r3, r2
 800e832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a19      	ldr	r2, [pc, #100]	@ (800e89c <TIM_OC4_SetConfig+0xc0>)
 800e838:	4293      	cmp	r3, r2
 800e83a:	d00f      	beq.n	800e85c <TIM_OC4_SetConfig+0x80>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	4a18      	ldr	r2, [pc, #96]	@ (800e8a0 <TIM_OC4_SetConfig+0xc4>)
 800e840:	4293      	cmp	r3, r2
 800e842:	d00b      	beq.n	800e85c <TIM_OC4_SetConfig+0x80>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a17      	ldr	r2, [pc, #92]	@ (800e8a4 <TIM_OC4_SetConfig+0xc8>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d007      	beq.n	800e85c <TIM_OC4_SetConfig+0x80>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a16      	ldr	r2, [pc, #88]	@ (800e8a8 <TIM_OC4_SetConfig+0xcc>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d003      	beq.n	800e85c <TIM_OC4_SetConfig+0x80>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a15      	ldr	r2, [pc, #84]	@ (800e8ac <TIM_OC4_SetConfig+0xd0>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d109      	bne.n	800e870 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	695b      	ldr	r3, [r3, #20]
 800e868:	019b      	lsls	r3, r3, #6
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	4313      	orrs	r3, r2
 800e86e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	697a      	ldr	r2, [r7, #20]
 800e874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	68fa      	ldr	r2, [r7, #12]
 800e87a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	693a      	ldr	r2, [r7, #16]
 800e888:	621a      	str	r2, [r3, #32]
}
 800e88a:	bf00      	nop
 800e88c:	371c      	adds	r7, #28
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr
 800e896:	bf00      	nop
 800e898:	feff8fff 	.word	0xfeff8fff
 800e89c:	40010000 	.word	0x40010000
 800e8a0:	40010400 	.word	0x40010400
 800e8a4:	40014000 	.word	0x40014000
 800e8a8:	40014400 	.word	0x40014400
 800e8ac:	40014800 	.word	0x40014800

0800e8b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b087      	sub	sp, #28
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6a1b      	ldr	r3, [r3, #32]
 800e8c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	4b21      	ldr	r3, [pc, #132]	@ (800e960 <TIM_OC5_SetConfig+0xb0>)
 800e8dc:	4013      	ands	r3, r2
 800e8de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e8f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	041b      	lsls	r3, r3, #16
 800e8f8:	693a      	ldr	r2, [r7, #16]
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	4a18      	ldr	r2, [pc, #96]	@ (800e964 <TIM_OC5_SetConfig+0xb4>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d00f      	beq.n	800e926 <TIM_OC5_SetConfig+0x76>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	4a17      	ldr	r2, [pc, #92]	@ (800e968 <TIM_OC5_SetConfig+0xb8>)
 800e90a:	4293      	cmp	r3, r2
 800e90c:	d00b      	beq.n	800e926 <TIM_OC5_SetConfig+0x76>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4a16      	ldr	r2, [pc, #88]	@ (800e96c <TIM_OC5_SetConfig+0xbc>)
 800e912:	4293      	cmp	r3, r2
 800e914:	d007      	beq.n	800e926 <TIM_OC5_SetConfig+0x76>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4a15      	ldr	r2, [pc, #84]	@ (800e970 <TIM_OC5_SetConfig+0xc0>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d003      	beq.n	800e926 <TIM_OC5_SetConfig+0x76>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	4a14      	ldr	r2, [pc, #80]	@ (800e974 <TIM_OC5_SetConfig+0xc4>)
 800e922:	4293      	cmp	r3, r2
 800e924:	d109      	bne.n	800e93a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e92c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	695b      	ldr	r3, [r3, #20]
 800e932:	021b      	lsls	r3, r3, #8
 800e934:	697a      	ldr	r2, [r7, #20]
 800e936:	4313      	orrs	r3, r2
 800e938:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	697a      	ldr	r2, [r7, #20]
 800e93e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	685a      	ldr	r2, [r3, #4]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	693a      	ldr	r2, [r7, #16]
 800e952:	621a      	str	r2, [r3, #32]
}
 800e954:	bf00      	nop
 800e956:	371c      	adds	r7, #28
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr
 800e960:	fffeff8f 	.word	0xfffeff8f
 800e964:	40010000 	.word	0x40010000
 800e968:	40010400 	.word	0x40010400
 800e96c:	40014000 	.word	0x40014000
 800e970:	40014400 	.word	0x40014400
 800e974:	40014800 	.word	0x40014800

0800e978 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e978:	b480      	push	{r7}
 800e97a:	b087      	sub	sp, #28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6a1b      	ldr	r3, [r3, #32]
 800e98c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e9a0:	68fa      	ldr	r2, [r7, #12]
 800e9a2:	4b22      	ldr	r3, [pc, #136]	@ (800ea2c <TIM_OC6_SetConfig+0xb4>)
 800e9a4:	4013      	ands	r3, r2
 800e9a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	021b      	lsls	r3, r3, #8
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e9ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	051b      	lsls	r3, r3, #20
 800e9c2:	693a      	ldr	r2, [r7, #16]
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	4a19      	ldr	r2, [pc, #100]	@ (800ea30 <TIM_OC6_SetConfig+0xb8>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d00f      	beq.n	800e9f0 <TIM_OC6_SetConfig+0x78>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	4a18      	ldr	r2, [pc, #96]	@ (800ea34 <TIM_OC6_SetConfig+0xbc>)
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d00b      	beq.n	800e9f0 <TIM_OC6_SetConfig+0x78>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	4a17      	ldr	r2, [pc, #92]	@ (800ea38 <TIM_OC6_SetConfig+0xc0>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d007      	beq.n	800e9f0 <TIM_OC6_SetConfig+0x78>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	4a16      	ldr	r2, [pc, #88]	@ (800ea3c <TIM_OC6_SetConfig+0xc4>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d003      	beq.n	800e9f0 <TIM_OC6_SetConfig+0x78>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4a15      	ldr	r2, [pc, #84]	@ (800ea40 <TIM_OC6_SetConfig+0xc8>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d109      	bne.n	800ea04 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e9f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	695b      	ldr	r3, [r3, #20]
 800e9fc:	029b      	lsls	r3, r3, #10
 800e9fe:	697a      	ldr	r2, [r7, #20]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	697a      	ldr	r2, [r7, #20]
 800ea08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	685a      	ldr	r2, [r3, #4]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	693a      	ldr	r2, [r7, #16]
 800ea1c:	621a      	str	r2, [r3, #32]
}
 800ea1e:	bf00      	nop
 800ea20:	371c      	adds	r7, #28
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	feff8fff 	.word	0xfeff8fff
 800ea30:	40010000 	.word	0x40010000
 800ea34:	40010400 	.word	0x40010400
 800ea38:	40014000 	.word	0x40014000
 800ea3c:	40014400 	.word	0x40014400
 800ea40:	40014800 	.word	0x40014800

0800ea44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b087      	sub	sp, #28
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6a1b      	ldr	r3, [r3, #32]
 800ea54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6a1b      	ldr	r3, [r3, #32]
 800ea5a:	f023 0201 	bic.w	r2, r3, #1
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	699b      	ldr	r3, [r3, #24]
 800ea66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ea6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	011b      	lsls	r3, r3, #4
 800ea74:	693a      	ldr	r2, [r7, #16]
 800ea76:	4313      	orrs	r3, r2
 800ea78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	f023 030a 	bic.w	r3, r3, #10
 800ea80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ea82:	697a      	ldr	r2, [r7, #20]
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	4313      	orrs	r3, r2
 800ea88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	693a      	ldr	r2, [r7, #16]
 800ea8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	697a      	ldr	r2, [r7, #20]
 800ea94:	621a      	str	r2, [r3, #32]
}
 800ea96:	bf00      	nop
 800ea98:	371c      	adds	r7, #28
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr

0800eaa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eaa2:	b480      	push	{r7}
 800eaa4:	b087      	sub	sp, #28
 800eaa6:	af00      	add	r7, sp, #0
 800eaa8:	60f8      	str	r0, [r7, #12]
 800eaaa:	60b9      	str	r1, [r7, #8]
 800eaac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6a1b      	ldr	r3, [r3, #32]
 800eab2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6a1b      	ldr	r3, [r3, #32]
 800eab8:	f023 0210 	bic.w	r2, r3, #16
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	699b      	ldr	r3, [r3, #24]
 800eac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800eacc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	031b      	lsls	r3, r3, #12
 800ead2:	693a      	ldr	r2, [r7, #16]
 800ead4:	4313      	orrs	r3, r2
 800ead6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800eade:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	011b      	lsls	r3, r3, #4
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	4313      	orrs	r3, r2
 800eae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	693a      	ldr	r2, [r7, #16]
 800eaee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	697a      	ldr	r2, [r7, #20]
 800eaf4:	621a      	str	r2, [r3, #32]
}
 800eaf6:	bf00      	nop
 800eaf8:	371c      	adds	r7, #28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
	...

0800eb04 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b085      	sub	sp, #20
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	689b      	ldr	r3, [r3, #8]
 800eb12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	4b09      	ldr	r3, [pc, #36]	@ (800eb3c <TIM_ITRx_SetConfig+0x38>)
 800eb18:	4013      	ands	r3, r2
 800eb1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	4313      	orrs	r3, r2
 800eb22:	f043 0307 	orr.w	r3, r3, #7
 800eb26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	609a      	str	r2, [r3, #8]
}
 800eb2e:	bf00      	nop
 800eb30:	3714      	adds	r7, #20
 800eb32:	46bd      	mov	sp, r7
 800eb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	ffcfff8f 	.word	0xffcfff8f

0800eb40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b087      	sub	sp, #28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
 800eb4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	689b      	ldr	r3, [r3, #8]
 800eb52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eb5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	021a      	lsls	r2, r3, #8
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	431a      	orrs	r2, r3
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	4313      	orrs	r3, r2
 800eb68:	697a      	ldr	r2, [r7, #20]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	697a      	ldr	r2, [r7, #20]
 800eb72:	609a      	str	r2, [r3, #8]
}
 800eb74:	bf00      	nop
 800eb76:	371c      	adds	r7, #28
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b087      	sub	sp, #28
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	60f8      	str	r0, [r7, #12]
 800eb88:	60b9      	str	r1, [r7, #8]
 800eb8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	f003 031f 	and.w	r3, r3, #31
 800eb92:	2201      	movs	r2, #1
 800eb94:	fa02 f303 	lsl.w	r3, r2, r3
 800eb98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	6a1a      	ldr	r2, [r3, #32]
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	43db      	mvns	r3, r3
 800eba2:	401a      	ands	r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	6a1a      	ldr	r2, [r3, #32]
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	f003 031f 	and.w	r3, r3, #31
 800ebb2:	6879      	ldr	r1, [r7, #4]
 800ebb4:	fa01 f303 	lsl.w	r3, r1, r3
 800ebb8:	431a      	orrs	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	621a      	str	r2, [r3, #32]
}
 800ebbe:	bf00      	nop
 800ebc0:	371c      	adds	r7, #28
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
	...

0800ebcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b085      	sub	sp, #20
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d101      	bne.n	800ebe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ebe0:	2302      	movs	r3, #2
 800ebe2:	e077      	b.n	800ecd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2202      	movs	r2, #2
 800ebf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4a35      	ldr	r2, [pc, #212]	@ (800ece0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec0a:	4293      	cmp	r3, r2
 800ec0c:	d004      	beq.n	800ec18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a34      	ldr	r2, [pc, #208]	@ (800ece4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d108      	bne.n	800ec2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ec1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4313      	orrs	r3, r2
 800ec28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	4a25      	ldr	r2, [pc, #148]	@ (800ece0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	d02c      	beq.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec56:	d027      	beq.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a22      	ldr	r2, [pc, #136]	@ (800ece8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d022      	beq.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a21      	ldr	r2, [pc, #132]	@ (800ecec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d01d      	beq.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4a1f      	ldr	r2, [pc, #124]	@ (800ecf0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d018      	beq.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a1a      	ldr	r2, [pc, #104]	@ (800ece4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d013      	beq.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4a1b      	ldr	r2, [pc, #108]	@ (800ecf4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d00e      	beq.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	4a1a      	ldr	r2, [pc, #104]	@ (800ecf8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d009      	beq.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	4a18      	ldr	r2, [pc, #96]	@ (800ecfc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	d004      	beq.n	800eca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a17      	ldr	r2, [pc, #92]	@ (800ed00 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d10c      	bne.n	800ecc2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ecae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	68ba      	ldr	r2, [r7, #8]
 800ecb6:	4313      	orrs	r3, r2
 800ecb8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3714      	adds	r7, #20
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	40010000 	.word	0x40010000
 800ece4:	40010400 	.word	0x40010400
 800ece8:	40000400 	.word	0x40000400
 800ecec:	40000800 	.word	0x40000800
 800ecf0:	40000c00 	.word	0x40000c00
 800ecf4:	40001800 	.word	0x40001800
 800ecf8:	40014000 	.word	0x40014000
 800ecfc:	4000e000 	.word	0x4000e000
 800ed00:	4000e400 	.word	0x4000e400

0800ed04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b083      	sub	sp, #12
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ed34:	bf00      	nop
 800ed36:	370c      	adds	r7, #12
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3e:	4770      	bx	lr

0800ed40 <LL_GPIO_SetPinMode>:
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6819      	ldr	r1, [r3, #0]
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	fb03 f203 	mul.w	r2, r3, r3
 800ed56:	4613      	mov	r3, r2
 800ed58:	005b      	lsls	r3, r3, #1
 800ed5a:	4413      	add	r3, r2
 800ed5c:	43db      	mvns	r3, r3
 800ed5e:	ea01 0203 	and.w	r2, r1, r3
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	fb03 f303 	mul.w	r3, r3, r3
 800ed68:	6879      	ldr	r1, [r7, #4]
 800ed6a:	fb01 f303 	mul.w	r3, r1, r3
 800ed6e:	431a      	orrs	r2, r3
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	601a      	str	r2, [r3, #0]
}
 800ed74:	bf00      	nop
 800ed76:	3714      	adds	r7, #20
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <LL_GPIO_SetPinOutputType>:
{
 800ed80:	b480      	push	{r7}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	685a      	ldr	r2, [r3, #4]
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	43db      	mvns	r3, r3
 800ed94:	401a      	ands	r2, r3
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	6879      	ldr	r1, [r7, #4]
 800ed9a:	fb01 f303 	mul.w	r3, r1, r3
 800ed9e:	431a      	orrs	r2, r3
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	605a      	str	r2, [r3, #4]
}
 800eda4:	bf00      	nop
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <LL_GPIO_SetPinSpeed>:
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6899      	ldr	r1, [r3, #8]
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	fb03 f203 	mul.w	r2, r3, r3
 800edc6:	4613      	mov	r3, r2
 800edc8:	005b      	lsls	r3, r3, #1
 800edca:	4413      	add	r3, r2
 800edcc:	43db      	mvns	r3, r3
 800edce:	ea01 0203 	and.w	r2, r1, r3
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	fb03 f303 	mul.w	r3, r3, r3
 800edd8:	6879      	ldr	r1, [r7, #4]
 800edda:	fb01 f303 	mul.w	r3, r1, r3
 800edde:	431a      	orrs	r2, r3
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	609a      	str	r2, [r3, #8]
}
 800ede4:	bf00      	nop
 800ede6:	3714      	adds	r7, #20
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <LL_GPIO_SetPinPull>:
{
 800edf0:	b480      	push	{r7}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	68d9      	ldr	r1, [r3, #12]
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	fb03 f203 	mul.w	r2, r3, r3
 800ee06:	4613      	mov	r3, r2
 800ee08:	005b      	lsls	r3, r3, #1
 800ee0a:	4413      	add	r3, r2
 800ee0c:	43db      	mvns	r3, r3
 800ee0e:	ea01 0203 	and.w	r2, r1, r3
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	fb03 f303 	mul.w	r3, r3, r3
 800ee18:	6879      	ldr	r1, [r7, #4]
 800ee1a:	fb01 f303 	mul.w	r3, r1, r3
 800ee1e:	431a      	orrs	r2, r3
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	60da      	str	r2, [r3, #12]
}
 800ee24:	bf00      	nop
 800ee26:	3714      	adds	r7, #20
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <LL_GPIO_SetAFPin_0_7>:
{
 800ee30:	b480      	push	{r7}
 800ee32:	b085      	sub	sp, #20
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6a19      	ldr	r1, [r3, #32]
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	fb03 f303 	mul.w	r3, r3, r3
 800ee46:	68ba      	ldr	r2, [r7, #8]
 800ee48:	fb02 f303 	mul.w	r3, r2, r3
 800ee4c:	68ba      	ldr	r2, [r7, #8]
 800ee4e:	fb03 f202 	mul.w	r2, r3, r2
 800ee52:	4613      	mov	r3, r2
 800ee54:	011b      	lsls	r3, r3, #4
 800ee56:	1a9b      	subs	r3, r3, r2
 800ee58:	43db      	mvns	r3, r3
 800ee5a:	ea01 0203 	and.w	r2, r1, r3
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	fb03 f303 	mul.w	r3, r3, r3
 800ee64:	68b9      	ldr	r1, [r7, #8]
 800ee66:	fb01 f303 	mul.w	r3, r1, r3
 800ee6a:	68b9      	ldr	r1, [r7, #8]
 800ee6c:	fb01 f303 	mul.w	r3, r1, r3
 800ee70:	6879      	ldr	r1, [r7, #4]
 800ee72:	fb01 f303 	mul.w	r3, r1, r3
 800ee76:	431a      	orrs	r2, r3
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	621a      	str	r2, [r3, #32]
}
 800ee7c:	bf00      	nop
 800ee7e:	3714      	adds	r7, #20
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <LL_GPIO_SetAFPin_8_15>:
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	60b9      	str	r1, [r7, #8]
 800ee92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	0a1b      	lsrs	r3, r3, #8
 800ee9c:	68ba      	ldr	r2, [r7, #8]
 800ee9e:	0a12      	lsrs	r2, r2, #8
 800eea0:	fb02 f303 	mul.w	r3, r2, r3
 800eea4:	68ba      	ldr	r2, [r7, #8]
 800eea6:	0a12      	lsrs	r2, r2, #8
 800eea8:	fb02 f303 	mul.w	r3, r2, r3
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	0a12      	lsrs	r2, r2, #8
 800eeb0:	fb03 f202 	mul.w	r2, r3, r2
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	011b      	lsls	r3, r3, #4
 800eeb8:	1a9b      	subs	r3, r3, r2
 800eeba:	43db      	mvns	r3, r3
 800eebc:	ea01 0203 	and.w	r2, r1, r3
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	0a1b      	lsrs	r3, r3, #8
 800eec4:	68b9      	ldr	r1, [r7, #8]
 800eec6:	0a09      	lsrs	r1, r1, #8
 800eec8:	fb01 f303 	mul.w	r3, r1, r3
 800eecc:	68b9      	ldr	r1, [r7, #8]
 800eece:	0a09      	lsrs	r1, r1, #8
 800eed0:	fb01 f303 	mul.w	r3, r1, r3
 800eed4:	68b9      	ldr	r1, [r7, #8]
 800eed6:	0a09      	lsrs	r1, r1, #8
 800eed8:	fb01 f303 	mul.w	r3, r1, r3
 800eedc:	6879      	ldr	r1, [r7, #4]
 800eede:	fb01 f303 	mul.w	r3, r1, r3
 800eee2:	431a      	orrs	r2, r3
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800eee8:	bf00      	nop
 800eeea:	3714      	adds	r7, #20
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b088      	sub	sp, #32
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	fa93 f3a3 	rbit	r3, r3
 800ef0a:	60fb      	str	r3, [r7, #12]
  return result;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <LL_GPIO_Init+0x26>
    return 32U;
 800ef16:	2320      	movs	r3, #32
 800ef18:	e003      	b.n	800ef22 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	fab3 f383 	clz	r3, r3
 800ef20:	b2db      	uxtb	r3, r3
 800ef22:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ef24:	e048      	b.n	800efb8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	2101      	movs	r1, #1
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ef32:	4013      	ands	r3, r2
 800ef34:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800ef36:	69bb      	ldr	r3, [r7, #24]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d03a      	beq.n	800efb2 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	d003      	beq.n	800ef4c <LL_GPIO_Init+0x58>
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	2b02      	cmp	r3, #2
 800ef4a:	d10e      	bne.n	800ef6a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	461a      	mov	r2, r3
 800ef52:	69b9      	ldr	r1, [r7, #24]
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff ff2b 	bl	800edb0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	6819      	ldr	r1, [r3, #0]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	461a      	mov	r2, r3
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7ff ff0b 	bl	800ed80 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	691b      	ldr	r3, [r3, #16]
 800ef6e:	461a      	mov	r2, r3
 800ef70:	69b9      	ldr	r1, [r7, #24]
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff ff3c 	bl	800edf0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d111      	bne.n	800efa4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	2bff      	cmp	r3, #255	@ 0xff
 800ef84:	d807      	bhi.n	800ef96 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	695b      	ldr	r3, [r3, #20]
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	69b9      	ldr	r1, [r7, #24]
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7ff ff4e 	bl	800ee30 <LL_GPIO_SetAFPin_0_7>
 800ef94:	e006      	b.n	800efa4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	695b      	ldr	r3, [r3, #20]
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	69b9      	ldr	r1, [r7, #24]
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7ff ff72 	bl	800ee88 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	461a      	mov	r2, r3
 800efaa:	69b9      	ldr	r1, [r7, #24]
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7ff fec7 	bl	800ed40 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	3301      	adds	r3, #1
 800efb6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	fa22 f303 	lsr.w	r3, r2, r3
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d1af      	bne.n	800ef26 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3720      	adds	r7, #32
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800efd0:	b480      	push	{r7}
 800efd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800efd4:	4b07      	ldr	r3, [pc, #28]	@ (800eff4 <LL_RCC_HSE_IsReady+0x24>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800efdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800efe0:	d101      	bne.n	800efe6 <LL_RCC_HSE_IsReady+0x16>
 800efe2:	2301      	movs	r3, #1
 800efe4:	e000      	b.n	800efe8 <LL_RCC_HSE_IsReady+0x18>
 800efe6:	2300      	movs	r3, #0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	58024400 	.word	0x58024400

0800eff8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800eff8:	b480      	push	{r7}
 800effa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800effc:	4b06      	ldr	r3, [pc, #24]	@ (800f018 <LL_RCC_HSI_IsReady+0x20>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f003 0304 	and.w	r3, r3, #4
 800f004:	2b04      	cmp	r3, #4
 800f006:	d101      	bne.n	800f00c <LL_RCC_HSI_IsReady+0x14>
 800f008:	2301      	movs	r3, #1
 800f00a:	e000      	b.n	800f00e <LL_RCC_HSI_IsReady+0x16>
 800f00c:	2300      	movs	r3, #0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr
 800f018:	58024400 	.word	0x58024400

0800f01c <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 800f01c:	b480      	push	{r7}
 800f01e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800f020:	4b04      	ldr	r3, [pc, #16]	@ (800f034 <LL_RCC_HSI_GetDivider+0x18>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f003 0318 	and.w	r3, r3, #24
}
 800f028:	4618      	mov	r0, r3
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	58024400 	.word	0x58024400

0800f038 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800f038:	b480      	push	{r7}
 800f03a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800f03c:	4b07      	ldr	r3, [pc, #28]	@ (800f05c <LL_RCC_CSI_IsReady+0x24>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f048:	d101      	bne.n	800f04e <LL_RCC_CSI_IsReady+0x16>
 800f04a:	2301      	movs	r3, #1
 800f04c:	e000      	b.n	800f050 <LL_RCC_CSI_IsReady+0x18>
 800f04e:	2300      	movs	r3, #0
}
 800f050:	4618      	mov	r0, r3
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	58024400 	.word	0x58024400

0800f060 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800f060:	b480      	push	{r7}
 800f062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f064:	4b06      	ldr	r3, [pc, #24]	@ (800f080 <LL_RCC_LSE_IsReady+0x20>)
 800f066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f068:	f003 0302 	and.w	r3, r3, #2
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d101      	bne.n	800f074 <LL_RCC_LSE_IsReady+0x14>
 800f070:	2301      	movs	r3, #1
 800f072:	e000      	b.n	800f076 <LL_RCC_LSE_IsReady+0x16>
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr
 800f080:	58024400 	.word	0x58024400

0800f084 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800f084:	b480      	push	{r7}
 800f086:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800f088:	4b04      	ldr	r3, [pc, #16]	@ (800f09c <LL_RCC_GetSysClkSource+0x18>)
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 800f090:	4618      	mov	r0, r3
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	58024400 	.word	0x58024400

0800f0a0 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800f0a4:	4b04      	ldr	r3, [pc, #16]	@ (800f0b8 <LL_RCC_GetSysPrescaler+0x18>)
 800f0a6:	699b      	ldr	r3, [r3, #24]
 800f0a8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	58024400 	.word	0x58024400

0800f0bc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800f0c0:	4b04      	ldr	r3, [pc, #16]	@ (800f0d4 <LL_RCC_GetAHBPrescaler+0x18>)
 800f0c2:	699b      	ldr	r3, [r3, #24]
 800f0c4:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	58024400 	.word	0x58024400

0800f0d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800f0dc:	4b04      	ldr	r3, [pc, #16]	@ (800f0f0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800f0de:	69db      	ldr	r3, [r3, #28]
 800f0e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	58024400 	.word	0x58024400

0800f0f4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800f0f8:	4b04      	ldr	r3, [pc, #16]	@ (800f10c <LL_RCC_GetAPB2Prescaler+0x18>)
 800f0fa:	69db      	ldr	r3, [r3, #28]
 800f0fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800f100:	4618      	mov	r0, r3
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr
 800f10a:	bf00      	nop
 800f10c:	58024400 	.word	0x58024400

0800f110 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	b2da      	uxtb	r2, r3
 800f11c:	4b0e      	ldr	r3, [pc, #56]	@ (800f158 <LL_RCC_GetClockSource+0x48>)
 800f11e:	4413      	add	r3, r2
 800f120:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	0e19      	lsrs	r1, r3, #24
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	0a1b      	lsrs	r3, r3, #8
 800f12e:	f003 031f 	and.w	r3, r3, #31
 800f132:	fa01 f303 	lsl.w	r3, r1, r3
 800f136:	401a      	ands	r2, r3
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	0a1b      	lsrs	r3, r3, #8
 800f13c:	f003 031f 	and.w	r3, r3, #31
 800f140:	fa22 f303 	lsr.w	r3, r2, r3
 800f144:	041a      	lsls	r2, r3, #16
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4313      	orrs	r3, r2
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3714      	adds	r7, #20
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	5802444c 	.word	0x5802444c

0800f15c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7ff ffd3 	bl	800f110 <LL_RCC_GetClockSource>
 800f16a:	4603      	mov	r3, r0
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3708      	adds	r7, #8
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800f174:	b480      	push	{r7}
 800f176:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800f178:	4b04      	ldr	r3, [pc, #16]	@ (800f18c <LL_RCC_PLL_GetSource+0x18>)
 800f17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f17c:	f003 0303 	and.w	r3, r3, #3
}
 800f180:	4618      	mov	r0, r3
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	58024400 	.word	0x58024400

0800f190 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 800f190:	b480      	push	{r7}
 800f192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 800f194:	4b07      	ldr	r3, [pc, #28]	@ (800f1b4 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800f196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f19c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1a0:	d101      	bne.n	800f1a6 <LL_RCC_PLL1P_IsEnabled+0x16>
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e000      	b.n	800f1a8 <LL_RCC_PLL1P_IsEnabled+0x18>
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr
 800f1b2:	bf00      	nop
 800f1b4:	58024400 	.word	0x58024400

0800f1b8 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 800f1bc:	4b07      	ldr	r3, [pc, #28]	@ (800f1dc <LL_RCC_PLL1Q_IsEnabled+0x24>)
 800f1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f1c8:	d101      	bne.n	800f1ce <LL_RCC_PLL1Q_IsEnabled+0x16>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e000      	b.n	800f1d0 <LL_RCC_PLL1Q_IsEnabled+0x18>
 800f1ce:	2300      	movs	r3, #0
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr
 800f1da:	bf00      	nop
 800f1dc:	58024400 	.word	0x58024400

0800f1e0 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 800f1e4:	4b07      	ldr	r3, [pc, #28]	@ (800f204 <LL_RCC_PLL1R_IsEnabled+0x24>)
 800f1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f1ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800f1f0:	d101      	bne.n	800f1f6 <LL_RCC_PLL1R_IsEnabled+0x16>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e000      	b.n	800f1f8 <LL_RCC_PLL1R_IsEnabled+0x18>
 800f1f6:	2300      	movs	r3, #0
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	58024400 	.word	0x58024400

0800f208 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800f208:	b480      	push	{r7}
 800f20a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 800f20c:	4b06      	ldr	r3, [pc, #24]	@ (800f228 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800f20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f210:	f003 0301 	and.w	r3, r3, #1
 800f214:	2b01      	cmp	r3, #1
 800f216:	d101      	bne.n	800f21c <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800f218:	2301      	movs	r3, #1
 800f21a:	e000      	b.n	800f21e <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800f21c:	2300      	movs	r3, #0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr
 800f228:	58024400 	.word	0x58024400

0800f22c <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800f22c:	b480      	push	{r7}
 800f22e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800f230:	4b04      	ldr	r3, [pc, #16]	@ (800f244 <LL_RCC_PLL1_GetN+0x18>)
 800f232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f238:	3301      	adds	r3, #1
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr
 800f244:	58024400 	.word	0x58024400

0800f248 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 800f248:	b480      	push	{r7}
 800f24a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800f24c:	4b04      	ldr	r3, [pc, #16]	@ (800f260 <LL_RCC_PLL1_GetM+0x18>)
 800f24e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f250:	091b      	lsrs	r3, r3, #4
 800f252:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f256:	4618      	mov	r0, r3
 800f258:	46bd      	mov	sp, r7
 800f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25e:	4770      	bx	lr
 800f260:	58024400 	.word	0x58024400

0800f264 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 800f264:	b480      	push	{r7}
 800f266:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800f268:	4b05      	ldr	r3, [pc, #20]	@ (800f280 <LL_RCC_PLL1_GetP+0x1c>)
 800f26a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f26c:	0a5b      	lsrs	r3, r3, #9
 800f26e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f272:	3301      	adds	r3, #1
}
 800f274:	4618      	mov	r0, r3
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	58024400 	.word	0x58024400

0800f284 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 800f284:	b480      	push	{r7}
 800f286:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800f288:	4b05      	ldr	r3, [pc, #20]	@ (800f2a0 <LL_RCC_PLL1_GetQ+0x1c>)
 800f28a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f28c:	0c1b      	lsrs	r3, r3, #16
 800f28e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f292:	3301      	adds	r3, #1
}
 800f294:	4618      	mov	r0, r3
 800f296:	46bd      	mov	sp, r7
 800f298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29c:	4770      	bx	lr
 800f29e:	bf00      	nop
 800f2a0:	58024400 	.word	0x58024400

0800f2a4 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800f2a8:	4b05      	ldr	r3, [pc, #20]	@ (800f2c0 <LL_RCC_PLL1_GetR+0x1c>)
 800f2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2ac:	0e1b      	lsrs	r3, r3, #24
 800f2ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2b2:	3301      	adds	r3, #1
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	58024400 	.word	0x58024400

0800f2c4 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800f2c8:	4b04      	ldr	r3, [pc, #16]	@ (800f2dc <LL_RCC_PLL1_GetFRACN+0x18>)
 800f2ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2cc:	08db      	lsrs	r3, r3, #3
 800f2ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	58024400 	.word	0x58024400

0800f2e0 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 800f2e4:	4b07      	ldr	r3, [pc, #28]	@ (800f304 <LL_RCC_PLL2_IsReady+0x24>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f2ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f2f0:	d101      	bne.n	800f2f6 <LL_RCC_PLL2_IsReady+0x16>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e000      	b.n	800f2f8 <LL_RCC_PLL2_IsReady+0x18>
 800f2f6:	2300      	movs	r3, #0
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr
 800f302:	bf00      	nop
 800f304:	58024400 	.word	0x58024400

0800f308 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800f308:	b480      	push	{r7}
 800f30a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 800f30c:	4b07      	ldr	r3, [pc, #28]	@ (800f32c <LL_RCC_PLL2P_IsEnabled+0x24>)
 800f30e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f310:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800f314:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800f318:	d101      	bne.n	800f31e <LL_RCC_PLL2P_IsEnabled+0x16>
 800f31a:	2301      	movs	r3, #1
 800f31c:	e000      	b.n	800f320 <LL_RCC_PLL2P_IsEnabled+0x18>
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr
 800f32a:	bf00      	nop
 800f32c:	58024400 	.word	0x58024400

0800f330 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800f330:	b480      	push	{r7}
 800f332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 800f334:	4b07      	ldr	r3, [pc, #28]	@ (800f354 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800f336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f338:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f33c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f340:	d101      	bne.n	800f346 <LL_RCC_PLL2Q_IsEnabled+0x16>
 800f342:	2301      	movs	r3, #1
 800f344:	e000      	b.n	800f348 <LL_RCC_PLL2Q_IsEnabled+0x18>
 800f346:	2300      	movs	r3, #0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	58024400 	.word	0x58024400

0800f358 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 800f358:	b480      	push	{r7}
 800f35a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 800f35c:	4b07      	ldr	r3, [pc, #28]	@ (800f37c <LL_RCC_PLL2R_IsEnabled+0x24>)
 800f35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f360:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f368:	d101      	bne.n	800f36e <LL_RCC_PLL2R_IsEnabled+0x16>
 800f36a:	2301      	movs	r3, #1
 800f36c:	e000      	b.n	800f370 <LL_RCC_PLL2R_IsEnabled+0x18>
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	58024400 	.word	0x58024400

0800f380 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 800f380:	b480      	push	{r7}
 800f382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 800f384:	4b06      	ldr	r3, [pc, #24]	@ (800f3a0 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800f386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f388:	f003 0310 	and.w	r3, r3, #16
 800f38c:	2b10      	cmp	r3, #16
 800f38e:	d101      	bne.n	800f394 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800f390:	2301      	movs	r3, #1
 800f392:	e000      	b.n	800f396 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800f394:	2300      	movs	r3, #0
}
 800f396:	4618      	mov	r0, r3
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr
 800f3a0:	58024400 	.word	0x58024400

0800f3a4 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800f3a8:	4b04      	ldr	r3, [pc, #16]	@ (800f3bc <LL_RCC_PLL2_GetN+0x18>)
 800f3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3b0:	3301      	adds	r3, #1
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr
 800f3bc:	58024400 	.word	0x58024400

0800f3c0 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 800f3c4:	4b04      	ldr	r3, [pc, #16]	@ (800f3d8 <LL_RCC_PLL2_GetM+0x18>)
 800f3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3c8:	0b1b      	lsrs	r3, r3, #12
 800f3ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d6:	4770      	bx	lr
 800f3d8:	58024400 	.word	0x58024400

0800f3dc <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800f3e0:	4b05      	ldr	r3, [pc, #20]	@ (800f3f8 <LL_RCC_PLL2_GetP+0x1c>)
 800f3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3e4:	0a5b      	lsrs	r3, r3, #9
 800f3e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3ea:	3301      	adds	r3, #1
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	58024400 	.word	0x58024400

0800f3fc <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800f400:	4b05      	ldr	r3, [pc, #20]	@ (800f418 <LL_RCC_PLL2_GetQ+0x1c>)
 800f402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f404:	0c1b      	lsrs	r3, r3, #16
 800f406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f40a:	3301      	adds	r3, #1
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	58024400 	.word	0x58024400

0800f41c <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800f41c:	b480      	push	{r7}
 800f41e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800f420:	4b05      	ldr	r3, [pc, #20]	@ (800f438 <LL_RCC_PLL2_GetR+0x1c>)
 800f422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f424:	0e1b      	lsrs	r3, r3, #24
 800f426:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f42a:	3301      	adds	r3, #1
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	58024400 	.word	0x58024400

0800f43c <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800f43c:	b480      	push	{r7}
 800f43e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800f440:	4b04      	ldr	r3, [pc, #16]	@ (800f454 <LL_RCC_PLL2_GetFRACN+0x18>)
 800f442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f444:	08db      	lsrs	r3, r3, #3
 800f446:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr
 800f454:	58024400 	.word	0x58024400

0800f458 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800f458:	b480      	push	{r7}
 800f45a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800f45c:	4b07      	ldr	r3, [pc, #28]	@ (800f47c <LL_RCC_PLL3_IsReady+0x24>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f468:	d101      	bne.n	800f46e <LL_RCC_PLL3_IsReady+0x16>
 800f46a:	2301      	movs	r3, #1
 800f46c:	e000      	b.n	800f470 <LL_RCC_PLL3_IsReady+0x18>
 800f46e:	2300      	movs	r3, #0
}
 800f470:	4618      	mov	r0, r3
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop
 800f47c:	58024400 	.word	0x58024400

0800f480 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 800f480:	b480      	push	{r7}
 800f482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 800f484:	4b07      	ldr	r3, [pc, #28]	@ (800f4a4 <LL_RCC_PLL3P_IsEnabled+0x24>)
 800f486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f48c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f490:	d101      	bne.n	800f496 <LL_RCC_PLL3P_IsEnabled+0x16>
 800f492:	2301      	movs	r3, #1
 800f494:	e000      	b.n	800f498 <LL_RCC_PLL3P_IsEnabled+0x18>
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr
 800f4a2:	bf00      	nop
 800f4a4:	58024400 	.word	0x58024400

0800f4a8 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 800f4ac:	4b07      	ldr	r3, [pc, #28]	@ (800f4cc <LL_RCC_PLL3Q_IsEnabled+0x24>)
 800f4ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f4b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f4b8:	d101      	bne.n	800f4be <LL_RCC_PLL3Q_IsEnabled+0x16>
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	e000      	b.n	800f4c0 <LL_RCC_PLL3Q_IsEnabled+0x18>
 800f4be:	2300      	movs	r3, #0
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	58024400 	.word	0x58024400

0800f4d0 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 800f4d4:	4b07      	ldr	r3, [pc, #28]	@ (800f4f4 <LL_RCC_PLL3R_IsEnabled+0x24>)
 800f4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f4dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4e0:	d101      	bne.n	800f4e6 <LL_RCC_PLL3R_IsEnabled+0x16>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e000      	b.n	800f4e8 <LL_RCC_PLL3R_IsEnabled+0x18>
 800f4e6:	2300      	movs	r3, #0
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
 800f4f4:	58024400 	.word	0x58024400

0800f4f8 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 800f4fc:	4b07      	ldr	r3, [pc, #28]	@ (800f51c <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800f4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f508:	d101      	bne.n	800f50e <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800f50a:	2301      	movs	r3, #1
 800f50c:	e000      	b.n	800f510 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	46bd      	mov	sp, r7
 800f514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f518:	4770      	bx	lr
 800f51a:	bf00      	nop
 800f51c:	58024400 	.word	0x58024400

0800f520 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 800f520:	b480      	push	{r7}
 800f522:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 800f524:	4b04      	ldr	r3, [pc, #16]	@ (800f538 <LL_RCC_PLL3_GetN+0x18>)
 800f526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f52c:	3301      	adds	r3, #1
}
 800f52e:	4618      	mov	r0, r3
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr
 800f538:	58024400 	.word	0x58024400

0800f53c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800f53c:	b480      	push	{r7}
 800f53e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 800f540:	4b04      	ldr	r3, [pc, #16]	@ (800f554 <LL_RCC_PLL3_GetM+0x18>)
 800f542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f544:	0d1b      	lsrs	r3, r3, #20
 800f546:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr
 800f554:	58024400 	.word	0x58024400

0800f558 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 800f558:	b480      	push	{r7}
 800f55a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800f55c:	4b05      	ldr	r3, [pc, #20]	@ (800f574 <LL_RCC_PLL3_GetP+0x1c>)
 800f55e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f560:	0a5b      	lsrs	r3, r3, #9
 800f562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f566:	3301      	adds	r3, #1
}
 800f568:	4618      	mov	r0, r3
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	58024400 	.word	0x58024400

0800f578 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 800f578:	b480      	push	{r7}
 800f57a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 800f57c:	4b05      	ldr	r3, [pc, #20]	@ (800f594 <LL_RCC_PLL3_GetQ+0x1c>)
 800f57e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f580:	0c1b      	lsrs	r3, r3, #16
 800f582:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f586:	3301      	adds	r3, #1
}
 800f588:	4618      	mov	r0, r3
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr
 800f592:	bf00      	nop
 800f594:	58024400 	.word	0x58024400

0800f598 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 800f598:	b480      	push	{r7}
 800f59a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 800f59c:	4b05      	ldr	r3, [pc, #20]	@ (800f5b4 <LL_RCC_PLL3_GetR+0x1c>)
 800f59e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5a0:	0e1b      	lsrs	r3, r3, #24
 800f5a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f5a6:	3301      	adds	r3, #1
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	58024400 	.word	0x58024400

0800f5b8 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 800f5bc:	4b04      	ldr	r3, [pc, #16]	@ (800f5d0 <LL_RCC_PLL3_GetFRACN+0x18>)
 800f5be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5c0:	08db      	lsrs	r3, r3, #3
 800f5c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	58024400 	.word	0x58024400

0800f5d4 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08a      	sub	sp, #40	@ 0x28
 800f5d8:	af02      	add	r7, sp, #8
 800f5da:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f5e4:	f7ff fdc6 	bl	800f174 <LL_RCC_PLL_GetSource>
 800f5e8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	2b02      	cmp	r3, #2
 800f5ee:	d01f      	beq.n	800f630 <LL_RCC_GetPLL1ClockFreq+0x5c>
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	2b02      	cmp	r3, #2
 800f5f4:	d824      	bhi.n	800f640 <LL_RCC_GetPLL1ClockFreq+0x6c>
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d003      	beq.n	800f604 <LL_RCC_GetPLL1ClockFreq+0x30>
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d00e      	beq.n	800f620 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f602:	e01d      	b.n	800f640 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f604:	f7ff fcf8 	bl	800eff8 <LL_RCC_HSI_IsReady>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d01a      	beq.n	800f644 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f60e:	f7ff fd05 	bl	800f01c <LL_RCC_HSI_GetDivider>
 800f612:	4603      	mov	r3, r0
 800f614:	08db      	lsrs	r3, r3, #3
 800f616:	4a38      	ldr	r2, [pc, #224]	@ (800f6f8 <LL_RCC_GetPLL1ClockFreq+0x124>)
 800f618:	fa22 f303 	lsr.w	r3, r2, r3
 800f61c:	61fb      	str	r3, [r7, #28]
      break;
 800f61e:	e011      	b.n	800f644 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f620:	f7ff fd0a 	bl	800f038 <LL_RCC_CSI_IsReady>
 800f624:	4603      	mov	r3, r0
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00e      	beq.n	800f648 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f62a:	4b34      	ldr	r3, [pc, #208]	@ (800f6fc <LL_RCC_GetPLL1ClockFreq+0x128>)
 800f62c:	61fb      	str	r3, [r7, #28]
      break;
 800f62e:	e00b      	b.n	800f648 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f630:	f7ff fcce 	bl	800efd0 <LL_RCC_HSE_IsReady>
 800f634:	4603      	mov	r3, r0
 800f636:	2b00      	cmp	r3, #0
 800f638:	d008      	beq.n	800f64c <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f63a:	4b31      	ldr	r3, [pc, #196]	@ (800f700 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800f63c:	61fb      	str	r3, [r7, #28]
      break;
 800f63e:	e005      	b.n	800f64c <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 800f640:	bf00      	nop
 800f642:	e004      	b.n	800f64e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800f644:	bf00      	nop
 800f646:	e002      	b.n	800f64e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800f648:	bf00      	nop
 800f64a:	e000      	b.n	800f64e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800f64c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2200      	movs	r2, #0
 800f658:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2200      	movs	r2, #0
 800f65e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 800f660:	f7ff fdf2 	bl	800f248 <LL_RCC_PLL1_GetM>
 800f664:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 800f666:	f7ff fde1 	bl	800f22c <LL_RCC_PLL1_GetN>
 800f66a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800f66c:	f7ff fdcc 	bl	800f208 <LL_RCC_PLL1FRACN_IsEnabled>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d002      	beq.n	800f67c <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 800f676:	f7ff fe25 	bl	800f2c4 <LL_RCC_PLL1_GetFRACN>
 800f67a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d035      	beq.n	800f6ee <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 800f682:	f7ff fd85 	bl	800f190 <LL_RCC_PLL1P_IsEnabled>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d00c      	beq.n	800f6a6 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 800f68c:	f7ff fdea 	bl	800f264 <LL_RCC_PLL1_GetP>
 800f690:	4603      	mov	r3, r0
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	68fa      	ldr	r2, [r7, #12]
 800f698:	6939      	ldr	r1, [r7, #16]
 800f69a:	69f8      	ldr	r0, [r7, #28]
 800f69c:	f000 f964 	bl	800f968 <LL_RCC_CalcPLLClockFreq>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 800f6a6:	f7ff fd87 	bl	800f1b8 <LL_RCC_PLL1Q_IsEnabled>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d00c      	beq.n	800f6ca <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 800f6b0:	f7ff fde8 	bl	800f284 <LL_RCC_PLL1_GetQ>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	6939      	ldr	r1, [r7, #16]
 800f6be:	69f8      	ldr	r0, [r7, #28]
 800f6c0:	f000 f952 	bl	800f968 <LL_RCC_CalcPLLClockFreq>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 800f6ca:	f7ff fd89 	bl	800f1e0 <LL_RCC_PLL1R_IsEnabled>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d00c      	beq.n	800f6ee <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 800f6d4:	f7ff fde6 	bl	800f2a4 <LL_RCC_PLL1_GetR>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	6939      	ldr	r1, [r7, #16]
 800f6e2:	69f8      	ldr	r0, [r7, #28]
 800f6e4:	f000 f940 	bl	800f968 <LL_RCC_CalcPLLClockFreq>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	609a      	str	r2, [r3, #8]
    }
  }
}
 800f6ee:	bf00      	nop
 800f6f0:	3720      	adds	r7, #32
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	03d09000 	.word	0x03d09000
 800f6fc:	003d0900 	.word	0x003d0900
 800f700:	017d7840 	.word	0x017d7840

0800f704 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b08a      	sub	sp, #40	@ 0x28
 800f708:	af02      	add	r7, sp, #8
 800f70a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f70c:	2300      	movs	r3, #0
 800f70e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f710:	2300      	movs	r3, #0
 800f712:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f714:	f7ff fd2e 	bl	800f174 <LL_RCC_PLL_GetSource>
 800f718:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f71a:	697b      	ldr	r3, [r7, #20]
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	d01f      	beq.n	800f760 <LL_RCC_GetPLL2ClockFreq+0x5c>
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	2b02      	cmp	r3, #2
 800f724:	d824      	bhi.n	800f770 <LL_RCC_GetPLL2ClockFreq+0x6c>
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d003      	beq.n	800f734 <LL_RCC_GetPLL2ClockFreq+0x30>
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d00e      	beq.n	800f750 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f732:	e01d      	b.n	800f770 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f734:	f7ff fc60 	bl	800eff8 <LL_RCC_HSI_IsReady>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d01a      	beq.n	800f774 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f73e:	f7ff fc6d 	bl	800f01c <LL_RCC_HSI_GetDivider>
 800f742:	4603      	mov	r3, r0
 800f744:	08db      	lsrs	r3, r3, #3
 800f746:	4a38      	ldr	r2, [pc, #224]	@ (800f828 <LL_RCC_GetPLL2ClockFreq+0x124>)
 800f748:	fa22 f303 	lsr.w	r3, r2, r3
 800f74c:	61fb      	str	r3, [r7, #28]
      break;
 800f74e:	e011      	b.n	800f774 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f750:	f7ff fc72 	bl	800f038 <LL_RCC_CSI_IsReady>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00e      	beq.n	800f778 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f75a:	4b34      	ldr	r3, [pc, #208]	@ (800f82c <LL_RCC_GetPLL2ClockFreq+0x128>)
 800f75c:	61fb      	str	r3, [r7, #28]
      break;
 800f75e:	e00b      	b.n	800f778 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f760:	f7ff fc36 	bl	800efd0 <LL_RCC_HSE_IsReady>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d008      	beq.n	800f77c <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f76a:	4b31      	ldr	r3, [pc, #196]	@ (800f830 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 800f76c:	61fb      	str	r3, [r7, #28]
      break;
 800f76e:	e005      	b.n	800f77c <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 800f770:	bf00      	nop
 800f772:	e004      	b.n	800f77e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f774:	bf00      	nop
 800f776:	e002      	b.n	800f77e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f778:	bf00      	nop
 800f77a:	e000      	b.n	800f77e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 800f77c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2200      	movs	r2, #0
 800f782:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2200      	movs	r2, #0
 800f788:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 800f790:	f7ff fe16 	bl	800f3c0 <LL_RCC_PLL2_GetM>
 800f794:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 800f796:	f7ff fe05 	bl	800f3a4 <LL_RCC_PLL2_GetN>
 800f79a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 800f79c:	f7ff fdf0 	bl	800f380 <LL_RCC_PLL2FRACN_IsEnabled>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d002      	beq.n	800f7ac <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 800f7a6:	f7ff fe49 	bl	800f43c <LL_RCC_PLL2_GetFRACN>
 800f7aa:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d035      	beq.n	800f81e <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 800f7b2:	f7ff fda9 	bl	800f308 <LL_RCC_PLL2P_IsEnabled>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d00c      	beq.n	800f7d6 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 800f7bc:	f7ff fe0e 	bl	800f3dc <LL_RCC_PLL2_GetP>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	9300      	str	r3, [sp, #0]
 800f7c4:	69bb      	ldr	r3, [r7, #24]
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	6939      	ldr	r1, [r7, #16]
 800f7ca:	69f8      	ldr	r0, [r7, #28]
 800f7cc:	f000 f8cc 	bl	800f968 <LL_RCC_CalcPLLClockFreq>
 800f7d0:	4602      	mov	r2, r0
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 800f7d6:	f7ff fdab 	bl	800f330 <LL_RCC_PLL2Q_IsEnabled>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d00c      	beq.n	800f7fa <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 800f7e0:	f7ff fe0c 	bl	800f3fc <LL_RCC_PLL2_GetQ>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	69bb      	ldr	r3, [r7, #24]
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	6939      	ldr	r1, [r7, #16]
 800f7ee:	69f8      	ldr	r0, [r7, #28]
 800f7f0:	f000 f8ba 	bl	800f968 <LL_RCC_CalcPLLClockFreq>
 800f7f4:	4602      	mov	r2, r0
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 800f7fa:	f7ff fdad 	bl	800f358 <LL_RCC_PLL2R_IsEnabled>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d00c      	beq.n	800f81e <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 800f804:	f7ff fe0a 	bl	800f41c <LL_RCC_PLL2_GetR>
 800f808:	4603      	mov	r3, r0
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	68fa      	ldr	r2, [r7, #12]
 800f810:	6939      	ldr	r1, [r7, #16]
 800f812:	69f8      	ldr	r0, [r7, #28]
 800f814:	f000 f8a8 	bl	800f968 <LL_RCC_CalcPLLClockFreq>
 800f818:	4602      	mov	r2, r0
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	609a      	str	r2, [r3, #8]
    }
  }
}
 800f81e:	bf00      	nop
 800f820:	3720      	adds	r7, #32
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}
 800f826:	bf00      	nop
 800f828:	03d09000 	.word	0x03d09000
 800f82c:	003d0900 	.word	0x003d0900
 800f830:	017d7840 	.word	0x017d7840

0800f834 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b08a      	sub	sp, #40	@ 0x28
 800f838:	af02      	add	r7, sp, #8
 800f83a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800f83c:	2300      	movs	r3, #0
 800f83e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 800f840:	2300      	movs	r3, #0
 800f842:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 800f844:	f7ff fc96 	bl	800f174 <LL_RCC_PLL_GetSource>
 800f848:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	2b02      	cmp	r3, #2
 800f84e:	d01f      	beq.n	800f890 <LL_RCC_GetPLL3ClockFreq+0x5c>
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	2b02      	cmp	r3, #2
 800f854:	d824      	bhi.n	800f8a0 <LL_RCC_GetPLL3ClockFreq+0x6c>
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d003      	beq.n	800f864 <LL_RCC_GetPLL3ClockFreq+0x30>
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	2b01      	cmp	r3, #1
 800f860:	d00e      	beq.n	800f880 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 800f862:	e01d      	b.n	800f8a0 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 800f864:	f7ff fbc8 	bl	800eff8 <LL_RCC_HSI_IsReady>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d01a      	beq.n	800f8a4 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800f86e:	f7ff fbd5 	bl	800f01c <LL_RCC_HSI_GetDivider>
 800f872:	4603      	mov	r3, r0
 800f874:	08db      	lsrs	r3, r3, #3
 800f876:	4a39      	ldr	r2, [pc, #228]	@ (800f95c <LL_RCC_GetPLL3ClockFreq+0x128>)
 800f878:	fa22 f303 	lsr.w	r3, r2, r3
 800f87c:	61fb      	str	r3, [r7, #28]
      break;
 800f87e:	e011      	b.n	800f8a4 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 800f880:	f7ff fbda 	bl	800f038 <LL_RCC_CSI_IsReady>
 800f884:	4603      	mov	r3, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00e      	beq.n	800f8a8 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800f88a:	4b35      	ldr	r3, [pc, #212]	@ (800f960 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 800f88c:	61fb      	str	r3, [r7, #28]
      break;
 800f88e:	e00b      	b.n	800f8a8 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 800f890:	f7ff fb9e 	bl	800efd0 <LL_RCC_HSE_IsReady>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	d008      	beq.n	800f8ac <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800f89a:	4b32      	ldr	r3, [pc, #200]	@ (800f964 <LL_RCC_GetPLL3ClockFreq+0x130>)
 800f89c:	61fb      	str	r3, [r7, #28]
      break;
 800f89e:	e005      	b.n	800f8ac <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 800f8a0:	bf00      	nop
 800f8a2:	e004      	b.n	800f8ae <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800f8a4:	bf00      	nop
 800f8a6:	e002      	b.n	800f8ae <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800f8a8:	bf00      	nop
 800f8aa:	e000      	b.n	800f8ae <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 800f8ac:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 800f8c0:	f7ff fe3c 	bl	800f53c <LL_RCC_PLL3_GetM>
 800f8c4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 800f8c6:	f7ff fe2b 	bl	800f520 <LL_RCC_PLL3_GetN>
 800f8ca:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 800f8cc:	f7ff fe14 	bl	800f4f8 <LL_RCC_PLL3FRACN_IsEnabled>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d002      	beq.n	800f8dc <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 800f8d6:	f7ff fe6f 	bl	800f5b8 <LL_RCC_PLL3_GetFRACN>
 800f8da:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d038      	beq.n	800f954 <LL_RCC_GetPLL3ClockFreq+0x120>
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d035      	beq.n	800f954 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 800f8e8:	f7ff fdca 	bl	800f480 <LL_RCC_PLL3P_IsEnabled>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d00c      	beq.n	800f90c <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 800f8f2:	f7ff fe31 	bl	800f558 <LL_RCC_PLL3_GetP>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	69bb      	ldr	r3, [r7, #24]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	6939      	ldr	r1, [r7, #16]
 800f900:	69f8      	ldr	r0, [r7, #28]
 800f902:	f000 f831 	bl	800f968 <LL_RCC_CalcPLLClockFreq>
 800f906:	4602      	mov	r2, r0
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 800f90c:	f7ff fdcc 	bl	800f4a8 <LL_RCC_PLL3Q_IsEnabled>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00c      	beq.n	800f930 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 800f916:	f7ff fe2f 	bl	800f578 <LL_RCC_PLL3_GetQ>
 800f91a:	4603      	mov	r3, r0
 800f91c:	9300      	str	r3, [sp, #0]
 800f91e:	69bb      	ldr	r3, [r7, #24]
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	6939      	ldr	r1, [r7, #16]
 800f924:	69f8      	ldr	r0, [r7, #28]
 800f926:	f000 f81f 	bl	800f968 <LL_RCC_CalcPLLClockFreq>
 800f92a:	4602      	mov	r2, r0
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 800f930:	f7ff fdce 	bl	800f4d0 <LL_RCC_PLL3R_IsEnabled>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00c      	beq.n	800f954 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 800f93a:	f7ff fe2d 	bl	800f598 <LL_RCC_PLL3_GetR>
 800f93e:	4603      	mov	r3, r0
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	68fa      	ldr	r2, [r7, #12]
 800f946:	6939      	ldr	r1, [r7, #16]
 800f948:	69f8      	ldr	r0, [r7, #28]
 800f94a:	f000 f80d 	bl	800f968 <LL_RCC_CalcPLLClockFreq>
 800f94e:	4602      	mov	r2, r0
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	609a      	str	r2, [r3, #8]
    }
  }
}
 800f954:	bf00      	nop
 800f956:	3720      	adds	r7, #32
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}
 800f95c:	03d09000 	.word	0x03d09000
 800f960:	003d0900 	.word	0x003d0900
 800f964:	017d7840 	.word	0x017d7840

0800f968 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 800f968:	b480      	push	{r7}
 800f96a:	b087      	sub	sp, #28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	ee07 3a90 	vmov	s15, r3
 800f97c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	ee07 3a90 	vmov	s15, r3
 800f986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f98a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	ee07 3a90 	vmov	s15, r3
 800f994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	ee07 3a90 	vmov	s15, r3
 800f99e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800f9a2:	eddf 5a10 	vldr	s11, [pc, #64]	@ 800f9e4 <LL_RCC_CalcPLLClockFreq+0x7c>
 800f9a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9b2:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 800f9b6:	6a3b      	ldr	r3, [r7, #32]
 800f9b8:	ee07 3a90 	vmov	s15, r3
 800f9bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f9c0:	edd7 6a05 	vldr	s13, [r7, #20]
 800f9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9c8:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 800f9cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800f9d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9d4:	ee17 3a90 	vmov	r3, s15
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	371c      	adds	r7, #28
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr
 800f9e4:	46000000 	.word	0x46000000

0800f9e8 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800f9e8:	b590      	push	{r4, r7, lr}
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f7ff fbb1 	bl	800f15c <LL_RCC_GetUSARTClockSource>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	4a62      	ldr	r2, [pc, #392]	@ (800fb88 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	f000 80a9 	beq.w	800fb56 <LL_RCC_GetUSARTClockFreq+0x16e>
 800fa04:	4a60      	ldr	r2, [pc, #384]	@ (800fb88 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	f200 80ae 	bhi.w	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa0c:	4a5f      	ldr	r2, [pc, #380]	@ (800fb8c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	f000 80a1 	beq.w	800fb56 <LL_RCC_GetUSARTClockFreq+0x16e>
 800fa14:	4a5d      	ldr	r2, [pc, #372]	@ (800fb8c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	f200 80a6 	bhi.w	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa1c:	4a5c      	ldr	r2, [pc, #368]	@ (800fb90 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	f000 8091 	beq.w	800fb46 <LL_RCC_GetUSARTClockFreq+0x15e>
 800fa24:	4a5a      	ldr	r2, [pc, #360]	@ (800fb90 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	f200 809e 	bhi.w	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa2c:	4a59      	ldr	r2, [pc, #356]	@ (800fb94 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	f000 8089 	beq.w	800fb46 <LL_RCC_GetUSARTClockFreq+0x15e>
 800fa34:	4a57      	ldr	r2, [pc, #348]	@ (800fb94 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	f200 8096 	bhi.w	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa3c:	4a56      	ldr	r2, [pc, #344]	@ (800fb98 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d073      	beq.n	800fb2a <LL_RCC_GetUSARTClockFreq+0x142>
 800fa42:	4a55      	ldr	r2, [pc, #340]	@ (800fb98 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	f200 808f 	bhi.w	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa4a:	4a54      	ldr	r2, [pc, #336]	@ (800fb9c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d06c      	beq.n	800fb2a <LL_RCC_GetUSARTClockFreq+0x142>
 800fa50:	4a52      	ldr	r2, [pc, #328]	@ (800fb9c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	f200 8088 	bhi.w	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa58:	4a51      	ldr	r2, [pc, #324]	@ (800fba0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d058      	beq.n	800fb10 <LL_RCC_GetUSARTClockFreq+0x128>
 800fa5e:	4a50      	ldr	r2, [pc, #320]	@ (800fba0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	f200 8081 	bhi.w	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa66:	4a4f      	ldr	r2, [pc, #316]	@ (800fba4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800fa68:	4293      	cmp	r3, r2
 800fa6a:	d051      	beq.n	800fb10 <LL_RCC_GetUSARTClockFreq+0x128>
 800fa6c:	4a4d      	ldr	r2, [pc, #308]	@ (800fba4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d87a      	bhi.n	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa72:	4a4d      	ldr	r2, [pc, #308]	@ (800fba8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d03e      	beq.n	800faf6 <LL_RCC_GetUSARTClockFreq+0x10e>
 800fa78:	4a4b      	ldr	r2, [pc, #300]	@ (800fba8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d874      	bhi.n	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa7e:	4a4b      	ldr	r2, [pc, #300]	@ (800fbac <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d038      	beq.n	800faf6 <LL_RCC_GetUSARTClockFreq+0x10e>
 800fa84:	4a49      	ldr	r2, [pc, #292]	@ (800fbac <LL_RCC_GetUSARTClockFreq+0x1c4>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d86e      	bhi.n	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
 800fa8a:	4a49      	ldr	r2, [pc, #292]	@ (800fbb0 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d01a      	beq.n	800fac6 <LL_RCC_GetUSARTClockFreq+0xde>
 800fa90:	4a48      	ldr	r2, [pc, #288]	@ (800fbb4 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d168      	bne.n	800fb68 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800fa96:	f000 f895 	bl	800fbc4 <RCC_GetSystemClockFreq>
 800fa9a:	4604      	mov	r4, r0
 800fa9c:	f7ff fb00 	bl	800f0a0 <LL_RCC_GetSysPrescaler>
 800faa0:	4603      	mov	r3, r0
 800faa2:	0a1b      	lsrs	r3, r3, #8
 800faa4:	f003 030f 	and.w	r3, r3, #15
 800faa8:	4a43      	ldr	r2, [pc, #268]	@ (800fbb8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800faaa:	5cd3      	ldrb	r3, [r2, r3]
 800faac:	f003 031f 	and.w	r3, r3, #31
 800fab0:	fa24 f303 	lsr.w	r3, r4, r3
 800fab4:	4618      	mov	r0, r3
 800fab6:	f000 f8e7 	bl	800fc88 <RCC_GetHCLKClockFreq>
 800faba:	4603      	mov	r3, r0
 800fabc:	4618      	mov	r0, r3
 800fabe:	f000 f911 	bl	800fce4 <RCC_GetPCLK2ClockFreq>
 800fac2:	6178      	str	r0, [r7, #20]
      break;
 800fac4:	e05b      	b.n	800fb7e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 800fac6:	f000 f87d 	bl	800fbc4 <RCC_GetSystemClockFreq>
 800faca:	4604      	mov	r4, r0
 800facc:	f7ff fae8 	bl	800f0a0 <LL_RCC_GetSysPrescaler>
 800fad0:	4603      	mov	r3, r0
 800fad2:	0a1b      	lsrs	r3, r3, #8
 800fad4:	f003 030f 	and.w	r3, r3, #15
 800fad8:	4a37      	ldr	r2, [pc, #220]	@ (800fbb8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 800fada:	5cd3      	ldrb	r3, [r2, r3]
 800fadc:	f003 031f 	and.w	r3, r3, #31
 800fae0:	fa24 f303 	lsr.w	r3, r4, r3
 800fae4:	4618      	mov	r0, r3
 800fae6:	f000 f8cf 	bl	800fc88 <RCC_GetHCLKClockFreq>
 800faea:	4603      	mov	r3, r0
 800faec:	4618      	mov	r0, r3
 800faee:	f000 f8e1 	bl	800fcb4 <RCC_GetPCLK1ClockFreq>
 800faf2:	6178      	str	r0, [r7, #20]
      break;
 800faf4:	e043      	b.n	800fb7e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 800faf6:	f7ff fbf3 	bl	800f2e0 <LL_RCC_PLL2_IsReady>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d035      	beq.n	800fb6c <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 800fb00:	f107 0308 	add.w	r3, r7, #8
 800fb04:	4618      	mov	r0, r3
 800fb06:	f7ff fdfd 	bl	800f704 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	617b      	str	r3, [r7, #20]
      }
      break;
 800fb0e:	e02d      	b.n	800fb6c <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 800fb10:	f7ff fca2 	bl	800f458 <LL_RCC_PLL3_IsReady>
 800fb14:	4603      	mov	r3, r0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d02a      	beq.n	800fb70 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 800fb1a:	f107 0308 	add.w	r3, r7, #8
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7ff fe88 	bl	800f834 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	617b      	str	r3, [r7, #20]
      }
      break;
 800fb28:	e022      	b.n	800fb70 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 800fb2a:	f7ff fa65 	bl	800eff8 <LL_RCC_HSI_IsReady>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d01f      	beq.n	800fb74 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800fb34:	f7ff fa72 	bl	800f01c <LL_RCC_HSI_GetDivider>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	08db      	lsrs	r3, r3, #3
 800fb3c:	4a1f      	ldr	r2, [pc, #124]	@ (800fbbc <LL_RCC_GetUSARTClockFreq+0x1d4>)
 800fb3e:	fa22 f303 	lsr.w	r3, r2, r3
 800fb42:	617b      	str	r3, [r7, #20]
      }
      break;
 800fb44:	e016      	b.n	800fb74 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 800fb46:	f7ff fa77 	bl	800f038 <LL_RCC_CSI_IsReady>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d013      	beq.n	800fb78 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 800fb50:	4b1b      	ldr	r3, [pc, #108]	@ (800fbc0 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 800fb52:	617b      	str	r3, [r7, #20]
      }
      break;
 800fb54:	e010      	b.n	800fb78 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 800fb56:	f7ff fa83 	bl	800f060 <LL_RCC_LSE_IsReady>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00d      	beq.n	800fb7c <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 800fb60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb64:	617b      	str	r3, [r7, #20]
      }
      break;
 800fb66:	e009      	b.n	800fb7c <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 800fb68:	bf00      	nop
 800fb6a:	e008      	b.n	800fb7e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fb6c:	bf00      	nop
 800fb6e:	e006      	b.n	800fb7e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fb70:	bf00      	nop
 800fb72:	e004      	b.n	800fb7e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fb74:	bf00      	nop
 800fb76:	e002      	b.n	800fb7e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fb78:	bf00      	nop
 800fb7a:	e000      	b.n	800fb7e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 800fb7c:	bf00      	nop
  }

  return usart_frequency;
 800fb7e:	697b      	ldr	r3, [r7, #20]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	371c      	adds	r7, #28
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd90      	pop	{r4, r7, pc}
 800fb88:	07050308 	.word	0x07050308
 800fb8c:	07050008 	.word	0x07050008
 800fb90:	07040308 	.word	0x07040308
 800fb94:	07040008 	.word	0x07040008
 800fb98:	07030308 	.word	0x07030308
 800fb9c:	07030008 	.word	0x07030008
 800fba0:	07020308 	.word	0x07020308
 800fba4:	07020008 	.word	0x07020008
 800fba8:	07010308 	.word	0x07010308
 800fbac:	07010008 	.word	0x07010008
 800fbb0:	07000008 	.word	0x07000008
 800fbb4:	07000308 	.word	0x07000308
 800fbb8:	08014f24 	.word	0x08014f24
 800fbbc:	03d09000 	.word	0x03d09000
 800fbc0:	003d0900 	.word	0x003d0900

0800fbc4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800fbce:	f7ff fa59 	bl	800f084 <LL_RCC_GetSysClkSource>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b18      	cmp	r3, #24
 800fbd6:	d84b      	bhi.n	800fc70 <RCC_GetSystemClockFreq+0xac>
 800fbd8:	a201      	add	r2, pc, #4	@ (adr r2, 800fbe0 <RCC_GetSystemClockFreq+0x1c>)
 800fbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbde:	bf00      	nop
 800fbe0:	0800fc45 	.word	0x0800fc45
 800fbe4:	0800fc71 	.word	0x0800fc71
 800fbe8:	0800fc71 	.word	0x0800fc71
 800fbec:	0800fc71 	.word	0x0800fc71
 800fbf0:	0800fc71 	.word	0x0800fc71
 800fbf4:	0800fc71 	.word	0x0800fc71
 800fbf8:	0800fc71 	.word	0x0800fc71
 800fbfc:	0800fc71 	.word	0x0800fc71
 800fc00:	0800fc57 	.word	0x0800fc57
 800fc04:	0800fc71 	.word	0x0800fc71
 800fc08:	0800fc71 	.word	0x0800fc71
 800fc0c:	0800fc71 	.word	0x0800fc71
 800fc10:	0800fc71 	.word	0x0800fc71
 800fc14:	0800fc71 	.word	0x0800fc71
 800fc18:	0800fc71 	.word	0x0800fc71
 800fc1c:	0800fc71 	.word	0x0800fc71
 800fc20:	0800fc5d 	.word	0x0800fc5d
 800fc24:	0800fc71 	.word	0x0800fc71
 800fc28:	0800fc71 	.word	0x0800fc71
 800fc2c:	0800fc71 	.word	0x0800fc71
 800fc30:	0800fc71 	.word	0x0800fc71
 800fc34:	0800fc71 	.word	0x0800fc71
 800fc38:	0800fc71 	.word	0x0800fc71
 800fc3c:	0800fc71 	.word	0x0800fc71
 800fc40:	0800fc63 	.word	0x0800fc63
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800fc44:	f7ff f9ea 	bl	800f01c <LL_RCC_HSI_GetDivider>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	08db      	lsrs	r3, r3, #3
 800fc4c:	4a0b      	ldr	r2, [pc, #44]	@ (800fc7c <RCC_GetSystemClockFreq+0xb8>)
 800fc4e:	fa22 f303 	lsr.w	r3, r2, r3
 800fc52:	60fb      	str	r3, [r7, #12]
      break;
 800fc54:	e00d      	b.n	800fc72 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 800fc56:	4b0a      	ldr	r3, [pc, #40]	@ (800fc80 <RCC_GetSystemClockFreq+0xbc>)
 800fc58:	60fb      	str	r3, [r7, #12]
      break;
 800fc5a:	e00a      	b.n	800fc72 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 800fc5c:	4b09      	ldr	r3, [pc, #36]	@ (800fc84 <RCC_GetSystemClockFreq+0xc0>)
 800fc5e:	60fb      	str	r3, [r7, #12]
      break;
 800fc60:	e007      	b.n	800fc72 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 800fc62:	463b      	mov	r3, r7
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7ff fcb5 	bl	800f5d4 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	60fb      	str	r3, [r7, #12]
      break;
 800fc6e:	e000      	b.n	800fc72 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 800fc70:	bf00      	nop
  }

  return frequency;
 800fc72:	68fb      	ldr	r3, [r7, #12]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3710      	adds	r7, #16
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	03d09000 	.word	0x03d09000
 800fc80:	003d0900 	.word	0x003d0900
 800fc84:	017d7840 	.word	0x017d7840

0800fc88 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800fc90:	f7ff fa14 	bl	800f0bc <LL_RCC_GetAHBPrescaler>
 800fc94:	4603      	mov	r3, r0
 800fc96:	f003 030f 	and.w	r3, r3, #15
 800fc9a:	4a05      	ldr	r2, [pc, #20]	@ (800fcb0 <RCC_GetHCLKClockFreq+0x28>)
 800fc9c:	5cd3      	ldrb	r3, [r2, r3]
 800fc9e:	f003 031f 	and.w	r3, r3, #31
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	08014f24 	.word	0x08014f24

0800fcb4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800fcbc:	f7ff fa0c 	bl	800f0d8 <LL_RCC_GetAPB1Prescaler>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	091b      	lsrs	r3, r3, #4
 800fcc4:	f003 0307 	and.w	r3, r3, #7
 800fcc8:	4a05      	ldr	r2, [pc, #20]	@ (800fce0 <RCC_GetPCLK1ClockFreq+0x2c>)
 800fcca:	5cd3      	ldrb	r3, [r2, r3]
 800fccc:	f003 031f 	and.w	r3, r3, #31
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3708      	adds	r7, #8
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
 800fcde:	bf00      	nop
 800fce0:	08014f24 	.word	0x08014f24

0800fce4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800fcec:	f7ff fa02 	bl	800f0f4 <LL_RCC_GetAPB2Prescaler>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	0a1b      	lsrs	r3, r3, #8
 800fcf4:	f003 0307 	and.w	r3, r3, #7
 800fcf8:	4a05      	ldr	r2, [pc, #20]	@ (800fd10 <RCC_GetPCLK2ClockFreq+0x2c>)
 800fcfa:	5cd3      	ldrb	r3, [r2, r3]
 800fcfc:	f003 031f 	and.w	r3, r3, #31
 800fd00:	687a      	ldr	r2, [r7, #4]
 800fd02:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	08014f24 	.word	0x08014f24

0800fd14 <LL_SPI_IsEnabled>:
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f003 0301 	and.w	r3, r3, #1
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	d101      	bne.n	800fd2c <LL_SPI_IsEnabled+0x18>
 800fd28:	2301      	movs	r3, #1
 800fd2a:	e000      	b.n	800fd2e <LL_SPI_IsEnabled+0x1a>
 800fd2c:	2300      	movs	r3, #0
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	370c      	adds	r7, #12
 800fd32:	46bd      	mov	sp, r7
 800fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd38:	4770      	bx	lr

0800fd3a <LL_SPI_SetInternalSSLevel>:
{
 800fd3a:	b480      	push	{r7}
 800fd3c:	b083      	sub	sp, #12
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	6078      	str	r0, [r7, #4]
 800fd42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	431a      	orrs	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	601a      	str	r2, [r3, #0]
}
 800fd54:	bf00      	nop
 800fd56:	370c      	adds	r7, #12
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <LL_SPI_GetNSSPolarity>:
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	370c      	adds	r7, #12
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800fd8c:	bf00      	nop
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b086      	sub	sp, #24
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800fda2:	2301      	movs	r3, #1
 800fda4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7ff ffb4 	bl	800fd14 <LL_SPI_IsEnabled>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d167      	bne.n	800fe82 <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	689a      	ldr	r2, [r3, #8]
 800fdb6:	4b35      	ldr	r3, [pc, #212]	@ (800fe8c <LL_SPI_Init+0xf4>)
 800fdb8:	4013      	ands	r3, r2
 800fdba:	683a      	ldr	r2, [r7, #0]
 800fdbc:	6991      	ldr	r1, [r2, #24]
 800fdbe:	683a      	ldr	r2, [r7, #0]
 800fdc0:	6a12      	ldr	r2, [r2, #32]
 800fdc2:	4311      	orrs	r1, r2
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	6892      	ldr	r2, [r2, #8]
 800fdc8:	430a      	orrs	r2, r1
 800fdca:	431a      	orrs	r2, r3
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	695b      	ldr	r3, [r3, #20]
 800fdd4:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	685b      	ldr	r3, [r3, #4]
 800fdda:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7ff ffbf 	bl	800fd60 <LL_SPI_GetNSSPolarity>
 800fde2:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fdea:	d112      	bne.n	800fe12 <LL_SPI_Init+0x7a>
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d103      	bne.n	800fdfa <LL_SPI_Init+0x62>
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fdf8:	d006      	beq.n	800fe08 <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe00:	d107      	bne.n	800fe12 <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d104      	bne.n	800fe12 <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 800fe08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7ff ff94 	bl	800fd3a <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	68da      	ldr	r2, [r3, #12]
 800fe16:	4b1e      	ldr	r3, [pc, #120]	@ (800fe90 <LL_SPI_Init+0xf8>)
 800fe18:	4013      	ands	r3, r2
 800fe1a:	683a      	ldr	r2, [r7, #0]
 800fe1c:	6951      	ldr	r1, [r2, #20]
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	68d2      	ldr	r2, [r2, #12]
 800fe22:	4311      	orrs	r1, r2
 800fe24:	683a      	ldr	r2, [r7, #0]
 800fe26:	6912      	ldr	r2, [r2, #16]
 800fe28:	4311      	orrs	r1, r2
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	69d2      	ldr	r2, [r2, #28]
 800fe2e:	4311      	orrs	r1, r2
 800fe30:	683a      	ldr	r2, [r7, #0]
 800fe32:	6852      	ldr	r2, [r2, #4]
 800fe34:	4311      	orrs	r1, r2
 800fe36:	683a      	ldr	r2, [r7, #0]
 800fe38:	6812      	ldr	r2, [r2, #0]
 800fe3a:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 800fe3e:	430a      	orrs	r2, r1
 800fe40:	431a      	orrs	r2, r3
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fe56:	431a      	orrs	r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	6a1b      	ldr	r3, [r3, #32]
 800fe60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fe64:	d105      	bne.n	800fe72 <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7ff ff85 	bl	800fd7c <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe76:	f023 0201 	bic.w	r2, r3, #1
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800fe82:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3718      	adds	r7, #24
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	8fbfffe0 	.word	0x8fbfffe0
 800fe90:	d839ffff 	.word	0xd839ffff

0800fe94 <LL_TIM_SetPrescaler>:
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	683a      	ldr	r2, [r7, #0]
 800fea2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <LL_TIM_SetAutoReload>:
{
 800feb0:	b480      	push	{r7}
 800feb2:	b083      	sub	sp, #12
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	683a      	ldr	r2, [r7, #0]
 800febe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800fec0:	bf00      	nop
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <LL_TIM_SetRepetitionCounter>:
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	683a      	ldr	r2, [r7, #0]
 800feda:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800fedc:	bf00      	nop
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr

0800fee8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	695b      	ldr	r3, [r3, #20]
 800fef4:	f043 0201 	orr.w	r2, r3, #1
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	615a      	str	r2, [r3, #20]
}
 800fefc:	bf00      	nop
 800fefe:	370c      	adds	r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4a41      	ldr	r2, [pc, #260]	@ (8010020 <LL_TIM_Init+0x118>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d013      	beq.n	800ff48 <LL_TIM_Init+0x40>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff26:	d00f      	beq.n	800ff48 <LL_TIM_Init+0x40>
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4a3e      	ldr	r2, [pc, #248]	@ (8010024 <LL_TIM_Init+0x11c>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d00b      	beq.n	800ff48 <LL_TIM_Init+0x40>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4a3d      	ldr	r2, [pc, #244]	@ (8010028 <LL_TIM_Init+0x120>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d007      	beq.n	800ff48 <LL_TIM_Init+0x40>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4a3c      	ldr	r2, [pc, #240]	@ (801002c <LL_TIM_Init+0x124>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d003      	beq.n	800ff48 <LL_TIM_Init+0x40>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	4a3b      	ldr	r2, [pc, #236]	@ (8010030 <LL_TIM_Init+0x128>)
 800ff44:	4293      	cmp	r3, r2
 800ff46:	d106      	bne.n	800ff56 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	4313      	orrs	r3, r2
 800ff54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	4a31      	ldr	r2, [pc, #196]	@ (8010020 <LL_TIM_Init+0x118>)
 800ff5a:	4293      	cmp	r3, r2
 800ff5c:	d027      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff64:	d023      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	4a2e      	ldr	r2, [pc, #184]	@ (8010024 <LL_TIM_Init+0x11c>)
 800ff6a:	4293      	cmp	r3, r2
 800ff6c:	d01f      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4a2d      	ldr	r2, [pc, #180]	@ (8010028 <LL_TIM_Init+0x120>)
 800ff72:	4293      	cmp	r3, r2
 800ff74:	d01b      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	4a2c      	ldr	r2, [pc, #176]	@ (801002c <LL_TIM_Init+0x124>)
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d017      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	4a2b      	ldr	r2, [pc, #172]	@ (8010030 <LL_TIM_Init+0x128>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d013      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	4a2a      	ldr	r2, [pc, #168]	@ (8010034 <LL_TIM_Init+0x12c>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d00f      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	4a29      	ldr	r2, [pc, #164]	@ (8010038 <LL_TIM_Init+0x130>)
 800ff92:	4293      	cmp	r3, r2
 800ff94:	d00b      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	4a28      	ldr	r2, [pc, #160]	@ (801003c <LL_TIM_Init+0x134>)
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d007      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	4a27      	ldr	r2, [pc, #156]	@ (8010040 <LL_TIM_Init+0x138>)
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	d003      	beq.n	800ffae <LL_TIM_Init+0xa6>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4a26      	ldr	r2, [pc, #152]	@ (8010044 <LL_TIM_Init+0x13c>)
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d106      	bne.n	800ffbc <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	68fa      	ldr	r2, [r7, #12]
 800ffc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f7ff ff71 	bl	800feb0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f7ff ff5d 	bl	800fe94 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4a10      	ldr	r2, [pc, #64]	@ (8010020 <LL_TIM_Init+0x118>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d00f      	beq.n	8010002 <LL_TIM_Init+0xfa>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4a12      	ldr	r2, [pc, #72]	@ (8010030 <LL_TIM_Init+0x128>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d00b      	beq.n	8010002 <LL_TIM_Init+0xfa>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4a11      	ldr	r2, [pc, #68]	@ (8010034 <LL_TIM_Init+0x12c>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d007      	beq.n	8010002 <LL_TIM_Init+0xfa>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4a10      	ldr	r2, [pc, #64]	@ (8010038 <LL_TIM_Init+0x130>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d003      	beq.n	8010002 <LL_TIM_Init+0xfa>
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4a0f      	ldr	r2, [pc, #60]	@ (801003c <LL_TIM_Init+0x134>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	d105      	bne.n	801000e <LL_TIM_Init+0x106>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	691b      	ldr	r3, [r3, #16]
 8010006:	4619      	mov	r1, r3
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7ff ff5f 	bl	800fecc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7ff ff6a 	bl	800fee8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8010014:	2300      	movs	r3, #0
}
 8010016:	4618      	mov	r0, r3
 8010018:	3710      	adds	r7, #16
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	40010000 	.word	0x40010000
 8010024:	40000400 	.word	0x40000400
 8010028:	40000800 	.word	0x40000800
 801002c:	40000c00 	.word	0x40000c00
 8010030:	40010400 	.word	0x40010400
 8010034:	40014000 	.word	0x40014000
 8010038:	40014400 	.word	0x40014400
 801003c:	40014800 	.word	0x40014800
 8010040:	4000e000 	.word	0x4000e000
 8010044:	4000e400 	.word	0x4000e400

08010048 <LL_USART_IsEnabled>:
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f003 0301 	and.w	r3, r3, #1
 8010058:	2b01      	cmp	r3, #1
 801005a:	d101      	bne.n	8010060 <LL_USART_IsEnabled+0x18>
 801005c:	2301      	movs	r3, #1
 801005e:	e000      	b.n	8010062 <LL_USART_IsEnabled+0x1a>
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	370c      	adds	r7, #12
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <LL_USART_SetPrescaler>:
{
 801006e:	b480      	push	{r7}
 8010070:	b083      	sub	sp, #12
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
 8010076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801007c:	f023 030f 	bic.w	r3, r3, #15
 8010080:	683a      	ldr	r2, [r7, #0]
 8010082:	b292      	uxth	r2, r2
 8010084:	431a      	orrs	r2, r3
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 801008a:	bf00      	nop
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr

08010096 <LL_USART_SetStopBitsLength>:
{
 8010096:	b480      	push	{r7}
 8010098:	b083      	sub	sp, #12
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
 801009e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	431a      	orrs	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	605a      	str	r2, [r3, #4]
}
 80100b0:	bf00      	nop
 80100b2:	370c      	adds	r7, #12
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr

080100bc <LL_USART_SetHWFlowCtrl>:
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	689b      	ldr	r3, [r3, #8]
 80100ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	431a      	orrs	r2, r3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	609a      	str	r2, [r3, #8]
}
 80100d6:	bf00      	nop
 80100d8:	370c      	adds	r7, #12
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
	...

080100e4 <LL_USART_SetBaudRate>:
{
 80100e4:	b480      	push	{r7}
 80100e6:	b087      	sub	sp, #28
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	60f8      	str	r0, [r7, #12]
 80100ec:	60b9      	str	r1, [r7, #8]
 80100ee:	607a      	str	r2, [r7, #4]
 80100f0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b0b      	cmp	r3, #11
 80100f6:	d83c      	bhi.n	8010172 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80100f8:	6a3b      	ldr	r3, [r7, #32]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d039      	beq.n	8010172 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010104:	d122      	bne.n	801014c <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	b2db      	uxtb	r3, r3
 801010a:	461a      	mov	r2, r3
 801010c:	4b1c      	ldr	r3, [pc, #112]	@ (8010180 <LL_USART_SetBaudRate+0x9c>)
 801010e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010112:	68ba      	ldr	r2, [r7, #8]
 8010114:	fbb2 f3f3 	udiv	r3, r2, r3
 8010118:	005a      	lsls	r2, r3, #1
 801011a:	6a3b      	ldr	r3, [r7, #32]
 801011c:	085b      	lsrs	r3, r3, #1
 801011e:	441a      	add	r2, r3
 8010120:	6a3b      	ldr	r3, [r7, #32]
 8010122:	fbb2 f3f3 	udiv	r3, r2, r3
 8010126:	b29b      	uxth	r3, r3
 8010128:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 801012a:	697a      	ldr	r2, [r7, #20]
 801012c:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8010130:	4013      	ands	r3, r2
 8010132:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	085b      	lsrs	r3, r3, #1
 8010138:	b29b      	uxth	r3, r3
 801013a:	f003 0307 	and.w	r3, r3, #7
 801013e:	693a      	ldr	r2, [r7, #16]
 8010140:	4313      	orrs	r3, r2
 8010142:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	693a      	ldr	r2, [r7, #16]
 8010148:	60da      	str	r2, [r3, #12]
}
 801014a:	e012      	b.n	8010172 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	b2db      	uxtb	r3, r3
 8010150:	461a      	mov	r2, r3
 8010152:	4b0b      	ldr	r3, [pc, #44]	@ (8010180 <LL_USART_SetBaudRate+0x9c>)
 8010154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010158:	68ba      	ldr	r2, [r7, #8]
 801015a:	fbb2 f2f3 	udiv	r2, r2, r3
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	085b      	lsrs	r3, r3, #1
 8010162:	441a      	add	r2, r3
 8010164:	6a3b      	ldr	r3, [r7, #32]
 8010166:	fbb2 f3f3 	udiv	r3, r2, r3
 801016a:	b29b      	uxth	r3, r3
 801016c:	461a      	mov	r2, r3
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	60da      	str	r2, [r3, #12]
}
 8010172:	bf00      	nop
 8010174:	371c      	adds	r7, #28
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr
 801017e:	bf00      	nop
 8010180:	08014f34 	.word	0x08014f34

08010184 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b086      	sub	sp, #24
 8010188:	af02      	add	r7, sp, #8
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801018e:	2301      	movs	r3, #1
 8010190:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8010192:	2300      	movs	r3, #0
 8010194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f7ff ff56 	bl	8010048 <LL_USART_IsEnabled>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	f040 8092 	bne.w	80102c8 <LL_USART_Init+0x144>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	4b4a      	ldr	r3, [pc, #296]	@ (80102d4 <LL_USART_Init+0x150>)
 80101aa:	4013      	ands	r3, r2
 80101ac:	683a      	ldr	r2, [r7, #0]
 80101ae:	6891      	ldr	r1, [r2, #8]
 80101b0:	683a      	ldr	r2, [r7, #0]
 80101b2:	6912      	ldr	r2, [r2, #16]
 80101b4:	4311      	orrs	r1, r2
 80101b6:	683a      	ldr	r2, [r7, #0]
 80101b8:	6952      	ldr	r2, [r2, #20]
 80101ba:	4311      	orrs	r1, r2
 80101bc:	683a      	ldr	r2, [r7, #0]
 80101be:	69d2      	ldr	r2, [r2, #28]
 80101c0:	430a      	orrs	r2, r1
 80101c2:	431a      	orrs	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	4619      	mov	r1, r3
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7ff ff61 	bl	8010096 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	699b      	ldr	r3, [r3, #24]
 80101d8:	4619      	mov	r1, r3
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7ff ff6e 	bl	80100bc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	4a3d      	ldr	r2, [pc, #244]	@ (80102d8 <LL_USART_Init+0x154>)
 80101e4:	4293      	cmp	r3, r2
 80101e6:	d104      	bne.n	80101f2 <LL_USART_Init+0x6e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 80101e8:	483c      	ldr	r0, [pc, #240]	@ (80102dc <LL_USART_Init+0x158>)
 80101ea:	f7ff fbfd 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 80101ee:	60b8      	str	r0, [r7, #8]
 80101f0:	e04f      	b.n	8010292 <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART2)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4a3a      	ldr	r2, [pc, #232]	@ (80102e0 <LL_USART_Init+0x15c>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d104      	bne.n	8010204 <LL_USART_Init+0x80>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 80101fa:	483a      	ldr	r0, [pc, #232]	@ (80102e4 <LL_USART_Init+0x160>)
 80101fc:	f7ff fbf4 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 8010200:	60b8      	str	r0, [r7, #8]
 8010202:	e046      	b.n	8010292 <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART3)
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	4a38      	ldr	r2, [pc, #224]	@ (80102e8 <LL_USART_Init+0x164>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d104      	bne.n	8010216 <LL_USART_Init+0x92>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 801020c:	4835      	ldr	r0, [pc, #212]	@ (80102e4 <LL_USART_Init+0x160>)
 801020e:	f7ff fbeb 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 8010212:	60b8      	str	r0, [r7, #8]
 8010214:	e03d      	b.n	8010292 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART4)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	4a34      	ldr	r2, [pc, #208]	@ (80102ec <LL_USART_Init+0x168>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d104      	bne.n	8010228 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 801021e:	4831      	ldr	r0, [pc, #196]	@ (80102e4 <LL_USART_Init+0x160>)
 8010220:	f7ff fbe2 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 8010224:	60b8      	str	r0, [r7, #8]
 8010226:	e034      	b.n	8010292 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART5)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	4a31      	ldr	r2, [pc, #196]	@ (80102f0 <LL_USART_Init+0x16c>)
 801022c:	4293      	cmp	r3, r2
 801022e:	d104      	bne.n	801023a <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010230:	482c      	ldr	r0, [pc, #176]	@ (80102e4 <LL_USART_Init+0x160>)
 8010232:	f7ff fbd9 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 8010236:	60b8      	str	r0, [r7, #8]
 8010238:	e02b      	b.n	8010292 <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART6)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4a2d      	ldr	r2, [pc, #180]	@ (80102f4 <LL_USART_Init+0x170>)
 801023e:	4293      	cmp	r3, r2
 8010240:	d104      	bne.n	801024c <LL_USART_Init+0xc8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010242:	4826      	ldr	r0, [pc, #152]	@ (80102dc <LL_USART_Init+0x158>)
 8010244:	f7ff fbd0 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 8010248:	60b8      	str	r0, [r7, #8]
 801024a:	e022      	b.n	8010292 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART7)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	4a2a      	ldr	r2, [pc, #168]	@ (80102f8 <LL_USART_Init+0x174>)
 8010250:	4293      	cmp	r3, r2
 8010252:	d104      	bne.n	801025e <LL_USART_Init+0xda>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010254:	4823      	ldr	r0, [pc, #140]	@ (80102e4 <LL_USART_Init+0x160>)
 8010256:	f7ff fbc7 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 801025a:	60b8      	str	r0, [r7, #8]
 801025c:	e019      	b.n	8010292 <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART8)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4a26      	ldr	r2, [pc, #152]	@ (80102fc <LL_USART_Init+0x178>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d104      	bne.n	8010270 <LL_USART_Init+0xec>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010266:	481f      	ldr	r0, [pc, #124]	@ (80102e4 <LL_USART_Init+0x160>)
 8010268:	f7ff fbbe 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 801026c:	60b8      	str	r0, [r7, #8]
 801026e:	e010      	b.n	8010292 <LL_USART_Init+0x10e>
    }
#if defined(UART9)
    else if (USARTx == UART9)
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	4a23      	ldr	r2, [pc, #140]	@ (8010300 <LL_USART_Init+0x17c>)
 8010274:	4293      	cmp	r3, r2
 8010276:	d104      	bne.n	8010282 <LL_USART_Init+0xfe>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010278:	4818      	ldr	r0, [pc, #96]	@ (80102dc <LL_USART_Init+0x158>)
 801027a:	f7ff fbb5 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 801027e:	60b8      	str	r0, [r7, #8]
 8010280:	e007      	b.n	8010292 <LL_USART_Init+0x10e>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	4a1f      	ldr	r2, [pc, #124]	@ (8010304 <LL_USART_Init+0x180>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d103      	bne.n	8010292 <LL_USART_Init+0x10e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 801028a:	4814      	ldr	r0, [pc, #80]	@ (80102dc <LL_USART_Init+0x158>)
 801028c:	f7ff fbac 	bl	800f9e8 <LL_RCC_GetUSARTClockFreq>
 8010290:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d011      	beq.n	80102bc <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d00d      	beq.n	80102bc <LL_USART_Init+0x138>
    {
      status = SUCCESS;
 80102a0:	2300      	movs	r3, #0
 80102a2:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 80102b0:	9300      	str	r3, [sp, #0]
 80102b2:	460b      	mov	r3, r1
 80102b4:	68b9      	ldr	r1, [r7, #8]
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f7ff ff14 	bl	80100e4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4619      	mov	r1, r3
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f7ff fed3 	bl	801006e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80102c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3710      	adds	r7, #16
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	bf00      	nop
 80102d4:	efff69f3 	.word	0xefff69f3
 80102d8:	40011000 	.word	0x40011000
 80102dc:	07000308 	.word	0x07000308
 80102e0:	40004400 	.word	0x40004400
 80102e4:	07000008 	.word	0x07000008
 80102e8:	40004800 	.word	0x40004800
 80102ec:	40004c00 	.word	0x40004c00
 80102f0:	40005000 	.word	0x40005000
 80102f4:	40011400 	.word	0x40011400
 80102f8:	40007800 	.word	0x40007800
 80102fc:	40007c00 	.word	0x40007c00
 8010300:	40011800 	.word	0x40011800
 8010304:	40011c00 	.word	0x40011c00

08010308 <__cvt>:
 8010308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801030a:	ed2d 8b02 	vpush	{d8}
 801030e:	eeb0 8b40 	vmov.f64	d8, d0
 8010312:	b085      	sub	sp, #20
 8010314:	4617      	mov	r7, r2
 8010316:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010318:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801031a:	ee18 2a90 	vmov	r2, s17
 801031e:	f025 0520 	bic.w	r5, r5, #32
 8010322:	2a00      	cmp	r2, #0
 8010324:	bfb6      	itet	lt
 8010326:	222d      	movlt	r2, #45	@ 0x2d
 8010328:	2200      	movge	r2, #0
 801032a:	eeb1 8b40 	vneglt.f64	d8, d0
 801032e:	2d46      	cmp	r5, #70	@ 0x46
 8010330:	460c      	mov	r4, r1
 8010332:	701a      	strb	r2, [r3, #0]
 8010334:	d004      	beq.n	8010340 <__cvt+0x38>
 8010336:	2d45      	cmp	r5, #69	@ 0x45
 8010338:	d100      	bne.n	801033c <__cvt+0x34>
 801033a:	3401      	adds	r4, #1
 801033c:	2102      	movs	r1, #2
 801033e:	e000      	b.n	8010342 <__cvt+0x3a>
 8010340:	2103      	movs	r1, #3
 8010342:	ab03      	add	r3, sp, #12
 8010344:	9301      	str	r3, [sp, #4]
 8010346:	ab02      	add	r3, sp, #8
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	4622      	mov	r2, r4
 801034c:	4633      	mov	r3, r6
 801034e:	eeb0 0b48 	vmov.f64	d0, d8
 8010352:	f000 ffa1 	bl	8011298 <_dtoa_r>
 8010356:	2d47      	cmp	r5, #71	@ 0x47
 8010358:	d114      	bne.n	8010384 <__cvt+0x7c>
 801035a:	07fb      	lsls	r3, r7, #31
 801035c:	d50a      	bpl.n	8010374 <__cvt+0x6c>
 801035e:	1902      	adds	r2, r0, r4
 8010360:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010368:	bf08      	it	eq
 801036a:	9203      	streq	r2, [sp, #12]
 801036c:	2130      	movs	r1, #48	@ 0x30
 801036e:	9b03      	ldr	r3, [sp, #12]
 8010370:	4293      	cmp	r3, r2
 8010372:	d319      	bcc.n	80103a8 <__cvt+0xa0>
 8010374:	9b03      	ldr	r3, [sp, #12]
 8010376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010378:	1a1b      	subs	r3, r3, r0
 801037a:	6013      	str	r3, [r2, #0]
 801037c:	b005      	add	sp, #20
 801037e:	ecbd 8b02 	vpop	{d8}
 8010382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010384:	2d46      	cmp	r5, #70	@ 0x46
 8010386:	eb00 0204 	add.w	r2, r0, r4
 801038a:	d1e9      	bne.n	8010360 <__cvt+0x58>
 801038c:	7803      	ldrb	r3, [r0, #0]
 801038e:	2b30      	cmp	r3, #48	@ 0x30
 8010390:	d107      	bne.n	80103a2 <__cvt+0x9a>
 8010392:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039a:	bf1c      	itt	ne
 801039c:	f1c4 0401 	rsbne	r4, r4, #1
 80103a0:	6034      	strne	r4, [r6, #0]
 80103a2:	6833      	ldr	r3, [r6, #0]
 80103a4:	441a      	add	r2, r3
 80103a6:	e7db      	b.n	8010360 <__cvt+0x58>
 80103a8:	1c5c      	adds	r4, r3, #1
 80103aa:	9403      	str	r4, [sp, #12]
 80103ac:	7019      	strb	r1, [r3, #0]
 80103ae:	e7de      	b.n	801036e <__cvt+0x66>

080103b0 <__exponent>:
 80103b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103b2:	2900      	cmp	r1, #0
 80103b4:	bfba      	itte	lt
 80103b6:	4249      	neglt	r1, r1
 80103b8:	232d      	movlt	r3, #45	@ 0x2d
 80103ba:	232b      	movge	r3, #43	@ 0x2b
 80103bc:	2909      	cmp	r1, #9
 80103be:	7002      	strb	r2, [r0, #0]
 80103c0:	7043      	strb	r3, [r0, #1]
 80103c2:	dd29      	ble.n	8010418 <__exponent+0x68>
 80103c4:	f10d 0307 	add.w	r3, sp, #7
 80103c8:	461d      	mov	r5, r3
 80103ca:	270a      	movs	r7, #10
 80103cc:	461a      	mov	r2, r3
 80103ce:	fbb1 f6f7 	udiv	r6, r1, r7
 80103d2:	fb07 1416 	mls	r4, r7, r6, r1
 80103d6:	3430      	adds	r4, #48	@ 0x30
 80103d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80103dc:	460c      	mov	r4, r1
 80103de:	2c63      	cmp	r4, #99	@ 0x63
 80103e0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80103e4:	4631      	mov	r1, r6
 80103e6:	dcf1      	bgt.n	80103cc <__exponent+0x1c>
 80103e8:	3130      	adds	r1, #48	@ 0x30
 80103ea:	1e94      	subs	r4, r2, #2
 80103ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80103f0:	1c41      	adds	r1, r0, #1
 80103f2:	4623      	mov	r3, r4
 80103f4:	42ab      	cmp	r3, r5
 80103f6:	d30a      	bcc.n	801040e <__exponent+0x5e>
 80103f8:	f10d 0309 	add.w	r3, sp, #9
 80103fc:	1a9b      	subs	r3, r3, r2
 80103fe:	42ac      	cmp	r4, r5
 8010400:	bf88      	it	hi
 8010402:	2300      	movhi	r3, #0
 8010404:	3302      	adds	r3, #2
 8010406:	4403      	add	r3, r0
 8010408:	1a18      	subs	r0, r3, r0
 801040a:	b003      	add	sp, #12
 801040c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801040e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010412:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010416:	e7ed      	b.n	80103f4 <__exponent+0x44>
 8010418:	2330      	movs	r3, #48	@ 0x30
 801041a:	3130      	adds	r1, #48	@ 0x30
 801041c:	7083      	strb	r3, [r0, #2]
 801041e:	70c1      	strb	r1, [r0, #3]
 8010420:	1d03      	adds	r3, r0, #4
 8010422:	e7f1      	b.n	8010408 <__exponent+0x58>
 8010424:	0000      	movs	r0, r0
	...

08010428 <_printf_float>:
 8010428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042c:	b08d      	sub	sp, #52	@ 0x34
 801042e:	460c      	mov	r4, r1
 8010430:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010434:	4616      	mov	r6, r2
 8010436:	461f      	mov	r7, r3
 8010438:	4605      	mov	r5, r0
 801043a:	f000 fe1d 	bl	8011078 <_localeconv_r>
 801043e:	f8d0 b000 	ldr.w	fp, [r0]
 8010442:	4658      	mov	r0, fp
 8010444:	f7ef ffc4 	bl	80003d0 <strlen>
 8010448:	2300      	movs	r3, #0
 801044a:	930a      	str	r3, [sp, #40]	@ 0x28
 801044c:	f8d8 3000 	ldr.w	r3, [r8]
 8010450:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010454:	6822      	ldr	r2, [r4, #0]
 8010456:	9005      	str	r0, [sp, #20]
 8010458:	3307      	adds	r3, #7
 801045a:	f023 0307 	bic.w	r3, r3, #7
 801045e:	f103 0108 	add.w	r1, r3, #8
 8010462:	f8c8 1000 	str.w	r1, [r8]
 8010466:	ed93 0b00 	vldr	d0, [r3]
 801046a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80106c8 <_printf_float+0x2a0>
 801046e:	eeb0 7bc0 	vabs.f64	d7, d0
 8010472:	eeb4 7b46 	vcmp.f64	d7, d6
 8010476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801047e:	dd24      	ble.n	80104ca <_printf_float+0xa2>
 8010480:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010488:	d502      	bpl.n	8010490 <_printf_float+0x68>
 801048a:	232d      	movs	r3, #45	@ 0x2d
 801048c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010490:	498f      	ldr	r1, [pc, #572]	@ (80106d0 <_printf_float+0x2a8>)
 8010492:	4b90      	ldr	r3, [pc, #576]	@ (80106d4 <_printf_float+0x2ac>)
 8010494:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010498:	bf8c      	ite	hi
 801049a:	4688      	movhi	r8, r1
 801049c:	4698      	movls	r8, r3
 801049e:	f022 0204 	bic.w	r2, r2, #4
 80104a2:	2303      	movs	r3, #3
 80104a4:	6123      	str	r3, [r4, #16]
 80104a6:	6022      	str	r2, [r4, #0]
 80104a8:	f04f 0a00 	mov.w	sl, #0
 80104ac:	9700      	str	r7, [sp, #0]
 80104ae:	4633      	mov	r3, r6
 80104b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80104b2:	4621      	mov	r1, r4
 80104b4:	4628      	mov	r0, r5
 80104b6:	f000 f9d1 	bl	801085c <_printf_common>
 80104ba:	3001      	adds	r0, #1
 80104bc:	f040 8089 	bne.w	80105d2 <_printf_float+0x1aa>
 80104c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80104c4:	b00d      	add	sp, #52	@ 0x34
 80104c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ca:	eeb4 0b40 	vcmp.f64	d0, d0
 80104ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d2:	d709      	bvc.n	80104e8 <_printf_float+0xc0>
 80104d4:	ee10 3a90 	vmov	r3, s1
 80104d8:	2b00      	cmp	r3, #0
 80104da:	bfbc      	itt	lt
 80104dc:	232d      	movlt	r3, #45	@ 0x2d
 80104de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80104e2:	497d      	ldr	r1, [pc, #500]	@ (80106d8 <_printf_float+0x2b0>)
 80104e4:	4b7d      	ldr	r3, [pc, #500]	@ (80106dc <_printf_float+0x2b4>)
 80104e6:	e7d5      	b.n	8010494 <_printf_float+0x6c>
 80104e8:	6863      	ldr	r3, [r4, #4]
 80104ea:	1c59      	adds	r1, r3, #1
 80104ec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80104f0:	d139      	bne.n	8010566 <_printf_float+0x13e>
 80104f2:	2306      	movs	r3, #6
 80104f4:	6063      	str	r3, [r4, #4]
 80104f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80104fa:	2300      	movs	r3, #0
 80104fc:	6022      	str	r2, [r4, #0]
 80104fe:	9303      	str	r3, [sp, #12]
 8010500:	ab0a      	add	r3, sp, #40	@ 0x28
 8010502:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8010506:	ab09      	add	r3, sp, #36	@ 0x24
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	6861      	ldr	r1, [r4, #4]
 801050c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010510:	4628      	mov	r0, r5
 8010512:	f7ff fef9 	bl	8010308 <__cvt>
 8010516:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801051a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801051c:	4680      	mov	r8, r0
 801051e:	d129      	bne.n	8010574 <_printf_float+0x14c>
 8010520:	1cc8      	adds	r0, r1, #3
 8010522:	db02      	blt.n	801052a <_printf_float+0x102>
 8010524:	6863      	ldr	r3, [r4, #4]
 8010526:	4299      	cmp	r1, r3
 8010528:	dd41      	ble.n	80105ae <_printf_float+0x186>
 801052a:	f1a9 0902 	sub.w	r9, r9, #2
 801052e:	fa5f f989 	uxtb.w	r9, r9
 8010532:	3901      	subs	r1, #1
 8010534:	464a      	mov	r2, r9
 8010536:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801053a:	9109      	str	r1, [sp, #36]	@ 0x24
 801053c:	f7ff ff38 	bl	80103b0 <__exponent>
 8010540:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010542:	1813      	adds	r3, r2, r0
 8010544:	2a01      	cmp	r2, #1
 8010546:	4682      	mov	sl, r0
 8010548:	6123      	str	r3, [r4, #16]
 801054a:	dc02      	bgt.n	8010552 <_printf_float+0x12a>
 801054c:	6822      	ldr	r2, [r4, #0]
 801054e:	07d2      	lsls	r2, r2, #31
 8010550:	d501      	bpl.n	8010556 <_printf_float+0x12e>
 8010552:	3301      	adds	r3, #1
 8010554:	6123      	str	r3, [r4, #16]
 8010556:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801055a:	2b00      	cmp	r3, #0
 801055c:	d0a6      	beq.n	80104ac <_printf_float+0x84>
 801055e:	232d      	movs	r3, #45	@ 0x2d
 8010560:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010564:	e7a2      	b.n	80104ac <_printf_float+0x84>
 8010566:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801056a:	d1c4      	bne.n	80104f6 <_printf_float+0xce>
 801056c:	2b00      	cmp	r3, #0
 801056e:	d1c2      	bne.n	80104f6 <_printf_float+0xce>
 8010570:	2301      	movs	r3, #1
 8010572:	e7bf      	b.n	80104f4 <_printf_float+0xcc>
 8010574:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010578:	d9db      	bls.n	8010532 <_printf_float+0x10a>
 801057a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801057e:	d118      	bne.n	80105b2 <_printf_float+0x18a>
 8010580:	2900      	cmp	r1, #0
 8010582:	6863      	ldr	r3, [r4, #4]
 8010584:	dd0b      	ble.n	801059e <_printf_float+0x176>
 8010586:	6121      	str	r1, [r4, #16]
 8010588:	b913      	cbnz	r3, 8010590 <_printf_float+0x168>
 801058a:	6822      	ldr	r2, [r4, #0]
 801058c:	07d0      	lsls	r0, r2, #31
 801058e:	d502      	bpl.n	8010596 <_printf_float+0x16e>
 8010590:	3301      	adds	r3, #1
 8010592:	440b      	add	r3, r1
 8010594:	6123      	str	r3, [r4, #16]
 8010596:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010598:	f04f 0a00 	mov.w	sl, #0
 801059c:	e7db      	b.n	8010556 <_printf_float+0x12e>
 801059e:	b913      	cbnz	r3, 80105a6 <_printf_float+0x17e>
 80105a0:	6822      	ldr	r2, [r4, #0]
 80105a2:	07d2      	lsls	r2, r2, #31
 80105a4:	d501      	bpl.n	80105aa <_printf_float+0x182>
 80105a6:	3302      	adds	r3, #2
 80105a8:	e7f4      	b.n	8010594 <_printf_float+0x16c>
 80105aa:	2301      	movs	r3, #1
 80105ac:	e7f2      	b.n	8010594 <_printf_float+0x16c>
 80105ae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80105b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80105b4:	4299      	cmp	r1, r3
 80105b6:	db05      	blt.n	80105c4 <_printf_float+0x19c>
 80105b8:	6823      	ldr	r3, [r4, #0]
 80105ba:	6121      	str	r1, [r4, #16]
 80105bc:	07d8      	lsls	r0, r3, #31
 80105be:	d5ea      	bpl.n	8010596 <_printf_float+0x16e>
 80105c0:	1c4b      	adds	r3, r1, #1
 80105c2:	e7e7      	b.n	8010594 <_printf_float+0x16c>
 80105c4:	2900      	cmp	r1, #0
 80105c6:	bfd4      	ite	le
 80105c8:	f1c1 0202 	rsble	r2, r1, #2
 80105cc:	2201      	movgt	r2, #1
 80105ce:	4413      	add	r3, r2
 80105d0:	e7e0      	b.n	8010594 <_printf_float+0x16c>
 80105d2:	6823      	ldr	r3, [r4, #0]
 80105d4:	055a      	lsls	r2, r3, #21
 80105d6:	d407      	bmi.n	80105e8 <_printf_float+0x1c0>
 80105d8:	6923      	ldr	r3, [r4, #16]
 80105da:	4642      	mov	r2, r8
 80105dc:	4631      	mov	r1, r6
 80105de:	4628      	mov	r0, r5
 80105e0:	47b8      	blx	r7
 80105e2:	3001      	adds	r0, #1
 80105e4:	d12a      	bne.n	801063c <_printf_float+0x214>
 80105e6:	e76b      	b.n	80104c0 <_printf_float+0x98>
 80105e8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80105ec:	f240 80e0 	bls.w	80107b0 <_printf_float+0x388>
 80105f0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80105f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80105f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fc:	d133      	bne.n	8010666 <_printf_float+0x23e>
 80105fe:	4a38      	ldr	r2, [pc, #224]	@ (80106e0 <_printf_float+0x2b8>)
 8010600:	2301      	movs	r3, #1
 8010602:	4631      	mov	r1, r6
 8010604:	4628      	mov	r0, r5
 8010606:	47b8      	blx	r7
 8010608:	3001      	adds	r0, #1
 801060a:	f43f af59 	beq.w	80104c0 <_printf_float+0x98>
 801060e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010612:	4543      	cmp	r3, r8
 8010614:	db02      	blt.n	801061c <_printf_float+0x1f4>
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	07d8      	lsls	r0, r3, #31
 801061a:	d50f      	bpl.n	801063c <_printf_float+0x214>
 801061c:	9b05      	ldr	r3, [sp, #20]
 801061e:	465a      	mov	r2, fp
 8010620:	4631      	mov	r1, r6
 8010622:	4628      	mov	r0, r5
 8010624:	47b8      	blx	r7
 8010626:	3001      	adds	r0, #1
 8010628:	f43f af4a 	beq.w	80104c0 <_printf_float+0x98>
 801062c:	f04f 0900 	mov.w	r9, #0
 8010630:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010634:	f104 0a1a 	add.w	sl, r4, #26
 8010638:	45c8      	cmp	r8, r9
 801063a:	dc09      	bgt.n	8010650 <_printf_float+0x228>
 801063c:	6823      	ldr	r3, [r4, #0]
 801063e:	079b      	lsls	r3, r3, #30
 8010640:	f100 8107 	bmi.w	8010852 <_printf_float+0x42a>
 8010644:	68e0      	ldr	r0, [r4, #12]
 8010646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010648:	4298      	cmp	r0, r3
 801064a:	bfb8      	it	lt
 801064c:	4618      	movlt	r0, r3
 801064e:	e739      	b.n	80104c4 <_printf_float+0x9c>
 8010650:	2301      	movs	r3, #1
 8010652:	4652      	mov	r2, sl
 8010654:	4631      	mov	r1, r6
 8010656:	4628      	mov	r0, r5
 8010658:	47b8      	blx	r7
 801065a:	3001      	adds	r0, #1
 801065c:	f43f af30 	beq.w	80104c0 <_printf_float+0x98>
 8010660:	f109 0901 	add.w	r9, r9, #1
 8010664:	e7e8      	b.n	8010638 <_printf_float+0x210>
 8010666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010668:	2b00      	cmp	r3, #0
 801066a:	dc3b      	bgt.n	80106e4 <_printf_float+0x2bc>
 801066c:	4a1c      	ldr	r2, [pc, #112]	@ (80106e0 <_printf_float+0x2b8>)
 801066e:	2301      	movs	r3, #1
 8010670:	4631      	mov	r1, r6
 8010672:	4628      	mov	r0, r5
 8010674:	47b8      	blx	r7
 8010676:	3001      	adds	r0, #1
 8010678:	f43f af22 	beq.w	80104c0 <_printf_float+0x98>
 801067c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010680:	ea59 0303 	orrs.w	r3, r9, r3
 8010684:	d102      	bne.n	801068c <_printf_float+0x264>
 8010686:	6823      	ldr	r3, [r4, #0]
 8010688:	07d9      	lsls	r1, r3, #31
 801068a:	d5d7      	bpl.n	801063c <_printf_float+0x214>
 801068c:	9b05      	ldr	r3, [sp, #20]
 801068e:	465a      	mov	r2, fp
 8010690:	4631      	mov	r1, r6
 8010692:	4628      	mov	r0, r5
 8010694:	47b8      	blx	r7
 8010696:	3001      	adds	r0, #1
 8010698:	f43f af12 	beq.w	80104c0 <_printf_float+0x98>
 801069c:	f04f 0a00 	mov.w	sl, #0
 80106a0:	f104 0b1a 	add.w	fp, r4, #26
 80106a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106a6:	425b      	negs	r3, r3
 80106a8:	4553      	cmp	r3, sl
 80106aa:	dc01      	bgt.n	80106b0 <_printf_float+0x288>
 80106ac:	464b      	mov	r3, r9
 80106ae:	e794      	b.n	80105da <_printf_float+0x1b2>
 80106b0:	2301      	movs	r3, #1
 80106b2:	465a      	mov	r2, fp
 80106b4:	4631      	mov	r1, r6
 80106b6:	4628      	mov	r0, r5
 80106b8:	47b8      	blx	r7
 80106ba:	3001      	adds	r0, #1
 80106bc:	f43f af00 	beq.w	80104c0 <_printf_float+0x98>
 80106c0:	f10a 0a01 	add.w	sl, sl, #1
 80106c4:	e7ee      	b.n	80106a4 <_printf_float+0x27c>
 80106c6:	bf00      	nop
 80106c8:	ffffffff 	.word	0xffffffff
 80106cc:	7fefffff 	.word	0x7fefffff
 80106d0:	08014f68 	.word	0x08014f68
 80106d4:	08014f64 	.word	0x08014f64
 80106d8:	08014f70 	.word	0x08014f70
 80106dc:	08014f6c 	.word	0x08014f6c
 80106e0:	080150a3 	.word	0x080150a3
 80106e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80106e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80106ea:	4553      	cmp	r3, sl
 80106ec:	bfa8      	it	ge
 80106ee:	4653      	movge	r3, sl
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	4699      	mov	r9, r3
 80106f4:	dc37      	bgt.n	8010766 <_printf_float+0x33e>
 80106f6:	2300      	movs	r3, #0
 80106f8:	9307      	str	r3, [sp, #28]
 80106fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106fe:	f104 021a 	add.w	r2, r4, #26
 8010702:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010704:	9907      	ldr	r1, [sp, #28]
 8010706:	9306      	str	r3, [sp, #24]
 8010708:	eba3 0309 	sub.w	r3, r3, r9
 801070c:	428b      	cmp	r3, r1
 801070e:	dc31      	bgt.n	8010774 <_printf_float+0x34c>
 8010710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010712:	459a      	cmp	sl, r3
 8010714:	dc3b      	bgt.n	801078e <_printf_float+0x366>
 8010716:	6823      	ldr	r3, [r4, #0]
 8010718:	07da      	lsls	r2, r3, #31
 801071a:	d438      	bmi.n	801078e <_printf_float+0x366>
 801071c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801071e:	ebaa 0903 	sub.w	r9, sl, r3
 8010722:	9b06      	ldr	r3, [sp, #24]
 8010724:	ebaa 0303 	sub.w	r3, sl, r3
 8010728:	4599      	cmp	r9, r3
 801072a:	bfa8      	it	ge
 801072c:	4699      	movge	r9, r3
 801072e:	f1b9 0f00 	cmp.w	r9, #0
 8010732:	dc34      	bgt.n	801079e <_printf_float+0x376>
 8010734:	f04f 0800 	mov.w	r8, #0
 8010738:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801073c:	f104 0b1a 	add.w	fp, r4, #26
 8010740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010742:	ebaa 0303 	sub.w	r3, sl, r3
 8010746:	eba3 0309 	sub.w	r3, r3, r9
 801074a:	4543      	cmp	r3, r8
 801074c:	f77f af76 	ble.w	801063c <_printf_float+0x214>
 8010750:	2301      	movs	r3, #1
 8010752:	465a      	mov	r2, fp
 8010754:	4631      	mov	r1, r6
 8010756:	4628      	mov	r0, r5
 8010758:	47b8      	blx	r7
 801075a:	3001      	adds	r0, #1
 801075c:	f43f aeb0 	beq.w	80104c0 <_printf_float+0x98>
 8010760:	f108 0801 	add.w	r8, r8, #1
 8010764:	e7ec      	b.n	8010740 <_printf_float+0x318>
 8010766:	4642      	mov	r2, r8
 8010768:	4631      	mov	r1, r6
 801076a:	4628      	mov	r0, r5
 801076c:	47b8      	blx	r7
 801076e:	3001      	adds	r0, #1
 8010770:	d1c1      	bne.n	80106f6 <_printf_float+0x2ce>
 8010772:	e6a5      	b.n	80104c0 <_printf_float+0x98>
 8010774:	2301      	movs	r3, #1
 8010776:	4631      	mov	r1, r6
 8010778:	4628      	mov	r0, r5
 801077a:	9206      	str	r2, [sp, #24]
 801077c:	47b8      	blx	r7
 801077e:	3001      	adds	r0, #1
 8010780:	f43f ae9e 	beq.w	80104c0 <_printf_float+0x98>
 8010784:	9b07      	ldr	r3, [sp, #28]
 8010786:	9a06      	ldr	r2, [sp, #24]
 8010788:	3301      	adds	r3, #1
 801078a:	9307      	str	r3, [sp, #28]
 801078c:	e7b9      	b.n	8010702 <_printf_float+0x2da>
 801078e:	9b05      	ldr	r3, [sp, #20]
 8010790:	465a      	mov	r2, fp
 8010792:	4631      	mov	r1, r6
 8010794:	4628      	mov	r0, r5
 8010796:	47b8      	blx	r7
 8010798:	3001      	adds	r0, #1
 801079a:	d1bf      	bne.n	801071c <_printf_float+0x2f4>
 801079c:	e690      	b.n	80104c0 <_printf_float+0x98>
 801079e:	9a06      	ldr	r2, [sp, #24]
 80107a0:	464b      	mov	r3, r9
 80107a2:	4442      	add	r2, r8
 80107a4:	4631      	mov	r1, r6
 80107a6:	4628      	mov	r0, r5
 80107a8:	47b8      	blx	r7
 80107aa:	3001      	adds	r0, #1
 80107ac:	d1c2      	bne.n	8010734 <_printf_float+0x30c>
 80107ae:	e687      	b.n	80104c0 <_printf_float+0x98>
 80107b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80107b4:	f1b9 0f01 	cmp.w	r9, #1
 80107b8:	dc01      	bgt.n	80107be <_printf_float+0x396>
 80107ba:	07db      	lsls	r3, r3, #31
 80107bc:	d536      	bpl.n	801082c <_printf_float+0x404>
 80107be:	2301      	movs	r3, #1
 80107c0:	4642      	mov	r2, r8
 80107c2:	4631      	mov	r1, r6
 80107c4:	4628      	mov	r0, r5
 80107c6:	47b8      	blx	r7
 80107c8:	3001      	adds	r0, #1
 80107ca:	f43f ae79 	beq.w	80104c0 <_printf_float+0x98>
 80107ce:	9b05      	ldr	r3, [sp, #20]
 80107d0:	465a      	mov	r2, fp
 80107d2:	4631      	mov	r1, r6
 80107d4:	4628      	mov	r0, r5
 80107d6:	47b8      	blx	r7
 80107d8:	3001      	adds	r0, #1
 80107da:	f43f ae71 	beq.w	80104c0 <_printf_float+0x98>
 80107de:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80107e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ea:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80107ee:	d018      	beq.n	8010822 <_printf_float+0x3fa>
 80107f0:	464b      	mov	r3, r9
 80107f2:	f108 0201 	add.w	r2, r8, #1
 80107f6:	4631      	mov	r1, r6
 80107f8:	4628      	mov	r0, r5
 80107fa:	47b8      	blx	r7
 80107fc:	3001      	adds	r0, #1
 80107fe:	d10c      	bne.n	801081a <_printf_float+0x3f2>
 8010800:	e65e      	b.n	80104c0 <_printf_float+0x98>
 8010802:	2301      	movs	r3, #1
 8010804:	465a      	mov	r2, fp
 8010806:	4631      	mov	r1, r6
 8010808:	4628      	mov	r0, r5
 801080a:	47b8      	blx	r7
 801080c:	3001      	adds	r0, #1
 801080e:	f43f ae57 	beq.w	80104c0 <_printf_float+0x98>
 8010812:	f108 0801 	add.w	r8, r8, #1
 8010816:	45c8      	cmp	r8, r9
 8010818:	dbf3      	blt.n	8010802 <_printf_float+0x3da>
 801081a:	4653      	mov	r3, sl
 801081c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010820:	e6dc      	b.n	80105dc <_printf_float+0x1b4>
 8010822:	f04f 0800 	mov.w	r8, #0
 8010826:	f104 0b1a 	add.w	fp, r4, #26
 801082a:	e7f4      	b.n	8010816 <_printf_float+0x3ee>
 801082c:	2301      	movs	r3, #1
 801082e:	4642      	mov	r2, r8
 8010830:	e7e1      	b.n	80107f6 <_printf_float+0x3ce>
 8010832:	2301      	movs	r3, #1
 8010834:	464a      	mov	r2, r9
 8010836:	4631      	mov	r1, r6
 8010838:	4628      	mov	r0, r5
 801083a:	47b8      	blx	r7
 801083c:	3001      	adds	r0, #1
 801083e:	f43f ae3f 	beq.w	80104c0 <_printf_float+0x98>
 8010842:	f108 0801 	add.w	r8, r8, #1
 8010846:	68e3      	ldr	r3, [r4, #12]
 8010848:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801084a:	1a5b      	subs	r3, r3, r1
 801084c:	4543      	cmp	r3, r8
 801084e:	dcf0      	bgt.n	8010832 <_printf_float+0x40a>
 8010850:	e6f8      	b.n	8010644 <_printf_float+0x21c>
 8010852:	f04f 0800 	mov.w	r8, #0
 8010856:	f104 0919 	add.w	r9, r4, #25
 801085a:	e7f4      	b.n	8010846 <_printf_float+0x41e>

0801085c <_printf_common>:
 801085c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010860:	4616      	mov	r6, r2
 8010862:	4698      	mov	r8, r3
 8010864:	688a      	ldr	r2, [r1, #8]
 8010866:	690b      	ldr	r3, [r1, #16]
 8010868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801086c:	4293      	cmp	r3, r2
 801086e:	bfb8      	it	lt
 8010870:	4613      	movlt	r3, r2
 8010872:	6033      	str	r3, [r6, #0]
 8010874:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010878:	4607      	mov	r7, r0
 801087a:	460c      	mov	r4, r1
 801087c:	b10a      	cbz	r2, 8010882 <_printf_common+0x26>
 801087e:	3301      	adds	r3, #1
 8010880:	6033      	str	r3, [r6, #0]
 8010882:	6823      	ldr	r3, [r4, #0]
 8010884:	0699      	lsls	r1, r3, #26
 8010886:	bf42      	ittt	mi
 8010888:	6833      	ldrmi	r3, [r6, #0]
 801088a:	3302      	addmi	r3, #2
 801088c:	6033      	strmi	r3, [r6, #0]
 801088e:	6825      	ldr	r5, [r4, #0]
 8010890:	f015 0506 	ands.w	r5, r5, #6
 8010894:	d106      	bne.n	80108a4 <_printf_common+0x48>
 8010896:	f104 0a19 	add.w	sl, r4, #25
 801089a:	68e3      	ldr	r3, [r4, #12]
 801089c:	6832      	ldr	r2, [r6, #0]
 801089e:	1a9b      	subs	r3, r3, r2
 80108a0:	42ab      	cmp	r3, r5
 80108a2:	dc26      	bgt.n	80108f2 <_printf_common+0x96>
 80108a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80108a8:	6822      	ldr	r2, [r4, #0]
 80108aa:	3b00      	subs	r3, #0
 80108ac:	bf18      	it	ne
 80108ae:	2301      	movne	r3, #1
 80108b0:	0692      	lsls	r2, r2, #26
 80108b2:	d42b      	bmi.n	801090c <_printf_common+0xb0>
 80108b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80108b8:	4641      	mov	r1, r8
 80108ba:	4638      	mov	r0, r7
 80108bc:	47c8      	blx	r9
 80108be:	3001      	adds	r0, #1
 80108c0:	d01e      	beq.n	8010900 <_printf_common+0xa4>
 80108c2:	6823      	ldr	r3, [r4, #0]
 80108c4:	6922      	ldr	r2, [r4, #16]
 80108c6:	f003 0306 	and.w	r3, r3, #6
 80108ca:	2b04      	cmp	r3, #4
 80108cc:	bf02      	ittt	eq
 80108ce:	68e5      	ldreq	r5, [r4, #12]
 80108d0:	6833      	ldreq	r3, [r6, #0]
 80108d2:	1aed      	subeq	r5, r5, r3
 80108d4:	68a3      	ldr	r3, [r4, #8]
 80108d6:	bf0c      	ite	eq
 80108d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108dc:	2500      	movne	r5, #0
 80108de:	4293      	cmp	r3, r2
 80108e0:	bfc4      	itt	gt
 80108e2:	1a9b      	subgt	r3, r3, r2
 80108e4:	18ed      	addgt	r5, r5, r3
 80108e6:	2600      	movs	r6, #0
 80108e8:	341a      	adds	r4, #26
 80108ea:	42b5      	cmp	r5, r6
 80108ec:	d11a      	bne.n	8010924 <_printf_common+0xc8>
 80108ee:	2000      	movs	r0, #0
 80108f0:	e008      	b.n	8010904 <_printf_common+0xa8>
 80108f2:	2301      	movs	r3, #1
 80108f4:	4652      	mov	r2, sl
 80108f6:	4641      	mov	r1, r8
 80108f8:	4638      	mov	r0, r7
 80108fa:	47c8      	blx	r9
 80108fc:	3001      	adds	r0, #1
 80108fe:	d103      	bne.n	8010908 <_printf_common+0xac>
 8010900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010908:	3501      	adds	r5, #1
 801090a:	e7c6      	b.n	801089a <_printf_common+0x3e>
 801090c:	18e1      	adds	r1, r4, r3
 801090e:	1c5a      	adds	r2, r3, #1
 8010910:	2030      	movs	r0, #48	@ 0x30
 8010912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010916:	4422      	add	r2, r4
 8010918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801091c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010920:	3302      	adds	r3, #2
 8010922:	e7c7      	b.n	80108b4 <_printf_common+0x58>
 8010924:	2301      	movs	r3, #1
 8010926:	4622      	mov	r2, r4
 8010928:	4641      	mov	r1, r8
 801092a:	4638      	mov	r0, r7
 801092c:	47c8      	blx	r9
 801092e:	3001      	adds	r0, #1
 8010930:	d0e6      	beq.n	8010900 <_printf_common+0xa4>
 8010932:	3601      	adds	r6, #1
 8010934:	e7d9      	b.n	80108ea <_printf_common+0x8e>
	...

08010938 <_printf_i>:
 8010938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801093c:	7e0f      	ldrb	r7, [r1, #24]
 801093e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010940:	2f78      	cmp	r7, #120	@ 0x78
 8010942:	4691      	mov	r9, r2
 8010944:	4680      	mov	r8, r0
 8010946:	460c      	mov	r4, r1
 8010948:	469a      	mov	sl, r3
 801094a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801094e:	d807      	bhi.n	8010960 <_printf_i+0x28>
 8010950:	2f62      	cmp	r7, #98	@ 0x62
 8010952:	d80a      	bhi.n	801096a <_printf_i+0x32>
 8010954:	2f00      	cmp	r7, #0
 8010956:	f000 80d1 	beq.w	8010afc <_printf_i+0x1c4>
 801095a:	2f58      	cmp	r7, #88	@ 0x58
 801095c:	f000 80b8 	beq.w	8010ad0 <_printf_i+0x198>
 8010960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010968:	e03a      	b.n	80109e0 <_printf_i+0xa8>
 801096a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801096e:	2b15      	cmp	r3, #21
 8010970:	d8f6      	bhi.n	8010960 <_printf_i+0x28>
 8010972:	a101      	add	r1, pc, #4	@ (adr r1, 8010978 <_printf_i+0x40>)
 8010974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010978:	080109d1 	.word	0x080109d1
 801097c:	080109e5 	.word	0x080109e5
 8010980:	08010961 	.word	0x08010961
 8010984:	08010961 	.word	0x08010961
 8010988:	08010961 	.word	0x08010961
 801098c:	08010961 	.word	0x08010961
 8010990:	080109e5 	.word	0x080109e5
 8010994:	08010961 	.word	0x08010961
 8010998:	08010961 	.word	0x08010961
 801099c:	08010961 	.word	0x08010961
 80109a0:	08010961 	.word	0x08010961
 80109a4:	08010ae3 	.word	0x08010ae3
 80109a8:	08010a0f 	.word	0x08010a0f
 80109ac:	08010a9d 	.word	0x08010a9d
 80109b0:	08010961 	.word	0x08010961
 80109b4:	08010961 	.word	0x08010961
 80109b8:	08010b05 	.word	0x08010b05
 80109bc:	08010961 	.word	0x08010961
 80109c0:	08010a0f 	.word	0x08010a0f
 80109c4:	08010961 	.word	0x08010961
 80109c8:	08010961 	.word	0x08010961
 80109cc:	08010aa5 	.word	0x08010aa5
 80109d0:	6833      	ldr	r3, [r6, #0]
 80109d2:	1d1a      	adds	r2, r3, #4
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	6032      	str	r2, [r6, #0]
 80109d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80109e0:	2301      	movs	r3, #1
 80109e2:	e09c      	b.n	8010b1e <_printf_i+0x1e6>
 80109e4:	6833      	ldr	r3, [r6, #0]
 80109e6:	6820      	ldr	r0, [r4, #0]
 80109e8:	1d19      	adds	r1, r3, #4
 80109ea:	6031      	str	r1, [r6, #0]
 80109ec:	0606      	lsls	r6, r0, #24
 80109ee:	d501      	bpl.n	80109f4 <_printf_i+0xbc>
 80109f0:	681d      	ldr	r5, [r3, #0]
 80109f2:	e003      	b.n	80109fc <_printf_i+0xc4>
 80109f4:	0645      	lsls	r5, r0, #25
 80109f6:	d5fb      	bpl.n	80109f0 <_printf_i+0xb8>
 80109f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80109fc:	2d00      	cmp	r5, #0
 80109fe:	da03      	bge.n	8010a08 <_printf_i+0xd0>
 8010a00:	232d      	movs	r3, #45	@ 0x2d
 8010a02:	426d      	negs	r5, r5
 8010a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a08:	4858      	ldr	r0, [pc, #352]	@ (8010b6c <_printf_i+0x234>)
 8010a0a:	230a      	movs	r3, #10
 8010a0c:	e011      	b.n	8010a32 <_printf_i+0xfa>
 8010a0e:	6821      	ldr	r1, [r4, #0]
 8010a10:	6833      	ldr	r3, [r6, #0]
 8010a12:	0608      	lsls	r0, r1, #24
 8010a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a18:	d402      	bmi.n	8010a20 <_printf_i+0xe8>
 8010a1a:	0649      	lsls	r1, r1, #25
 8010a1c:	bf48      	it	mi
 8010a1e:	b2ad      	uxthmi	r5, r5
 8010a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8010a22:	4852      	ldr	r0, [pc, #328]	@ (8010b6c <_printf_i+0x234>)
 8010a24:	6033      	str	r3, [r6, #0]
 8010a26:	bf14      	ite	ne
 8010a28:	230a      	movne	r3, #10
 8010a2a:	2308      	moveq	r3, #8
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010a32:	6866      	ldr	r6, [r4, #4]
 8010a34:	60a6      	str	r6, [r4, #8]
 8010a36:	2e00      	cmp	r6, #0
 8010a38:	db05      	blt.n	8010a46 <_printf_i+0x10e>
 8010a3a:	6821      	ldr	r1, [r4, #0]
 8010a3c:	432e      	orrs	r6, r5
 8010a3e:	f021 0104 	bic.w	r1, r1, #4
 8010a42:	6021      	str	r1, [r4, #0]
 8010a44:	d04b      	beq.n	8010ade <_printf_i+0x1a6>
 8010a46:	4616      	mov	r6, r2
 8010a48:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a4c:	fb03 5711 	mls	r7, r3, r1, r5
 8010a50:	5dc7      	ldrb	r7, [r0, r7]
 8010a52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010a56:	462f      	mov	r7, r5
 8010a58:	42bb      	cmp	r3, r7
 8010a5a:	460d      	mov	r5, r1
 8010a5c:	d9f4      	bls.n	8010a48 <_printf_i+0x110>
 8010a5e:	2b08      	cmp	r3, #8
 8010a60:	d10b      	bne.n	8010a7a <_printf_i+0x142>
 8010a62:	6823      	ldr	r3, [r4, #0]
 8010a64:	07df      	lsls	r7, r3, #31
 8010a66:	d508      	bpl.n	8010a7a <_printf_i+0x142>
 8010a68:	6923      	ldr	r3, [r4, #16]
 8010a6a:	6861      	ldr	r1, [r4, #4]
 8010a6c:	4299      	cmp	r1, r3
 8010a6e:	bfde      	ittt	le
 8010a70:	2330      	movle	r3, #48	@ 0x30
 8010a72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010a76:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010a7a:	1b92      	subs	r2, r2, r6
 8010a7c:	6122      	str	r2, [r4, #16]
 8010a7e:	f8cd a000 	str.w	sl, [sp]
 8010a82:	464b      	mov	r3, r9
 8010a84:	aa03      	add	r2, sp, #12
 8010a86:	4621      	mov	r1, r4
 8010a88:	4640      	mov	r0, r8
 8010a8a:	f7ff fee7 	bl	801085c <_printf_common>
 8010a8e:	3001      	adds	r0, #1
 8010a90:	d14a      	bne.n	8010b28 <_printf_i+0x1f0>
 8010a92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010a96:	b004      	add	sp, #16
 8010a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a9c:	6823      	ldr	r3, [r4, #0]
 8010a9e:	f043 0320 	orr.w	r3, r3, #32
 8010aa2:	6023      	str	r3, [r4, #0]
 8010aa4:	4832      	ldr	r0, [pc, #200]	@ (8010b70 <_printf_i+0x238>)
 8010aa6:	2778      	movs	r7, #120	@ 0x78
 8010aa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010aac:	6823      	ldr	r3, [r4, #0]
 8010aae:	6831      	ldr	r1, [r6, #0]
 8010ab0:	061f      	lsls	r7, r3, #24
 8010ab2:	f851 5b04 	ldr.w	r5, [r1], #4
 8010ab6:	d402      	bmi.n	8010abe <_printf_i+0x186>
 8010ab8:	065f      	lsls	r7, r3, #25
 8010aba:	bf48      	it	mi
 8010abc:	b2ad      	uxthmi	r5, r5
 8010abe:	6031      	str	r1, [r6, #0]
 8010ac0:	07d9      	lsls	r1, r3, #31
 8010ac2:	bf44      	itt	mi
 8010ac4:	f043 0320 	orrmi.w	r3, r3, #32
 8010ac8:	6023      	strmi	r3, [r4, #0]
 8010aca:	b11d      	cbz	r5, 8010ad4 <_printf_i+0x19c>
 8010acc:	2310      	movs	r3, #16
 8010ace:	e7ad      	b.n	8010a2c <_printf_i+0xf4>
 8010ad0:	4826      	ldr	r0, [pc, #152]	@ (8010b6c <_printf_i+0x234>)
 8010ad2:	e7e9      	b.n	8010aa8 <_printf_i+0x170>
 8010ad4:	6823      	ldr	r3, [r4, #0]
 8010ad6:	f023 0320 	bic.w	r3, r3, #32
 8010ada:	6023      	str	r3, [r4, #0]
 8010adc:	e7f6      	b.n	8010acc <_printf_i+0x194>
 8010ade:	4616      	mov	r6, r2
 8010ae0:	e7bd      	b.n	8010a5e <_printf_i+0x126>
 8010ae2:	6833      	ldr	r3, [r6, #0]
 8010ae4:	6825      	ldr	r5, [r4, #0]
 8010ae6:	6961      	ldr	r1, [r4, #20]
 8010ae8:	1d18      	adds	r0, r3, #4
 8010aea:	6030      	str	r0, [r6, #0]
 8010aec:	062e      	lsls	r6, r5, #24
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	d501      	bpl.n	8010af6 <_printf_i+0x1be>
 8010af2:	6019      	str	r1, [r3, #0]
 8010af4:	e002      	b.n	8010afc <_printf_i+0x1c4>
 8010af6:	0668      	lsls	r0, r5, #25
 8010af8:	d5fb      	bpl.n	8010af2 <_printf_i+0x1ba>
 8010afa:	8019      	strh	r1, [r3, #0]
 8010afc:	2300      	movs	r3, #0
 8010afe:	6123      	str	r3, [r4, #16]
 8010b00:	4616      	mov	r6, r2
 8010b02:	e7bc      	b.n	8010a7e <_printf_i+0x146>
 8010b04:	6833      	ldr	r3, [r6, #0]
 8010b06:	1d1a      	adds	r2, r3, #4
 8010b08:	6032      	str	r2, [r6, #0]
 8010b0a:	681e      	ldr	r6, [r3, #0]
 8010b0c:	6862      	ldr	r2, [r4, #4]
 8010b0e:	2100      	movs	r1, #0
 8010b10:	4630      	mov	r0, r6
 8010b12:	f7ef fc0d 	bl	8000330 <memchr>
 8010b16:	b108      	cbz	r0, 8010b1c <_printf_i+0x1e4>
 8010b18:	1b80      	subs	r0, r0, r6
 8010b1a:	6060      	str	r0, [r4, #4]
 8010b1c:	6863      	ldr	r3, [r4, #4]
 8010b1e:	6123      	str	r3, [r4, #16]
 8010b20:	2300      	movs	r3, #0
 8010b22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b26:	e7aa      	b.n	8010a7e <_printf_i+0x146>
 8010b28:	6923      	ldr	r3, [r4, #16]
 8010b2a:	4632      	mov	r2, r6
 8010b2c:	4649      	mov	r1, r9
 8010b2e:	4640      	mov	r0, r8
 8010b30:	47d0      	blx	sl
 8010b32:	3001      	adds	r0, #1
 8010b34:	d0ad      	beq.n	8010a92 <_printf_i+0x15a>
 8010b36:	6823      	ldr	r3, [r4, #0]
 8010b38:	079b      	lsls	r3, r3, #30
 8010b3a:	d413      	bmi.n	8010b64 <_printf_i+0x22c>
 8010b3c:	68e0      	ldr	r0, [r4, #12]
 8010b3e:	9b03      	ldr	r3, [sp, #12]
 8010b40:	4298      	cmp	r0, r3
 8010b42:	bfb8      	it	lt
 8010b44:	4618      	movlt	r0, r3
 8010b46:	e7a6      	b.n	8010a96 <_printf_i+0x15e>
 8010b48:	2301      	movs	r3, #1
 8010b4a:	4632      	mov	r2, r6
 8010b4c:	4649      	mov	r1, r9
 8010b4e:	4640      	mov	r0, r8
 8010b50:	47d0      	blx	sl
 8010b52:	3001      	adds	r0, #1
 8010b54:	d09d      	beq.n	8010a92 <_printf_i+0x15a>
 8010b56:	3501      	adds	r5, #1
 8010b58:	68e3      	ldr	r3, [r4, #12]
 8010b5a:	9903      	ldr	r1, [sp, #12]
 8010b5c:	1a5b      	subs	r3, r3, r1
 8010b5e:	42ab      	cmp	r3, r5
 8010b60:	dcf2      	bgt.n	8010b48 <_printf_i+0x210>
 8010b62:	e7eb      	b.n	8010b3c <_printf_i+0x204>
 8010b64:	2500      	movs	r5, #0
 8010b66:	f104 0619 	add.w	r6, r4, #25
 8010b6a:	e7f5      	b.n	8010b58 <_printf_i+0x220>
 8010b6c:	08014f74 	.word	0x08014f74
 8010b70:	08014f85 	.word	0x08014f85

08010b74 <std>:
 8010b74:	2300      	movs	r3, #0
 8010b76:	b510      	push	{r4, lr}
 8010b78:	4604      	mov	r4, r0
 8010b7a:	e9c0 3300 	strd	r3, r3, [r0]
 8010b7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b82:	6083      	str	r3, [r0, #8]
 8010b84:	8181      	strh	r1, [r0, #12]
 8010b86:	6643      	str	r3, [r0, #100]	@ 0x64
 8010b88:	81c2      	strh	r2, [r0, #14]
 8010b8a:	6183      	str	r3, [r0, #24]
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	2208      	movs	r2, #8
 8010b90:	305c      	adds	r0, #92	@ 0x5c
 8010b92:	f000 fa49 	bl	8011028 <memset>
 8010b96:	4b0d      	ldr	r3, [pc, #52]	@ (8010bcc <std+0x58>)
 8010b98:	6263      	str	r3, [r4, #36]	@ 0x24
 8010b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd0 <std+0x5c>)
 8010b9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd4 <std+0x60>)
 8010ba0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8010bd8 <std+0x64>)
 8010ba4:	6323      	str	r3, [r4, #48]	@ 0x30
 8010ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8010bdc <std+0x68>)
 8010ba8:	6224      	str	r4, [r4, #32]
 8010baa:	429c      	cmp	r4, r3
 8010bac:	d006      	beq.n	8010bbc <std+0x48>
 8010bae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010bb2:	4294      	cmp	r4, r2
 8010bb4:	d002      	beq.n	8010bbc <std+0x48>
 8010bb6:	33d0      	adds	r3, #208	@ 0xd0
 8010bb8:	429c      	cmp	r4, r3
 8010bba:	d105      	bne.n	8010bc8 <std+0x54>
 8010bbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bc4:	f000 bacc 	b.w	8011160 <__retarget_lock_init_recursive>
 8010bc8:	bd10      	pop	{r4, pc}
 8010bca:	bf00      	nop
 8010bcc:	08010e41 	.word	0x08010e41
 8010bd0:	08010e67 	.word	0x08010e67
 8010bd4:	08010e9f 	.word	0x08010e9f
 8010bd8:	08010ec3 	.word	0x08010ec3
 8010bdc:	24000ab8 	.word	0x24000ab8

08010be0 <stdio_exit_handler>:
 8010be0:	4a02      	ldr	r2, [pc, #8]	@ (8010bec <stdio_exit_handler+0xc>)
 8010be2:	4903      	ldr	r1, [pc, #12]	@ (8010bf0 <stdio_exit_handler+0x10>)
 8010be4:	4803      	ldr	r0, [pc, #12]	@ (8010bf4 <stdio_exit_handler+0x14>)
 8010be6:	f000 b869 	b.w	8010cbc <_fwalk_sglue>
 8010bea:	bf00      	nop
 8010bec:	2400001c 	.word	0x2400001c
 8010bf0:	08013011 	.word	0x08013011
 8010bf4:	2400002c 	.word	0x2400002c

08010bf8 <cleanup_stdio>:
 8010bf8:	6841      	ldr	r1, [r0, #4]
 8010bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8010c2c <cleanup_stdio+0x34>)
 8010bfc:	4299      	cmp	r1, r3
 8010bfe:	b510      	push	{r4, lr}
 8010c00:	4604      	mov	r4, r0
 8010c02:	d001      	beq.n	8010c08 <cleanup_stdio+0x10>
 8010c04:	f002 fa04 	bl	8013010 <_fflush_r>
 8010c08:	68a1      	ldr	r1, [r4, #8]
 8010c0a:	4b09      	ldr	r3, [pc, #36]	@ (8010c30 <cleanup_stdio+0x38>)
 8010c0c:	4299      	cmp	r1, r3
 8010c0e:	d002      	beq.n	8010c16 <cleanup_stdio+0x1e>
 8010c10:	4620      	mov	r0, r4
 8010c12:	f002 f9fd 	bl	8013010 <_fflush_r>
 8010c16:	68e1      	ldr	r1, [r4, #12]
 8010c18:	4b06      	ldr	r3, [pc, #24]	@ (8010c34 <cleanup_stdio+0x3c>)
 8010c1a:	4299      	cmp	r1, r3
 8010c1c:	d004      	beq.n	8010c28 <cleanup_stdio+0x30>
 8010c1e:	4620      	mov	r0, r4
 8010c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c24:	f002 b9f4 	b.w	8013010 <_fflush_r>
 8010c28:	bd10      	pop	{r4, pc}
 8010c2a:	bf00      	nop
 8010c2c:	24000ab8 	.word	0x24000ab8
 8010c30:	24000b20 	.word	0x24000b20
 8010c34:	24000b88 	.word	0x24000b88

08010c38 <global_stdio_init.part.0>:
 8010c38:	b510      	push	{r4, lr}
 8010c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8010c68 <global_stdio_init.part.0+0x30>)
 8010c3c:	4c0b      	ldr	r4, [pc, #44]	@ (8010c6c <global_stdio_init.part.0+0x34>)
 8010c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8010c70 <global_stdio_init.part.0+0x38>)
 8010c40:	601a      	str	r2, [r3, #0]
 8010c42:	4620      	mov	r0, r4
 8010c44:	2200      	movs	r2, #0
 8010c46:	2104      	movs	r1, #4
 8010c48:	f7ff ff94 	bl	8010b74 <std>
 8010c4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010c50:	2201      	movs	r2, #1
 8010c52:	2109      	movs	r1, #9
 8010c54:	f7ff ff8e 	bl	8010b74 <std>
 8010c58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010c5c:	2202      	movs	r2, #2
 8010c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c62:	2112      	movs	r1, #18
 8010c64:	f7ff bf86 	b.w	8010b74 <std>
 8010c68:	24000bf0 	.word	0x24000bf0
 8010c6c:	24000ab8 	.word	0x24000ab8
 8010c70:	08010be1 	.word	0x08010be1

08010c74 <__sfp_lock_acquire>:
 8010c74:	4801      	ldr	r0, [pc, #4]	@ (8010c7c <__sfp_lock_acquire+0x8>)
 8010c76:	f000 ba74 	b.w	8011162 <__retarget_lock_acquire_recursive>
 8010c7a:	bf00      	nop
 8010c7c:	24000bf9 	.word	0x24000bf9

08010c80 <__sfp_lock_release>:
 8010c80:	4801      	ldr	r0, [pc, #4]	@ (8010c88 <__sfp_lock_release+0x8>)
 8010c82:	f000 ba6f 	b.w	8011164 <__retarget_lock_release_recursive>
 8010c86:	bf00      	nop
 8010c88:	24000bf9 	.word	0x24000bf9

08010c8c <__sinit>:
 8010c8c:	b510      	push	{r4, lr}
 8010c8e:	4604      	mov	r4, r0
 8010c90:	f7ff fff0 	bl	8010c74 <__sfp_lock_acquire>
 8010c94:	6a23      	ldr	r3, [r4, #32]
 8010c96:	b11b      	cbz	r3, 8010ca0 <__sinit+0x14>
 8010c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c9c:	f7ff bff0 	b.w	8010c80 <__sfp_lock_release>
 8010ca0:	4b04      	ldr	r3, [pc, #16]	@ (8010cb4 <__sinit+0x28>)
 8010ca2:	6223      	str	r3, [r4, #32]
 8010ca4:	4b04      	ldr	r3, [pc, #16]	@ (8010cb8 <__sinit+0x2c>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d1f5      	bne.n	8010c98 <__sinit+0xc>
 8010cac:	f7ff ffc4 	bl	8010c38 <global_stdio_init.part.0>
 8010cb0:	e7f2      	b.n	8010c98 <__sinit+0xc>
 8010cb2:	bf00      	nop
 8010cb4:	08010bf9 	.word	0x08010bf9
 8010cb8:	24000bf0 	.word	0x24000bf0

08010cbc <_fwalk_sglue>:
 8010cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cc0:	4607      	mov	r7, r0
 8010cc2:	4688      	mov	r8, r1
 8010cc4:	4614      	mov	r4, r2
 8010cc6:	2600      	movs	r6, #0
 8010cc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ccc:	f1b9 0901 	subs.w	r9, r9, #1
 8010cd0:	d505      	bpl.n	8010cde <_fwalk_sglue+0x22>
 8010cd2:	6824      	ldr	r4, [r4, #0]
 8010cd4:	2c00      	cmp	r4, #0
 8010cd6:	d1f7      	bne.n	8010cc8 <_fwalk_sglue+0xc>
 8010cd8:	4630      	mov	r0, r6
 8010cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cde:	89ab      	ldrh	r3, [r5, #12]
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	d907      	bls.n	8010cf4 <_fwalk_sglue+0x38>
 8010ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	d003      	beq.n	8010cf4 <_fwalk_sglue+0x38>
 8010cec:	4629      	mov	r1, r5
 8010cee:	4638      	mov	r0, r7
 8010cf0:	47c0      	blx	r8
 8010cf2:	4306      	orrs	r6, r0
 8010cf4:	3568      	adds	r5, #104	@ 0x68
 8010cf6:	e7e9      	b.n	8010ccc <_fwalk_sglue+0x10>

08010cf8 <iprintf>:
 8010cf8:	b40f      	push	{r0, r1, r2, r3}
 8010cfa:	b507      	push	{r0, r1, r2, lr}
 8010cfc:	4906      	ldr	r1, [pc, #24]	@ (8010d18 <iprintf+0x20>)
 8010cfe:	ab04      	add	r3, sp, #16
 8010d00:	6808      	ldr	r0, [r1, #0]
 8010d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8010d06:	6881      	ldr	r1, [r0, #8]
 8010d08:	9301      	str	r3, [sp, #4]
 8010d0a:	f001 fe97 	bl	8012a3c <_vfiprintf_r>
 8010d0e:	b003      	add	sp, #12
 8010d10:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d14:	b004      	add	sp, #16
 8010d16:	4770      	bx	lr
 8010d18:	24000028 	.word	0x24000028

08010d1c <putchar>:
 8010d1c:	4b02      	ldr	r3, [pc, #8]	@ (8010d28 <putchar+0xc>)
 8010d1e:	4601      	mov	r1, r0
 8010d20:	6818      	ldr	r0, [r3, #0]
 8010d22:	6882      	ldr	r2, [r0, #8]
 8010d24:	f002 b9fe 	b.w	8013124 <_putc_r>
 8010d28:	24000028 	.word	0x24000028

08010d2c <_puts_r>:
 8010d2c:	6a03      	ldr	r3, [r0, #32]
 8010d2e:	b570      	push	{r4, r5, r6, lr}
 8010d30:	6884      	ldr	r4, [r0, #8]
 8010d32:	4605      	mov	r5, r0
 8010d34:	460e      	mov	r6, r1
 8010d36:	b90b      	cbnz	r3, 8010d3c <_puts_r+0x10>
 8010d38:	f7ff ffa8 	bl	8010c8c <__sinit>
 8010d3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d3e:	07db      	lsls	r3, r3, #31
 8010d40:	d405      	bmi.n	8010d4e <_puts_r+0x22>
 8010d42:	89a3      	ldrh	r3, [r4, #12]
 8010d44:	0598      	lsls	r0, r3, #22
 8010d46:	d402      	bmi.n	8010d4e <_puts_r+0x22>
 8010d48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d4a:	f000 fa0a 	bl	8011162 <__retarget_lock_acquire_recursive>
 8010d4e:	89a3      	ldrh	r3, [r4, #12]
 8010d50:	0719      	lsls	r1, r3, #28
 8010d52:	d502      	bpl.n	8010d5a <_puts_r+0x2e>
 8010d54:	6923      	ldr	r3, [r4, #16]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d135      	bne.n	8010dc6 <_puts_r+0x9a>
 8010d5a:	4621      	mov	r1, r4
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	f000 f8f3 	bl	8010f48 <__swsetup_r>
 8010d62:	b380      	cbz	r0, 8010dc6 <_puts_r+0x9a>
 8010d64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010d68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d6a:	07da      	lsls	r2, r3, #31
 8010d6c:	d405      	bmi.n	8010d7a <_puts_r+0x4e>
 8010d6e:	89a3      	ldrh	r3, [r4, #12]
 8010d70:	059b      	lsls	r3, r3, #22
 8010d72:	d402      	bmi.n	8010d7a <_puts_r+0x4e>
 8010d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d76:	f000 f9f5 	bl	8011164 <__retarget_lock_release_recursive>
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	bd70      	pop	{r4, r5, r6, pc}
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	da04      	bge.n	8010d8c <_puts_r+0x60>
 8010d82:	69a2      	ldr	r2, [r4, #24]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	dc17      	bgt.n	8010db8 <_puts_r+0x8c>
 8010d88:	290a      	cmp	r1, #10
 8010d8a:	d015      	beq.n	8010db8 <_puts_r+0x8c>
 8010d8c:	6823      	ldr	r3, [r4, #0]
 8010d8e:	1c5a      	adds	r2, r3, #1
 8010d90:	6022      	str	r2, [r4, #0]
 8010d92:	7019      	strb	r1, [r3, #0]
 8010d94:	68a3      	ldr	r3, [r4, #8]
 8010d96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d9a:	3b01      	subs	r3, #1
 8010d9c:	60a3      	str	r3, [r4, #8]
 8010d9e:	2900      	cmp	r1, #0
 8010da0:	d1ed      	bne.n	8010d7e <_puts_r+0x52>
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	da11      	bge.n	8010dca <_puts_r+0x9e>
 8010da6:	4622      	mov	r2, r4
 8010da8:	210a      	movs	r1, #10
 8010daa:	4628      	mov	r0, r5
 8010dac:	f000 f88d 	bl	8010eca <__swbuf_r>
 8010db0:	3001      	adds	r0, #1
 8010db2:	d0d7      	beq.n	8010d64 <_puts_r+0x38>
 8010db4:	250a      	movs	r5, #10
 8010db6:	e7d7      	b.n	8010d68 <_puts_r+0x3c>
 8010db8:	4622      	mov	r2, r4
 8010dba:	4628      	mov	r0, r5
 8010dbc:	f000 f885 	bl	8010eca <__swbuf_r>
 8010dc0:	3001      	adds	r0, #1
 8010dc2:	d1e7      	bne.n	8010d94 <_puts_r+0x68>
 8010dc4:	e7ce      	b.n	8010d64 <_puts_r+0x38>
 8010dc6:	3e01      	subs	r6, #1
 8010dc8:	e7e4      	b.n	8010d94 <_puts_r+0x68>
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	1c5a      	adds	r2, r3, #1
 8010dce:	6022      	str	r2, [r4, #0]
 8010dd0:	220a      	movs	r2, #10
 8010dd2:	701a      	strb	r2, [r3, #0]
 8010dd4:	e7ee      	b.n	8010db4 <_puts_r+0x88>
	...

08010dd8 <puts>:
 8010dd8:	4b02      	ldr	r3, [pc, #8]	@ (8010de4 <puts+0xc>)
 8010dda:	4601      	mov	r1, r0
 8010ddc:	6818      	ldr	r0, [r3, #0]
 8010dde:	f7ff bfa5 	b.w	8010d2c <_puts_r>
 8010de2:	bf00      	nop
 8010de4:	24000028 	.word	0x24000028

08010de8 <siscanf>:
 8010de8:	b40e      	push	{r1, r2, r3}
 8010dea:	b570      	push	{r4, r5, r6, lr}
 8010dec:	b09d      	sub	sp, #116	@ 0x74
 8010dee:	ac21      	add	r4, sp, #132	@ 0x84
 8010df0:	2500      	movs	r5, #0
 8010df2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8010df6:	f854 6b04 	ldr.w	r6, [r4], #4
 8010dfa:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010dfe:	951b      	str	r5, [sp, #108]	@ 0x6c
 8010e00:	9002      	str	r0, [sp, #8]
 8010e02:	9006      	str	r0, [sp, #24]
 8010e04:	f7ef fae4 	bl	80003d0 <strlen>
 8010e08:	4b0b      	ldr	r3, [pc, #44]	@ (8010e38 <siscanf+0x50>)
 8010e0a:	9003      	str	r0, [sp, #12]
 8010e0c:	9007      	str	r0, [sp, #28]
 8010e0e:	480b      	ldr	r0, [pc, #44]	@ (8010e3c <siscanf+0x54>)
 8010e10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010e16:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010e1a:	4632      	mov	r2, r6
 8010e1c:	4623      	mov	r3, r4
 8010e1e:	a902      	add	r1, sp, #8
 8010e20:	6800      	ldr	r0, [r0, #0]
 8010e22:	950f      	str	r5, [sp, #60]	@ 0x3c
 8010e24:	9514      	str	r5, [sp, #80]	@ 0x50
 8010e26:	9401      	str	r4, [sp, #4]
 8010e28:	f001 fc68 	bl	80126fc <__ssvfiscanf_r>
 8010e2c:	b01d      	add	sp, #116	@ 0x74
 8010e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e32:	b003      	add	sp, #12
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop
 8010e38:	08010e63 	.word	0x08010e63
 8010e3c:	24000028 	.word	0x24000028

08010e40 <__sread>:
 8010e40:	b510      	push	{r4, lr}
 8010e42:	460c      	mov	r4, r1
 8010e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e48:	f000 f93c 	bl	80110c4 <_read_r>
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	bfab      	itete	ge
 8010e50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010e52:	89a3      	ldrhlt	r3, [r4, #12]
 8010e54:	181b      	addge	r3, r3, r0
 8010e56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010e5a:	bfac      	ite	ge
 8010e5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010e5e:	81a3      	strhlt	r3, [r4, #12]
 8010e60:	bd10      	pop	{r4, pc}

08010e62 <__seofread>:
 8010e62:	2000      	movs	r0, #0
 8010e64:	4770      	bx	lr

08010e66 <__swrite>:
 8010e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e6a:	461f      	mov	r7, r3
 8010e6c:	898b      	ldrh	r3, [r1, #12]
 8010e6e:	05db      	lsls	r3, r3, #23
 8010e70:	4605      	mov	r5, r0
 8010e72:	460c      	mov	r4, r1
 8010e74:	4616      	mov	r6, r2
 8010e76:	d505      	bpl.n	8010e84 <__swrite+0x1e>
 8010e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f000 f90e 	bl	80110a0 <_lseek_r>
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010e8e:	81a3      	strh	r3, [r4, #12]
 8010e90:	4632      	mov	r2, r6
 8010e92:	463b      	mov	r3, r7
 8010e94:	4628      	mov	r0, r5
 8010e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e9a:	f000 b925 	b.w	80110e8 <_write_r>

08010e9e <__sseek>:
 8010e9e:	b510      	push	{r4, lr}
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ea6:	f000 f8fb 	bl	80110a0 <_lseek_r>
 8010eaa:	1c43      	adds	r3, r0, #1
 8010eac:	89a3      	ldrh	r3, [r4, #12]
 8010eae:	bf15      	itete	ne
 8010eb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010eb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010eb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010eba:	81a3      	strheq	r3, [r4, #12]
 8010ebc:	bf18      	it	ne
 8010ebe:	81a3      	strhne	r3, [r4, #12]
 8010ec0:	bd10      	pop	{r4, pc}

08010ec2 <__sclose>:
 8010ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ec6:	f000 b8db 	b.w	8011080 <_close_r>

08010eca <__swbuf_r>:
 8010eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ecc:	460e      	mov	r6, r1
 8010ece:	4614      	mov	r4, r2
 8010ed0:	4605      	mov	r5, r0
 8010ed2:	b118      	cbz	r0, 8010edc <__swbuf_r+0x12>
 8010ed4:	6a03      	ldr	r3, [r0, #32]
 8010ed6:	b90b      	cbnz	r3, 8010edc <__swbuf_r+0x12>
 8010ed8:	f7ff fed8 	bl	8010c8c <__sinit>
 8010edc:	69a3      	ldr	r3, [r4, #24]
 8010ede:	60a3      	str	r3, [r4, #8]
 8010ee0:	89a3      	ldrh	r3, [r4, #12]
 8010ee2:	071a      	lsls	r2, r3, #28
 8010ee4:	d501      	bpl.n	8010eea <__swbuf_r+0x20>
 8010ee6:	6923      	ldr	r3, [r4, #16]
 8010ee8:	b943      	cbnz	r3, 8010efc <__swbuf_r+0x32>
 8010eea:	4621      	mov	r1, r4
 8010eec:	4628      	mov	r0, r5
 8010eee:	f000 f82b 	bl	8010f48 <__swsetup_r>
 8010ef2:	b118      	cbz	r0, 8010efc <__swbuf_r+0x32>
 8010ef4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010ef8:	4638      	mov	r0, r7
 8010efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010efc:	6823      	ldr	r3, [r4, #0]
 8010efe:	6922      	ldr	r2, [r4, #16]
 8010f00:	1a98      	subs	r0, r3, r2
 8010f02:	6963      	ldr	r3, [r4, #20]
 8010f04:	b2f6      	uxtb	r6, r6
 8010f06:	4283      	cmp	r3, r0
 8010f08:	4637      	mov	r7, r6
 8010f0a:	dc05      	bgt.n	8010f18 <__swbuf_r+0x4e>
 8010f0c:	4621      	mov	r1, r4
 8010f0e:	4628      	mov	r0, r5
 8010f10:	f002 f87e 	bl	8013010 <_fflush_r>
 8010f14:	2800      	cmp	r0, #0
 8010f16:	d1ed      	bne.n	8010ef4 <__swbuf_r+0x2a>
 8010f18:	68a3      	ldr	r3, [r4, #8]
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	60a3      	str	r3, [r4, #8]
 8010f1e:	6823      	ldr	r3, [r4, #0]
 8010f20:	1c5a      	adds	r2, r3, #1
 8010f22:	6022      	str	r2, [r4, #0]
 8010f24:	701e      	strb	r6, [r3, #0]
 8010f26:	6962      	ldr	r2, [r4, #20]
 8010f28:	1c43      	adds	r3, r0, #1
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d004      	beq.n	8010f38 <__swbuf_r+0x6e>
 8010f2e:	89a3      	ldrh	r3, [r4, #12]
 8010f30:	07db      	lsls	r3, r3, #31
 8010f32:	d5e1      	bpl.n	8010ef8 <__swbuf_r+0x2e>
 8010f34:	2e0a      	cmp	r6, #10
 8010f36:	d1df      	bne.n	8010ef8 <__swbuf_r+0x2e>
 8010f38:	4621      	mov	r1, r4
 8010f3a:	4628      	mov	r0, r5
 8010f3c:	f002 f868 	bl	8013010 <_fflush_r>
 8010f40:	2800      	cmp	r0, #0
 8010f42:	d0d9      	beq.n	8010ef8 <__swbuf_r+0x2e>
 8010f44:	e7d6      	b.n	8010ef4 <__swbuf_r+0x2a>
	...

08010f48 <__swsetup_r>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	4b29      	ldr	r3, [pc, #164]	@ (8010ff0 <__swsetup_r+0xa8>)
 8010f4c:	4605      	mov	r5, r0
 8010f4e:	6818      	ldr	r0, [r3, #0]
 8010f50:	460c      	mov	r4, r1
 8010f52:	b118      	cbz	r0, 8010f5c <__swsetup_r+0x14>
 8010f54:	6a03      	ldr	r3, [r0, #32]
 8010f56:	b90b      	cbnz	r3, 8010f5c <__swsetup_r+0x14>
 8010f58:	f7ff fe98 	bl	8010c8c <__sinit>
 8010f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f60:	0719      	lsls	r1, r3, #28
 8010f62:	d422      	bmi.n	8010faa <__swsetup_r+0x62>
 8010f64:	06da      	lsls	r2, r3, #27
 8010f66:	d407      	bmi.n	8010f78 <__swsetup_r+0x30>
 8010f68:	2209      	movs	r2, #9
 8010f6a:	602a      	str	r2, [r5, #0]
 8010f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f70:	81a3      	strh	r3, [r4, #12]
 8010f72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f76:	e033      	b.n	8010fe0 <__swsetup_r+0x98>
 8010f78:	0758      	lsls	r0, r3, #29
 8010f7a:	d512      	bpl.n	8010fa2 <__swsetup_r+0x5a>
 8010f7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010f7e:	b141      	cbz	r1, 8010f92 <__swsetup_r+0x4a>
 8010f80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010f84:	4299      	cmp	r1, r3
 8010f86:	d002      	beq.n	8010f8e <__swsetup_r+0x46>
 8010f88:	4628      	mov	r0, r5
 8010f8a:	f000 fee3 	bl	8011d54 <_free_r>
 8010f8e:	2300      	movs	r3, #0
 8010f90:	6363      	str	r3, [r4, #52]	@ 0x34
 8010f92:	89a3      	ldrh	r3, [r4, #12]
 8010f94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010f98:	81a3      	strh	r3, [r4, #12]
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	6063      	str	r3, [r4, #4]
 8010f9e:	6923      	ldr	r3, [r4, #16]
 8010fa0:	6023      	str	r3, [r4, #0]
 8010fa2:	89a3      	ldrh	r3, [r4, #12]
 8010fa4:	f043 0308 	orr.w	r3, r3, #8
 8010fa8:	81a3      	strh	r3, [r4, #12]
 8010faa:	6923      	ldr	r3, [r4, #16]
 8010fac:	b94b      	cbnz	r3, 8010fc2 <__swsetup_r+0x7a>
 8010fae:	89a3      	ldrh	r3, [r4, #12]
 8010fb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010fb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010fb8:	d003      	beq.n	8010fc2 <__swsetup_r+0x7a>
 8010fba:	4621      	mov	r1, r4
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	f002 f875 	bl	80130ac <__smakebuf_r>
 8010fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fc6:	f013 0201 	ands.w	r2, r3, #1
 8010fca:	d00a      	beq.n	8010fe2 <__swsetup_r+0x9a>
 8010fcc:	2200      	movs	r2, #0
 8010fce:	60a2      	str	r2, [r4, #8]
 8010fd0:	6962      	ldr	r2, [r4, #20]
 8010fd2:	4252      	negs	r2, r2
 8010fd4:	61a2      	str	r2, [r4, #24]
 8010fd6:	6922      	ldr	r2, [r4, #16]
 8010fd8:	b942      	cbnz	r2, 8010fec <__swsetup_r+0xa4>
 8010fda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010fde:	d1c5      	bne.n	8010f6c <__swsetup_r+0x24>
 8010fe0:	bd38      	pop	{r3, r4, r5, pc}
 8010fe2:	0799      	lsls	r1, r3, #30
 8010fe4:	bf58      	it	pl
 8010fe6:	6962      	ldrpl	r2, [r4, #20]
 8010fe8:	60a2      	str	r2, [r4, #8]
 8010fea:	e7f4      	b.n	8010fd6 <__swsetup_r+0x8e>
 8010fec:	2000      	movs	r0, #0
 8010fee:	e7f7      	b.n	8010fe0 <__swsetup_r+0x98>
 8010ff0:	24000028 	.word	0x24000028

08010ff4 <memmove>:
 8010ff4:	4288      	cmp	r0, r1
 8010ff6:	b510      	push	{r4, lr}
 8010ff8:	eb01 0402 	add.w	r4, r1, r2
 8010ffc:	d902      	bls.n	8011004 <memmove+0x10>
 8010ffe:	4284      	cmp	r4, r0
 8011000:	4623      	mov	r3, r4
 8011002:	d807      	bhi.n	8011014 <memmove+0x20>
 8011004:	1e43      	subs	r3, r0, #1
 8011006:	42a1      	cmp	r1, r4
 8011008:	d008      	beq.n	801101c <memmove+0x28>
 801100a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801100e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011012:	e7f8      	b.n	8011006 <memmove+0x12>
 8011014:	4402      	add	r2, r0
 8011016:	4601      	mov	r1, r0
 8011018:	428a      	cmp	r2, r1
 801101a:	d100      	bne.n	801101e <memmove+0x2a>
 801101c:	bd10      	pop	{r4, pc}
 801101e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011026:	e7f7      	b.n	8011018 <memmove+0x24>

08011028 <memset>:
 8011028:	4402      	add	r2, r0
 801102a:	4603      	mov	r3, r0
 801102c:	4293      	cmp	r3, r2
 801102e:	d100      	bne.n	8011032 <memset+0xa>
 8011030:	4770      	bx	lr
 8011032:	f803 1b01 	strb.w	r1, [r3], #1
 8011036:	e7f9      	b.n	801102c <memset+0x4>

08011038 <strchr>:
 8011038:	b2c9      	uxtb	r1, r1
 801103a:	4603      	mov	r3, r0
 801103c:	4618      	mov	r0, r3
 801103e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011042:	b112      	cbz	r2, 801104a <strchr+0x12>
 8011044:	428a      	cmp	r2, r1
 8011046:	d1f9      	bne.n	801103c <strchr+0x4>
 8011048:	4770      	bx	lr
 801104a:	2900      	cmp	r1, #0
 801104c:	bf18      	it	ne
 801104e:	2000      	movne	r0, #0
 8011050:	4770      	bx	lr

08011052 <strncmp>:
 8011052:	b510      	push	{r4, lr}
 8011054:	b16a      	cbz	r2, 8011072 <strncmp+0x20>
 8011056:	3901      	subs	r1, #1
 8011058:	1884      	adds	r4, r0, r2
 801105a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801105e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011062:	429a      	cmp	r2, r3
 8011064:	d103      	bne.n	801106e <strncmp+0x1c>
 8011066:	42a0      	cmp	r0, r4
 8011068:	d001      	beq.n	801106e <strncmp+0x1c>
 801106a:	2a00      	cmp	r2, #0
 801106c:	d1f5      	bne.n	801105a <strncmp+0x8>
 801106e:	1ad0      	subs	r0, r2, r3
 8011070:	bd10      	pop	{r4, pc}
 8011072:	4610      	mov	r0, r2
 8011074:	e7fc      	b.n	8011070 <strncmp+0x1e>
	...

08011078 <_localeconv_r>:
 8011078:	4800      	ldr	r0, [pc, #0]	@ (801107c <_localeconv_r+0x4>)
 801107a:	4770      	bx	lr
 801107c:	24000168 	.word	0x24000168

08011080 <_close_r>:
 8011080:	b538      	push	{r3, r4, r5, lr}
 8011082:	4d06      	ldr	r5, [pc, #24]	@ (801109c <_close_r+0x1c>)
 8011084:	2300      	movs	r3, #0
 8011086:	4604      	mov	r4, r0
 8011088:	4608      	mov	r0, r1
 801108a:	602b      	str	r3, [r5, #0]
 801108c:	f7f3 fdc8 	bl	8004c20 <_close>
 8011090:	1c43      	adds	r3, r0, #1
 8011092:	d102      	bne.n	801109a <_close_r+0x1a>
 8011094:	682b      	ldr	r3, [r5, #0]
 8011096:	b103      	cbz	r3, 801109a <_close_r+0x1a>
 8011098:	6023      	str	r3, [r4, #0]
 801109a:	bd38      	pop	{r3, r4, r5, pc}
 801109c:	24000bf4 	.word	0x24000bf4

080110a0 <_lseek_r>:
 80110a0:	b538      	push	{r3, r4, r5, lr}
 80110a2:	4d07      	ldr	r5, [pc, #28]	@ (80110c0 <_lseek_r+0x20>)
 80110a4:	4604      	mov	r4, r0
 80110a6:	4608      	mov	r0, r1
 80110a8:	4611      	mov	r1, r2
 80110aa:	2200      	movs	r2, #0
 80110ac:	602a      	str	r2, [r5, #0]
 80110ae:	461a      	mov	r2, r3
 80110b0:	f7f3 fddd 	bl	8004c6e <_lseek>
 80110b4:	1c43      	adds	r3, r0, #1
 80110b6:	d102      	bne.n	80110be <_lseek_r+0x1e>
 80110b8:	682b      	ldr	r3, [r5, #0]
 80110ba:	b103      	cbz	r3, 80110be <_lseek_r+0x1e>
 80110bc:	6023      	str	r3, [r4, #0]
 80110be:	bd38      	pop	{r3, r4, r5, pc}
 80110c0:	24000bf4 	.word	0x24000bf4

080110c4 <_read_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	4d07      	ldr	r5, [pc, #28]	@ (80110e4 <_read_r+0x20>)
 80110c8:	4604      	mov	r4, r0
 80110ca:	4608      	mov	r0, r1
 80110cc:	4611      	mov	r1, r2
 80110ce:	2200      	movs	r2, #0
 80110d0:	602a      	str	r2, [r5, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	f7f3 fd87 	bl	8004be6 <_read>
 80110d8:	1c43      	adds	r3, r0, #1
 80110da:	d102      	bne.n	80110e2 <_read_r+0x1e>
 80110dc:	682b      	ldr	r3, [r5, #0]
 80110de:	b103      	cbz	r3, 80110e2 <_read_r+0x1e>
 80110e0:	6023      	str	r3, [r4, #0]
 80110e2:	bd38      	pop	{r3, r4, r5, pc}
 80110e4:	24000bf4 	.word	0x24000bf4

080110e8 <_write_r>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	4d07      	ldr	r5, [pc, #28]	@ (8011108 <_write_r+0x20>)
 80110ec:	4604      	mov	r4, r0
 80110ee:	4608      	mov	r0, r1
 80110f0:	4611      	mov	r1, r2
 80110f2:	2200      	movs	r2, #0
 80110f4:	602a      	str	r2, [r5, #0]
 80110f6:	461a      	mov	r2, r3
 80110f8:	f7f1 fe2e 	bl	8002d58 <_write>
 80110fc:	1c43      	adds	r3, r0, #1
 80110fe:	d102      	bne.n	8011106 <_write_r+0x1e>
 8011100:	682b      	ldr	r3, [r5, #0]
 8011102:	b103      	cbz	r3, 8011106 <_write_r+0x1e>
 8011104:	6023      	str	r3, [r4, #0]
 8011106:	bd38      	pop	{r3, r4, r5, pc}
 8011108:	24000bf4 	.word	0x24000bf4

0801110c <__errno>:
 801110c:	4b01      	ldr	r3, [pc, #4]	@ (8011114 <__errno+0x8>)
 801110e:	6818      	ldr	r0, [r3, #0]
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop
 8011114:	24000028 	.word	0x24000028

08011118 <__libc_init_array>:
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	4d0d      	ldr	r5, [pc, #52]	@ (8011150 <__libc_init_array+0x38>)
 801111c:	4c0d      	ldr	r4, [pc, #52]	@ (8011154 <__libc_init_array+0x3c>)
 801111e:	1b64      	subs	r4, r4, r5
 8011120:	10a4      	asrs	r4, r4, #2
 8011122:	2600      	movs	r6, #0
 8011124:	42a6      	cmp	r6, r4
 8011126:	d109      	bne.n	801113c <__libc_init_array+0x24>
 8011128:	4d0b      	ldr	r5, [pc, #44]	@ (8011158 <__libc_init_array+0x40>)
 801112a:	4c0c      	ldr	r4, [pc, #48]	@ (801115c <__libc_init_array+0x44>)
 801112c:	f002 fae6 	bl	80136fc <_init>
 8011130:	1b64      	subs	r4, r4, r5
 8011132:	10a4      	asrs	r4, r4, #2
 8011134:	2600      	movs	r6, #0
 8011136:	42a6      	cmp	r6, r4
 8011138:	d105      	bne.n	8011146 <__libc_init_array+0x2e>
 801113a:	bd70      	pop	{r4, r5, r6, pc}
 801113c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011140:	4798      	blx	r3
 8011142:	3601      	adds	r6, #1
 8011144:	e7ee      	b.n	8011124 <__libc_init_array+0xc>
 8011146:	f855 3b04 	ldr.w	r3, [r5], #4
 801114a:	4798      	blx	r3
 801114c:	3601      	adds	r6, #1
 801114e:	e7f2      	b.n	8011136 <__libc_init_array+0x1e>
 8011150:	08015304 	.word	0x08015304
 8011154:	08015304 	.word	0x08015304
 8011158:	08015304 	.word	0x08015304
 801115c:	08015308 	.word	0x08015308

08011160 <__retarget_lock_init_recursive>:
 8011160:	4770      	bx	lr

08011162 <__retarget_lock_acquire_recursive>:
 8011162:	4770      	bx	lr

08011164 <__retarget_lock_release_recursive>:
 8011164:	4770      	bx	lr

08011166 <memcpy>:
 8011166:	440a      	add	r2, r1
 8011168:	4291      	cmp	r1, r2
 801116a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801116e:	d100      	bne.n	8011172 <memcpy+0xc>
 8011170:	4770      	bx	lr
 8011172:	b510      	push	{r4, lr}
 8011174:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011178:	f803 4f01 	strb.w	r4, [r3, #1]!
 801117c:	4291      	cmp	r1, r2
 801117e:	d1f9      	bne.n	8011174 <memcpy+0xe>
 8011180:	bd10      	pop	{r4, pc}

08011182 <quorem>:
 8011182:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011186:	6903      	ldr	r3, [r0, #16]
 8011188:	690c      	ldr	r4, [r1, #16]
 801118a:	42a3      	cmp	r3, r4
 801118c:	4607      	mov	r7, r0
 801118e:	db7e      	blt.n	801128e <quorem+0x10c>
 8011190:	3c01      	subs	r4, #1
 8011192:	f101 0814 	add.w	r8, r1, #20
 8011196:	00a3      	lsls	r3, r4, #2
 8011198:	f100 0514 	add.w	r5, r0, #20
 801119c:	9300      	str	r3, [sp, #0]
 801119e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80111a2:	9301      	str	r3, [sp, #4]
 80111a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80111a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80111ac:	3301      	adds	r3, #1
 80111ae:	429a      	cmp	r2, r3
 80111b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80111b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80111b8:	d32e      	bcc.n	8011218 <quorem+0x96>
 80111ba:	f04f 0a00 	mov.w	sl, #0
 80111be:	46c4      	mov	ip, r8
 80111c0:	46ae      	mov	lr, r5
 80111c2:	46d3      	mov	fp, sl
 80111c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80111c8:	b298      	uxth	r0, r3
 80111ca:	fb06 a000 	mla	r0, r6, r0, sl
 80111ce:	0c02      	lsrs	r2, r0, #16
 80111d0:	0c1b      	lsrs	r3, r3, #16
 80111d2:	fb06 2303 	mla	r3, r6, r3, r2
 80111d6:	f8de 2000 	ldr.w	r2, [lr]
 80111da:	b280      	uxth	r0, r0
 80111dc:	b292      	uxth	r2, r2
 80111de:	1a12      	subs	r2, r2, r0
 80111e0:	445a      	add	r2, fp
 80111e2:	f8de 0000 	ldr.w	r0, [lr]
 80111e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80111f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80111f4:	b292      	uxth	r2, r2
 80111f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80111fa:	45e1      	cmp	r9, ip
 80111fc:	f84e 2b04 	str.w	r2, [lr], #4
 8011200:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011204:	d2de      	bcs.n	80111c4 <quorem+0x42>
 8011206:	9b00      	ldr	r3, [sp, #0]
 8011208:	58eb      	ldr	r3, [r5, r3]
 801120a:	b92b      	cbnz	r3, 8011218 <quorem+0x96>
 801120c:	9b01      	ldr	r3, [sp, #4]
 801120e:	3b04      	subs	r3, #4
 8011210:	429d      	cmp	r5, r3
 8011212:	461a      	mov	r2, r3
 8011214:	d32f      	bcc.n	8011276 <quorem+0xf4>
 8011216:	613c      	str	r4, [r7, #16]
 8011218:	4638      	mov	r0, r7
 801121a:	f001 f90d 	bl	8012438 <__mcmp>
 801121e:	2800      	cmp	r0, #0
 8011220:	db25      	blt.n	801126e <quorem+0xec>
 8011222:	4629      	mov	r1, r5
 8011224:	2000      	movs	r0, #0
 8011226:	f858 2b04 	ldr.w	r2, [r8], #4
 801122a:	f8d1 c000 	ldr.w	ip, [r1]
 801122e:	fa1f fe82 	uxth.w	lr, r2
 8011232:	fa1f f38c 	uxth.w	r3, ip
 8011236:	eba3 030e 	sub.w	r3, r3, lr
 801123a:	4403      	add	r3, r0
 801123c:	0c12      	lsrs	r2, r2, #16
 801123e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011242:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011246:	b29b      	uxth	r3, r3
 8011248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801124c:	45c1      	cmp	r9, r8
 801124e:	f841 3b04 	str.w	r3, [r1], #4
 8011252:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011256:	d2e6      	bcs.n	8011226 <quorem+0xa4>
 8011258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801125c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011260:	b922      	cbnz	r2, 801126c <quorem+0xea>
 8011262:	3b04      	subs	r3, #4
 8011264:	429d      	cmp	r5, r3
 8011266:	461a      	mov	r2, r3
 8011268:	d30b      	bcc.n	8011282 <quorem+0x100>
 801126a:	613c      	str	r4, [r7, #16]
 801126c:	3601      	adds	r6, #1
 801126e:	4630      	mov	r0, r6
 8011270:	b003      	add	sp, #12
 8011272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011276:	6812      	ldr	r2, [r2, #0]
 8011278:	3b04      	subs	r3, #4
 801127a:	2a00      	cmp	r2, #0
 801127c:	d1cb      	bne.n	8011216 <quorem+0x94>
 801127e:	3c01      	subs	r4, #1
 8011280:	e7c6      	b.n	8011210 <quorem+0x8e>
 8011282:	6812      	ldr	r2, [r2, #0]
 8011284:	3b04      	subs	r3, #4
 8011286:	2a00      	cmp	r2, #0
 8011288:	d1ef      	bne.n	801126a <quorem+0xe8>
 801128a:	3c01      	subs	r4, #1
 801128c:	e7ea      	b.n	8011264 <quorem+0xe2>
 801128e:	2000      	movs	r0, #0
 8011290:	e7ee      	b.n	8011270 <quorem+0xee>
 8011292:	0000      	movs	r0, r0
 8011294:	0000      	movs	r0, r0
	...

08011298 <_dtoa_r>:
 8011298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801129c:	ed2d 8b02 	vpush	{d8}
 80112a0:	69c7      	ldr	r7, [r0, #28]
 80112a2:	b091      	sub	sp, #68	@ 0x44
 80112a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80112a8:	ec55 4b10 	vmov	r4, r5, d0
 80112ac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80112ae:	9107      	str	r1, [sp, #28]
 80112b0:	4681      	mov	r9, r0
 80112b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80112b4:	930d      	str	r3, [sp, #52]	@ 0x34
 80112b6:	b97f      	cbnz	r7, 80112d8 <_dtoa_r+0x40>
 80112b8:	2010      	movs	r0, #16
 80112ba:	f000 fd95 	bl	8011de8 <malloc>
 80112be:	4602      	mov	r2, r0
 80112c0:	f8c9 001c 	str.w	r0, [r9, #28]
 80112c4:	b920      	cbnz	r0, 80112d0 <_dtoa_r+0x38>
 80112c6:	4ba0      	ldr	r3, [pc, #640]	@ (8011548 <_dtoa_r+0x2b0>)
 80112c8:	21ef      	movs	r1, #239	@ 0xef
 80112ca:	48a0      	ldr	r0, [pc, #640]	@ (801154c <_dtoa_r+0x2b4>)
 80112cc:	f002 f804 	bl	80132d8 <__assert_func>
 80112d0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80112d4:	6007      	str	r7, [r0, #0]
 80112d6:	60c7      	str	r7, [r0, #12]
 80112d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80112dc:	6819      	ldr	r1, [r3, #0]
 80112de:	b159      	cbz	r1, 80112f8 <_dtoa_r+0x60>
 80112e0:	685a      	ldr	r2, [r3, #4]
 80112e2:	604a      	str	r2, [r1, #4]
 80112e4:	2301      	movs	r3, #1
 80112e6:	4093      	lsls	r3, r2
 80112e8:	608b      	str	r3, [r1, #8]
 80112ea:	4648      	mov	r0, r9
 80112ec:	f000 fe72 	bl	8011fd4 <_Bfree>
 80112f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80112f4:	2200      	movs	r2, #0
 80112f6:	601a      	str	r2, [r3, #0]
 80112f8:	1e2b      	subs	r3, r5, #0
 80112fa:	bfbb      	ittet	lt
 80112fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011300:	9303      	strlt	r3, [sp, #12]
 8011302:	2300      	movge	r3, #0
 8011304:	2201      	movlt	r2, #1
 8011306:	bfac      	ite	ge
 8011308:	6033      	strge	r3, [r6, #0]
 801130a:	6032      	strlt	r2, [r6, #0]
 801130c:	4b90      	ldr	r3, [pc, #576]	@ (8011550 <_dtoa_r+0x2b8>)
 801130e:	9e03      	ldr	r6, [sp, #12]
 8011310:	43b3      	bics	r3, r6
 8011312:	d110      	bne.n	8011336 <_dtoa_r+0x9e>
 8011314:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011316:	f242 730f 	movw	r3, #9999	@ 0x270f
 801131a:	6013      	str	r3, [r2, #0]
 801131c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011320:	4323      	orrs	r3, r4
 8011322:	f000 84e6 	beq.w	8011cf2 <_dtoa_r+0xa5a>
 8011326:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011328:	4f8a      	ldr	r7, [pc, #552]	@ (8011554 <_dtoa_r+0x2bc>)
 801132a:	2b00      	cmp	r3, #0
 801132c:	f000 84e8 	beq.w	8011d00 <_dtoa_r+0xa68>
 8011330:	1cfb      	adds	r3, r7, #3
 8011332:	f000 bce3 	b.w	8011cfc <_dtoa_r+0xa64>
 8011336:	ed9d 8b02 	vldr	d8, [sp, #8]
 801133a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011342:	d10a      	bne.n	801135a <_dtoa_r+0xc2>
 8011344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011346:	2301      	movs	r3, #1
 8011348:	6013      	str	r3, [r2, #0]
 801134a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801134c:	b113      	cbz	r3, 8011354 <_dtoa_r+0xbc>
 801134e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011350:	4b81      	ldr	r3, [pc, #516]	@ (8011558 <_dtoa_r+0x2c0>)
 8011352:	6013      	str	r3, [r2, #0]
 8011354:	4f81      	ldr	r7, [pc, #516]	@ (801155c <_dtoa_r+0x2c4>)
 8011356:	f000 bcd3 	b.w	8011d00 <_dtoa_r+0xa68>
 801135a:	aa0e      	add	r2, sp, #56	@ 0x38
 801135c:	a90f      	add	r1, sp, #60	@ 0x3c
 801135e:	4648      	mov	r0, r9
 8011360:	eeb0 0b48 	vmov.f64	d0, d8
 8011364:	f001 f918 	bl	8012598 <__d2b>
 8011368:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801136c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801136e:	9001      	str	r0, [sp, #4]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d045      	beq.n	8011400 <_dtoa_r+0x168>
 8011374:	eeb0 7b48 	vmov.f64	d7, d8
 8011378:	ee18 1a90 	vmov	r1, s17
 801137c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011380:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011384:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011388:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801138c:	2500      	movs	r5, #0
 801138e:	ee07 1a90 	vmov	s15, r1
 8011392:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8011396:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011530 <_dtoa_r+0x298>
 801139a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801139e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011538 <_dtoa_r+0x2a0>
 80113a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80113a6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011540 <_dtoa_r+0x2a8>
 80113aa:	ee07 3a90 	vmov	s15, r3
 80113ae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80113b2:	eeb0 7b46 	vmov.f64	d7, d6
 80113b6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80113ba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80113be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80113c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113c6:	ee16 8a90 	vmov	r8, s13
 80113ca:	d508      	bpl.n	80113de <_dtoa_r+0x146>
 80113cc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80113d0:	eeb4 6b47 	vcmp.f64	d6, d7
 80113d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d8:	bf18      	it	ne
 80113da:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80113de:	f1b8 0f16 	cmp.w	r8, #22
 80113e2:	d82b      	bhi.n	801143c <_dtoa_r+0x1a4>
 80113e4:	495e      	ldr	r1, [pc, #376]	@ (8011560 <_dtoa_r+0x2c8>)
 80113e6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80113ea:	ed91 7b00 	vldr	d7, [r1]
 80113ee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80113f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f6:	d501      	bpl.n	80113fc <_dtoa_r+0x164>
 80113f8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80113fc:	2100      	movs	r1, #0
 80113fe:	e01e      	b.n	801143e <_dtoa_r+0x1a6>
 8011400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011402:	4413      	add	r3, r2
 8011404:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011408:	2920      	cmp	r1, #32
 801140a:	bfc1      	itttt	gt
 801140c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011410:	408e      	lslgt	r6, r1
 8011412:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011416:	fa24 f101 	lsrgt.w	r1, r4, r1
 801141a:	bfd6      	itet	le
 801141c:	f1c1 0120 	rsble	r1, r1, #32
 8011420:	4331      	orrgt	r1, r6
 8011422:	fa04 f101 	lslle.w	r1, r4, r1
 8011426:	ee07 1a90 	vmov	s15, r1
 801142a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801142e:	3b01      	subs	r3, #1
 8011430:	ee17 1a90 	vmov	r1, s15
 8011434:	2501      	movs	r5, #1
 8011436:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801143a:	e7a8      	b.n	801138e <_dtoa_r+0xf6>
 801143c:	2101      	movs	r1, #1
 801143e:	1ad2      	subs	r2, r2, r3
 8011440:	1e53      	subs	r3, r2, #1
 8011442:	9306      	str	r3, [sp, #24]
 8011444:	bf45      	ittet	mi
 8011446:	f1c2 0301 	rsbmi	r3, r2, #1
 801144a:	9304      	strmi	r3, [sp, #16]
 801144c:	2300      	movpl	r3, #0
 801144e:	2300      	movmi	r3, #0
 8011450:	bf4c      	ite	mi
 8011452:	9306      	strmi	r3, [sp, #24]
 8011454:	9304      	strpl	r3, [sp, #16]
 8011456:	f1b8 0f00 	cmp.w	r8, #0
 801145a:	910c      	str	r1, [sp, #48]	@ 0x30
 801145c:	db18      	blt.n	8011490 <_dtoa_r+0x1f8>
 801145e:	9b06      	ldr	r3, [sp, #24]
 8011460:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8011464:	4443      	add	r3, r8
 8011466:	9306      	str	r3, [sp, #24]
 8011468:	2300      	movs	r3, #0
 801146a:	9a07      	ldr	r2, [sp, #28]
 801146c:	2a09      	cmp	r2, #9
 801146e:	d845      	bhi.n	80114fc <_dtoa_r+0x264>
 8011470:	2a05      	cmp	r2, #5
 8011472:	bfc4      	itt	gt
 8011474:	3a04      	subgt	r2, #4
 8011476:	9207      	strgt	r2, [sp, #28]
 8011478:	9a07      	ldr	r2, [sp, #28]
 801147a:	f1a2 0202 	sub.w	r2, r2, #2
 801147e:	bfcc      	ite	gt
 8011480:	2400      	movgt	r4, #0
 8011482:	2401      	movle	r4, #1
 8011484:	2a03      	cmp	r2, #3
 8011486:	d844      	bhi.n	8011512 <_dtoa_r+0x27a>
 8011488:	e8df f002 	tbb	[pc, r2]
 801148c:	0b173634 	.word	0x0b173634
 8011490:	9b04      	ldr	r3, [sp, #16]
 8011492:	2200      	movs	r2, #0
 8011494:	eba3 0308 	sub.w	r3, r3, r8
 8011498:	9304      	str	r3, [sp, #16]
 801149a:	920a      	str	r2, [sp, #40]	@ 0x28
 801149c:	f1c8 0300 	rsb	r3, r8, #0
 80114a0:	e7e3      	b.n	801146a <_dtoa_r+0x1d2>
 80114a2:	2201      	movs	r2, #1
 80114a4:	9208      	str	r2, [sp, #32]
 80114a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114a8:	eb08 0b02 	add.w	fp, r8, r2
 80114ac:	f10b 0a01 	add.w	sl, fp, #1
 80114b0:	4652      	mov	r2, sl
 80114b2:	2a01      	cmp	r2, #1
 80114b4:	bfb8      	it	lt
 80114b6:	2201      	movlt	r2, #1
 80114b8:	e006      	b.n	80114c8 <_dtoa_r+0x230>
 80114ba:	2201      	movs	r2, #1
 80114bc:	9208      	str	r2, [sp, #32]
 80114be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114c0:	2a00      	cmp	r2, #0
 80114c2:	dd29      	ble.n	8011518 <_dtoa_r+0x280>
 80114c4:	4693      	mov	fp, r2
 80114c6:	4692      	mov	sl, r2
 80114c8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80114cc:	2100      	movs	r1, #0
 80114ce:	2004      	movs	r0, #4
 80114d0:	f100 0614 	add.w	r6, r0, #20
 80114d4:	4296      	cmp	r6, r2
 80114d6:	d926      	bls.n	8011526 <_dtoa_r+0x28e>
 80114d8:	6079      	str	r1, [r7, #4]
 80114da:	4648      	mov	r0, r9
 80114dc:	9305      	str	r3, [sp, #20]
 80114de:	f000 fd39 	bl	8011f54 <_Balloc>
 80114e2:	9b05      	ldr	r3, [sp, #20]
 80114e4:	4607      	mov	r7, r0
 80114e6:	2800      	cmp	r0, #0
 80114e8:	d13e      	bne.n	8011568 <_dtoa_r+0x2d0>
 80114ea:	4b1e      	ldr	r3, [pc, #120]	@ (8011564 <_dtoa_r+0x2cc>)
 80114ec:	4602      	mov	r2, r0
 80114ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80114f2:	e6ea      	b.n	80112ca <_dtoa_r+0x32>
 80114f4:	2200      	movs	r2, #0
 80114f6:	e7e1      	b.n	80114bc <_dtoa_r+0x224>
 80114f8:	2200      	movs	r2, #0
 80114fa:	e7d3      	b.n	80114a4 <_dtoa_r+0x20c>
 80114fc:	2401      	movs	r4, #1
 80114fe:	2200      	movs	r2, #0
 8011500:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8011504:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011508:	2100      	movs	r1, #0
 801150a:	46da      	mov	sl, fp
 801150c:	2212      	movs	r2, #18
 801150e:	9109      	str	r1, [sp, #36]	@ 0x24
 8011510:	e7da      	b.n	80114c8 <_dtoa_r+0x230>
 8011512:	2201      	movs	r2, #1
 8011514:	9208      	str	r2, [sp, #32]
 8011516:	e7f5      	b.n	8011504 <_dtoa_r+0x26c>
 8011518:	f04f 0b01 	mov.w	fp, #1
 801151c:	46da      	mov	sl, fp
 801151e:	465a      	mov	r2, fp
 8011520:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011524:	e7d0      	b.n	80114c8 <_dtoa_r+0x230>
 8011526:	3101      	adds	r1, #1
 8011528:	0040      	lsls	r0, r0, #1
 801152a:	e7d1      	b.n	80114d0 <_dtoa_r+0x238>
 801152c:	f3af 8000 	nop.w
 8011530:	636f4361 	.word	0x636f4361
 8011534:	3fd287a7 	.word	0x3fd287a7
 8011538:	8b60c8b3 	.word	0x8b60c8b3
 801153c:	3fc68a28 	.word	0x3fc68a28
 8011540:	509f79fb 	.word	0x509f79fb
 8011544:	3fd34413 	.word	0x3fd34413
 8011548:	08014fa3 	.word	0x08014fa3
 801154c:	08014fba 	.word	0x08014fba
 8011550:	7ff00000 	.word	0x7ff00000
 8011554:	08014f9f 	.word	0x08014f9f
 8011558:	080150a4 	.word	0x080150a4
 801155c:	080150a3 	.word	0x080150a3
 8011560:	08015128 	.word	0x08015128
 8011564:	08015012 	.word	0x08015012
 8011568:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801156c:	f1ba 0f0e 	cmp.w	sl, #14
 8011570:	6010      	str	r0, [r2, #0]
 8011572:	d86e      	bhi.n	8011652 <_dtoa_r+0x3ba>
 8011574:	2c00      	cmp	r4, #0
 8011576:	d06c      	beq.n	8011652 <_dtoa_r+0x3ba>
 8011578:	f1b8 0f00 	cmp.w	r8, #0
 801157c:	f340 80b4 	ble.w	80116e8 <_dtoa_r+0x450>
 8011580:	4ac8      	ldr	r2, [pc, #800]	@ (80118a4 <_dtoa_r+0x60c>)
 8011582:	f008 010f 	and.w	r1, r8, #15
 8011586:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801158a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801158e:	ed92 7b00 	vldr	d7, [r2]
 8011592:	ea4f 1128 	mov.w	r1, r8, asr #4
 8011596:	f000 809b 	beq.w	80116d0 <_dtoa_r+0x438>
 801159a:	4ac3      	ldr	r2, [pc, #780]	@ (80118a8 <_dtoa_r+0x610>)
 801159c:	ed92 6b08 	vldr	d6, [r2, #32]
 80115a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80115a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80115a8:	f001 010f 	and.w	r1, r1, #15
 80115ac:	2203      	movs	r2, #3
 80115ae:	48be      	ldr	r0, [pc, #760]	@ (80118a8 <_dtoa_r+0x610>)
 80115b0:	2900      	cmp	r1, #0
 80115b2:	f040 808f 	bne.w	80116d4 <_dtoa_r+0x43c>
 80115b6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80115ba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80115be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80115c2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80115c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115c8:	2900      	cmp	r1, #0
 80115ca:	f000 80b3 	beq.w	8011734 <_dtoa_r+0x49c>
 80115ce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80115d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80115d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115da:	f140 80ab 	bpl.w	8011734 <_dtoa_r+0x49c>
 80115de:	f1ba 0f00 	cmp.w	sl, #0
 80115e2:	f000 80a7 	beq.w	8011734 <_dtoa_r+0x49c>
 80115e6:	f1bb 0f00 	cmp.w	fp, #0
 80115ea:	dd30      	ble.n	801164e <_dtoa_r+0x3b6>
 80115ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80115f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80115f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80115f8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80115fc:	9105      	str	r1, [sp, #20]
 80115fe:	3201      	adds	r2, #1
 8011600:	465c      	mov	r4, fp
 8011602:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011606:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801160a:	ee07 2a90 	vmov	s15, r2
 801160e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011612:	eea7 5b06 	vfma.f64	d5, d7, d6
 8011616:	ee15 2a90 	vmov	r2, s11
 801161a:	ec51 0b15 	vmov	r0, r1, d5
 801161e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8011622:	2c00      	cmp	r4, #0
 8011624:	f040 808a 	bne.w	801173c <_dtoa_r+0x4a4>
 8011628:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801162c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011630:	ec41 0b17 	vmov	d7, r0, r1
 8011634:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801163c:	f300 826a 	bgt.w	8011b14 <_dtoa_r+0x87c>
 8011640:	eeb1 7b47 	vneg.f64	d7, d7
 8011644:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801164c:	d423      	bmi.n	8011696 <_dtoa_r+0x3fe>
 801164e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8011652:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011654:	2a00      	cmp	r2, #0
 8011656:	f2c0 8129 	blt.w	80118ac <_dtoa_r+0x614>
 801165a:	f1b8 0f0e 	cmp.w	r8, #14
 801165e:	f300 8125 	bgt.w	80118ac <_dtoa_r+0x614>
 8011662:	4b90      	ldr	r3, [pc, #576]	@ (80118a4 <_dtoa_r+0x60c>)
 8011664:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011668:	ed93 6b00 	vldr	d6, [r3]
 801166c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801166e:	2b00      	cmp	r3, #0
 8011670:	f280 80c8 	bge.w	8011804 <_dtoa_r+0x56c>
 8011674:	f1ba 0f00 	cmp.w	sl, #0
 8011678:	f300 80c4 	bgt.w	8011804 <_dtoa_r+0x56c>
 801167c:	d10b      	bne.n	8011696 <_dtoa_r+0x3fe>
 801167e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011682:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011686:	ed9d 7b02 	vldr	d7, [sp, #8]
 801168a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011692:	f2c0 823c 	blt.w	8011b0e <_dtoa_r+0x876>
 8011696:	2400      	movs	r4, #0
 8011698:	4625      	mov	r5, r4
 801169a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801169c:	43db      	mvns	r3, r3
 801169e:	9305      	str	r3, [sp, #20]
 80116a0:	463e      	mov	r6, r7
 80116a2:	f04f 0800 	mov.w	r8, #0
 80116a6:	4621      	mov	r1, r4
 80116a8:	4648      	mov	r0, r9
 80116aa:	f000 fc93 	bl	8011fd4 <_Bfree>
 80116ae:	2d00      	cmp	r5, #0
 80116b0:	f000 80a2 	beq.w	80117f8 <_dtoa_r+0x560>
 80116b4:	f1b8 0f00 	cmp.w	r8, #0
 80116b8:	d005      	beq.n	80116c6 <_dtoa_r+0x42e>
 80116ba:	45a8      	cmp	r8, r5
 80116bc:	d003      	beq.n	80116c6 <_dtoa_r+0x42e>
 80116be:	4641      	mov	r1, r8
 80116c0:	4648      	mov	r0, r9
 80116c2:	f000 fc87 	bl	8011fd4 <_Bfree>
 80116c6:	4629      	mov	r1, r5
 80116c8:	4648      	mov	r0, r9
 80116ca:	f000 fc83 	bl	8011fd4 <_Bfree>
 80116ce:	e093      	b.n	80117f8 <_dtoa_r+0x560>
 80116d0:	2202      	movs	r2, #2
 80116d2:	e76c      	b.n	80115ae <_dtoa_r+0x316>
 80116d4:	07cc      	lsls	r4, r1, #31
 80116d6:	d504      	bpl.n	80116e2 <_dtoa_r+0x44a>
 80116d8:	ed90 6b00 	vldr	d6, [r0]
 80116dc:	3201      	adds	r2, #1
 80116de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116e2:	1049      	asrs	r1, r1, #1
 80116e4:	3008      	adds	r0, #8
 80116e6:	e763      	b.n	80115b0 <_dtoa_r+0x318>
 80116e8:	d022      	beq.n	8011730 <_dtoa_r+0x498>
 80116ea:	f1c8 0100 	rsb	r1, r8, #0
 80116ee:	4a6d      	ldr	r2, [pc, #436]	@ (80118a4 <_dtoa_r+0x60c>)
 80116f0:	f001 000f 	and.w	r0, r1, #15
 80116f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80116f8:	ed92 7b00 	vldr	d7, [r2]
 80116fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011700:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011704:	4868      	ldr	r0, [pc, #416]	@ (80118a8 <_dtoa_r+0x610>)
 8011706:	1109      	asrs	r1, r1, #4
 8011708:	2400      	movs	r4, #0
 801170a:	2202      	movs	r2, #2
 801170c:	b929      	cbnz	r1, 801171a <_dtoa_r+0x482>
 801170e:	2c00      	cmp	r4, #0
 8011710:	f43f af57 	beq.w	80115c2 <_dtoa_r+0x32a>
 8011714:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011718:	e753      	b.n	80115c2 <_dtoa_r+0x32a>
 801171a:	07ce      	lsls	r6, r1, #31
 801171c:	d505      	bpl.n	801172a <_dtoa_r+0x492>
 801171e:	ed90 6b00 	vldr	d6, [r0]
 8011722:	3201      	adds	r2, #1
 8011724:	2401      	movs	r4, #1
 8011726:	ee27 7b06 	vmul.f64	d7, d7, d6
 801172a:	1049      	asrs	r1, r1, #1
 801172c:	3008      	adds	r0, #8
 801172e:	e7ed      	b.n	801170c <_dtoa_r+0x474>
 8011730:	2202      	movs	r2, #2
 8011732:	e746      	b.n	80115c2 <_dtoa_r+0x32a>
 8011734:	f8cd 8014 	str.w	r8, [sp, #20]
 8011738:	4654      	mov	r4, sl
 801173a:	e762      	b.n	8011602 <_dtoa_r+0x36a>
 801173c:	4a59      	ldr	r2, [pc, #356]	@ (80118a4 <_dtoa_r+0x60c>)
 801173e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011742:	ed12 4b02 	vldr	d4, [r2, #-8]
 8011746:	9a08      	ldr	r2, [sp, #32]
 8011748:	ec41 0b17 	vmov	d7, r0, r1
 801174c:	443c      	add	r4, r7
 801174e:	b34a      	cbz	r2, 80117a4 <_dtoa_r+0x50c>
 8011750:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8011754:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8011758:	463e      	mov	r6, r7
 801175a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801175e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011762:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011766:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801176a:	ee14 2a90 	vmov	r2, s9
 801176e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011772:	3230      	adds	r2, #48	@ 0x30
 8011774:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011778:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011780:	f806 2b01 	strb.w	r2, [r6], #1
 8011784:	d438      	bmi.n	80117f8 <_dtoa_r+0x560>
 8011786:	ee32 5b46 	vsub.f64	d5, d2, d6
 801178a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011792:	d46e      	bmi.n	8011872 <_dtoa_r+0x5da>
 8011794:	42a6      	cmp	r6, r4
 8011796:	f43f af5a 	beq.w	801164e <_dtoa_r+0x3b6>
 801179a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801179e:	ee26 6b03 	vmul.f64	d6, d6, d3
 80117a2:	e7e0      	b.n	8011766 <_dtoa_r+0x4ce>
 80117a4:	4621      	mov	r1, r4
 80117a6:	463e      	mov	r6, r7
 80117a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80117ac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80117b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80117b4:	ee14 2a90 	vmov	r2, s9
 80117b8:	3230      	adds	r2, #48	@ 0x30
 80117ba:	f806 2b01 	strb.w	r2, [r6], #1
 80117be:	42a6      	cmp	r6, r4
 80117c0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80117c4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80117c8:	d119      	bne.n	80117fe <_dtoa_r+0x566>
 80117ca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80117ce:	ee37 4b05 	vadd.f64	d4, d7, d5
 80117d2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80117d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117da:	dc4a      	bgt.n	8011872 <_dtoa_r+0x5da>
 80117dc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80117e0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80117e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117e8:	f57f af31 	bpl.w	801164e <_dtoa_r+0x3b6>
 80117ec:	460e      	mov	r6, r1
 80117ee:	3901      	subs	r1, #1
 80117f0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80117f4:	2b30      	cmp	r3, #48	@ 0x30
 80117f6:	d0f9      	beq.n	80117ec <_dtoa_r+0x554>
 80117f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80117fc:	e027      	b.n	801184e <_dtoa_r+0x5b6>
 80117fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011802:	e7d5      	b.n	80117b0 <_dtoa_r+0x518>
 8011804:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011808:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801180c:	463e      	mov	r6, r7
 801180e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011812:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011816:	ee15 3a10 	vmov	r3, s10
 801181a:	3330      	adds	r3, #48	@ 0x30
 801181c:	f806 3b01 	strb.w	r3, [r6], #1
 8011820:	1bf3      	subs	r3, r6, r7
 8011822:	459a      	cmp	sl, r3
 8011824:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011828:	eea3 7b46 	vfms.f64	d7, d3, d6
 801182c:	d132      	bne.n	8011894 <_dtoa_r+0x5fc>
 801182e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011832:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183a:	dc18      	bgt.n	801186e <_dtoa_r+0x5d6>
 801183c:	eeb4 7b46 	vcmp.f64	d7, d6
 8011840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011844:	d103      	bne.n	801184e <_dtoa_r+0x5b6>
 8011846:	ee15 3a10 	vmov	r3, s10
 801184a:	07db      	lsls	r3, r3, #31
 801184c:	d40f      	bmi.n	801186e <_dtoa_r+0x5d6>
 801184e:	9901      	ldr	r1, [sp, #4]
 8011850:	4648      	mov	r0, r9
 8011852:	f000 fbbf 	bl	8011fd4 <_Bfree>
 8011856:	2300      	movs	r3, #0
 8011858:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801185a:	7033      	strb	r3, [r6, #0]
 801185c:	f108 0301 	add.w	r3, r8, #1
 8011860:	6013      	str	r3, [r2, #0]
 8011862:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011864:	2b00      	cmp	r3, #0
 8011866:	f000 824b 	beq.w	8011d00 <_dtoa_r+0xa68>
 801186a:	601e      	str	r6, [r3, #0]
 801186c:	e248      	b.n	8011d00 <_dtoa_r+0xa68>
 801186e:	f8cd 8014 	str.w	r8, [sp, #20]
 8011872:	4633      	mov	r3, r6
 8011874:	461e      	mov	r6, r3
 8011876:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801187a:	2a39      	cmp	r2, #57	@ 0x39
 801187c:	d106      	bne.n	801188c <_dtoa_r+0x5f4>
 801187e:	429f      	cmp	r7, r3
 8011880:	d1f8      	bne.n	8011874 <_dtoa_r+0x5dc>
 8011882:	9a05      	ldr	r2, [sp, #20]
 8011884:	3201      	adds	r2, #1
 8011886:	9205      	str	r2, [sp, #20]
 8011888:	2230      	movs	r2, #48	@ 0x30
 801188a:	703a      	strb	r2, [r7, #0]
 801188c:	781a      	ldrb	r2, [r3, #0]
 801188e:	3201      	adds	r2, #1
 8011890:	701a      	strb	r2, [r3, #0]
 8011892:	e7b1      	b.n	80117f8 <_dtoa_r+0x560>
 8011894:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011898:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a0:	d1b5      	bne.n	801180e <_dtoa_r+0x576>
 80118a2:	e7d4      	b.n	801184e <_dtoa_r+0x5b6>
 80118a4:	08015128 	.word	0x08015128
 80118a8:	08015100 	.word	0x08015100
 80118ac:	9908      	ldr	r1, [sp, #32]
 80118ae:	2900      	cmp	r1, #0
 80118b0:	f000 80e9 	beq.w	8011a86 <_dtoa_r+0x7ee>
 80118b4:	9907      	ldr	r1, [sp, #28]
 80118b6:	2901      	cmp	r1, #1
 80118b8:	f300 80cb 	bgt.w	8011a52 <_dtoa_r+0x7ba>
 80118bc:	2d00      	cmp	r5, #0
 80118be:	f000 80c4 	beq.w	8011a4a <_dtoa_r+0x7b2>
 80118c2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80118c6:	9e04      	ldr	r6, [sp, #16]
 80118c8:	461c      	mov	r4, r3
 80118ca:	9305      	str	r3, [sp, #20]
 80118cc:	9b04      	ldr	r3, [sp, #16]
 80118ce:	4413      	add	r3, r2
 80118d0:	9304      	str	r3, [sp, #16]
 80118d2:	9b06      	ldr	r3, [sp, #24]
 80118d4:	2101      	movs	r1, #1
 80118d6:	4413      	add	r3, r2
 80118d8:	4648      	mov	r0, r9
 80118da:	9306      	str	r3, [sp, #24]
 80118dc:	f000 fc2e 	bl	801213c <__i2b>
 80118e0:	9b05      	ldr	r3, [sp, #20]
 80118e2:	4605      	mov	r5, r0
 80118e4:	b166      	cbz	r6, 8011900 <_dtoa_r+0x668>
 80118e6:	9a06      	ldr	r2, [sp, #24]
 80118e8:	2a00      	cmp	r2, #0
 80118ea:	dd09      	ble.n	8011900 <_dtoa_r+0x668>
 80118ec:	42b2      	cmp	r2, r6
 80118ee:	9904      	ldr	r1, [sp, #16]
 80118f0:	bfa8      	it	ge
 80118f2:	4632      	movge	r2, r6
 80118f4:	1a89      	subs	r1, r1, r2
 80118f6:	9104      	str	r1, [sp, #16]
 80118f8:	9906      	ldr	r1, [sp, #24]
 80118fa:	1ab6      	subs	r6, r6, r2
 80118fc:	1a8a      	subs	r2, r1, r2
 80118fe:	9206      	str	r2, [sp, #24]
 8011900:	b30b      	cbz	r3, 8011946 <_dtoa_r+0x6ae>
 8011902:	9a08      	ldr	r2, [sp, #32]
 8011904:	2a00      	cmp	r2, #0
 8011906:	f000 80c5 	beq.w	8011a94 <_dtoa_r+0x7fc>
 801190a:	2c00      	cmp	r4, #0
 801190c:	f000 80bf 	beq.w	8011a8e <_dtoa_r+0x7f6>
 8011910:	4629      	mov	r1, r5
 8011912:	4622      	mov	r2, r4
 8011914:	4648      	mov	r0, r9
 8011916:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011918:	f000 fcc8 	bl	80122ac <__pow5mult>
 801191c:	9a01      	ldr	r2, [sp, #4]
 801191e:	4601      	mov	r1, r0
 8011920:	4605      	mov	r5, r0
 8011922:	4648      	mov	r0, r9
 8011924:	f000 fc20 	bl	8012168 <__multiply>
 8011928:	9901      	ldr	r1, [sp, #4]
 801192a:	9005      	str	r0, [sp, #20]
 801192c:	4648      	mov	r0, r9
 801192e:	f000 fb51 	bl	8011fd4 <_Bfree>
 8011932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011934:	1b1b      	subs	r3, r3, r4
 8011936:	f000 80b0 	beq.w	8011a9a <_dtoa_r+0x802>
 801193a:	9905      	ldr	r1, [sp, #20]
 801193c:	461a      	mov	r2, r3
 801193e:	4648      	mov	r0, r9
 8011940:	f000 fcb4 	bl	80122ac <__pow5mult>
 8011944:	9001      	str	r0, [sp, #4]
 8011946:	2101      	movs	r1, #1
 8011948:	4648      	mov	r0, r9
 801194a:	f000 fbf7 	bl	801213c <__i2b>
 801194e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011950:	4604      	mov	r4, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	f000 81da 	beq.w	8011d0c <_dtoa_r+0xa74>
 8011958:	461a      	mov	r2, r3
 801195a:	4601      	mov	r1, r0
 801195c:	4648      	mov	r0, r9
 801195e:	f000 fca5 	bl	80122ac <__pow5mult>
 8011962:	9b07      	ldr	r3, [sp, #28]
 8011964:	2b01      	cmp	r3, #1
 8011966:	4604      	mov	r4, r0
 8011968:	f300 80a0 	bgt.w	8011aac <_dtoa_r+0x814>
 801196c:	9b02      	ldr	r3, [sp, #8]
 801196e:	2b00      	cmp	r3, #0
 8011970:	f040 8096 	bne.w	8011aa0 <_dtoa_r+0x808>
 8011974:	9b03      	ldr	r3, [sp, #12]
 8011976:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801197a:	2a00      	cmp	r2, #0
 801197c:	f040 8092 	bne.w	8011aa4 <_dtoa_r+0x80c>
 8011980:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011984:	0d12      	lsrs	r2, r2, #20
 8011986:	0512      	lsls	r2, r2, #20
 8011988:	2a00      	cmp	r2, #0
 801198a:	f000 808d 	beq.w	8011aa8 <_dtoa_r+0x810>
 801198e:	9b04      	ldr	r3, [sp, #16]
 8011990:	3301      	adds	r3, #1
 8011992:	9304      	str	r3, [sp, #16]
 8011994:	9b06      	ldr	r3, [sp, #24]
 8011996:	3301      	adds	r3, #1
 8011998:	9306      	str	r3, [sp, #24]
 801199a:	2301      	movs	r3, #1
 801199c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801199e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	f000 81b9 	beq.w	8011d18 <_dtoa_r+0xa80>
 80119a6:	6922      	ldr	r2, [r4, #16]
 80119a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80119ac:	6910      	ldr	r0, [r2, #16]
 80119ae:	f000 fb79 	bl	80120a4 <__hi0bits>
 80119b2:	f1c0 0020 	rsb	r0, r0, #32
 80119b6:	9b06      	ldr	r3, [sp, #24]
 80119b8:	4418      	add	r0, r3
 80119ba:	f010 001f 	ands.w	r0, r0, #31
 80119be:	f000 8081 	beq.w	8011ac4 <_dtoa_r+0x82c>
 80119c2:	f1c0 0220 	rsb	r2, r0, #32
 80119c6:	2a04      	cmp	r2, #4
 80119c8:	dd73      	ble.n	8011ab2 <_dtoa_r+0x81a>
 80119ca:	9b04      	ldr	r3, [sp, #16]
 80119cc:	f1c0 001c 	rsb	r0, r0, #28
 80119d0:	4403      	add	r3, r0
 80119d2:	9304      	str	r3, [sp, #16]
 80119d4:	9b06      	ldr	r3, [sp, #24]
 80119d6:	4406      	add	r6, r0
 80119d8:	4403      	add	r3, r0
 80119da:	9306      	str	r3, [sp, #24]
 80119dc:	9b04      	ldr	r3, [sp, #16]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	dd05      	ble.n	80119ee <_dtoa_r+0x756>
 80119e2:	9901      	ldr	r1, [sp, #4]
 80119e4:	461a      	mov	r2, r3
 80119e6:	4648      	mov	r0, r9
 80119e8:	f000 fcba 	bl	8012360 <__lshift>
 80119ec:	9001      	str	r0, [sp, #4]
 80119ee:	9b06      	ldr	r3, [sp, #24]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	dd05      	ble.n	8011a00 <_dtoa_r+0x768>
 80119f4:	4621      	mov	r1, r4
 80119f6:	461a      	mov	r2, r3
 80119f8:	4648      	mov	r0, r9
 80119fa:	f000 fcb1 	bl	8012360 <__lshift>
 80119fe:	4604      	mov	r4, r0
 8011a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d060      	beq.n	8011ac8 <_dtoa_r+0x830>
 8011a06:	9801      	ldr	r0, [sp, #4]
 8011a08:	4621      	mov	r1, r4
 8011a0a:	f000 fd15 	bl	8012438 <__mcmp>
 8011a0e:	2800      	cmp	r0, #0
 8011a10:	da5a      	bge.n	8011ac8 <_dtoa_r+0x830>
 8011a12:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011a16:	9305      	str	r3, [sp, #20]
 8011a18:	9901      	ldr	r1, [sp, #4]
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	220a      	movs	r2, #10
 8011a1e:	4648      	mov	r0, r9
 8011a20:	f000 fafa 	bl	8012018 <__multadd>
 8011a24:	9b08      	ldr	r3, [sp, #32]
 8011a26:	9001      	str	r0, [sp, #4]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f000 8177 	beq.w	8011d1c <_dtoa_r+0xa84>
 8011a2e:	4629      	mov	r1, r5
 8011a30:	2300      	movs	r3, #0
 8011a32:	220a      	movs	r2, #10
 8011a34:	4648      	mov	r0, r9
 8011a36:	f000 faef 	bl	8012018 <__multadd>
 8011a3a:	f1bb 0f00 	cmp.w	fp, #0
 8011a3e:	4605      	mov	r5, r0
 8011a40:	dc6e      	bgt.n	8011b20 <_dtoa_r+0x888>
 8011a42:	9b07      	ldr	r3, [sp, #28]
 8011a44:	2b02      	cmp	r3, #2
 8011a46:	dc48      	bgt.n	8011ada <_dtoa_r+0x842>
 8011a48:	e06a      	b.n	8011b20 <_dtoa_r+0x888>
 8011a4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011a4c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011a50:	e739      	b.n	80118c6 <_dtoa_r+0x62e>
 8011a52:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8011a56:	42a3      	cmp	r3, r4
 8011a58:	db07      	blt.n	8011a6a <_dtoa_r+0x7d2>
 8011a5a:	f1ba 0f00 	cmp.w	sl, #0
 8011a5e:	eba3 0404 	sub.w	r4, r3, r4
 8011a62:	db0b      	blt.n	8011a7c <_dtoa_r+0x7e4>
 8011a64:	9e04      	ldr	r6, [sp, #16]
 8011a66:	4652      	mov	r2, sl
 8011a68:	e72f      	b.n	80118ca <_dtoa_r+0x632>
 8011a6a:	1ae2      	subs	r2, r4, r3
 8011a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a6e:	9e04      	ldr	r6, [sp, #16]
 8011a70:	4413      	add	r3, r2
 8011a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a74:	4652      	mov	r2, sl
 8011a76:	4623      	mov	r3, r4
 8011a78:	2400      	movs	r4, #0
 8011a7a:	e726      	b.n	80118ca <_dtoa_r+0x632>
 8011a7c:	9a04      	ldr	r2, [sp, #16]
 8011a7e:	eba2 060a 	sub.w	r6, r2, sl
 8011a82:	2200      	movs	r2, #0
 8011a84:	e721      	b.n	80118ca <_dtoa_r+0x632>
 8011a86:	9e04      	ldr	r6, [sp, #16]
 8011a88:	9d08      	ldr	r5, [sp, #32]
 8011a8a:	461c      	mov	r4, r3
 8011a8c:	e72a      	b.n	80118e4 <_dtoa_r+0x64c>
 8011a8e:	9a01      	ldr	r2, [sp, #4]
 8011a90:	9205      	str	r2, [sp, #20]
 8011a92:	e752      	b.n	801193a <_dtoa_r+0x6a2>
 8011a94:	9901      	ldr	r1, [sp, #4]
 8011a96:	461a      	mov	r2, r3
 8011a98:	e751      	b.n	801193e <_dtoa_r+0x6a6>
 8011a9a:	9b05      	ldr	r3, [sp, #20]
 8011a9c:	9301      	str	r3, [sp, #4]
 8011a9e:	e752      	b.n	8011946 <_dtoa_r+0x6ae>
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	e77b      	b.n	801199c <_dtoa_r+0x704>
 8011aa4:	9b02      	ldr	r3, [sp, #8]
 8011aa6:	e779      	b.n	801199c <_dtoa_r+0x704>
 8011aa8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011aaa:	e778      	b.n	801199e <_dtoa_r+0x706>
 8011aac:	2300      	movs	r3, #0
 8011aae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011ab0:	e779      	b.n	80119a6 <_dtoa_r+0x70e>
 8011ab2:	d093      	beq.n	80119dc <_dtoa_r+0x744>
 8011ab4:	9b04      	ldr	r3, [sp, #16]
 8011ab6:	321c      	adds	r2, #28
 8011ab8:	4413      	add	r3, r2
 8011aba:	9304      	str	r3, [sp, #16]
 8011abc:	9b06      	ldr	r3, [sp, #24]
 8011abe:	4416      	add	r6, r2
 8011ac0:	4413      	add	r3, r2
 8011ac2:	e78a      	b.n	80119da <_dtoa_r+0x742>
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	e7f5      	b.n	8011ab4 <_dtoa_r+0x81c>
 8011ac8:	f1ba 0f00 	cmp.w	sl, #0
 8011acc:	f8cd 8014 	str.w	r8, [sp, #20]
 8011ad0:	46d3      	mov	fp, sl
 8011ad2:	dc21      	bgt.n	8011b18 <_dtoa_r+0x880>
 8011ad4:	9b07      	ldr	r3, [sp, #28]
 8011ad6:	2b02      	cmp	r3, #2
 8011ad8:	dd1e      	ble.n	8011b18 <_dtoa_r+0x880>
 8011ada:	f1bb 0f00 	cmp.w	fp, #0
 8011ade:	f47f addc 	bne.w	801169a <_dtoa_r+0x402>
 8011ae2:	4621      	mov	r1, r4
 8011ae4:	465b      	mov	r3, fp
 8011ae6:	2205      	movs	r2, #5
 8011ae8:	4648      	mov	r0, r9
 8011aea:	f000 fa95 	bl	8012018 <__multadd>
 8011aee:	4601      	mov	r1, r0
 8011af0:	4604      	mov	r4, r0
 8011af2:	9801      	ldr	r0, [sp, #4]
 8011af4:	f000 fca0 	bl	8012438 <__mcmp>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	f77f adce 	ble.w	801169a <_dtoa_r+0x402>
 8011afe:	463e      	mov	r6, r7
 8011b00:	2331      	movs	r3, #49	@ 0x31
 8011b02:	f806 3b01 	strb.w	r3, [r6], #1
 8011b06:	9b05      	ldr	r3, [sp, #20]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	9305      	str	r3, [sp, #20]
 8011b0c:	e5c9      	b.n	80116a2 <_dtoa_r+0x40a>
 8011b0e:	f8cd 8014 	str.w	r8, [sp, #20]
 8011b12:	4654      	mov	r4, sl
 8011b14:	4625      	mov	r5, r4
 8011b16:	e7f2      	b.n	8011afe <_dtoa_r+0x866>
 8011b18:	9b08      	ldr	r3, [sp, #32]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	f000 8102 	beq.w	8011d24 <_dtoa_r+0xa8c>
 8011b20:	2e00      	cmp	r6, #0
 8011b22:	dd05      	ble.n	8011b30 <_dtoa_r+0x898>
 8011b24:	4629      	mov	r1, r5
 8011b26:	4632      	mov	r2, r6
 8011b28:	4648      	mov	r0, r9
 8011b2a:	f000 fc19 	bl	8012360 <__lshift>
 8011b2e:	4605      	mov	r5, r0
 8011b30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d058      	beq.n	8011be8 <_dtoa_r+0x950>
 8011b36:	6869      	ldr	r1, [r5, #4]
 8011b38:	4648      	mov	r0, r9
 8011b3a:	f000 fa0b 	bl	8011f54 <_Balloc>
 8011b3e:	4606      	mov	r6, r0
 8011b40:	b928      	cbnz	r0, 8011b4e <_dtoa_r+0x8b6>
 8011b42:	4b82      	ldr	r3, [pc, #520]	@ (8011d4c <_dtoa_r+0xab4>)
 8011b44:	4602      	mov	r2, r0
 8011b46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011b4a:	f7ff bbbe 	b.w	80112ca <_dtoa_r+0x32>
 8011b4e:	692a      	ldr	r2, [r5, #16]
 8011b50:	3202      	adds	r2, #2
 8011b52:	0092      	lsls	r2, r2, #2
 8011b54:	f105 010c 	add.w	r1, r5, #12
 8011b58:	300c      	adds	r0, #12
 8011b5a:	f7ff fb04 	bl	8011166 <memcpy>
 8011b5e:	2201      	movs	r2, #1
 8011b60:	4631      	mov	r1, r6
 8011b62:	4648      	mov	r0, r9
 8011b64:	f000 fbfc 	bl	8012360 <__lshift>
 8011b68:	1c7b      	adds	r3, r7, #1
 8011b6a:	9304      	str	r3, [sp, #16]
 8011b6c:	eb07 030b 	add.w	r3, r7, fp
 8011b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b72:	9b02      	ldr	r3, [sp, #8]
 8011b74:	f003 0301 	and.w	r3, r3, #1
 8011b78:	46a8      	mov	r8, r5
 8011b7a:	9308      	str	r3, [sp, #32]
 8011b7c:	4605      	mov	r5, r0
 8011b7e:	9b04      	ldr	r3, [sp, #16]
 8011b80:	9801      	ldr	r0, [sp, #4]
 8011b82:	4621      	mov	r1, r4
 8011b84:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8011b88:	f7ff fafb 	bl	8011182 <quorem>
 8011b8c:	4641      	mov	r1, r8
 8011b8e:	9002      	str	r0, [sp, #8]
 8011b90:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011b94:	9801      	ldr	r0, [sp, #4]
 8011b96:	f000 fc4f 	bl	8012438 <__mcmp>
 8011b9a:	462a      	mov	r2, r5
 8011b9c:	9006      	str	r0, [sp, #24]
 8011b9e:	4621      	mov	r1, r4
 8011ba0:	4648      	mov	r0, r9
 8011ba2:	f000 fc65 	bl	8012470 <__mdiff>
 8011ba6:	68c2      	ldr	r2, [r0, #12]
 8011ba8:	4606      	mov	r6, r0
 8011baa:	b9fa      	cbnz	r2, 8011bec <_dtoa_r+0x954>
 8011bac:	4601      	mov	r1, r0
 8011bae:	9801      	ldr	r0, [sp, #4]
 8011bb0:	f000 fc42 	bl	8012438 <__mcmp>
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	4631      	mov	r1, r6
 8011bb8:	4648      	mov	r0, r9
 8011bba:	920a      	str	r2, [sp, #40]	@ 0x28
 8011bbc:	f000 fa0a 	bl	8011fd4 <_Bfree>
 8011bc0:	9b07      	ldr	r3, [sp, #28]
 8011bc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011bc4:	9e04      	ldr	r6, [sp, #16]
 8011bc6:	ea42 0103 	orr.w	r1, r2, r3
 8011bca:	9b08      	ldr	r3, [sp, #32]
 8011bcc:	4319      	orrs	r1, r3
 8011bce:	d10f      	bne.n	8011bf0 <_dtoa_r+0x958>
 8011bd0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011bd4:	d028      	beq.n	8011c28 <_dtoa_r+0x990>
 8011bd6:	9b06      	ldr	r3, [sp, #24]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	dd02      	ble.n	8011be2 <_dtoa_r+0x94a>
 8011bdc:	9b02      	ldr	r3, [sp, #8]
 8011bde:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8011be2:	f88b a000 	strb.w	sl, [fp]
 8011be6:	e55e      	b.n	80116a6 <_dtoa_r+0x40e>
 8011be8:	4628      	mov	r0, r5
 8011bea:	e7bd      	b.n	8011b68 <_dtoa_r+0x8d0>
 8011bec:	2201      	movs	r2, #1
 8011bee:	e7e2      	b.n	8011bb6 <_dtoa_r+0x91e>
 8011bf0:	9b06      	ldr	r3, [sp, #24]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	db04      	blt.n	8011c00 <_dtoa_r+0x968>
 8011bf6:	9907      	ldr	r1, [sp, #28]
 8011bf8:	430b      	orrs	r3, r1
 8011bfa:	9908      	ldr	r1, [sp, #32]
 8011bfc:	430b      	orrs	r3, r1
 8011bfe:	d120      	bne.n	8011c42 <_dtoa_r+0x9aa>
 8011c00:	2a00      	cmp	r2, #0
 8011c02:	ddee      	ble.n	8011be2 <_dtoa_r+0x94a>
 8011c04:	9901      	ldr	r1, [sp, #4]
 8011c06:	2201      	movs	r2, #1
 8011c08:	4648      	mov	r0, r9
 8011c0a:	f000 fba9 	bl	8012360 <__lshift>
 8011c0e:	4621      	mov	r1, r4
 8011c10:	9001      	str	r0, [sp, #4]
 8011c12:	f000 fc11 	bl	8012438 <__mcmp>
 8011c16:	2800      	cmp	r0, #0
 8011c18:	dc03      	bgt.n	8011c22 <_dtoa_r+0x98a>
 8011c1a:	d1e2      	bne.n	8011be2 <_dtoa_r+0x94a>
 8011c1c:	f01a 0f01 	tst.w	sl, #1
 8011c20:	d0df      	beq.n	8011be2 <_dtoa_r+0x94a>
 8011c22:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011c26:	d1d9      	bne.n	8011bdc <_dtoa_r+0x944>
 8011c28:	2339      	movs	r3, #57	@ 0x39
 8011c2a:	f88b 3000 	strb.w	r3, [fp]
 8011c2e:	4633      	mov	r3, r6
 8011c30:	461e      	mov	r6, r3
 8011c32:	3b01      	subs	r3, #1
 8011c34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011c38:	2a39      	cmp	r2, #57	@ 0x39
 8011c3a:	d052      	beq.n	8011ce2 <_dtoa_r+0xa4a>
 8011c3c:	3201      	adds	r2, #1
 8011c3e:	701a      	strb	r2, [r3, #0]
 8011c40:	e531      	b.n	80116a6 <_dtoa_r+0x40e>
 8011c42:	2a00      	cmp	r2, #0
 8011c44:	dd07      	ble.n	8011c56 <_dtoa_r+0x9be>
 8011c46:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011c4a:	d0ed      	beq.n	8011c28 <_dtoa_r+0x990>
 8011c4c:	f10a 0301 	add.w	r3, sl, #1
 8011c50:	f88b 3000 	strb.w	r3, [fp]
 8011c54:	e527      	b.n	80116a6 <_dtoa_r+0x40e>
 8011c56:	9b04      	ldr	r3, [sp, #16]
 8011c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c5a:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011c5e:	4293      	cmp	r3, r2
 8011c60:	d029      	beq.n	8011cb6 <_dtoa_r+0xa1e>
 8011c62:	9901      	ldr	r1, [sp, #4]
 8011c64:	2300      	movs	r3, #0
 8011c66:	220a      	movs	r2, #10
 8011c68:	4648      	mov	r0, r9
 8011c6a:	f000 f9d5 	bl	8012018 <__multadd>
 8011c6e:	45a8      	cmp	r8, r5
 8011c70:	9001      	str	r0, [sp, #4]
 8011c72:	f04f 0300 	mov.w	r3, #0
 8011c76:	f04f 020a 	mov.w	r2, #10
 8011c7a:	4641      	mov	r1, r8
 8011c7c:	4648      	mov	r0, r9
 8011c7e:	d107      	bne.n	8011c90 <_dtoa_r+0x9f8>
 8011c80:	f000 f9ca 	bl	8012018 <__multadd>
 8011c84:	4680      	mov	r8, r0
 8011c86:	4605      	mov	r5, r0
 8011c88:	9b04      	ldr	r3, [sp, #16]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	9304      	str	r3, [sp, #16]
 8011c8e:	e776      	b.n	8011b7e <_dtoa_r+0x8e6>
 8011c90:	f000 f9c2 	bl	8012018 <__multadd>
 8011c94:	4629      	mov	r1, r5
 8011c96:	4680      	mov	r8, r0
 8011c98:	2300      	movs	r3, #0
 8011c9a:	220a      	movs	r2, #10
 8011c9c:	4648      	mov	r0, r9
 8011c9e:	f000 f9bb 	bl	8012018 <__multadd>
 8011ca2:	4605      	mov	r5, r0
 8011ca4:	e7f0      	b.n	8011c88 <_dtoa_r+0x9f0>
 8011ca6:	f1bb 0f00 	cmp.w	fp, #0
 8011caa:	bfcc      	ite	gt
 8011cac:	465e      	movgt	r6, fp
 8011cae:	2601      	movle	r6, #1
 8011cb0:	443e      	add	r6, r7
 8011cb2:	f04f 0800 	mov.w	r8, #0
 8011cb6:	9901      	ldr	r1, [sp, #4]
 8011cb8:	2201      	movs	r2, #1
 8011cba:	4648      	mov	r0, r9
 8011cbc:	f000 fb50 	bl	8012360 <__lshift>
 8011cc0:	4621      	mov	r1, r4
 8011cc2:	9001      	str	r0, [sp, #4]
 8011cc4:	f000 fbb8 	bl	8012438 <__mcmp>
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	dcb0      	bgt.n	8011c2e <_dtoa_r+0x996>
 8011ccc:	d102      	bne.n	8011cd4 <_dtoa_r+0xa3c>
 8011cce:	f01a 0f01 	tst.w	sl, #1
 8011cd2:	d1ac      	bne.n	8011c2e <_dtoa_r+0x996>
 8011cd4:	4633      	mov	r3, r6
 8011cd6:	461e      	mov	r6, r3
 8011cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cdc:	2a30      	cmp	r2, #48	@ 0x30
 8011cde:	d0fa      	beq.n	8011cd6 <_dtoa_r+0xa3e>
 8011ce0:	e4e1      	b.n	80116a6 <_dtoa_r+0x40e>
 8011ce2:	429f      	cmp	r7, r3
 8011ce4:	d1a4      	bne.n	8011c30 <_dtoa_r+0x998>
 8011ce6:	9b05      	ldr	r3, [sp, #20]
 8011ce8:	3301      	adds	r3, #1
 8011cea:	9305      	str	r3, [sp, #20]
 8011cec:	2331      	movs	r3, #49	@ 0x31
 8011cee:	703b      	strb	r3, [r7, #0]
 8011cf0:	e4d9      	b.n	80116a6 <_dtoa_r+0x40e>
 8011cf2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011cf4:	4f16      	ldr	r7, [pc, #88]	@ (8011d50 <_dtoa_r+0xab8>)
 8011cf6:	b11b      	cbz	r3, 8011d00 <_dtoa_r+0xa68>
 8011cf8:	f107 0308 	add.w	r3, r7, #8
 8011cfc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011cfe:	6013      	str	r3, [r2, #0]
 8011d00:	4638      	mov	r0, r7
 8011d02:	b011      	add	sp, #68	@ 0x44
 8011d04:	ecbd 8b02 	vpop	{d8}
 8011d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d0c:	9b07      	ldr	r3, [sp, #28]
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	f77f ae2c 	ble.w	801196c <_dtoa_r+0x6d4>
 8011d14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d18:	2001      	movs	r0, #1
 8011d1a:	e64c      	b.n	80119b6 <_dtoa_r+0x71e>
 8011d1c:	f1bb 0f00 	cmp.w	fp, #0
 8011d20:	f77f aed8 	ble.w	8011ad4 <_dtoa_r+0x83c>
 8011d24:	463e      	mov	r6, r7
 8011d26:	9801      	ldr	r0, [sp, #4]
 8011d28:	4621      	mov	r1, r4
 8011d2a:	f7ff fa2a 	bl	8011182 <quorem>
 8011d2e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011d32:	f806 ab01 	strb.w	sl, [r6], #1
 8011d36:	1bf2      	subs	r2, r6, r7
 8011d38:	4593      	cmp	fp, r2
 8011d3a:	ddb4      	ble.n	8011ca6 <_dtoa_r+0xa0e>
 8011d3c:	9901      	ldr	r1, [sp, #4]
 8011d3e:	2300      	movs	r3, #0
 8011d40:	220a      	movs	r2, #10
 8011d42:	4648      	mov	r0, r9
 8011d44:	f000 f968 	bl	8012018 <__multadd>
 8011d48:	9001      	str	r0, [sp, #4]
 8011d4a:	e7ec      	b.n	8011d26 <_dtoa_r+0xa8e>
 8011d4c:	08015012 	.word	0x08015012
 8011d50:	08014f96 	.word	0x08014f96

08011d54 <_free_r>:
 8011d54:	b538      	push	{r3, r4, r5, lr}
 8011d56:	4605      	mov	r5, r0
 8011d58:	2900      	cmp	r1, #0
 8011d5a:	d041      	beq.n	8011de0 <_free_r+0x8c>
 8011d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d60:	1f0c      	subs	r4, r1, #4
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	bfb8      	it	lt
 8011d66:	18e4      	addlt	r4, r4, r3
 8011d68:	f000 f8e8 	bl	8011f3c <__malloc_lock>
 8011d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8011de4 <_free_r+0x90>)
 8011d6e:	6813      	ldr	r3, [r2, #0]
 8011d70:	b933      	cbnz	r3, 8011d80 <_free_r+0x2c>
 8011d72:	6063      	str	r3, [r4, #4]
 8011d74:	6014      	str	r4, [r2, #0]
 8011d76:	4628      	mov	r0, r5
 8011d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d7c:	f000 b8e4 	b.w	8011f48 <__malloc_unlock>
 8011d80:	42a3      	cmp	r3, r4
 8011d82:	d908      	bls.n	8011d96 <_free_r+0x42>
 8011d84:	6820      	ldr	r0, [r4, #0]
 8011d86:	1821      	adds	r1, r4, r0
 8011d88:	428b      	cmp	r3, r1
 8011d8a:	bf01      	itttt	eq
 8011d8c:	6819      	ldreq	r1, [r3, #0]
 8011d8e:	685b      	ldreq	r3, [r3, #4]
 8011d90:	1809      	addeq	r1, r1, r0
 8011d92:	6021      	streq	r1, [r4, #0]
 8011d94:	e7ed      	b.n	8011d72 <_free_r+0x1e>
 8011d96:	461a      	mov	r2, r3
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	b10b      	cbz	r3, 8011da0 <_free_r+0x4c>
 8011d9c:	42a3      	cmp	r3, r4
 8011d9e:	d9fa      	bls.n	8011d96 <_free_r+0x42>
 8011da0:	6811      	ldr	r1, [r2, #0]
 8011da2:	1850      	adds	r0, r2, r1
 8011da4:	42a0      	cmp	r0, r4
 8011da6:	d10b      	bne.n	8011dc0 <_free_r+0x6c>
 8011da8:	6820      	ldr	r0, [r4, #0]
 8011daa:	4401      	add	r1, r0
 8011dac:	1850      	adds	r0, r2, r1
 8011dae:	4283      	cmp	r3, r0
 8011db0:	6011      	str	r1, [r2, #0]
 8011db2:	d1e0      	bne.n	8011d76 <_free_r+0x22>
 8011db4:	6818      	ldr	r0, [r3, #0]
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	6053      	str	r3, [r2, #4]
 8011dba:	4408      	add	r0, r1
 8011dbc:	6010      	str	r0, [r2, #0]
 8011dbe:	e7da      	b.n	8011d76 <_free_r+0x22>
 8011dc0:	d902      	bls.n	8011dc8 <_free_r+0x74>
 8011dc2:	230c      	movs	r3, #12
 8011dc4:	602b      	str	r3, [r5, #0]
 8011dc6:	e7d6      	b.n	8011d76 <_free_r+0x22>
 8011dc8:	6820      	ldr	r0, [r4, #0]
 8011dca:	1821      	adds	r1, r4, r0
 8011dcc:	428b      	cmp	r3, r1
 8011dce:	bf04      	itt	eq
 8011dd0:	6819      	ldreq	r1, [r3, #0]
 8011dd2:	685b      	ldreq	r3, [r3, #4]
 8011dd4:	6063      	str	r3, [r4, #4]
 8011dd6:	bf04      	itt	eq
 8011dd8:	1809      	addeq	r1, r1, r0
 8011dda:	6021      	streq	r1, [r4, #0]
 8011ddc:	6054      	str	r4, [r2, #4]
 8011dde:	e7ca      	b.n	8011d76 <_free_r+0x22>
 8011de0:	bd38      	pop	{r3, r4, r5, pc}
 8011de2:	bf00      	nop
 8011de4:	24000c00 	.word	0x24000c00

08011de8 <malloc>:
 8011de8:	4b02      	ldr	r3, [pc, #8]	@ (8011df4 <malloc+0xc>)
 8011dea:	4601      	mov	r1, r0
 8011dec:	6818      	ldr	r0, [r3, #0]
 8011dee:	f000 b825 	b.w	8011e3c <_malloc_r>
 8011df2:	bf00      	nop
 8011df4:	24000028 	.word	0x24000028

08011df8 <sbrk_aligned>:
 8011df8:	b570      	push	{r4, r5, r6, lr}
 8011dfa:	4e0f      	ldr	r6, [pc, #60]	@ (8011e38 <sbrk_aligned+0x40>)
 8011dfc:	460c      	mov	r4, r1
 8011dfe:	6831      	ldr	r1, [r6, #0]
 8011e00:	4605      	mov	r5, r0
 8011e02:	b911      	cbnz	r1, 8011e0a <sbrk_aligned+0x12>
 8011e04:	f001 fa58 	bl	80132b8 <_sbrk_r>
 8011e08:	6030      	str	r0, [r6, #0]
 8011e0a:	4621      	mov	r1, r4
 8011e0c:	4628      	mov	r0, r5
 8011e0e:	f001 fa53 	bl	80132b8 <_sbrk_r>
 8011e12:	1c43      	adds	r3, r0, #1
 8011e14:	d103      	bne.n	8011e1e <sbrk_aligned+0x26>
 8011e16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	bd70      	pop	{r4, r5, r6, pc}
 8011e1e:	1cc4      	adds	r4, r0, #3
 8011e20:	f024 0403 	bic.w	r4, r4, #3
 8011e24:	42a0      	cmp	r0, r4
 8011e26:	d0f8      	beq.n	8011e1a <sbrk_aligned+0x22>
 8011e28:	1a21      	subs	r1, r4, r0
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	f001 fa44 	bl	80132b8 <_sbrk_r>
 8011e30:	3001      	adds	r0, #1
 8011e32:	d1f2      	bne.n	8011e1a <sbrk_aligned+0x22>
 8011e34:	e7ef      	b.n	8011e16 <sbrk_aligned+0x1e>
 8011e36:	bf00      	nop
 8011e38:	24000bfc 	.word	0x24000bfc

08011e3c <_malloc_r>:
 8011e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e40:	1ccd      	adds	r5, r1, #3
 8011e42:	f025 0503 	bic.w	r5, r5, #3
 8011e46:	3508      	adds	r5, #8
 8011e48:	2d0c      	cmp	r5, #12
 8011e4a:	bf38      	it	cc
 8011e4c:	250c      	movcc	r5, #12
 8011e4e:	2d00      	cmp	r5, #0
 8011e50:	4606      	mov	r6, r0
 8011e52:	db01      	blt.n	8011e58 <_malloc_r+0x1c>
 8011e54:	42a9      	cmp	r1, r5
 8011e56:	d904      	bls.n	8011e62 <_malloc_r+0x26>
 8011e58:	230c      	movs	r3, #12
 8011e5a:	6033      	str	r3, [r6, #0]
 8011e5c:	2000      	movs	r0, #0
 8011e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011f38 <_malloc_r+0xfc>
 8011e66:	f000 f869 	bl	8011f3c <__malloc_lock>
 8011e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8011e6e:	461c      	mov	r4, r3
 8011e70:	bb44      	cbnz	r4, 8011ec4 <_malloc_r+0x88>
 8011e72:	4629      	mov	r1, r5
 8011e74:	4630      	mov	r0, r6
 8011e76:	f7ff ffbf 	bl	8011df8 <sbrk_aligned>
 8011e7a:	1c43      	adds	r3, r0, #1
 8011e7c:	4604      	mov	r4, r0
 8011e7e:	d158      	bne.n	8011f32 <_malloc_r+0xf6>
 8011e80:	f8d8 4000 	ldr.w	r4, [r8]
 8011e84:	4627      	mov	r7, r4
 8011e86:	2f00      	cmp	r7, #0
 8011e88:	d143      	bne.n	8011f12 <_malloc_r+0xd6>
 8011e8a:	2c00      	cmp	r4, #0
 8011e8c:	d04b      	beq.n	8011f26 <_malloc_r+0xea>
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	4639      	mov	r1, r7
 8011e92:	4630      	mov	r0, r6
 8011e94:	eb04 0903 	add.w	r9, r4, r3
 8011e98:	f001 fa0e 	bl	80132b8 <_sbrk_r>
 8011e9c:	4581      	cmp	r9, r0
 8011e9e:	d142      	bne.n	8011f26 <_malloc_r+0xea>
 8011ea0:	6821      	ldr	r1, [r4, #0]
 8011ea2:	1a6d      	subs	r5, r5, r1
 8011ea4:	4629      	mov	r1, r5
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	f7ff ffa6 	bl	8011df8 <sbrk_aligned>
 8011eac:	3001      	adds	r0, #1
 8011eae:	d03a      	beq.n	8011f26 <_malloc_r+0xea>
 8011eb0:	6823      	ldr	r3, [r4, #0]
 8011eb2:	442b      	add	r3, r5
 8011eb4:	6023      	str	r3, [r4, #0]
 8011eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8011eba:	685a      	ldr	r2, [r3, #4]
 8011ebc:	bb62      	cbnz	r2, 8011f18 <_malloc_r+0xdc>
 8011ebe:	f8c8 7000 	str.w	r7, [r8]
 8011ec2:	e00f      	b.n	8011ee4 <_malloc_r+0xa8>
 8011ec4:	6822      	ldr	r2, [r4, #0]
 8011ec6:	1b52      	subs	r2, r2, r5
 8011ec8:	d420      	bmi.n	8011f0c <_malloc_r+0xd0>
 8011eca:	2a0b      	cmp	r2, #11
 8011ecc:	d917      	bls.n	8011efe <_malloc_r+0xc2>
 8011ece:	1961      	adds	r1, r4, r5
 8011ed0:	42a3      	cmp	r3, r4
 8011ed2:	6025      	str	r5, [r4, #0]
 8011ed4:	bf18      	it	ne
 8011ed6:	6059      	strne	r1, [r3, #4]
 8011ed8:	6863      	ldr	r3, [r4, #4]
 8011eda:	bf08      	it	eq
 8011edc:	f8c8 1000 	streq.w	r1, [r8]
 8011ee0:	5162      	str	r2, [r4, r5]
 8011ee2:	604b      	str	r3, [r1, #4]
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	f000 f82f 	bl	8011f48 <__malloc_unlock>
 8011eea:	f104 000b 	add.w	r0, r4, #11
 8011eee:	1d23      	adds	r3, r4, #4
 8011ef0:	f020 0007 	bic.w	r0, r0, #7
 8011ef4:	1ac2      	subs	r2, r0, r3
 8011ef6:	bf1c      	itt	ne
 8011ef8:	1a1b      	subne	r3, r3, r0
 8011efa:	50a3      	strne	r3, [r4, r2]
 8011efc:	e7af      	b.n	8011e5e <_malloc_r+0x22>
 8011efe:	6862      	ldr	r2, [r4, #4]
 8011f00:	42a3      	cmp	r3, r4
 8011f02:	bf0c      	ite	eq
 8011f04:	f8c8 2000 	streq.w	r2, [r8]
 8011f08:	605a      	strne	r2, [r3, #4]
 8011f0a:	e7eb      	b.n	8011ee4 <_malloc_r+0xa8>
 8011f0c:	4623      	mov	r3, r4
 8011f0e:	6864      	ldr	r4, [r4, #4]
 8011f10:	e7ae      	b.n	8011e70 <_malloc_r+0x34>
 8011f12:	463c      	mov	r4, r7
 8011f14:	687f      	ldr	r7, [r7, #4]
 8011f16:	e7b6      	b.n	8011e86 <_malloc_r+0x4a>
 8011f18:	461a      	mov	r2, r3
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	42a3      	cmp	r3, r4
 8011f1e:	d1fb      	bne.n	8011f18 <_malloc_r+0xdc>
 8011f20:	2300      	movs	r3, #0
 8011f22:	6053      	str	r3, [r2, #4]
 8011f24:	e7de      	b.n	8011ee4 <_malloc_r+0xa8>
 8011f26:	230c      	movs	r3, #12
 8011f28:	6033      	str	r3, [r6, #0]
 8011f2a:	4630      	mov	r0, r6
 8011f2c:	f000 f80c 	bl	8011f48 <__malloc_unlock>
 8011f30:	e794      	b.n	8011e5c <_malloc_r+0x20>
 8011f32:	6005      	str	r5, [r0, #0]
 8011f34:	e7d6      	b.n	8011ee4 <_malloc_r+0xa8>
 8011f36:	bf00      	nop
 8011f38:	24000c00 	.word	0x24000c00

08011f3c <__malloc_lock>:
 8011f3c:	4801      	ldr	r0, [pc, #4]	@ (8011f44 <__malloc_lock+0x8>)
 8011f3e:	f7ff b910 	b.w	8011162 <__retarget_lock_acquire_recursive>
 8011f42:	bf00      	nop
 8011f44:	24000bf8 	.word	0x24000bf8

08011f48 <__malloc_unlock>:
 8011f48:	4801      	ldr	r0, [pc, #4]	@ (8011f50 <__malloc_unlock+0x8>)
 8011f4a:	f7ff b90b 	b.w	8011164 <__retarget_lock_release_recursive>
 8011f4e:	bf00      	nop
 8011f50:	24000bf8 	.word	0x24000bf8

08011f54 <_Balloc>:
 8011f54:	b570      	push	{r4, r5, r6, lr}
 8011f56:	69c6      	ldr	r6, [r0, #28]
 8011f58:	4604      	mov	r4, r0
 8011f5a:	460d      	mov	r5, r1
 8011f5c:	b976      	cbnz	r6, 8011f7c <_Balloc+0x28>
 8011f5e:	2010      	movs	r0, #16
 8011f60:	f7ff ff42 	bl	8011de8 <malloc>
 8011f64:	4602      	mov	r2, r0
 8011f66:	61e0      	str	r0, [r4, #28]
 8011f68:	b920      	cbnz	r0, 8011f74 <_Balloc+0x20>
 8011f6a:	4b18      	ldr	r3, [pc, #96]	@ (8011fcc <_Balloc+0x78>)
 8011f6c:	4818      	ldr	r0, [pc, #96]	@ (8011fd0 <_Balloc+0x7c>)
 8011f6e:	216b      	movs	r1, #107	@ 0x6b
 8011f70:	f001 f9b2 	bl	80132d8 <__assert_func>
 8011f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011f78:	6006      	str	r6, [r0, #0]
 8011f7a:	60c6      	str	r6, [r0, #12]
 8011f7c:	69e6      	ldr	r6, [r4, #28]
 8011f7e:	68f3      	ldr	r3, [r6, #12]
 8011f80:	b183      	cbz	r3, 8011fa4 <_Balloc+0x50>
 8011f82:	69e3      	ldr	r3, [r4, #28]
 8011f84:	68db      	ldr	r3, [r3, #12]
 8011f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011f8a:	b9b8      	cbnz	r0, 8011fbc <_Balloc+0x68>
 8011f8c:	2101      	movs	r1, #1
 8011f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8011f92:	1d72      	adds	r2, r6, #5
 8011f94:	0092      	lsls	r2, r2, #2
 8011f96:	4620      	mov	r0, r4
 8011f98:	f001 f9bc 	bl	8013314 <_calloc_r>
 8011f9c:	b160      	cbz	r0, 8011fb8 <_Balloc+0x64>
 8011f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011fa2:	e00e      	b.n	8011fc2 <_Balloc+0x6e>
 8011fa4:	2221      	movs	r2, #33	@ 0x21
 8011fa6:	2104      	movs	r1, #4
 8011fa8:	4620      	mov	r0, r4
 8011faa:	f001 f9b3 	bl	8013314 <_calloc_r>
 8011fae:	69e3      	ldr	r3, [r4, #28]
 8011fb0:	60f0      	str	r0, [r6, #12]
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d1e4      	bne.n	8011f82 <_Balloc+0x2e>
 8011fb8:	2000      	movs	r0, #0
 8011fba:	bd70      	pop	{r4, r5, r6, pc}
 8011fbc:	6802      	ldr	r2, [r0, #0]
 8011fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011fc8:	e7f7      	b.n	8011fba <_Balloc+0x66>
 8011fca:	bf00      	nop
 8011fcc:	08014fa3 	.word	0x08014fa3
 8011fd0:	08015023 	.word	0x08015023

08011fd4 <_Bfree>:
 8011fd4:	b570      	push	{r4, r5, r6, lr}
 8011fd6:	69c6      	ldr	r6, [r0, #28]
 8011fd8:	4605      	mov	r5, r0
 8011fda:	460c      	mov	r4, r1
 8011fdc:	b976      	cbnz	r6, 8011ffc <_Bfree+0x28>
 8011fde:	2010      	movs	r0, #16
 8011fe0:	f7ff ff02 	bl	8011de8 <malloc>
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	61e8      	str	r0, [r5, #28]
 8011fe8:	b920      	cbnz	r0, 8011ff4 <_Bfree+0x20>
 8011fea:	4b09      	ldr	r3, [pc, #36]	@ (8012010 <_Bfree+0x3c>)
 8011fec:	4809      	ldr	r0, [pc, #36]	@ (8012014 <_Bfree+0x40>)
 8011fee:	218f      	movs	r1, #143	@ 0x8f
 8011ff0:	f001 f972 	bl	80132d8 <__assert_func>
 8011ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011ff8:	6006      	str	r6, [r0, #0]
 8011ffa:	60c6      	str	r6, [r0, #12]
 8011ffc:	b13c      	cbz	r4, 801200e <_Bfree+0x3a>
 8011ffe:	69eb      	ldr	r3, [r5, #28]
 8012000:	6862      	ldr	r2, [r4, #4]
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012008:	6021      	str	r1, [r4, #0]
 801200a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801200e:	bd70      	pop	{r4, r5, r6, pc}
 8012010:	08014fa3 	.word	0x08014fa3
 8012014:	08015023 	.word	0x08015023

08012018 <__multadd>:
 8012018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801201c:	690d      	ldr	r5, [r1, #16]
 801201e:	4607      	mov	r7, r0
 8012020:	460c      	mov	r4, r1
 8012022:	461e      	mov	r6, r3
 8012024:	f101 0c14 	add.w	ip, r1, #20
 8012028:	2000      	movs	r0, #0
 801202a:	f8dc 3000 	ldr.w	r3, [ip]
 801202e:	b299      	uxth	r1, r3
 8012030:	fb02 6101 	mla	r1, r2, r1, r6
 8012034:	0c1e      	lsrs	r6, r3, #16
 8012036:	0c0b      	lsrs	r3, r1, #16
 8012038:	fb02 3306 	mla	r3, r2, r6, r3
 801203c:	b289      	uxth	r1, r1
 801203e:	3001      	adds	r0, #1
 8012040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012044:	4285      	cmp	r5, r0
 8012046:	f84c 1b04 	str.w	r1, [ip], #4
 801204a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801204e:	dcec      	bgt.n	801202a <__multadd+0x12>
 8012050:	b30e      	cbz	r6, 8012096 <__multadd+0x7e>
 8012052:	68a3      	ldr	r3, [r4, #8]
 8012054:	42ab      	cmp	r3, r5
 8012056:	dc19      	bgt.n	801208c <__multadd+0x74>
 8012058:	6861      	ldr	r1, [r4, #4]
 801205a:	4638      	mov	r0, r7
 801205c:	3101      	adds	r1, #1
 801205e:	f7ff ff79 	bl	8011f54 <_Balloc>
 8012062:	4680      	mov	r8, r0
 8012064:	b928      	cbnz	r0, 8012072 <__multadd+0x5a>
 8012066:	4602      	mov	r2, r0
 8012068:	4b0c      	ldr	r3, [pc, #48]	@ (801209c <__multadd+0x84>)
 801206a:	480d      	ldr	r0, [pc, #52]	@ (80120a0 <__multadd+0x88>)
 801206c:	21ba      	movs	r1, #186	@ 0xba
 801206e:	f001 f933 	bl	80132d8 <__assert_func>
 8012072:	6922      	ldr	r2, [r4, #16]
 8012074:	3202      	adds	r2, #2
 8012076:	f104 010c 	add.w	r1, r4, #12
 801207a:	0092      	lsls	r2, r2, #2
 801207c:	300c      	adds	r0, #12
 801207e:	f7ff f872 	bl	8011166 <memcpy>
 8012082:	4621      	mov	r1, r4
 8012084:	4638      	mov	r0, r7
 8012086:	f7ff ffa5 	bl	8011fd4 <_Bfree>
 801208a:	4644      	mov	r4, r8
 801208c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012090:	3501      	adds	r5, #1
 8012092:	615e      	str	r6, [r3, #20]
 8012094:	6125      	str	r5, [r4, #16]
 8012096:	4620      	mov	r0, r4
 8012098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801209c:	08015012 	.word	0x08015012
 80120a0:	08015023 	.word	0x08015023

080120a4 <__hi0bits>:
 80120a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80120a8:	4603      	mov	r3, r0
 80120aa:	bf36      	itet	cc
 80120ac:	0403      	lslcc	r3, r0, #16
 80120ae:	2000      	movcs	r0, #0
 80120b0:	2010      	movcc	r0, #16
 80120b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80120b6:	bf3c      	itt	cc
 80120b8:	021b      	lslcc	r3, r3, #8
 80120ba:	3008      	addcc	r0, #8
 80120bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80120c0:	bf3c      	itt	cc
 80120c2:	011b      	lslcc	r3, r3, #4
 80120c4:	3004      	addcc	r0, #4
 80120c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80120ca:	bf3c      	itt	cc
 80120cc:	009b      	lslcc	r3, r3, #2
 80120ce:	3002      	addcc	r0, #2
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	db05      	blt.n	80120e0 <__hi0bits+0x3c>
 80120d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80120d8:	f100 0001 	add.w	r0, r0, #1
 80120dc:	bf08      	it	eq
 80120de:	2020      	moveq	r0, #32
 80120e0:	4770      	bx	lr

080120e2 <__lo0bits>:
 80120e2:	6803      	ldr	r3, [r0, #0]
 80120e4:	4602      	mov	r2, r0
 80120e6:	f013 0007 	ands.w	r0, r3, #7
 80120ea:	d00b      	beq.n	8012104 <__lo0bits+0x22>
 80120ec:	07d9      	lsls	r1, r3, #31
 80120ee:	d421      	bmi.n	8012134 <__lo0bits+0x52>
 80120f0:	0798      	lsls	r0, r3, #30
 80120f2:	bf49      	itett	mi
 80120f4:	085b      	lsrmi	r3, r3, #1
 80120f6:	089b      	lsrpl	r3, r3, #2
 80120f8:	2001      	movmi	r0, #1
 80120fa:	6013      	strmi	r3, [r2, #0]
 80120fc:	bf5c      	itt	pl
 80120fe:	6013      	strpl	r3, [r2, #0]
 8012100:	2002      	movpl	r0, #2
 8012102:	4770      	bx	lr
 8012104:	b299      	uxth	r1, r3
 8012106:	b909      	cbnz	r1, 801210c <__lo0bits+0x2a>
 8012108:	0c1b      	lsrs	r3, r3, #16
 801210a:	2010      	movs	r0, #16
 801210c:	b2d9      	uxtb	r1, r3
 801210e:	b909      	cbnz	r1, 8012114 <__lo0bits+0x32>
 8012110:	3008      	adds	r0, #8
 8012112:	0a1b      	lsrs	r3, r3, #8
 8012114:	0719      	lsls	r1, r3, #28
 8012116:	bf04      	itt	eq
 8012118:	091b      	lsreq	r3, r3, #4
 801211a:	3004      	addeq	r0, #4
 801211c:	0799      	lsls	r1, r3, #30
 801211e:	bf04      	itt	eq
 8012120:	089b      	lsreq	r3, r3, #2
 8012122:	3002      	addeq	r0, #2
 8012124:	07d9      	lsls	r1, r3, #31
 8012126:	d403      	bmi.n	8012130 <__lo0bits+0x4e>
 8012128:	085b      	lsrs	r3, r3, #1
 801212a:	f100 0001 	add.w	r0, r0, #1
 801212e:	d003      	beq.n	8012138 <__lo0bits+0x56>
 8012130:	6013      	str	r3, [r2, #0]
 8012132:	4770      	bx	lr
 8012134:	2000      	movs	r0, #0
 8012136:	4770      	bx	lr
 8012138:	2020      	movs	r0, #32
 801213a:	4770      	bx	lr

0801213c <__i2b>:
 801213c:	b510      	push	{r4, lr}
 801213e:	460c      	mov	r4, r1
 8012140:	2101      	movs	r1, #1
 8012142:	f7ff ff07 	bl	8011f54 <_Balloc>
 8012146:	4602      	mov	r2, r0
 8012148:	b928      	cbnz	r0, 8012156 <__i2b+0x1a>
 801214a:	4b05      	ldr	r3, [pc, #20]	@ (8012160 <__i2b+0x24>)
 801214c:	4805      	ldr	r0, [pc, #20]	@ (8012164 <__i2b+0x28>)
 801214e:	f240 1145 	movw	r1, #325	@ 0x145
 8012152:	f001 f8c1 	bl	80132d8 <__assert_func>
 8012156:	2301      	movs	r3, #1
 8012158:	6144      	str	r4, [r0, #20]
 801215a:	6103      	str	r3, [r0, #16]
 801215c:	bd10      	pop	{r4, pc}
 801215e:	bf00      	nop
 8012160:	08015012 	.word	0x08015012
 8012164:	08015023 	.word	0x08015023

08012168 <__multiply>:
 8012168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801216c:	4617      	mov	r7, r2
 801216e:	690a      	ldr	r2, [r1, #16]
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	429a      	cmp	r2, r3
 8012174:	bfa8      	it	ge
 8012176:	463b      	movge	r3, r7
 8012178:	4689      	mov	r9, r1
 801217a:	bfa4      	itt	ge
 801217c:	460f      	movge	r7, r1
 801217e:	4699      	movge	r9, r3
 8012180:	693d      	ldr	r5, [r7, #16]
 8012182:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012186:	68bb      	ldr	r3, [r7, #8]
 8012188:	6879      	ldr	r1, [r7, #4]
 801218a:	eb05 060a 	add.w	r6, r5, sl
 801218e:	42b3      	cmp	r3, r6
 8012190:	b085      	sub	sp, #20
 8012192:	bfb8      	it	lt
 8012194:	3101      	addlt	r1, #1
 8012196:	f7ff fedd 	bl	8011f54 <_Balloc>
 801219a:	b930      	cbnz	r0, 80121aa <__multiply+0x42>
 801219c:	4602      	mov	r2, r0
 801219e:	4b41      	ldr	r3, [pc, #260]	@ (80122a4 <__multiply+0x13c>)
 80121a0:	4841      	ldr	r0, [pc, #260]	@ (80122a8 <__multiply+0x140>)
 80121a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80121a6:	f001 f897 	bl	80132d8 <__assert_func>
 80121aa:	f100 0414 	add.w	r4, r0, #20
 80121ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80121b2:	4623      	mov	r3, r4
 80121b4:	2200      	movs	r2, #0
 80121b6:	4573      	cmp	r3, lr
 80121b8:	d320      	bcc.n	80121fc <__multiply+0x94>
 80121ba:	f107 0814 	add.w	r8, r7, #20
 80121be:	f109 0114 	add.w	r1, r9, #20
 80121c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80121c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80121ca:	9302      	str	r3, [sp, #8]
 80121cc:	1beb      	subs	r3, r5, r7
 80121ce:	3b15      	subs	r3, #21
 80121d0:	f023 0303 	bic.w	r3, r3, #3
 80121d4:	3304      	adds	r3, #4
 80121d6:	3715      	adds	r7, #21
 80121d8:	42bd      	cmp	r5, r7
 80121da:	bf38      	it	cc
 80121dc:	2304      	movcc	r3, #4
 80121de:	9301      	str	r3, [sp, #4]
 80121e0:	9b02      	ldr	r3, [sp, #8]
 80121e2:	9103      	str	r1, [sp, #12]
 80121e4:	428b      	cmp	r3, r1
 80121e6:	d80c      	bhi.n	8012202 <__multiply+0x9a>
 80121e8:	2e00      	cmp	r6, #0
 80121ea:	dd03      	ble.n	80121f4 <__multiply+0x8c>
 80121ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d055      	beq.n	80122a0 <__multiply+0x138>
 80121f4:	6106      	str	r6, [r0, #16]
 80121f6:	b005      	add	sp, #20
 80121f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121fc:	f843 2b04 	str.w	r2, [r3], #4
 8012200:	e7d9      	b.n	80121b6 <__multiply+0x4e>
 8012202:	f8b1 a000 	ldrh.w	sl, [r1]
 8012206:	f1ba 0f00 	cmp.w	sl, #0
 801220a:	d01f      	beq.n	801224c <__multiply+0xe4>
 801220c:	46c4      	mov	ip, r8
 801220e:	46a1      	mov	r9, r4
 8012210:	2700      	movs	r7, #0
 8012212:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012216:	f8d9 3000 	ldr.w	r3, [r9]
 801221a:	fa1f fb82 	uxth.w	fp, r2
 801221e:	b29b      	uxth	r3, r3
 8012220:	fb0a 330b 	mla	r3, sl, fp, r3
 8012224:	443b      	add	r3, r7
 8012226:	f8d9 7000 	ldr.w	r7, [r9]
 801222a:	0c12      	lsrs	r2, r2, #16
 801222c:	0c3f      	lsrs	r7, r7, #16
 801222e:	fb0a 7202 	mla	r2, sl, r2, r7
 8012232:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8012236:	b29b      	uxth	r3, r3
 8012238:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801223c:	4565      	cmp	r5, ip
 801223e:	f849 3b04 	str.w	r3, [r9], #4
 8012242:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012246:	d8e4      	bhi.n	8012212 <__multiply+0xaa>
 8012248:	9b01      	ldr	r3, [sp, #4]
 801224a:	50e7      	str	r7, [r4, r3]
 801224c:	9b03      	ldr	r3, [sp, #12]
 801224e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012252:	3104      	adds	r1, #4
 8012254:	f1b9 0f00 	cmp.w	r9, #0
 8012258:	d020      	beq.n	801229c <__multiply+0x134>
 801225a:	6823      	ldr	r3, [r4, #0]
 801225c:	4647      	mov	r7, r8
 801225e:	46a4      	mov	ip, r4
 8012260:	f04f 0a00 	mov.w	sl, #0
 8012264:	f8b7 b000 	ldrh.w	fp, [r7]
 8012268:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801226c:	fb09 220b 	mla	r2, r9, fp, r2
 8012270:	4452      	add	r2, sl
 8012272:	b29b      	uxth	r3, r3
 8012274:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012278:	f84c 3b04 	str.w	r3, [ip], #4
 801227c:	f857 3b04 	ldr.w	r3, [r7], #4
 8012280:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012284:	f8bc 3000 	ldrh.w	r3, [ip]
 8012288:	fb09 330a 	mla	r3, r9, sl, r3
 801228c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012290:	42bd      	cmp	r5, r7
 8012292:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012296:	d8e5      	bhi.n	8012264 <__multiply+0xfc>
 8012298:	9a01      	ldr	r2, [sp, #4]
 801229a:	50a3      	str	r3, [r4, r2]
 801229c:	3404      	adds	r4, #4
 801229e:	e79f      	b.n	80121e0 <__multiply+0x78>
 80122a0:	3e01      	subs	r6, #1
 80122a2:	e7a1      	b.n	80121e8 <__multiply+0x80>
 80122a4:	08015012 	.word	0x08015012
 80122a8:	08015023 	.word	0x08015023

080122ac <__pow5mult>:
 80122ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122b0:	4615      	mov	r5, r2
 80122b2:	f012 0203 	ands.w	r2, r2, #3
 80122b6:	4607      	mov	r7, r0
 80122b8:	460e      	mov	r6, r1
 80122ba:	d007      	beq.n	80122cc <__pow5mult+0x20>
 80122bc:	4c25      	ldr	r4, [pc, #148]	@ (8012354 <__pow5mult+0xa8>)
 80122be:	3a01      	subs	r2, #1
 80122c0:	2300      	movs	r3, #0
 80122c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80122c6:	f7ff fea7 	bl	8012018 <__multadd>
 80122ca:	4606      	mov	r6, r0
 80122cc:	10ad      	asrs	r5, r5, #2
 80122ce:	d03d      	beq.n	801234c <__pow5mult+0xa0>
 80122d0:	69fc      	ldr	r4, [r7, #28]
 80122d2:	b97c      	cbnz	r4, 80122f4 <__pow5mult+0x48>
 80122d4:	2010      	movs	r0, #16
 80122d6:	f7ff fd87 	bl	8011de8 <malloc>
 80122da:	4602      	mov	r2, r0
 80122dc:	61f8      	str	r0, [r7, #28]
 80122de:	b928      	cbnz	r0, 80122ec <__pow5mult+0x40>
 80122e0:	4b1d      	ldr	r3, [pc, #116]	@ (8012358 <__pow5mult+0xac>)
 80122e2:	481e      	ldr	r0, [pc, #120]	@ (801235c <__pow5mult+0xb0>)
 80122e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80122e8:	f000 fff6 	bl	80132d8 <__assert_func>
 80122ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80122f0:	6004      	str	r4, [r0, #0]
 80122f2:	60c4      	str	r4, [r0, #12]
 80122f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80122f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80122fc:	b94c      	cbnz	r4, 8012312 <__pow5mult+0x66>
 80122fe:	f240 2171 	movw	r1, #625	@ 0x271
 8012302:	4638      	mov	r0, r7
 8012304:	f7ff ff1a 	bl	801213c <__i2b>
 8012308:	2300      	movs	r3, #0
 801230a:	f8c8 0008 	str.w	r0, [r8, #8]
 801230e:	4604      	mov	r4, r0
 8012310:	6003      	str	r3, [r0, #0]
 8012312:	f04f 0900 	mov.w	r9, #0
 8012316:	07eb      	lsls	r3, r5, #31
 8012318:	d50a      	bpl.n	8012330 <__pow5mult+0x84>
 801231a:	4631      	mov	r1, r6
 801231c:	4622      	mov	r2, r4
 801231e:	4638      	mov	r0, r7
 8012320:	f7ff ff22 	bl	8012168 <__multiply>
 8012324:	4631      	mov	r1, r6
 8012326:	4680      	mov	r8, r0
 8012328:	4638      	mov	r0, r7
 801232a:	f7ff fe53 	bl	8011fd4 <_Bfree>
 801232e:	4646      	mov	r6, r8
 8012330:	106d      	asrs	r5, r5, #1
 8012332:	d00b      	beq.n	801234c <__pow5mult+0xa0>
 8012334:	6820      	ldr	r0, [r4, #0]
 8012336:	b938      	cbnz	r0, 8012348 <__pow5mult+0x9c>
 8012338:	4622      	mov	r2, r4
 801233a:	4621      	mov	r1, r4
 801233c:	4638      	mov	r0, r7
 801233e:	f7ff ff13 	bl	8012168 <__multiply>
 8012342:	6020      	str	r0, [r4, #0]
 8012344:	f8c0 9000 	str.w	r9, [r0]
 8012348:	4604      	mov	r4, r0
 801234a:	e7e4      	b.n	8012316 <__pow5mult+0x6a>
 801234c:	4630      	mov	r0, r6
 801234e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012352:	bf00      	nop
 8012354:	080150f0 	.word	0x080150f0
 8012358:	08014fa3 	.word	0x08014fa3
 801235c:	08015023 	.word	0x08015023

08012360 <__lshift>:
 8012360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012364:	460c      	mov	r4, r1
 8012366:	6849      	ldr	r1, [r1, #4]
 8012368:	6923      	ldr	r3, [r4, #16]
 801236a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801236e:	68a3      	ldr	r3, [r4, #8]
 8012370:	4607      	mov	r7, r0
 8012372:	4691      	mov	r9, r2
 8012374:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012378:	f108 0601 	add.w	r6, r8, #1
 801237c:	42b3      	cmp	r3, r6
 801237e:	db0b      	blt.n	8012398 <__lshift+0x38>
 8012380:	4638      	mov	r0, r7
 8012382:	f7ff fde7 	bl	8011f54 <_Balloc>
 8012386:	4605      	mov	r5, r0
 8012388:	b948      	cbnz	r0, 801239e <__lshift+0x3e>
 801238a:	4602      	mov	r2, r0
 801238c:	4b28      	ldr	r3, [pc, #160]	@ (8012430 <__lshift+0xd0>)
 801238e:	4829      	ldr	r0, [pc, #164]	@ (8012434 <__lshift+0xd4>)
 8012390:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012394:	f000 ffa0 	bl	80132d8 <__assert_func>
 8012398:	3101      	adds	r1, #1
 801239a:	005b      	lsls	r3, r3, #1
 801239c:	e7ee      	b.n	801237c <__lshift+0x1c>
 801239e:	2300      	movs	r3, #0
 80123a0:	f100 0114 	add.w	r1, r0, #20
 80123a4:	f100 0210 	add.w	r2, r0, #16
 80123a8:	4618      	mov	r0, r3
 80123aa:	4553      	cmp	r3, sl
 80123ac:	db33      	blt.n	8012416 <__lshift+0xb6>
 80123ae:	6920      	ldr	r0, [r4, #16]
 80123b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80123b4:	f104 0314 	add.w	r3, r4, #20
 80123b8:	f019 091f 	ands.w	r9, r9, #31
 80123bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80123c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80123c4:	d02b      	beq.n	801241e <__lshift+0xbe>
 80123c6:	f1c9 0e20 	rsb	lr, r9, #32
 80123ca:	468a      	mov	sl, r1
 80123cc:	2200      	movs	r2, #0
 80123ce:	6818      	ldr	r0, [r3, #0]
 80123d0:	fa00 f009 	lsl.w	r0, r0, r9
 80123d4:	4310      	orrs	r0, r2
 80123d6:	f84a 0b04 	str.w	r0, [sl], #4
 80123da:	f853 2b04 	ldr.w	r2, [r3], #4
 80123de:	459c      	cmp	ip, r3
 80123e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80123e4:	d8f3      	bhi.n	80123ce <__lshift+0x6e>
 80123e6:	ebac 0304 	sub.w	r3, ip, r4
 80123ea:	3b15      	subs	r3, #21
 80123ec:	f023 0303 	bic.w	r3, r3, #3
 80123f0:	3304      	adds	r3, #4
 80123f2:	f104 0015 	add.w	r0, r4, #21
 80123f6:	4560      	cmp	r0, ip
 80123f8:	bf88      	it	hi
 80123fa:	2304      	movhi	r3, #4
 80123fc:	50ca      	str	r2, [r1, r3]
 80123fe:	b10a      	cbz	r2, 8012404 <__lshift+0xa4>
 8012400:	f108 0602 	add.w	r6, r8, #2
 8012404:	3e01      	subs	r6, #1
 8012406:	4638      	mov	r0, r7
 8012408:	612e      	str	r6, [r5, #16]
 801240a:	4621      	mov	r1, r4
 801240c:	f7ff fde2 	bl	8011fd4 <_Bfree>
 8012410:	4628      	mov	r0, r5
 8012412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012416:	f842 0f04 	str.w	r0, [r2, #4]!
 801241a:	3301      	adds	r3, #1
 801241c:	e7c5      	b.n	80123aa <__lshift+0x4a>
 801241e:	3904      	subs	r1, #4
 8012420:	f853 2b04 	ldr.w	r2, [r3], #4
 8012424:	f841 2f04 	str.w	r2, [r1, #4]!
 8012428:	459c      	cmp	ip, r3
 801242a:	d8f9      	bhi.n	8012420 <__lshift+0xc0>
 801242c:	e7ea      	b.n	8012404 <__lshift+0xa4>
 801242e:	bf00      	nop
 8012430:	08015012 	.word	0x08015012
 8012434:	08015023 	.word	0x08015023

08012438 <__mcmp>:
 8012438:	690a      	ldr	r2, [r1, #16]
 801243a:	4603      	mov	r3, r0
 801243c:	6900      	ldr	r0, [r0, #16]
 801243e:	1a80      	subs	r0, r0, r2
 8012440:	b530      	push	{r4, r5, lr}
 8012442:	d10e      	bne.n	8012462 <__mcmp+0x2a>
 8012444:	3314      	adds	r3, #20
 8012446:	3114      	adds	r1, #20
 8012448:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801244c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012454:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012458:	4295      	cmp	r5, r2
 801245a:	d003      	beq.n	8012464 <__mcmp+0x2c>
 801245c:	d205      	bcs.n	801246a <__mcmp+0x32>
 801245e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012462:	bd30      	pop	{r4, r5, pc}
 8012464:	42a3      	cmp	r3, r4
 8012466:	d3f3      	bcc.n	8012450 <__mcmp+0x18>
 8012468:	e7fb      	b.n	8012462 <__mcmp+0x2a>
 801246a:	2001      	movs	r0, #1
 801246c:	e7f9      	b.n	8012462 <__mcmp+0x2a>
	...

08012470 <__mdiff>:
 8012470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012474:	4689      	mov	r9, r1
 8012476:	4606      	mov	r6, r0
 8012478:	4611      	mov	r1, r2
 801247a:	4648      	mov	r0, r9
 801247c:	4614      	mov	r4, r2
 801247e:	f7ff ffdb 	bl	8012438 <__mcmp>
 8012482:	1e05      	subs	r5, r0, #0
 8012484:	d112      	bne.n	80124ac <__mdiff+0x3c>
 8012486:	4629      	mov	r1, r5
 8012488:	4630      	mov	r0, r6
 801248a:	f7ff fd63 	bl	8011f54 <_Balloc>
 801248e:	4602      	mov	r2, r0
 8012490:	b928      	cbnz	r0, 801249e <__mdiff+0x2e>
 8012492:	4b3f      	ldr	r3, [pc, #252]	@ (8012590 <__mdiff+0x120>)
 8012494:	f240 2137 	movw	r1, #567	@ 0x237
 8012498:	483e      	ldr	r0, [pc, #248]	@ (8012594 <__mdiff+0x124>)
 801249a:	f000 ff1d 	bl	80132d8 <__assert_func>
 801249e:	2301      	movs	r3, #1
 80124a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80124a4:	4610      	mov	r0, r2
 80124a6:	b003      	add	sp, #12
 80124a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ac:	bfbc      	itt	lt
 80124ae:	464b      	movlt	r3, r9
 80124b0:	46a1      	movlt	r9, r4
 80124b2:	4630      	mov	r0, r6
 80124b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80124b8:	bfba      	itte	lt
 80124ba:	461c      	movlt	r4, r3
 80124bc:	2501      	movlt	r5, #1
 80124be:	2500      	movge	r5, #0
 80124c0:	f7ff fd48 	bl	8011f54 <_Balloc>
 80124c4:	4602      	mov	r2, r0
 80124c6:	b918      	cbnz	r0, 80124d0 <__mdiff+0x60>
 80124c8:	4b31      	ldr	r3, [pc, #196]	@ (8012590 <__mdiff+0x120>)
 80124ca:	f240 2145 	movw	r1, #581	@ 0x245
 80124ce:	e7e3      	b.n	8012498 <__mdiff+0x28>
 80124d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80124d4:	6926      	ldr	r6, [r4, #16]
 80124d6:	60c5      	str	r5, [r0, #12]
 80124d8:	f109 0310 	add.w	r3, r9, #16
 80124dc:	f109 0514 	add.w	r5, r9, #20
 80124e0:	f104 0e14 	add.w	lr, r4, #20
 80124e4:	f100 0b14 	add.w	fp, r0, #20
 80124e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80124ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80124f0:	9301      	str	r3, [sp, #4]
 80124f2:	46d9      	mov	r9, fp
 80124f4:	f04f 0c00 	mov.w	ip, #0
 80124f8:	9b01      	ldr	r3, [sp, #4]
 80124fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80124fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012502:	9301      	str	r3, [sp, #4]
 8012504:	fa1f f38a 	uxth.w	r3, sl
 8012508:	4619      	mov	r1, r3
 801250a:	b283      	uxth	r3, r0
 801250c:	1acb      	subs	r3, r1, r3
 801250e:	0c00      	lsrs	r0, r0, #16
 8012510:	4463      	add	r3, ip
 8012512:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012516:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801251a:	b29b      	uxth	r3, r3
 801251c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012520:	4576      	cmp	r6, lr
 8012522:	f849 3b04 	str.w	r3, [r9], #4
 8012526:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801252a:	d8e5      	bhi.n	80124f8 <__mdiff+0x88>
 801252c:	1b33      	subs	r3, r6, r4
 801252e:	3b15      	subs	r3, #21
 8012530:	f023 0303 	bic.w	r3, r3, #3
 8012534:	3415      	adds	r4, #21
 8012536:	3304      	adds	r3, #4
 8012538:	42a6      	cmp	r6, r4
 801253a:	bf38      	it	cc
 801253c:	2304      	movcc	r3, #4
 801253e:	441d      	add	r5, r3
 8012540:	445b      	add	r3, fp
 8012542:	461e      	mov	r6, r3
 8012544:	462c      	mov	r4, r5
 8012546:	4544      	cmp	r4, r8
 8012548:	d30e      	bcc.n	8012568 <__mdiff+0xf8>
 801254a:	f108 0103 	add.w	r1, r8, #3
 801254e:	1b49      	subs	r1, r1, r5
 8012550:	f021 0103 	bic.w	r1, r1, #3
 8012554:	3d03      	subs	r5, #3
 8012556:	45a8      	cmp	r8, r5
 8012558:	bf38      	it	cc
 801255a:	2100      	movcc	r1, #0
 801255c:	440b      	add	r3, r1
 801255e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012562:	b191      	cbz	r1, 801258a <__mdiff+0x11a>
 8012564:	6117      	str	r7, [r2, #16]
 8012566:	e79d      	b.n	80124a4 <__mdiff+0x34>
 8012568:	f854 1b04 	ldr.w	r1, [r4], #4
 801256c:	46e6      	mov	lr, ip
 801256e:	0c08      	lsrs	r0, r1, #16
 8012570:	fa1c fc81 	uxtah	ip, ip, r1
 8012574:	4471      	add	r1, lr
 8012576:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801257a:	b289      	uxth	r1, r1
 801257c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012580:	f846 1b04 	str.w	r1, [r6], #4
 8012584:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012588:	e7dd      	b.n	8012546 <__mdiff+0xd6>
 801258a:	3f01      	subs	r7, #1
 801258c:	e7e7      	b.n	801255e <__mdiff+0xee>
 801258e:	bf00      	nop
 8012590:	08015012 	.word	0x08015012
 8012594:	08015023 	.word	0x08015023

08012598 <__d2b>:
 8012598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801259c:	460f      	mov	r7, r1
 801259e:	2101      	movs	r1, #1
 80125a0:	ec59 8b10 	vmov	r8, r9, d0
 80125a4:	4616      	mov	r6, r2
 80125a6:	f7ff fcd5 	bl	8011f54 <_Balloc>
 80125aa:	4604      	mov	r4, r0
 80125ac:	b930      	cbnz	r0, 80125bc <__d2b+0x24>
 80125ae:	4602      	mov	r2, r0
 80125b0:	4b23      	ldr	r3, [pc, #140]	@ (8012640 <__d2b+0xa8>)
 80125b2:	4824      	ldr	r0, [pc, #144]	@ (8012644 <__d2b+0xac>)
 80125b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80125b8:	f000 fe8e 	bl	80132d8 <__assert_func>
 80125bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80125c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125c4:	b10d      	cbz	r5, 80125ca <__d2b+0x32>
 80125c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80125ca:	9301      	str	r3, [sp, #4]
 80125cc:	f1b8 0300 	subs.w	r3, r8, #0
 80125d0:	d023      	beq.n	801261a <__d2b+0x82>
 80125d2:	4668      	mov	r0, sp
 80125d4:	9300      	str	r3, [sp, #0]
 80125d6:	f7ff fd84 	bl	80120e2 <__lo0bits>
 80125da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80125de:	b1d0      	cbz	r0, 8012616 <__d2b+0x7e>
 80125e0:	f1c0 0320 	rsb	r3, r0, #32
 80125e4:	fa02 f303 	lsl.w	r3, r2, r3
 80125e8:	430b      	orrs	r3, r1
 80125ea:	40c2      	lsrs	r2, r0
 80125ec:	6163      	str	r3, [r4, #20]
 80125ee:	9201      	str	r2, [sp, #4]
 80125f0:	9b01      	ldr	r3, [sp, #4]
 80125f2:	61a3      	str	r3, [r4, #24]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	bf0c      	ite	eq
 80125f8:	2201      	moveq	r2, #1
 80125fa:	2202      	movne	r2, #2
 80125fc:	6122      	str	r2, [r4, #16]
 80125fe:	b1a5      	cbz	r5, 801262a <__d2b+0x92>
 8012600:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012604:	4405      	add	r5, r0
 8012606:	603d      	str	r5, [r7, #0]
 8012608:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801260c:	6030      	str	r0, [r6, #0]
 801260e:	4620      	mov	r0, r4
 8012610:	b003      	add	sp, #12
 8012612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012616:	6161      	str	r1, [r4, #20]
 8012618:	e7ea      	b.n	80125f0 <__d2b+0x58>
 801261a:	a801      	add	r0, sp, #4
 801261c:	f7ff fd61 	bl	80120e2 <__lo0bits>
 8012620:	9b01      	ldr	r3, [sp, #4]
 8012622:	6163      	str	r3, [r4, #20]
 8012624:	3020      	adds	r0, #32
 8012626:	2201      	movs	r2, #1
 8012628:	e7e8      	b.n	80125fc <__d2b+0x64>
 801262a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801262e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012632:	6038      	str	r0, [r7, #0]
 8012634:	6918      	ldr	r0, [r3, #16]
 8012636:	f7ff fd35 	bl	80120a4 <__hi0bits>
 801263a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801263e:	e7e5      	b.n	801260c <__d2b+0x74>
 8012640:	08015012 	.word	0x08015012
 8012644:	08015023 	.word	0x08015023

08012648 <_sungetc_r>:
 8012648:	b538      	push	{r3, r4, r5, lr}
 801264a:	1c4b      	adds	r3, r1, #1
 801264c:	4614      	mov	r4, r2
 801264e:	d103      	bne.n	8012658 <_sungetc_r+0x10>
 8012650:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8012654:	4628      	mov	r0, r5
 8012656:	bd38      	pop	{r3, r4, r5, pc}
 8012658:	8993      	ldrh	r3, [r2, #12]
 801265a:	f023 0320 	bic.w	r3, r3, #32
 801265e:	8193      	strh	r3, [r2, #12]
 8012660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012662:	6852      	ldr	r2, [r2, #4]
 8012664:	b2cd      	uxtb	r5, r1
 8012666:	b18b      	cbz	r3, 801268c <_sungetc_r+0x44>
 8012668:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801266a:	4293      	cmp	r3, r2
 801266c:	dd08      	ble.n	8012680 <_sungetc_r+0x38>
 801266e:	6823      	ldr	r3, [r4, #0]
 8012670:	1e5a      	subs	r2, r3, #1
 8012672:	6022      	str	r2, [r4, #0]
 8012674:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012678:	6863      	ldr	r3, [r4, #4]
 801267a:	3301      	adds	r3, #1
 801267c:	6063      	str	r3, [r4, #4]
 801267e:	e7e9      	b.n	8012654 <_sungetc_r+0xc>
 8012680:	4621      	mov	r1, r4
 8012682:	f000 fdbc 	bl	80131fe <__submore>
 8012686:	2800      	cmp	r0, #0
 8012688:	d0f1      	beq.n	801266e <_sungetc_r+0x26>
 801268a:	e7e1      	b.n	8012650 <_sungetc_r+0x8>
 801268c:	6921      	ldr	r1, [r4, #16]
 801268e:	6823      	ldr	r3, [r4, #0]
 8012690:	b151      	cbz	r1, 80126a8 <_sungetc_r+0x60>
 8012692:	4299      	cmp	r1, r3
 8012694:	d208      	bcs.n	80126a8 <_sungetc_r+0x60>
 8012696:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801269a:	42a9      	cmp	r1, r5
 801269c:	d104      	bne.n	80126a8 <_sungetc_r+0x60>
 801269e:	3b01      	subs	r3, #1
 80126a0:	3201      	adds	r2, #1
 80126a2:	6023      	str	r3, [r4, #0]
 80126a4:	6062      	str	r2, [r4, #4]
 80126a6:	e7d5      	b.n	8012654 <_sungetc_r+0xc>
 80126a8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80126ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80126b2:	2303      	movs	r3, #3
 80126b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80126b6:	4623      	mov	r3, r4
 80126b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80126bc:	6023      	str	r3, [r4, #0]
 80126be:	2301      	movs	r3, #1
 80126c0:	e7dc      	b.n	801267c <_sungetc_r+0x34>

080126c2 <__ssrefill_r>:
 80126c2:	b510      	push	{r4, lr}
 80126c4:	460c      	mov	r4, r1
 80126c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80126c8:	b169      	cbz	r1, 80126e6 <__ssrefill_r+0x24>
 80126ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126ce:	4299      	cmp	r1, r3
 80126d0:	d001      	beq.n	80126d6 <__ssrefill_r+0x14>
 80126d2:	f7ff fb3f 	bl	8011d54 <_free_r>
 80126d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80126d8:	6063      	str	r3, [r4, #4]
 80126da:	2000      	movs	r0, #0
 80126dc:	6360      	str	r0, [r4, #52]	@ 0x34
 80126de:	b113      	cbz	r3, 80126e6 <__ssrefill_r+0x24>
 80126e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80126e2:	6023      	str	r3, [r4, #0]
 80126e4:	bd10      	pop	{r4, pc}
 80126e6:	6923      	ldr	r3, [r4, #16]
 80126e8:	6023      	str	r3, [r4, #0]
 80126ea:	2300      	movs	r3, #0
 80126ec:	6063      	str	r3, [r4, #4]
 80126ee:	89a3      	ldrh	r3, [r4, #12]
 80126f0:	f043 0320 	orr.w	r3, r3, #32
 80126f4:	81a3      	strh	r3, [r4, #12]
 80126f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80126fa:	e7f3      	b.n	80126e4 <__ssrefill_r+0x22>

080126fc <__ssvfiscanf_r>:
 80126fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012700:	460c      	mov	r4, r1
 8012702:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8012706:	2100      	movs	r1, #0
 8012708:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801270c:	49a6      	ldr	r1, [pc, #664]	@ (80129a8 <__ssvfiscanf_r+0x2ac>)
 801270e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012710:	f10d 0804 	add.w	r8, sp, #4
 8012714:	49a5      	ldr	r1, [pc, #660]	@ (80129ac <__ssvfiscanf_r+0x2b0>)
 8012716:	4fa6      	ldr	r7, [pc, #664]	@ (80129b0 <__ssvfiscanf_r+0x2b4>)
 8012718:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801271c:	4606      	mov	r6, r0
 801271e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012720:	9300      	str	r3, [sp, #0]
 8012722:	f892 9000 	ldrb.w	r9, [r2]
 8012726:	f1b9 0f00 	cmp.w	r9, #0
 801272a:	f000 8158 	beq.w	80129de <__ssvfiscanf_r+0x2e2>
 801272e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8012732:	f013 0308 	ands.w	r3, r3, #8
 8012736:	f102 0501 	add.w	r5, r2, #1
 801273a:	d019      	beq.n	8012770 <__ssvfiscanf_r+0x74>
 801273c:	6863      	ldr	r3, [r4, #4]
 801273e:	2b00      	cmp	r3, #0
 8012740:	dd0f      	ble.n	8012762 <__ssvfiscanf_r+0x66>
 8012742:	6823      	ldr	r3, [r4, #0]
 8012744:	781a      	ldrb	r2, [r3, #0]
 8012746:	5cba      	ldrb	r2, [r7, r2]
 8012748:	0712      	lsls	r2, r2, #28
 801274a:	d401      	bmi.n	8012750 <__ssvfiscanf_r+0x54>
 801274c:	462a      	mov	r2, r5
 801274e:	e7e8      	b.n	8012722 <__ssvfiscanf_r+0x26>
 8012750:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012752:	3201      	adds	r2, #1
 8012754:	9245      	str	r2, [sp, #276]	@ 0x114
 8012756:	6862      	ldr	r2, [r4, #4]
 8012758:	3301      	adds	r3, #1
 801275a:	3a01      	subs	r2, #1
 801275c:	6062      	str	r2, [r4, #4]
 801275e:	6023      	str	r3, [r4, #0]
 8012760:	e7ec      	b.n	801273c <__ssvfiscanf_r+0x40>
 8012762:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012764:	4621      	mov	r1, r4
 8012766:	4630      	mov	r0, r6
 8012768:	4798      	blx	r3
 801276a:	2800      	cmp	r0, #0
 801276c:	d0e9      	beq.n	8012742 <__ssvfiscanf_r+0x46>
 801276e:	e7ed      	b.n	801274c <__ssvfiscanf_r+0x50>
 8012770:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8012774:	f040 8085 	bne.w	8012882 <__ssvfiscanf_r+0x186>
 8012778:	9341      	str	r3, [sp, #260]	@ 0x104
 801277a:	9343      	str	r3, [sp, #268]	@ 0x10c
 801277c:	7853      	ldrb	r3, [r2, #1]
 801277e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012780:	bf02      	ittt	eq
 8012782:	2310      	moveq	r3, #16
 8012784:	1c95      	addeq	r5, r2, #2
 8012786:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012788:	220a      	movs	r2, #10
 801278a:	46aa      	mov	sl, r5
 801278c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8012790:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012794:	2b09      	cmp	r3, #9
 8012796:	d91e      	bls.n	80127d6 <__ssvfiscanf_r+0xda>
 8012798:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80129b4 <__ssvfiscanf_r+0x2b8>
 801279c:	2203      	movs	r2, #3
 801279e:	4658      	mov	r0, fp
 80127a0:	f7ed fdc6 	bl	8000330 <memchr>
 80127a4:	b138      	cbz	r0, 80127b6 <__ssvfiscanf_r+0xba>
 80127a6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80127a8:	eba0 000b 	sub.w	r0, r0, fp
 80127ac:	2301      	movs	r3, #1
 80127ae:	4083      	lsls	r3, r0
 80127b0:	4313      	orrs	r3, r2
 80127b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80127b4:	4655      	mov	r5, sl
 80127b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80127ba:	2b78      	cmp	r3, #120	@ 0x78
 80127bc:	d806      	bhi.n	80127cc <__ssvfiscanf_r+0xd0>
 80127be:	2b57      	cmp	r3, #87	@ 0x57
 80127c0:	d810      	bhi.n	80127e4 <__ssvfiscanf_r+0xe8>
 80127c2:	2b25      	cmp	r3, #37	@ 0x25
 80127c4:	d05d      	beq.n	8012882 <__ssvfiscanf_r+0x186>
 80127c6:	d857      	bhi.n	8012878 <__ssvfiscanf_r+0x17c>
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d075      	beq.n	80128b8 <__ssvfiscanf_r+0x1bc>
 80127cc:	2303      	movs	r3, #3
 80127ce:	9347      	str	r3, [sp, #284]	@ 0x11c
 80127d0:	230a      	movs	r3, #10
 80127d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80127d4:	e088      	b.n	80128e8 <__ssvfiscanf_r+0x1ec>
 80127d6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80127d8:	fb02 1103 	mla	r1, r2, r3, r1
 80127dc:	3930      	subs	r1, #48	@ 0x30
 80127de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80127e0:	4655      	mov	r5, sl
 80127e2:	e7d2      	b.n	801278a <__ssvfiscanf_r+0x8e>
 80127e4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80127e8:	2a20      	cmp	r2, #32
 80127ea:	d8ef      	bhi.n	80127cc <__ssvfiscanf_r+0xd0>
 80127ec:	a101      	add	r1, pc, #4	@ (adr r1, 80127f4 <__ssvfiscanf_r+0xf8>)
 80127ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80127f2:	bf00      	nop
 80127f4:	080128c7 	.word	0x080128c7
 80127f8:	080127cd 	.word	0x080127cd
 80127fc:	080127cd 	.word	0x080127cd
 8012800:	08012921 	.word	0x08012921
 8012804:	080127cd 	.word	0x080127cd
 8012808:	080127cd 	.word	0x080127cd
 801280c:	080127cd 	.word	0x080127cd
 8012810:	080127cd 	.word	0x080127cd
 8012814:	080127cd 	.word	0x080127cd
 8012818:	080127cd 	.word	0x080127cd
 801281c:	080127cd 	.word	0x080127cd
 8012820:	08012937 	.word	0x08012937
 8012824:	0801291d 	.word	0x0801291d
 8012828:	0801287f 	.word	0x0801287f
 801282c:	0801287f 	.word	0x0801287f
 8012830:	0801287f 	.word	0x0801287f
 8012834:	080127cd 	.word	0x080127cd
 8012838:	080128d9 	.word	0x080128d9
 801283c:	080127cd 	.word	0x080127cd
 8012840:	080127cd 	.word	0x080127cd
 8012844:	080127cd 	.word	0x080127cd
 8012848:	080127cd 	.word	0x080127cd
 801284c:	08012947 	.word	0x08012947
 8012850:	080128e1 	.word	0x080128e1
 8012854:	080128bf 	.word	0x080128bf
 8012858:	080127cd 	.word	0x080127cd
 801285c:	080127cd 	.word	0x080127cd
 8012860:	08012943 	.word	0x08012943
 8012864:	080127cd 	.word	0x080127cd
 8012868:	0801291d 	.word	0x0801291d
 801286c:	080127cd 	.word	0x080127cd
 8012870:	080127cd 	.word	0x080127cd
 8012874:	080128c7 	.word	0x080128c7
 8012878:	3b45      	subs	r3, #69	@ 0x45
 801287a:	2b02      	cmp	r3, #2
 801287c:	d8a6      	bhi.n	80127cc <__ssvfiscanf_r+0xd0>
 801287e:	2305      	movs	r3, #5
 8012880:	e031      	b.n	80128e6 <__ssvfiscanf_r+0x1ea>
 8012882:	6863      	ldr	r3, [r4, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	dd0d      	ble.n	80128a4 <__ssvfiscanf_r+0x1a8>
 8012888:	6823      	ldr	r3, [r4, #0]
 801288a:	781a      	ldrb	r2, [r3, #0]
 801288c:	454a      	cmp	r2, r9
 801288e:	f040 80a6 	bne.w	80129de <__ssvfiscanf_r+0x2e2>
 8012892:	3301      	adds	r3, #1
 8012894:	6862      	ldr	r2, [r4, #4]
 8012896:	6023      	str	r3, [r4, #0]
 8012898:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801289a:	3a01      	subs	r2, #1
 801289c:	3301      	adds	r3, #1
 801289e:	6062      	str	r2, [r4, #4]
 80128a0:	9345      	str	r3, [sp, #276]	@ 0x114
 80128a2:	e753      	b.n	801274c <__ssvfiscanf_r+0x50>
 80128a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80128a6:	4621      	mov	r1, r4
 80128a8:	4630      	mov	r0, r6
 80128aa:	4798      	blx	r3
 80128ac:	2800      	cmp	r0, #0
 80128ae:	d0eb      	beq.n	8012888 <__ssvfiscanf_r+0x18c>
 80128b0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80128b2:	2800      	cmp	r0, #0
 80128b4:	f040 808b 	bne.w	80129ce <__ssvfiscanf_r+0x2d2>
 80128b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80128bc:	e08b      	b.n	80129d6 <__ssvfiscanf_r+0x2da>
 80128be:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80128c0:	f042 0220 	orr.w	r2, r2, #32
 80128c4:	9241      	str	r2, [sp, #260]	@ 0x104
 80128c6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80128c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80128cc:	9241      	str	r2, [sp, #260]	@ 0x104
 80128ce:	2210      	movs	r2, #16
 80128d0:	2b6e      	cmp	r3, #110	@ 0x6e
 80128d2:	9242      	str	r2, [sp, #264]	@ 0x108
 80128d4:	d902      	bls.n	80128dc <__ssvfiscanf_r+0x1e0>
 80128d6:	e005      	b.n	80128e4 <__ssvfiscanf_r+0x1e8>
 80128d8:	2300      	movs	r3, #0
 80128da:	9342      	str	r3, [sp, #264]	@ 0x108
 80128dc:	2303      	movs	r3, #3
 80128de:	e002      	b.n	80128e6 <__ssvfiscanf_r+0x1ea>
 80128e0:	2308      	movs	r3, #8
 80128e2:	9342      	str	r3, [sp, #264]	@ 0x108
 80128e4:	2304      	movs	r3, #4
 80128e6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80128e8:	6863      	ldr	r3, [r4, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	dd39      	ble.n	8012962 <__ssvfiscanf_r+0x266>
 80128ee:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80128f0:	0659      	lsls	r1, r3, #25
 80128f2:	d404      	bmi.n	80128fe <__ssvfiscanf_r+0x202>
 80128f4:	6823      	ldr	r3, [r4, #0]
 80128f6:	781a      	ldrb	r2, [r3, #0]
 80128f8:	5cba      	ldrb	r2, [r7, r2]
 80128fa:	0712      	lsls	r2, r2, #28
 80128fc:	d438      	bmi.n	8012970 <__ssvfiscanf_r+0x274>
 80128fe:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012900:	2b02      	cmp	r3, #2
 8012902:	dc47      	bgt.n	8012994 <__ssvfiscanf_r+0x298>
 8012904:	466b      	mov	r3, sp
 8012906:	4622      	mov	r2, r4
 8012908:	a941      	add	r1, sp, #260	@ 0x104
 801290a:	4630      	mov	r0, r6
 801290c:	f000 f9ae 	bl	8012c6c <_scanf_chars>
 8012910:	2801      	cmp	r0, #1
 8012912:	d064      	beq.n	80129de <__ssvfiscanf_r+0x2e2>
 8012914:	2802      	cmp	r0, #2
 8012916:	f47f af19 	bne.w	801274c <__ssvfiscanf_r+0x50>
 801291a:	e7c9      	b.n	80128b0 <__ssvfiscanf_r+0x1b4>
 801291c:	220a      	movs	r2, #10
 801291e:	e7d7      	b.n	80128d0 <__ssvfiscanf_r+0x1d4>
 8012920:	4629      	mov	r1, r5
 8012922:	4640      	mov	r0, r8
 8012924:	f000 fc32 	bl	801318c <__sccl>
 8012928:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801292a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801292e:	9341      	str	r3, [sp, #260]	@ 0x104
 8012930:	4605      	mov	r5, r0
 8012932:	2301      	movs	r3, #1
 8012934:	e7d7      	b.n	80128e6 <__ssvfiscanf_r+0x1ea>
 8012936:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801293c:	9341      	str	r3, [sp, #260]	@ 0x104
 801293e:	2300      	movs	r3, #0
 8012940:	e7d1      	b.n	80128e6 <__ssvfiscanf_r+0x1ea>
 8012942:	2302      	movs	r3, #2
 8012944:	e7cf      	b.n	80128e6 <__ssvfiscanf_r+0x1ea>
 8012946:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012948:	06c3      	lsls	r3, r0, #27
 801294a:	f53f aeff 	bmi.w	801274c <__ssvfiscanf_r+0x50>
 801294e:	9b00      	ldr	r3, [sp, #0]
 8012950:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012952:	1d19      	adds	r1, r3, #4
 8012954:	9100      	str	r1, [sp, #0]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	07c0      	lsls	r0, r0, #31
 801295a:	bf4c      	ite	mi
 801295c:	801a      	strhmi	r2, [r3, #0]
 801295e:	601a      	strpl	r2, [r3, #0]
 8012960:	e6f4      	b.n	801274c <__ssvfiscanf_r+0x50>
 8012962:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012964:	4621      	mov	r1, r4
 8012966:	4630      	mov	r0, r6
 8012968:	4798      	blx	r3
 801296a:	2800      	cmp	r0, #0
 801296c:	d0bf      	beq.n	80128ee <__ssvfiscanf_r+0x1f2>
 801296e:	e79f      	b.n	80128b0 <__ssvfiscanf_r+0x1b4>
 8012970:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012972:	3201      	adds	r2, #1
 8012974:	9245      	str	r2, [sp, #276]	@ 0x114
 8012976:	6862      	ldr	r2, [r4, #4]
 8012978:	3a01      	subs	r2, #1
 801297a:	2a00      	cmp	r2, #0
 801297c:	6062      	str	r2, [r4, #4]
 801297e:	dd02      	ble.n	8012986 <__ssvfiscanf_r+0x28a>
 8012980:	3301      	adds	r3, #1
 8012982:	6023      	str	r3, [r4, #0]
 8012984:	e7b6      	b.n	80128f4 <__ssvfiscanf_r+0x1f8>
 8012986:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012988:	4621      	mov	r1, r4
 801298a:	4630      	mov	r0, r6
 801298c:	4798      	blx	r3
 801298e:	2800      	cmp	r0, #0
 8012990:	d0b0      	beq.n	80128f4 <__ssvfiscanf_r+0x1f8>
 8012992:	e78d      	b.n	80128b0 <__ssvfiscanf_r+0x1b4>
 8012994:	2b04      	cmp	r3, #4
 8012996:	dc0f      	bgt.n	80129b8 <__ssvfiscanf_r+0x2bc>
 8012998:	466b      	mov	r3, sp
 801299a:	4622      	mov	r2, r4
 801299c:	a941      	add	r1, sp, #260	@ 0x104
 801299e:	4630      	mov	r0, r6
 80129a0:	f000 f9be 	bl	8012d20 <_scanf_i>
 80129a4:	e7b4      	b.n	8012910 <__ssvfiscanf_r+0x214>
 80129a6:	bf00      	nop
 80129a8:	08012649 	.word	0x08012649
 80129ac:	080126c3 	.word	0x080126c3
 80129b0:	080151f1 	.word	0x080151f1
 80129b4:	0801507c 	.word	0x0801507c
 80129b8:	4b0a      	ldr	r3, [pc, #40]	@ (80129e4 <__ssvfiscanf_r+0x2e8>)
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	f43f aec6 	beq.w	801274c <__ssvfiscanf_r+0x50>
 80129c0:	466b      	mov	r3, sp
 80129c2:	4622      	mov	r2, r4
 80129c4:	a941      	add	r1, sp, #260	@ 0x104
 80129c6:	4630      	mov	r0, r6
 80129c8:	f3af 8000 	nop.w
 80129cc:	e7a0      	b.n	8012910 <__ssvfiscanf_r+0x214>
 80129ce:	89a3      	ldrh	r3, [r4, #12]
 80129d0:	065b      	lsls	r3, r3, #25
 80129d2:	f53f af71 	bmi.w	80128b8 <__ssvfiscanf_r+0x1bc>
 80129d6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80129da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129de:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80129e0:	e7f9      	b.n	80129d6 <__ssvfiscanf_r+0x2da>
 80129e2:	bf00      	nop
 80129e4:	00000000 	.word	0x00000000

080129e8 <__sfputc_r>:
 80129e8:	6893      	ldr	r3, [r2, #8]
 80129ea:	3b01      	subs	r3, #1
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	b410      	push	{r4}
 80129f0:	6093      	str	r3, [r2, #8]
 80129f2:	da08      	bge.n	8012a06 <__sfputc_r+0x1e>
 80129f4:	6994      	ldr	r4, [r2, #24]
 80129f6:	42a3      	cmp	r3, r4
 80129f8:	db01      	blt.n	80129fe <__sfputc_r+0x16>
 80129fa:	290a      	cmp	r1, #10
 80129fc:	d103      	bne.n	8012a06 <__sfputc_r+0x1e>
 80129fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a02:	f7fe ba62 	b.w	8010eca <__swbuf_r>
 8012a06:	6813      	ldr	r3, [r2, #0]
 8012a08:	1c58      	adds	r0, r3, #1
 8012a0a:	6010      	str	r0, [r2, #0]
 8012a0c:	7019      	strb	r1, [r3, #0]
 8012a0e:	4608      	mov	r0, r1
 8012a10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a14:	4770      	bx	lr

08012a16 <__sfputs_r>:
 8012a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a18:	4606      	mov	r6, r0
 8012a1a:	460f      	mov	r7, r1
 8012a1c:	4614      	mov	r4, r2
 8012a1e:	18d5      	adds	r5, r2, r3
 8012a20:	42ac      	cmp	r4, r5
 8012a22:	d101      	bne.n	8012a28 <__sfputs_r+0x12>
 8012a24:	2000      	movs	r0, #0
 8012a26:	e007      	b.n	8012a38 <__sfputs_r+0x22>
 8012a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a2c:	463a      	mov	r2, r7
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7ff ffda 	bl	80129e8 <__sfputc_r>
 8012a34:	1c43      	adds	r3, r0, #1
 8012a36:	d1f3      	bne.n	8012a20 <__sfputs_r+0xa>
 8012a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a3c <_vfiprintf_r>:
 8012a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a40:	460d      	mov	r5, r1
 8012a42:	b09d      	sub	sp, #116	@ 0x74
 8012a44:	4614      	mov	r4, r2
 8012a46:	4698      	mov	r8, r3
 8012a48:	4606      	mov	r6, r0
 8012a4a:	b118      	cbz	r0, 8012a54 <_vfiprintf_r+0x18>
 8012a4c:	6a03      	ldr	r3, [r0, #32]
 8012a4e:	b90b      	cbnz	r3, 8012a54 <_vfiprintf_r+0x18>
 8012a50:	f7fe f91c 	bl	8010c8c <__sinit>
 8012a54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a56:	07d9      	lsls	r1, r3, #31
 8012a58:	d405      	bmi.n	8012a66 <_vfiprintf_r+0x2a>
 8012a5a:	89ab      	ldrh	r3, [r5, #12]
 8012a5c:	059a      	lsls	r2, r3, #22
 8012a5e:	d402      	bmi.n	8012a66 <_vfiprintf_r+0x2a>
 8012a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a62:	f7fe fb7e 	bl	8011162 <__retarget_lock_acquire_recursive>
 8012a66:	89ab      	ldrh	r3, [r5, #12]
 8012a68:	071b      	lsls	r3, r3, #28
 8012a6a:	d501      	bpl.n	8012a70 <_vfiprintf_r+0x34>
 8012a6c:	692b      	ldr	r3, [r5, #16]
 8012a6e:	b99b      	cbnz	r3, 8012a98 <_vfiprintf_r+0x5c>
 8012a70:	4629      	mov	r1, r5
 8012a72:	4630      	mov	r0, r6
 8012a74:	f7fe fa68 	bl	8010f48 <__swsetup_r>
 8012a78:	b170      	cbz	r0, 8012a98 <_vfiprintf_r+0x5c>
 8012a7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a7c:	07dc      	lsls	r4, r3, #31
 8012a7e:	d504      	bpl.n	8012a8a <_vfiprintf_r+0x4e>
 8012a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a84:	b01d      	add	sp, #116	@ 0x74
 8012a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a8a:	89ab      	ldrh	r3, [r5, #12]
 8012a8c:	0598      	lsls	r0, r3, #22
 8012a8e:	d4f7      	bmi.n	8012a80 <_vfiprintf_r+0x44>
 8012a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a92:	f7fe fb67 	bl	8011164 <__retarget_lock_release_recursive>
 8012a96:	e7f3      	b.n	8012a80 <_vfiprintf_r+0x44>
 8012a98:	2300      	movs	r3, #0
 8012a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a9c:	2320      	movs	r3, #32
 8012a9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012aa6:	2330      	movs	r3, #48	@ 0x30
 8012aa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012c58 <_vfiprintf_r+0x21c>
 8012aac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012ab0:	f04f 0901 	mov.w	r9, #1
 8012ab4:	4623      	mov	r3, r4
 8012ab6:	469a      	mov	sl, r3
 8012ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012abc:	b10a      	cbz	r2, 8012ac2 <_vfiprintf_r+0x86>
 8012abe:	2a25      	cmp	r2, #37	@ 0x25
 8012ac0:	d1f9      	bne.n	8012ab6 <_vfiprintf_r+0x7a>
 8012ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8012ac6:	d00b      	beq.n	8012ae0 <_vfiprintf_r+0xa4>
 8012ac8:	465b      	mov	r3, fp
 8012aca:	4622      	mov	r2, r4
 8012acc:	4629      	mov	r1, r5
 8012ace:	4630      	mov	r0, r6
 8012ad0:	f7ff ffa1 	bl	8012a16 <__sfputs_r>
 8012ad4:	3001      	adds	r0, #1
 8012ad6:	f000 80a7 	beq.w	8012c28 <_vfiprintf_r+0x1ec>
 8012ada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012adc:	445a      	add	r2, fp
 8012ade:	9209      	str	r2, [sp, #36]	@ 0x24
 8012ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	f000 809f 	beq.w	8012c28 <_vfiprintf_r+0x1ec>
 8012aea:	2300      	movs	r3, #0
 8012aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012af4:	f10a 0a01 	add.w	sl, sl, #1
 8012af8:	9304      	str	r3, [sp, #16]
 8012afa:	9307      	str	r3, [sp, #28]
 8012afc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012b00:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b02:	4654      	mov	r4, sl
 8012b04:	2205      	movs	r2, #5
 8012b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b0a:	4853      	ldr	r0, [pc, #332]	@ (8012c58 <_vfiprintf_r+0x21c>)
 8012b0c:	f7ed fc10 	bl	8000330 <memchr>
 8012b10:	9a04      	ldr	r2, [sp, #16]
 8012b12:	b9d8      	cbnz	r0, 8012b4c <_vfiprintf_r+0x110>
 8012b14:	06d1      	lsls	r1, r2, #27
 8012b16:	bf44      	itt	mi
 8012b18:	2320      	movmi	r3, #32
 8012b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b1e:	0713      	lsls	r3, r2, #28
 8012b20:	bf44      	itt	mi
 8012b22:	232b      	movmi	r3, #43	@ 0x2b
 8012b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b28:	f89a 3000 	ldrb.w	r3, [sl]
 8012b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b2e:	d015      	beq.n	8012b5c <_vfiprintf_r+0x120>
 8012b30:	9a07      	ldr	r2, [sp, #28]
 8012b32:	4654      	mov	r4, sl
 8012b34:	2000      	movs	r0, #0
 8012b36:	f04f 0c0a 	mov.w	ip, #10
 8012b3a:	4621      	mov	r1, r4
 8012b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b40:	3b30      	subs	r3, #48	@ 0x30
 8012b42:	2b09      	cmp	r3, #9
 8012b44:	d94b      	bls.n	8012bde <_vfiprintf_r+0x1a2>
 8012b46:	b1b0      	cbz	r0, 8012b76 <_vfiprintf_r+0x13a>
 8012b48:	9207      	str	r2, [sp, #28]
 8012b4a:	e014      	b.n	8012b76 <_vfiprintf_r+0x13a>
 8012b4c:	eba0 0308 	sub.w	r3, r0, r8
 8012b50:	fa09 f303 	lsl.w	r3, r9, r3
 8012b54:	4313      	orrs	r3, r2
 8012b56:	9304      	str	r3, [sp, #16]
 8012b58:	46a2      	mov	sl, r4
 8012b5a:	e7d2      	b.n	8012b02 <_vfiprintf_r+0xc6>
 8012b5c:	9b03      	ldr	r3, [sp, #12]
 8012b5e:	1d19      	adds	r1, r3, #4
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	9103      	str	r1, [sp, #12]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	bfbb      	ittet	lt
 8012b68:	425b      	neglt	r3, r3
 8012b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8012b6e:	9307      	strge	r3, [sp, #28]
 8012b70:	9307      	strlt	r3, [sp, #28]
 8012b72:	bfb8      	it	lt
 8012b74:	9204      	strlt	r2, [sp, #16]
 8012b76:	7823      	ldrb	r3, [r4, #0]
 8012b78:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b7a:	d10a      	bne.n	8012b92 <_vfiprintf_r+0x156>
 8012b7c:	7863      	ldrb	r3, [r4, #1]
 8012b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b80:	d132      	bne.n	8012be8 <_vfiprintf_r+0x1ac>
 8012b82:	9b03      	ldr	r3, [sp, #12]
 8012b84:	1d1a      	adds	r2, r3, #4
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	9203      	str	r2, [sp, #12]
 8012b8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012b8e:	3402      	adds	r4, #2
 8012b90:	9305      	str	r3, [sp, #20]
 8012b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012c68 <_vfiprintf_r+0x22c>
 8012b96:	7821      	ldrb	r1, [r4, #0]
 8012b98:	2203      	movs	r2, #3
 8012b9a:	4650      	mov	r0, sl
 8012b9c:	f7ed fbc8 	bl	8000330 <memchr>
 8012ba0:	b138      	cbz	r0, 8012bb2 <_vfiprintf_r+0x176>
 8012ba2:	9b04      	ldr	r3, [sp, #16]
 8012ba4:	eba0 000a 	sub.w	r0, r0, sl
 8012ba8:	2240      	movs	r2, #64	@ 0x40
 8012baa:	4082      	lsls	r2, r0
 8012bac:	4313      	orrs	r3, r2
 8012bae:	3401      	adds	r4, #1
 8012bb0:	9304      	str	r3, [sp, #16]
 8012bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bb6:	4829      	ldr	r0, [pc, #164]	@ (8012c5c <_vfiprintf_r+0x220>)
 8012bb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012bbc:	2206      	movs	r2, #6
 8012bbe:	f7ed fbb7 	bl	8000330 <memchr>
 8012bc2:	2800      	cmp	r0, #0
 8012bc4:	d03f      	beq.n	8012c46 <_vfiprintf_r+0x20a>
 8012bc6:	4b26      	ldr	r3, [pc, #152]	@ (8012c60 <_vfiprintf_r+0x224>)
 8012bc8:	bb1b      	cbnz	r3, 8012c12 <_vfiprintf_r+0x1d6>
 8012bca:	9b03      	ldr	r3, [sp, #12]
 8012bcc:	3307      	adds	r3, #7
 8012bce:	f023 0307 	bic.w	r3, r3, #7
 8012bd2:	3308      	adds	r3, #8
 8012bd4:	9303      	str	r3, [sp, #12]
 8012bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bd8:	443b      	add	r3, r7
 8012bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bdc:	e76a      	b.n	8012ab4 <_vfiprintf_r+0x78>
 8012bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8012be2:	460c      	mov	r4, r1
 8012be4:	2001      	movs	r0, #1
 8012be6:	e7a8      	b.n	8012b3a <_vfiprintf_r+0xfe>
 8012be8:	2300      	movs	r3, #0
 8012bea:	3401      	adds	r4, #1
 8012bec:	9305      	str	r3, [sp, #20]
 8012bee:	4619      	mov	r1, r3
 8012bf0:	f04f 0c0a 	mov.w	ip, #10
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bfa:	3a30      	subs	r2, #48	@ 0x30
 8012bfc:	2a09      	cmp	r2, #9
 8012bfe:	d903      	bls.n	8012c08 <_vfiprintf_r+0x1cc>
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d0c6      	beq.n	8012b92 <_vfiprintf_r+0x156>
 8012c04:	9105      	str	r1, [sp, #20]
 8012c06:	e7c4      	b.n	8012b92 <_vfiprintf_r+0x156>
 8012c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c0c:	4604      	mov	r4, r0
 8012c0e:	2301      	movs	r3, #1
 8012c10:	e7f0      	b.n	8012bf4 <_vfiprintf_r+0x1b8>
 8012c12:	ab03      	add	r3, sp, #12
 8012c14:	9300      	str	r3, [sp, #0]
 8012c16:	462a      	mov	r2, r5
 8012c18:	4b12      	ldr	r3, [pc, #72]	@ (8012c64 <_vfiprintf_r+0x228>)
 8012c1a:	a904      	add	r1, sp, #16
 8012c1c:	4630      	mov	r0, r6
 8012c1e:	f7fd fc03 	bl	8010428 <_printf_float>
 8012c22:	4607      	mov	r7, r0
 8012c24:	1c78      	adds	r0, r7, #1
 8012c26:	d1d6      	bne.n	8012bd6 <_vfiprintf_r+0x19a>
 8012c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c2a:	07d9      	lsls	r1, r3, #31
 8012c2c:	d405      	bmi.n	8012c3a <_vfiprintf_r+0x1fe>
 8012c2e:	89ab      	ldrh	r3, [r5, #12]
 8012c30:	059a      	lsls	r2, r3, #22
 8012c32:	d402      	bmi.n	8012c3a <_vfiprintf_r+0x1fe>
 8012c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c36:	f7fe fa95 	bl	8011164 <__retarget_lock_release_recursive>
 8012c3a:	89ab      	ldrh	r3, [r5, #12]
 8012c3c:	065b      	lsls	r3, r3, #25
 8012c3e:	f53f af1f 	bmi.w	8012a80 <_vfiprintf_r+0x44>
 8012c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c44:	e71e      	b.n	8012a84 <_vfiprintf_r+0x48>
 8012c46:	ab03      	add	r3, sp, #12
 8012c48:	9300      	str	r3, [sp, #0]
 8012c4a:	462a      	mov	r2, r5
 8012c4c:	4b05      	ldr	r3, [pc, #20]	@ (8012c64 <_vfiprintf_r+0x228>)
 8012c4e:	a904      	add	r1, sp, #16
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7fd fe71 	bl	8010938 <_printf_i>
 8012c56:	e7e4      	b.n	8012c22 <_vfiprintf_r+0x1e6>
 8012c58:	08015080 	.word	0x08015080
 8012c5c:	08015086 	.word	0x08015086
 8012c60:	08010429 	.word	0x08010429
 8012c64:	08012a17 	.word	0x08012a17
 8012c68:	0801507c 	.word	0x0801507c

08012c6c <_scanf_chars>:
 8012c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c70:	4615      	mov	r5, r2
 8012c72:	688a      	ldr	r2, [r1, #8]
 8012c74:	4680      	mov	r8, r0
 8012c76:	460c      	mov	r4, r1
 8012c78:	b932      	cbnz	r2, 8012c88 <_scanf_chars+0x1c>
 8012c7a:	698a      	ldr	r2, [r1, #24]
 8012c7c:	2a00      	cmp	r2, #0
 8012c7e:	bf14      	ite	ne
 8012c80:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8012c84:	2201      	moveq	r2, #1
 8012c86:	608a      	str	r2, [r1, #8]
 8012c88:	6822      	ldr	r2, [r4, #0]
 8012c8a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012d1c <_scanf_chars+0xb0>
 8012c8e:	06d1      	lsls	r1, r2, #27
 8012c90:	bf5f      	itttt	pl
 8012c92:	681a      	ldrpl	r2, [r3, #0]
 8012c94:	1d11      	addpl	r1, r2, #4
 8012c96:	6019      	strpl	r1, [r3, #0]
 8012c98:	6816      	ldrpl	r6, [r2, #0]
 8012c9a:	2700      	movs	r7, #0
 8012c9c:	69a0      	ldr	r0, [r4, #24]
 8012c9e:	b188      	cbz	r0, 8012cc4 <_scanf_chars+0x58>
 8012ca0:	2801      	cmp	r0, #1
 8012ca2:	d107      	bne.n	8012cb4 <_scanf_chars+0x48>
 8012ca4:	682b      	ldr	r3, [r5, #0]
 8012ca6:	781a      	ldrb	r2, [r3, #0]
 8012ca8:	6963      	ldr	r3, [r4, #20]
 8012caa:	5c9b      	ldrb	r3, [r3, r2]
 8012cac:	b953      	cbnz	r3, 8012cc4 <_scanf_chars+0x58>
 8012cae:	2f00      	cmp	r7, #0
 8012cb0:	d031      	beq.n	8012d16 <_scanf_chars+0xaa>
 8012cb2:	e022      	b.n	8012cfa <_scanf_chars+0x8e>
 8012cb4:	2802      	cmp	r0, #2
 8012cb6:	d120      	bne.n	8012cfa <_scanf_chars+0x8e>
 8012cb8:	682b      	ldr	r3, [r5, #0]
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012cc0:	071b      	lsls	r3, r3, #28
 8012cc2:	d41a      	bmi.n	8012cfa <_scanf_chars+0x8e>
 8012cc4:	6823      	ldr	r3, [r4, #0]
 8012cc6:	06da      	lsls	r2, r3, #27
 8012cc8:	bf5e      	ittt	pl
 8012cca:	682b      	ldrpl	r3, [r5, #0]
 8012ccc:	781b      	ldrbpl	r3, [r3, #0]
 8012cce:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012cd2:	682a      	ldr	r2, [r5, #0]
 8012cd4:	686b      	ldr	r3, [r5, #4]
 8012cd6:	3201      	adds	r2, #1
 8012cd8:	602a      	str	r2, [r5, #0]
 8012cda:	68a2      	ldr	r2, [r4, #8]
 8012cdc:	3b01      	subs	r3, #1
 8012cde:	3a01      	subs	r2, #1
 8012ce0:	606b      	str	r3, [r5, #4]
 8012ce2:	3701      	adds	r7, #1
 8012ce4:	60a2      	str	r2, [r4, #8]
 8012ce6:	b142      	cbz	r2, 8012cfa <_scanf_chars+0x8e>
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	dcd7      	bgt.n	8012c9c <_scanf_chars+0x30>
 8012cec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012cf0:	4629      	mov	r1, r5
 8012cf2:	4640      	mov	r0, r8
 8012cf4:	4798      	blx	r3
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d0d0      	beq.n	8012c9c <_scanf_chars+0x30>
 8012cfa:	6823      	ldr	r3, [r4, #0]
 8012cfc:	f013 0310 	ands.w	r3, r3, #16
 8012d00:	d105      	bne.n	8012d0e <_scanf_chars+0xa2>
 8012d02:	68e2      	ldr	r2, [r4, #12]
 8012d04:	3201      	adds	r2, #1
 8012d06:	60e2      	str	r2, [r4, #12]
 8012d08:	69a2      	ldr	r2, [r4, #24]
 8012d0a:	b102      	cbz	r2, 8012d0e <_scanf_chars+0xa2>
 8012d0c:	7033      	strb	r3, [r6, #0]
 8012d0e:	6923      	ldr	r3, [r4, #16]
 8012d10:	443b      	add	r3, r7
 8012d12:	6123      	str	r3, [r4, #16]
 8012d14:	2000      	movs	r0, #0
 8012d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d1a:	bf00      	nop
 8012d1c:	080151f1 	.word	0x080151f1

08012d20 <_scanf_i>:
 8012d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d24:	4698      	mov	r8, r3
 8012d26:	4b74      	ldr	r3, [pc, #464]	@ (8012ef8 <_scanf_i+0x1d8>)
 8012d28:	460c      	mov	r4, r1
 8012d2a:	4682      	mov	sl, r0
 8012d2c:	4616      	mov	r6, r2
 8012d2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d32:	b087      	sub	sp, #28
 8012d34:	ab03      	add	r3, sp, #12
 8012d36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012d3a:	4b70      	ldr	r3, [pc, #448]	@ (8012efc <_scanf_i+0x1dc>)
 8012d3c:	69a1      	ldr	r1, [r4, #24]
 8012d3e:	4a70      	ldr	r2, [pc, #448]	@ (8012f00 <_scanf_i+0x1e0>)
 8012d40:	2903      	cmp	r1, #3
 8012d42:	bf08      	it	eq
 8012d44:	461a      	moveq	r2, r3
 8012d46:	68a3      	ldr	r3, [r4, #8]
 8012d48:	9201      	str	r2, [sp, #4]
 8012d4a:	1e5a      	subs	r2, r3, #1
 8012d4c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012d50:	bf88      	it	hi
 8012d52:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012d56:	4627      	mov	r7, r4
 8012d58:	bf82      	ittt	hi
 8012d5a:	eb03 0905 	addhi.w	r9, r3, r5
 8012d5e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012d62:	60a3      	strhi	r3, [r4, #8]
 8012d64:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012d68:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012d6c:	bf98      	it	ls
 8012d6e:	f04f 0900 	movls.w	r9, #0
 8012d72:	6023      	str	r3, [r4, #0]
 8012d74:	463d      	mov	r5, r7
 8012d76:	f04f 0b00 	mov.w	fp, #0
 8012d7a:	6831      	ldr	r1, [r6, #0]
 8012d7c:	ab03      	add	r3, sp, #12
 8012d7e:	7809      	ldrb	r1, [r1, #0]
 8012d80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012d84:	2202      	movs	r2, #2
 8012d86:	f7ed fad3 	bl	8000330 <memchr>
 8012d8a:	b328      	cbz	r0, 8012dd8 <_scanf_i+0xb8>
 8012d8c:	f1bb 0f01 	cmp.w	fp, #1
 8012d90:	d159      	bne.n	8012e46 <_scanf_i+0x126>
 8012d92:	6862      	ldr	r2, [r4, #4]
 8012d94:	b92a      	cbnz	r2, 8012da2 <_scanf_i+0x82>
 8012d96:	6822      	ldr	r2, [r4, #0]
 8012d98:	2108      	movs	r1, #8
 8012d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012d9e:	6061      	str	r1, [r4, #4]
 8012da0:	6022      	str	r2, [r4, #0]
 8012da2:	6822      	ldr	r2, [r4, #0]
 8012da4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012da8:	6022      	str	r2, [r4, #0]
 8012daa:	68a2      	ldr	r2, [r4, #8]
 8012dac:	1e51      	subs	r1, r2, #1
 8012dae:	60a1      	str	r1, [r4, #8]
 8012db0:	b192      	cbz	r2, 8012dd8 <_scanf_i+0xb8>
 8012db2:	6832      	ldr	r2, [r6, #0]
 8012db4:	1c51      	adds	r1, r2, #1
 8012db6:	6031      	str	r1, [r6, #0]
 8012db8:	7812      	ldrb	r2, [r2, #0]
 8012dba:	f805 2b01 	strb.w	r2, [r5], #1
 8012dbe:	6872      	ldr	r2, [r6, #4]
 8012dc0:	3a01      	subs	r2, #1
 8012dc2:	2a00      	cmp	r2, #0
 8012dc4:	6072      	str	r2, [r6, #4]
 8012dc6:	dc07      	bgt.n	8012dd8 <_scanf_i+0xb8>
 8012dc8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012dcc:	4631      	mov	r1, r6
 8012dce:	4650      	mov	r0, sl
 8012dd0:	4790      	blx	r2
 8012dd2:	2800      	cmp	r0, #0
 8012dd4:	f040 8085 	bne.w	8012ee2 <_scanf_i+0x1c2>
 8012dd8:	f10b 0b01 	add.w	fp, fp, #1
 8012ddc:	f1bb 0f03 	cmp.w	fp, #3
 8012de0:	d1cb      	bne.n	8012d7a <_scanf_i+0x5a>
 8012de2:	6863      	ldr	r3, [r4, #4]
 8012de4:	b90b      	cbnz	r3, 8012dea <_scanf_i+0xca>
 8012de6:	230a      	movs	r3, #10
 8012de8:	6063      	str	r3, [r4, #4]
 8012dea:	6863      	ldr	r3, [r4, #4]
 8012dec:	4945      	ldr	r1, [pc, #276]	@ (8012f04 <_scanf_i+0x1e4>)
 8012dee:	6960      	ldr	r0, [r4, #20]
 8012df0:	1ac9      	subs	r1, r1, r3
 8012df2:	f000 f9cb 	bl	801318c <__sccl>
 8012df6:	f04f 0b00 	mov.w	fp, #0
 8012dfa:	68a3      	ldr	r3, [r4, #8]
 8012dfc:	6822      	ldr	r2, [r4, #0]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d03d      	beq.n	8012e7e <_scanf_i+0x15e>
 8012e02:	6831      	ldr	r1, [r6, #0]
 8012e04:	6960      	ldr	r0, [r4, #20]
 8012e06:	f891 c000 	ldrb.w	ip, [r1]
 8012e0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012e0e:	2800      	cmp	r0, #0
 8012e10:	d035      	beq.n	8012e7e <_scanf_i+0x15e>
 8012e12:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012e16:	d124      	bne.n	8012e62 <_scanf_i+0x142>
 8012e18:	0510      	lsls	r0, r2, #20
 8012e1a:	d522      	bpl.n	8012e62 <_scanf_i+0x142>
 8012e1c:	f10b 0b01 	add.w	fp, fp, #1
 8012e20:	f1b9 0f00 	cmp.w	r9, #0
 8012e24:	d003      	beq.n	8012e2e <_scanf_i+0x10e>
 8012e26:	3301      	adds	r3, #1
 8012e28:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8012e2c:	60a3      	str	r3, [r4, #8]
 8012e2e:	6873      	ldr	r3, [r6, #4]
 8012e30:	3b01      	subs	r3, #1
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	6073      	str	r3, [r6, #4]
 8012e36:	dd1b      	ble.n	8012e70 <_scanf_i+0x150>
 8012e38:	6833      	ldr	r3, [r6, #0]
 8012e3a:	3301      	adds	r3, #1
 8012e3c:	6033      	str	r3, [r6, #0]
 8012e3e:	68a3      	ldr	r3, [r4, #8]
 8012e40:	3b01      	subs	r3, #1
 8012e42:	60a3      	str	r3, [r4, #8]
 8012e44:	e7d9      	b.n	8012dfa <_scanf_i+0xda>
 8012e46:	f1bb 0f02 	cmp.w	fp, #2
 8012e4a:	d1ae      	bne.n	8012daa <_scanf_i+0x8a>
 8012e4c:	6822      	ldr	r2, [r4, #0]
 8012e4e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012e52:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012e56:	d1c4      	bne.n	8012de2 <_scanf_i+0xc2>
 8012e58:	2110      	movs	r1, #16
 8012e5a:	6061      	str	r1, [r4, #4]
 8012e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012e60:	e7a2      	b.n	8012da8 <_scanf_i+0x88>
 8012e62:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012e66:	6022      	str	r2, [r4, #0]
 8012e68:	780b      	ldrb	r3, [r1, #0]
 8012e6a:	f805 3b01 	strb.w	r3, [r5], #1
 8012e6e:	e7de      	b.n	8012e2e <_scanf_i+0x10e>
 8012e70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012e74:	4631      	mov	r1, r6
 8012e76:	4650      	mov	r0, sl
 8012e78:	4798      	blx	r3
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	d0df      	beq.n	8012e3e <_scanf_i+0x11e>
 8012e7e:	6823      	ldr	r3, [r4, #0]
 8012e80:	05d9      	lsls	r1, r3, #23
 8012e82:	d50d      	bpl.n	8012ea0 <_scanf_i+0x180>
 8012e84:	42bd      	cmp	r5, r7
 8012e86:	d909      	bls.n	8012e9c <_scanf_i+0x17c>
 8012e88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8012e90:	4632      	mov	r2, r6
 8012e92:	4650      	mov	r0, sl
 8012e94:	4798      	blx	r3
 8012e96:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8012e9a:	464d      	mov	r5, r9
 8012e9c:	42bd      	cmp	r5, r7
 8012e9e:	d028      	beq.n	8012ef2 <_scanf_i+0x1d2>
 8012ea0:	6822      	ldr	r2, [r4, #0]
 8012ea2:	f012 0210 	ands.w	r2, r2, #16
 8012ea6:	d113      	bne.n	8012ed0 <_scanf_i+0x1b0>
 8012ea8:	702a      	strb	r2, [r5, #0]
 8012eaa:	6863      	ldr	r3, [r4, #4]
 8012eac:	9e01      	ldr	r6, [sp, #4]
 8012eae:	4639      	mov	r1, r7
 8012eb0:	4650      	mov	r0, sl
 8012eb2:	47b0      	blx	r6
 8012eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8012eb8:	6821      	ldr	r1, [r4, #0]
 8012eba:	1d1a      	adds	r2, r3, #4
 8012ebc:	f8c8 2000 	str.w	r2, [r8]
 8012ec0:	f011 0f20 	tst.w	r1, #32
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	d00f      	beq.n	8012ee8 <_scanf_i+0x1c8>
 8012ec8:	6018      	str	r0, [r3, #0]
 8012eca:	68e3      	ldr	r3, [r4, #12]
 8012ecc:	3301      	adds	r3, #1
 8012ece:	60e3      	str	r3, [r4, #12]
 8012ed0:	6923      	ldr	r3, [r4, #16]
 8012ed2:	1bed      	subs	r5, r5, r7
 8012ed4:	445d      	add	r5, fp
 8012ed6:	442b      	add	r3, r5
 8012ed8:	6123      	str	r3, [r4, #16]
 8012eda:	2000      	movs	r0, #0
 8012edc:	b007      	add	sp, #28
 8012ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee2:	f04f 0b00 	mov.w	fp, #0
 8012ee6:	e7ca      	b.n	8012e7e <_scanf_i+0x15e>
 8012ee8:	07ca      	lsls	r2, r1, #31
 8012eea:	bf4c      	ite	mi
 8012eec:	8018      	strhmi	r0, [r3, #0]
 8012eee:	6018      	strpl	r0, [r3, #0]
 8012ef0:	e7eb      	b.n	8012eca <_scanf_i+0x1aa>
 8012ef2:	2001      	movs	r0, #1
 8012ef4:	e7f2      	b.n	8012edc <_scanf_i+0x1bc>
 8012ef6:	bf00      	nop
 8012ef8:	08014ef8 	.word	0x08014ef8
 8012efc:	080134b1 	.word	0x080134b1
 8012f00:	08013591 	.word	0x08013591
 8012f04:	0801509d 	.word	0x0801509d

08012f08 <__sflush_r>:
 8012f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f10:	0716      	lsls	r6, r2, #28
 8012f12:	4605      	mov	r5, r0
 8012f14:	460c      	mov	r4, r1
 8012f16:	d454      	bmi.n	8012fc2 <__sflush_r+0xba>
 8012f18:	684b      	ldr	r3, [r1, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	dc02      	bgt.n	8012f24 <__sflush_r+0x1c>
 8012f1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	dd48      	ble.n	8012fb6 <__sflush_r+0xae>
 8012f24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f26:	2e00      	cmp	r6, #0
 8012f28:	d045      	beq.n	8012fb6 <__sflush_r+0xae>
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012f30:	682f      	ldr	r7, [r5, #0]
 8012f32:	6a21      	ldr	r1, [r4, #32]
 8012f34:	602b      	str	r3, [r5, #0]
 8012f36:	d030      	beq.n	8012f9a <__sflush_r+0x92>
 8012f38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012f3a:	89a3      	ldrh	r3, [r4, #12]
 8012f3c:	0759      	lsls	r1, r3, #29
 8012f3e:	d505      	bpl.n	8012f4c <__sflush_r+0x44>
 8012f40:	6863      	ldr	r3, [r4, #4]
 8012f42:	1ad2      	subs	r2, r2, r3
 8012f44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012f46:	b10b      	cbz	r3, 8012f4c <__sflush_r+0x44>
 8012f48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012f4a:	1ad2      	subs	r2, r2, r3
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f50:	6a21      	ldr	r1, [r4, #32]
 8012f52:	4628      	mov	r0, r5
 8012f54:	47b0      	blx	r6
 8012f56:	1c43      	adds	r3, r0, #1
 8012f58:	89a3      	ldrh	r3, [r4, #12]
 8012f5a:	d106      	bne.n	8012f6a <__sflush_r+0x62>
 8012f5c:	6829      	ldr	r1, [r5, #0]
 8012f5e:	291d      	cmp	r1, #29
 8012f60:	d82b      	bhi.n	8012fba <__sflush_r+0xb2>
 8012f62:	4a2a      	ldr	r2, [pc, #168]	@ (801300c <__sflush_r+0x104>)
 8012f64:	40ca      	lsrs	r2, r1
 8012f66:	07d6      	lsls	r6, r2, #31
 8012f68:	d527      	bpl.n	8012fba <__sflush_r+0xb2>
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	6062      	str	r2, [r4, #4]
 8012f6e:	04d9      	lsls	r1, r3, #19
 8012f70:	6922      	ldr	r2, [r4, #16]
 8012f72:	6022      	str	r2, [r4, #0]
 8012f74:	d504      	bpl.n	8012f80 <__sflush_r+0x78>
 8012f76:	1c42      	adds	r2, r0, #1
 8012f78:	d101      	bne.n	8012f7e <__sflush_r+0x76>
 8012f7a:	682b      	ldr	r3, [r5, #0]
 8012f7c:	b903      	cbnz	r3, 8012f80 <__sflush_r+0x78>
 8012f7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012f82:	602f      	str	r7, [r5, #0]
 8012f84:	b1b9      	cbz	r1, 8012fb6 <__sflush_r+0xae>
 8012f86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012f8a:	4299      	cmp	r1, r3
 8012f8c:	d002      	beq.n	8012f94 <__sflush_r+0x8c>
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f7fe fee0 	bl	8011d54 <_free_r>
 8012f94:	2300      	movs	r3, #0
 8012f96:	6363      	str	r3, [r4, #52]	@ 0x34
 8012f98:	e00d      	b.n	8012fb6 <__sflush_r+0xae>
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	47b0      	blx	r6
 8012fa0:	4602      	mov	r2, r0
 8012fa2:	1c50      	adds	r0, r2, #1
 8012fa4:	d1c9      	bne.n	8012f3a <__sflush_r+0x32>
 8012fa6:	682b      	ldr	r3, [r5, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d0c6      	beq.n	8012f3a <__sflush_r+0x32>
 8012fac:	2b1d      	cmp	r3, #29
 8012fae:	d001      	beq.n	8012fb4 <__sflush_r+0xac>
 8012fb0:	2b16      	cmp	r3, #22
 8012fb2:	d11e      	bne.n	8012ff2 <__sflush_r+0xea>
 8012fb4:	602f      	str	r7, [r5, #0]
 8012fb6:	2000      	movs	r0, #0
 8012fb8:	e022      	b.n	8013000 <__sflush_r+0xf8>
 8012fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fbe:	b21b      	sxth	r3, r3
 8012fc0:	e01b      	b.n	8012ffa <__sflush_r+0xf2>
 8012fc2:	690f      	ldr	r7, [r1, #16]
 8012fc4:	2f00      	cmp	r7, #0
 8012fc6:	d0f6      	beq.n	8012fb6 <__sflush_r+0xae>
 8012fc8:	0793      	lsls	r3, r2, #30
 8012fca:	680e      	ldr	r6, [r1, #0]
 8012fcc:	bf08      	it	eq
 8012fce:	694b      	ldreq	r3, [r1, #20]
 8012fd0:	600f      	str	r7, [r1, #0]
 8012fd2:	bf18      	it	ne
 8012fd4:	2300      	movne	r3, #0
 8012fd6:	eba6 0807 	sub.w	r8, r6, r7
 8012fda:	608b      	str	r3, [r1, #8]
 8012fdc:	f1b8 0f00 	cmp.w	r8, #0
 8012fe0:	dde9      	ble.n	8012fb6 <__sflush_r+0xae>
 8012fe2:	6a21      	ldr	r1, [r4, #32]
 8012fe4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012fe6:	4643      	mov	r3, r8
 8012fe8:	463a      	mov	r2, r7
 8012fea:	4628      	mov	r0, r5
 8012fec:	47b0      	blx	r6
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	dc08      	bgt.n	8013004 <__sflush_r+0xfc>
 8012ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ffa:	81a3      	strh	r3, [r4, #12]
 8012ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013004:	4407      	add	r7, r0
 8013006:	eba8 0800 	sub.w	r8, r8, r0
 801300a:	e7e7      	b.n	8012fdc <__sflush_r+0xd4>
 801300c:	20400001 	.word	0x20400001

08013010 <_fflush_r>:
 8013010:	b538      	push	{r3, r4, r5, lr}
 8013012:	690b      	ldr	r3, [r1, #16]
 8013014:	4605      	mov	r5, r0
 8013016:	460c      	mov	r4, r1
 8013018:	b913      	cbnz	r3, 8013020 <_fflush_r+0x10>
 801301a:	2500      	movs	r5, #0
 801301c:	4628      	mov	r0, r5
 801301e:	bd38      	pop	{r3, r4, r5, pc}
 8013020:	b118      	cbz	r0, 801302a <_fflush_r+0x1a>
 8013022:	6a03      	ldr	r3, [r0, #32]
 8013024:	b90b      	cbnz	r3, 801302a <_fflush_r+0x1a>
 8013026:	f7fd fe31 	bl	8010c8c <__sinit>
 801302a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d0f3      	beq.n	801301a <_fflush_r+0xa>
 8013032:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013034:	07d0      	lsls	r0, r2, #31
 8013036:	d404      	bmi.n	8013042 <_fflush_r+0x32>
 8013038:	0599      	lsls	r1, r3, #22
 801303a:	d402      	bmi.n	8013042 <_fflush_r+0x32>
 801303c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801303e:	f7fe f890 	bl	8011162 <__retarget_lock_acquire_recursive>
 8013042:	4628      	mov	r0, r5
 8013044:	4621      	mov	r1, r4
 8013046:	f7ff ff5f 	bl	8012f08 <__sflush_r>
 801304a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801304c:	07da      	lsls	r2, r3, #31
 801304e:	4605      	mov	r5, r0
 8013050:	d4e4      	bmi.n	801301c <_fflush_r+0xc>
 8013052:	89a3      	ldrh	r3, [r4, #12]
 8013054:	059b      	lsls	r3, r3, #22
 8013056:	d4e1      	bmi.n	801301c <_fflush_r+0xc>
 8013058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801305a:	f7fe f883 	bl	8011164 <__retarget_lock_release_recursive>
 801305e:	e7dd      	b.n	801301c <_fflush_r+0xc>

08013060 <__swhatbuf_r>:
 8013060:	b570      	push	{r4, r5, r6, lr}
 8013062:	460c      	mov	r4, r1
 8013064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013068:	2900      	cmp	r1, #0
 801306a:	b096      	sub	sp, #88	@ 0x58
 801306c:	4615      	mov	r5, r2
 801306e:	461e      	mov	r6, r3
 8013070:	da0d      	bge.n	801308e <__swhatbuf_r+0x2e>
 8013072:	89a3      	ldrh	r3, [r4, #12]
 8013074:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013078:	f04f 0100 	mov.w	r1, #0
 801307c:	bf14      	ite	ne
 801307e:	2340      	movne	r3, #64	@ 0x40
 8013080:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013084:	2000      	movs	r0, #0
 8013086:	6031      	str	r1, [r6, #0]
 8013088:	602b      	str	r3, [r5, #0]
 801308a:	b016      	add	sp, #88	@ 0x58
 801308c:	bd70      	pop	{r4, r5, r6, pc}
 801308e:	466a      	mov	r2, sp
 8013090:	f000 f8f0 	bl	8013274 <_fstat_r>
 8013094:	2800      	cmp	r0, #0
 8013096:	dbec      	blt.n	8013072 <__swhatbuf_r+0x12>
 8013098:	9901      	ldr	r1, [sp, #4]
 801309a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801309e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80130a2:	4259      	negs	r1, r3
 80130a4:	4159      	adcs	r1, r3
 80130a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80130aa:	e7eb      	b.n	8013084 <__swhatbuf_r+0x24>

080130ac <__smakebuf_r>:
 80130ac:	898b      	ldrh	r3, [r1, #12]
 80130ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130b0:	079d      	lsls	r5, r3, #30
 80130b2:	4606      	mov	r6, r0
 80130b4:	460c      	mov	r4, r1
 80130b6:	d507      	bpl.n	80130c8 <__smakebuf_r+0x1c>
 80130b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80130bc:	6023      	str	r3, [r4, #0]
 80130be:	6123      	str	r3, [r4, #16]
 80130c0:	2301      	movs	r3, #1
 80130c2:	6163      	str	r3, [r4, #20]
 80130c4:	b003      	add	sp, #12
 80130c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130c8:	ab01      	add	r3, sp, #4
 80130ca:	466a      	mov	r2, sp
 80130cc:	f7ff ffc8 	bl	8013060 <__swhatbuf_r>
 80130d0:	9f00      	ldr	r7, [sp, #0]
 80130d2:	4605      	mov	r5, r0
 80130d4:	4639      	mov	r1, r7
 80130d6:	4630      	mov	r0, r6
 80130d8:	f7fe feb0 	bl	8011e3c <_malloc_r>
 80130dc:	b948      	cbnz	r0, 80130f2 <__smakebuf_r+0x46>
 80130de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130e2:	059a      	lsls	r2, r3, #22
 80130e4:	d4ee      	bmi.n	80130c4 <__smakebuf_r+0x18>
 80130e6:	f023 0303 	bic.w	r3, r3, #3
 80130ea:	f043 0302 	orr.w	r3, r3, #2
 80130ee:	81a3      	strh	r3, [r4, #12]
 80130f0:	e7e2      	b.n	80130b8 <__smakebuf_r+0xc>
 80130f2:	89a3      	ldrh	r3, [r4, #12]
 80130f4:	6020      	str	r0, [r4, #0]
 80130f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130fa:	81a3      	strh	r3, [r4, #12]
 80130fc:	9b01      	ldr	r3, [sp, #4]
 80130fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013102:	b15b      	cbz	r3, 801311c <__smakebuf_r+0x70>
 8013104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013108:	4630      	mov	r0, r6
 801310a:	f000 f8c5 	bl	8013298 <_isatty_r>
 801310e:	b128      	cbz	r0, 801311c <__smakebuf_r+0x70>
 8013110:	89a3      	ldrh	r3, [r4, #12]
 8013112:	f023 0303 	bic.w	r3, r3, #3
 8013116:	f043 0301 	orr.w	r3, r3, #1
 801311a:	81a3      	strh	r3, [r4, #12]
 801311c:	89a3      	ldrh	r3, [r4, #12]
 801311e:	431d      	orrs	r5, r3
 8013120:	81a5      	strh	r5, [r4, #12]
 8013122:	e7cf      	b.n	80130c4 <__smakebuf_r+0x18>

08013124 <_putc_r>:
 8013124:	b570      	push	{r4, r5, r6, lr}
 8013126:	460d      	mov	r5, r1
 8013128:	4614      	mov	r4, r2
 801312a:	4606      	mov	r6, r0
 801312c:	b118      	cbz	r0, 8013136 <_putc_r+0x12>
 801312e:	6a03      	ldr	r3, [r0, #32]
 8013130:	b90b      	cbnz	r3, 8013136 <_putc_r+0x12>
 8013132:	f7fd fdab 	bl	8010c8c <__sinit>
 8013136:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013138:	07d8      	lsls	r0, r3, #31
 801313a:	d405      	bmi.n	8013148 <_putc_r+0x24>
 801313c:	89a3      	ldrh	r3, [r4, #12]
 801313e:	0599      	lsls	r1, r3, #22
 8013140:	d402      	bmi.n	8013148 <_putc_r+0x24>
 8013142:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013144:	f7fe f80d 	bl	8011162 <__retarget_lock_acquire_recursive>
 8013148:	68a3      	ldr	r3, [r4, #8]
 801314a:	3b01      	subs	r3, #1
 801314c:	2b00      	cmp	r3, #0
 801314e:	60a3      	str	r3, [r4, #8]
 8013150:	da05      	bge.n	801315e <_putc_r+0x3a>
 8013152:	69a2      	ldr	r2, [r4, #24]
 8013154:	4293      	cmp	r3, r2
 8013156:	db12      	blt.n	801317e <_putc_r+0x5a>
 8013158:	b2eb      	uxtb	r3, r5
 801315a:	2b0a      	cmp	r3, #10
 801315c:	d00f      	beq.n	801317e <_putc_r+0x5a>
 801315e:	6823      	ldr	r3, [r4, #0]
 8013160:	1c5a      	adds	r2, r3, #1
 8013162:	6022      	str	r2, [r4, #0]
 8013164:	701d      	strb	r5, [r3, #0]
 8013166:	b2ed      	uxtb	r5, r5
 8013168:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801316a:	07da      	lsls	r2, r3, #31
 801316c:	d405      	bmi.n	801317a <_putc_r+0x56>
 801316e:	89a3      	ldrh	r3, [r4, #12]
 8013170:	059b      	lsls	r3, r3, #22
 8013172:	d402      	bmi.n	801317a <_putc_r+0x56>
 8013174:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013176:	f7fd fff5 	bl	8011164 <__retarget_lock_release_recursive>
 801317a:	4628      	mov	r0, r5
 801317c:	bd70      	pop	{r4, r5, r6, pc}
 801317e:	4629      	mov	r1, r5
 8013180:	4622      	mov	r2, r4
 8013182:	4630      	mov	r0, r6
 8013184:	f7fd fea1 	bl	8010eca <__swbuf_r>
 8013188:	4605      	mov	r5, r0
 801318a:	e7ed      	b.n	8013168 <_putc_r+0x44>

0801318c <__sccl>:
 801318c:	b570      	push	{r4, r5, r6, lr}
 801318e:	780b      	ldrb	r3, [r1, #0]
 8013190:	4604      	mov	r4, r0
 8013192:	2b5e      	cmp	r3, #94	@ 0x5e
 8013194:	bf0b      	itete	eq
 8013196:	784b      	ldrbeq	r3, [r1, #1]
 8013198:	1c4a      	addne	r2, r1, #1
 801319a:	1c8a      	addeq	r2, r1, #2
 801319c:	2100      	movne	r1, #0
 801319e:	bf08      	it	eq
 80131a0:	2101      	moveq	r1, #1
 80131a2:	3801      	subs	r0, #1
 80131a4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80131a8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80131ac:	42a8      	cmp	r0, r5
 80131ae:	d1fb      	bne.n	80131a8 <__sccl+0x1c>
 80131b0:	b90b      	cbnz	r3, 80131b6 <__sccl+0x2a>
 80131b2:	1e50      	subs	r0, r2, #1
 80131b4:	bd70      	pop	{r4, r5, r6, pc}
 80131b6:	f081 0101 	eor.w	r1, r1, #1
 80131ba:	54e1      	strb	r1, [r4, r3]
 80131bc:	4610      	mov	r0, r2
 80131be:	4602      	mov	r2, r0
 80131c0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80131c4:	2d2d      	cmp	r5, #45	@ 0x2d
 80131c6:	d005      	beq.n	80131d4 <__sccl+0x48>
 80131c8:	2d5d      	cmp	r5, #93	@ 0x5d
 80131ca:	d016      	beq.n	80131fa <__sccl+0x6e>
 80131cc:	2d00      	cmp	r5, #0
 80131ce:	d0f1      	beq.n	80131b4 <__sccl+0x28>
 80131d0:	462b      	mov	r3, r5
 80131d2:	e7f2      	b.n	80131ba <__sccl+0x2e>
 80131d4:	7846      	ldrb	r6, [r0, #1]
 80131d6:	2e5d      	cmp	r6, #93	@ 0x5d
 80131d8:	d0fa      	beq.n	80131d0 <__sccl+0x44>
 80131da:	42b3      	cmp	r3, r6
 80131dc:	dcf8      	bgt.n	80131d0 <__sccl+0x44>
 80131de:	3002      	adds	r0, #2
 80131e0:	461a      	mov	r2, r3
 80131e2:	3201      	adds	r2, #1
 80131e4:	4296      	cmp	r6, r2
 80131e6:	54a1      	strb	r1, [r4, r2]
 80131e8:	dcfb      	bgt.n	80131e2 <__sccl+0x56>
 80131ea:	1af2      	subs	r2, r6, r3
 80131ec:	3a01      	subs	r2, #1
 80131ee:	1c5d      	adds	r5, r3, #1
 80131f0:	42b3      	cmp	r3, r6
 80131f2:	bfa8      	it	ge
 80131f4:	2200      	movge	r2, #0
 80131f6:	18ab      	adds	r3, r5, r2
 80131f8:	e7e1      	b.n	80131be <__sccl+0x32>
 80131fa:	4610      	mov	r0, r2
 80131fc:	e7da      	b.n	80131b4 <__sccl+0x28>

080131fe <__submore>:
 80131fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013202:	460c      	mov	r4, r1
 8013204:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013206:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801320a:	4299      	cmp	r1, r3
 801320c:	d11d      	bne.n	801324a <__submore+0x4c>
 801320e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013212:	f7fe fe13 	bl	8011e3c <_malloc_r>
 8013216:	b918      	cbnz	r0, 8013220 <__submore+0x22>
 8013218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801321c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013224:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013226:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801322a:	6360      	str	r0, [r4, #52]	@ 0x34
 801322c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013230:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013234:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013238:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801323c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013240:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8013244:	6020      	str	r0, [r4, #0]
 8013246:	2000      	movs	r0, #0
 8013248:	e7e8      	b.n	801321c <__submore+0x1e>
 801324a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801324c:	0077      	lsls	r7, r6, #1
 801324e:	463a      	mov	r2, r7
 8013250:	f000 f886 	bl	8013360 <_realloc_r>
 8013254:	4605      	mov	r5, r0
 8013256:	2800      	cmp	r0, #0
 8013258:	d0de      	beq.n	8013218 <__submore+0x1a>
 801325a:	eb00 0806 	add.w	r8, r0, r6
 801325e:	4601      	mov	r1, r0
 8013260:	4632      	mov	r2, r6
 8013262:	4640      	mov	r0, r8
 8013264:	f7fd ff7f 	bl	8011166 <memcpy>
 8013268:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801326c:	f8c4 8000 	str.w	r8, [r4]
 8013270:	e7e9      	b.n	8013246 <__submore+0x48>
	...

08013274 <_fstat_r>:
 8013274:	b538      	push	{r3, r4, r5, lr}
 8013276:	4d07      	ldr	r5, [pc, #28]	@ (8013294 <_fstat_r+0x20>)
 8013278:	2300      	movs	r3, #0
 801327a:	4604      	mov	r4, r0
 801327c:	4608      	mov	r0, r1
 801327e:	4611      	mov	r1, r2
 8013280:	602b      	str	r3, [r5, #0]
 8013282:	f7f1 fcd9 	bl	8004c38 <_fstat>
 8013286:	1c43      	adds	r3, r0, #1
 8013288:	d102      	bne.n	8013290 <_fstat_r+0x1c>
 801328a:	682b      	ldr	r3, [r5, #0]
 801328c:	b103      	cbz	r3, 8013290 <_fstat_r+0x1c>
 801328e:	6023      	str	r3, [r4, #0]
 8013290:	bd38      	pop	{r3, r4, r5, pc}
 8013292:	bf00      	nop
 8013294:	24000bf4 	.word	0x24000bf4

08013298 <_isatty_r>:
 8013298:	b538      	push	{r3, r4, r5, lr}
 801329a:	4d06      	ldr	r5, [pc, #24]	@ (80132b4 <_isatty_r+0x1c>)
 801329c:	2300      	movs	r3, #0
 801329e:	4604      	mov	r4, r0
 80132a0:	4608      	mov	r0, r1
 80132a2:	602b      	str	r3, [r5, #0]
 80132a4:	f7f1 fcd8 	bl	8004c58 <_isatty>
 80132a8:	1c43      	adds	r3, r0, #1
 80132aa:	d102      	bne.n	80132b2 <_isatty_r+0x1a>
 80132ac:	682b      	ldr	r3, [r5, #0]
 80132ae:	b103      	cbz	r3, 80132b2 <_isatty_r+0x1a>
 80132b0:	6023      	str	r3, [r4, #0]
 80132b2:	bd38      	pop	{r3, r4, r5, pc}
 80132b4:	24000bf4 	.word	0x24000bf4

080132b8 <_sbrk_r>:
 80132b8:	b538      	push	{r3, r4, r5, lr}
 80132ba:	4d06      	ldr	r5, [pc, #24]	@ (80132d4 <_sbrk_r+0x1c>)
 80132bc:	2300      	movs	r3, #0
 80132be:	4604      	mov	r4, r0
 80132c0:	4608      	mov	r0, r1
 80132c2:	602b      	str	r3, [r5, #0]
 80132c4:	f7f1 fce0 	bl	8004c88 <_sbrk>
 80132c8:	1c43      	adds	r3, r0, #1
 80132ca:	d102      	bne.n	80132d2 <_sbrk_r+0x1a>
 80132cc:	682b      	ldr	r3, [r5, #0]
 80132ce:	b103      	cbz	r3, 80132d2 <_sbrk_r+0x1a>
 80132d0:	6023      	str	r3, [r4, #0]
 80132d2:	bd38      	pop	{r3, r4, r5, pc}
 80132d4:	24000bf4 	.word	0x24000bf4

080132d8 <__assert_func>:
 80132d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80132da:	4614      	mov	r4, r2
 80132dc:	461a      	mov	r2, r3
 80132de:	4b09      	ldr	r3, [pc, #36]	@ (8013304 <__assert_func+0x2c>)
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	4605      	mov	r5, r0
 80132e4:	68d8      	ldr	r0, [r3, #12]
 80132e6:	b14c      	cbz	r4, 80132fc <__assert_func+0x24>
 80132e8:	4b07      	ldr	r3, [pc, #28]	@ (8013308 <__assert_func+0x30>)
 80132ea:	9100      	str	r1, [sp, #0]
 80132ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80132f0:	4906      	ldr	r1, [pc, #24]	@ (801330c <__assert_func+0x34>)
 80132f2:	462b      	mov	r3, r5
 80132f4:	f000 f95c 	bl	80135b0 <fiprintf>
 80132f8:	f000 f96c 	bl	80135d4 <abort>
 80132fc:	4b04      	ldr	r3, [pc, #16]	@ (8013310 <__assert_func+0x38>)
 80132fe:	461c      	mov	r4, r3
 8013300:	e7f3      	b.n	80132ea <__assert_func+0x12>
 8013302:	bf00      	nop
 8013304:	24000028 	.word	0x24000028
 8013308:	080150b2 	.word	0x080150b2
 801330c:	080150bf 	.word	0x080150bf
 8013310:	080150ed 	.word	0x080150ed

08013314 <_calloc_r>:
 8013314:	b570      	push	{r4, r5, r6, lr}
 8013316:	fba1 5402 	umull	r5, r4, r1, r2
 801331a:	b934      	cbnz	r4, 801332a <_calloc_r+0x16>
 801331c:	4629      	mov	r1, r5
 801331e:	f7fe fd8d 	bl	8011e3c <_malloc_r>
 8013322:	4606      	mov	r6, r0
 8013324:	b928      	cbnz	r0, 8013332 <_calloc_r+0x1e>
 8013326:	4630      	mov	r0, r6
 8013328:	bd70      	pop	{r4, r5, r6, pc}
 801332a:	220c      	movs	r2, #12
 801332c:	6002      	str	r2, [r0, #0]
 801332e:	2600      	movs	r6, #0
 8013330:	e7f9      	b.n	8013326 <_calloc_r+0x12>
 8013332:	462a      	mov	r2, r5
 8013334:	4621      	mov	r1, r4
 8013336:	f7fd fe77 	bl	8011028 <memset>
 801333a:	e7f4      	b.n	8013326 <_calloc_r+0x12>

0801333c <__ascii_mbtowc>:
 801333c:	b082      	sub	sp, #8
 801333e:	b901      	cbnz	r1, 8013342 <__ascii_mbtowc+0x6>
 8013340:	a901      	add	r1, sp, #4
 8013342:	b142      	cbz	r2, 8013356 <__ascii_mbtowc+0x1a>
 8013344:	b14b      	cbz	r3, 801335a <__ascii_mbtowc+0x1e>
 8013346:	7813      	ldrb	r3, [r2, #0]
 8013348:	600b      	str	r3, [r1, #0]
 801334a:	7812      	ldrb	r2, [r2, #0]
 801334c:	1e10      	subs	r0, r2, #0
 801334e:	bf18      	it	ne
 8013350:	2001      	movne	r0, #1
 8013352:	b002      	add	sp, #8
 8013354:	4770      	bx	lr
 8013356:	4610      	mov	r0, r2
 8013358:	e7fb      	b.n	8013352 <__ascii_mbtowc+0x16>
 801335a:	f06f 0001 	mvn.w	r0, #1
 801335e:	e7f8      	b.n	8013352 <__ascii_mbtowc+0x16>

08013360 <_realloc_r>:
 8013360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013364:	4607      	mov	r7, r0
 8013366:	4614      	mov	r4, r2
 8013368:	460d      	mov	r5, r1
 801336a:	b921      	cbnz	r1, 8013376 <_realloc_r+0x16>
 801336c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013370:	4611      	mov	r1, r2
 8013372:	f7fe bd63 	b.w	8011e3c <_malloc_r>
 8013376:	b92a      	cbnz	r2, 8013384 <_realloc_r+0x24>
 8013378:	f7fe fcec 	bl	8011d54 <_free_r>
 801337c:	4625      	mov	r5, r4
 801337e:	4628      	mov	r0, r5
 8013380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013384:	f000 f92d 	bl	80135e2 <_malloc_usable_size_r>
 8013388:	4284      	cmp	r4, r0
 801338a:	4606      	mov	r6, r0
 801338c:	d802      	bhi.n	8013394 <_realloc_r+0x34>
 801338e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013392:	d8f4      	bhi.n	801337e <_realloc_r+0x1e>
 8013394:	4621      	mov	r1, r4
 8013396:	4638      	mov	r0, r7
 8013398:	f7fe fd50 	bl	8011e3c <_malloc_r>
 801339c:	4680      	mov	r8, r0
 801339e:	b908      	cbnz	r0, 80133a4 <_realloc_r+0x44>
 80133a0:	4645      	mov	r5, r8
 80133a2:	e7ec      	b.n	801337e <_realloc_r+0x1e>
 80133a4:	42b4      	cmp	r4, r6
 80133a6:	4622      	mov	r2, r4
 80133a8:	4629      	mov	r1, r5
 80133aa:	bf28      	it	cs
 80133ac:	4632      	movcs	r2, r6
 80133ae:	f7fd feda 	bl	8011166 <memcpy>
 80133b2:	4629      	mov	r1, r5
 80133b4:	4638      	mov	r0, r7
 80133b6:	f7fe fccd 	bl	8011d54 <_free_r>
 80133ba:	e7f1      	b.n	80133a0 <_realloc_r+0x40>

080133bc <_strtol_l.isra.0>:
 80133bc:	2b24      	cmp	r3, #36	@ 0x24
 80133be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133c2:	4686      	mov	lr, r0
 80133c4:	4690      	mov	r8, r2
 80133c6:	d801      	bhi.n	80133cc <_strtol_l.isra.0+0x10>
 80133c8:	2b01      	cmp	r3, #1
 80133ca:	d106      	bne.n	80133da <_strtol_l.isra.0+0x1e>
 80133cc:	f7fd fe9e 	bl	801110c <__errno>
 80133d0:	2316      	movs	r3, #22
 80133d2:	6003      	str	r3, [r0, #0]
 80133d4:	2000      	movs	r0, #0
 80133d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133da:	4834      	ldr	r0, [pc, #208]	@ (80134ac <_strtol_l.isra.0+0xf0>)
 80133dc:	460d      	mov	r5, r1
 80133de:	462a      	mov	r2, r5
 80133e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80133e4:	5d06      	ldrb	r6, [r0, r4]
 80133e6:	f016 0608 	ands.w	r6, r6, #8
 80133ea:	d1f8      	bne.n	80133de <_strtol_l.isra.0+0x22>
 80133ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80133ee:	d110      	bne.n	8013412 <_strtol_l.isra.0+0x56>
 80133f0:	782c      	ldrb	r4, [r5, #0]
 80133f2:	2601      	movs	r6, #1
 80133f4:	1c95      	adds	r5, r2, #2
 80133f6:	f033 0210 	bics.w	r2, r3, #16
 80133fa:	d115      	bne.n	8013428 <_strtol_l.isra.0+0x6c>
 80133fc:	2c30      	cmp	r4, #48	@ 0x30
 80133fe:	d10d      	bne.n	801341c <_strtol_l.isra.0+0x60>
 8013400:	782a      	ldrb	r2, [r5, #0]
 8013402:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013406:	2a58      	cmp	r2, #88	@ 0x58
 8013408:	d108      	bne.n	801341c <_strtol_l.isra.0+0x60>
 801340a:	786c      	ldrb	r4, [r5, #1]
 801340c:	3502      	adds	r5, #2
 801340e:	2310      	movs	r3, #16
 8013410:	e00a      	b.n	8013428 <_strtol_l.isra.0+0x6c>
 8013412:	2c2b      	cmp	r4, #43	@ 0x2b
 8013414:	bf04      	itt	eq
 8013416:	782c      	ldrbeq	r4, [r5, #0]
 8013418:	1c95      	addeq	r5, r2, #2
 801341a:	e7ec      	b.n	80133f6 <_strtol_l.isra.0+0x3a>
 801341c:	2b00      	cmp	r3, #0
 801341e:	d1f6      	bne.n	801340e <_strtol_l.isra.0+0x52>
 8013420:	2c30      	cmp	r4, #48	@ 0x30
 8013422:	bf14      	ite	ne
 8013424:	230a      	movne	r3, #10
 8013426:	2308      	moveq	r3, #8
 8013428:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801342c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8013430:	2200      	movs	r2, #0
 8013432:	fbbc f9f3 	udiv	r9, ip, r3
 8013436:	4610      	mov	r0, r2
 8013438:	fb03 ca19 	mls	sl, r3, r9, ip
 801343c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013440:	2f09      	cmp	r7, #9
 8013442:	d80f      	bhi.n	8013464 <_strtol_l.isra.0+0xa8>
 8013444:	463c      	mov	r4, r7
 8013446:	42a3      	cmp	r3, r4
 8013448:	dd1b      	ble.n	8013482 <_strtol_l.isra.0+0xc6>
 801344a:	1c57      	adds	r7, r2, #1
 801344c:	d007      	beq.n	801345e <_strtol_l.isra.0+0xa2>
 801344e:	4581      	cmp	r9, r0
 8013450:	d314      	bcc.n	801347c <_strtol_l.isra.0+0xc0>
 8013452:	d101      	bne.n	8013458 <_strtol_l.isra.0+0x9c>
 8013454:	45a2      	cmp	sl, r4
 8013456:	db11      	blt.n	801347c <_strtol_l.isra.0+0xc0>
 8013458:	fb00 4003 	mla	r0, r0, r3, r4
 801345c:	2201      	movs	r2, #1
 801345e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013462:	e7eb      	b.n	801343c <_strtol_l.isra.0+0x80>
 8013464:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013468:	2f19      	cmp	r7, #25
 801346a:	d801      	bhi.n	8013470 <_strtol_l.isra.0+0xb4>
 801346c:	3c37      	subs	r4, #55	@ 0x37
 801346e:	e7ea      	b.n	8013446 <_strtol_l.isra.0+0x8a>
 8013470:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013474:	2f19      	cmp	r7, #25
 8013476:	d804      	bhi.n	8013482 <_strtol_l.isra.0+0xc6>
 8013478:	3c57      	subs	r4, #87	@ 0x57
 801347a:	e7e4      	b.n	8013446 <_strtol_l.isra.0+0x8a>
 801347c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013480:	e7ed      	b.n	801345e <_strtol_l.isra.0+0xa2>
 8013482:	1c53      	adds	r3, r2, #1
 8013484:	d108      	bne.n	8013498 <_strtol_l.isra.0+0xdc>
 8013486:	2322      	movs	r3, #34	@ 0x22
 8013488:	f8ce 3000 	str.w	r3, [lr]
 801348c:	4660      	mov	r0, ip
 801348e:	f1b8 0f00 	cmp.w	r8, #0
 8013492:	d0a0      	beq.n	80133d6 <_strtol_l.isra.0+0x1a>
 8013494:	1e69      	subs	r1, r5, #1
 8013496:	e006      	b.n	80134a6 <_strtol_l.isra.0+0xea>
 8013498:	b106      	cbz	r6, 801349c <_strtol_l.isra.0+0xe0>
 801349a:	4240      	negs	r0, r0
 801349c:	f1b8 0f00 	cmp.w	r8, #0
 80134a0:	d099      	beq.n	80133d6 <_strtol_l.isra.0+0x1a>
 80134a2:	2a00      	cmp	r2, #0
 80134a4:	d1f6      	bne.n	8013494 <_strtol_l.isra.0+0xd8>
 80134a6:	f8c8 1000 	str.w	r1, [r8]
 80134aa:	e794      	b.n	80133d6 <_strtol_l.isra.0+0x1a>
 80134ac:	080151f1 	.word	0x080151f1

080134b0 <_strtol_r>:
 80134b0:	f7ff bf84 	b.w	80133bc <_strtol_l.isra.0>

080134b4 <_strtoul_l.isra.0>:
 80134b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134b8:	4e34      	ldr	r6, [pc, #208]	@ (801358c <_strtoul_l.isra.0+0xd8>)
 80134ba:	4686      	mov	lr, r0
 80134bc:	460d      	mov	r5, r1
 80134be:	4628      	mov	r0, r5
 80134c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80134c4:	5d37      	ldrb	r7, [r6, r4]
 80134c6:	f017 0708 	ands.w	r7, r7, #8
 80134ca:	d1f8      	bne.n	80134be <_strtoul_l.isra.0+0xa>
 80134cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80134ce:	d110      	bne.n	80134f2 <_strtoul_l.isra.0+0x3e>
 80134d0:	782c      	ldrb	r4, [r5, #0]
 80134d2:	2701      	movs	r7, #1
 80134d4:	1c85      	adds	r5, r0, #2
 80134d6:	f033 0010 	bics.w	r0, r3, #16
 80134da:	d115      	bne.n	8013508 <_strtoul_l.isra.0+0x54>
 80134dc:	2c30      	cmp	r4, #48	@ 0x30
 80134de:	d10d      	bne.n	80134fc <_strtoul_l.isra.0+0x48>
 80134e0:	7828      	ldrb	r0, [r5, #0]
 80134e2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80134e6:	2858      	cmp	r0, #88	@ 0x58
 80134e8:	d108      	bne.n	80134fc <_strtoul_l.isra.0+0x48>
 80134ea:	786c      	ldrb	r4, [r5, #1]
 80134ec:	3502      	adds	r5, #2
 80134ee:	2310      	movs	r3, #16
 80134f0:	e00a      	b.n	8013508 <_strtoul_l.isra.0+0x54>
 80134f2:	2c2b      	cmp	r4, #43	@ 0x2b
 80134f4:	bf04      	itt	eq
 80134f6:	782c      	ldrbeq	r4, [r5, #0]
 80134f8:	1c85      	addeq	r5, r0, #2
 80134fa:	e7ec      	b.n	80134d6 <_strtoul_l.isra.0+0x22>
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d1f6      	bne.n	80134ee <_strtoul_l.isra.0+0x3a>
 8013500:	2c30      	cmp	r4, #48	@ 0x30
 8013502:	bf14      	ite	ne
 8013504:	230a      	movne	r3, #10
 8013506:	2308      	moveq	r3, #8
 8013508:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801350c:	2600      	movs	r6, #0
 801350e:	fbb8 f8f3 	udiv	r8, r8, r3
 8013512:	fb03 f908 	mul.w	r9, r3, r8
 8013516:	ea6f 0909 	mvn.w	r9, r9
 801351a:	4630      	mov	r0, r6
 801351c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013520:	f1bc 0f09 	cmp.w	ip, #9
 8013524:	d810      	bhi.n	8013548 <_strtoul_l.isra.0+0x94>
 8013526:	4664      	mov	r4, ip
 8013528:	42a3      	cmp	r3, r4
 801352a:	dd1e      	ble.n	801356a <_strtoul_l.isra.0+0xb6>
 801352c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8013530:	d007      	beq.n	8013542 <_strtoul_l.isra.0+0x8e>
 8013532:	4580      	cmp	r8, r0
 8013534:	d316      	bcc.n	8013564 <_strtoul_l.isra.0+0xb0>
 8013536:	d101      	bne.n	801353c <_strtoul_l.isra.0+0x88>
 8013538:	45a1      	cmp	r9, r4
 801353a:	db13      	blt.n	8013564 <_strtoul_l.isra.0+0xb0>
 801353c:	fb00 4003 	mla	r0, r0, r3, r4
 8013540:	2601      	movs	r6, #1
 8013542:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013546:	e7e9      	b.n	801351c <_strtoul_l.isra.0+0x68>
 8013548:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801354c:	f1bc 0f19 	cmp.w	ip, #25
 8013550:	d801      	bhi.n	8013556 <_strtoul_l.isra.0+0xa2>
 8013552:	3c37      	subs	r4, #55	@ 0x37
 8013554:	e7e8      	b.n	8013528 <_strtoul_l.isra.0+0x74>
 8013556:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801355a:	f1bc 0f19 	cmp.w	ip, #25
 801355e:	d804      	bhi.n	801356a <_strtoul_l.isra.0+0xb6>
 8013560:	3c57      	subs	r4, #87	@ 0x57
 8013562:	e7e1      	b.n	8013528 <_strtoul_l.isra.0+0x74>
 8013564:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8013568:	e7eb      	b.n	8013542 <_strtoul_l.isra.0+0x8e>
 801356a:	1c73      	adds	r3, r6, #1
 801356c:	d106      	bne.n	801357c <_strtoul_l.isra.0+0xc8>
 801356e:	2322      	movs	r3, #34	@ 0x22
 8013570:	f8ce 3000 	str.w	r3, [lr]
 8013574:	4630      	mov	r0, r6
 8013576:	b932      	cbnz	r2, 8013586 <_strtoul_l.isra.0+0xd2>
 8013578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801357c:	b107      	cbz	r7, 8013580 <_strtoul_l.isra.0+0xcc>
 801357e:	4240      	negs	r0, r0
 8013580:	2a00      	cmp	r2, #0
 8013582:	d0f9      	beq.n	8013578 <_strtoul_l.isra.0+0xc4>
 8013584:	b106      	cbz	r6, 8013588 <_strtoul_l.isra.0+0xd4>
 8013586:	1e69      	subs	r1, r5, #1
 8013588:	6011      	str	r1, [r2, #0]
 801358a:	e7f5      	b.n	8013578 <_strtoul_l.isra.0+0xc4>
 801358c:	080151f1 	.word	0x080151f1

08013590 <_strtoul_r>:
 8013590:	f7ff bf90 	b.w	80134b4 <_strtoul_l.isra.0>

08013594 <__ascii_wctomb>:
 8013594:	4603      	mov	r3, r0
 8013596:	4608      	mov	r0, r1
 8013598:	b141      	cbz	r1, 80135ac <__ascii_wctomb+0x18>
 801359a:	2aff      	cmp	r2, #255	@ 0xff
 801359c:	d904      	bls.n	80135a8 <__ascii_wctomb+0x14>
 801359e:	228a      	movs	r2, #138	@ 0x8a
 80135a0:	601a      	str	r2, [r3, #0]
 80135a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80135a6:	4770      	bx	lr
 80135a8:	700a      	strb	r2, [r1, #0]
 80135aa:	2001      	movs	r0, #1
 80135ac:	4770      	bx	lr
	...

080135b0 <fiprintf>:
 80135b0:	b40e      	push	{r1, r2, r3}
 80135b2:	b503      	push	{r0, r1, lr}
 80135b4:	4601      	mov	r1, r0
 80135b6:	ab03      	add	r3, sp, #12
 80135b8:	4805      	ldr	r0, [pc, #20]	@ (80135d0 <fiprintf+0x20>)
 80135ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80135be:	6800      	ldr	r0, [r0, #0]
 80135c0:	9301      	str	r3, [sp, #4]
 80135c2:	f7ff fa3b 	bl	8012a3c <_vfiprintf_r>
 80135c6:	b002      	add	sp, #8
 80135c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80135cc:	b003      	add	sp, #12
 80135ce:	4770      	bx	lr
 80135d0:	24000028 	.word	0x24000028

080135d4 <abort>:
 80135d4:	b508      	push	{r3, lr}
 80135d6:	2006      	movs	r0, #6
 80135d8:	f000 f834 	bl	8013644 <raise>
 80135dc:	2001      	movs	r0, #1
 80135de:	f7f1 faf7 	bl	8004bd0 <_exit>

080135e2 <_malloc_usable_size_r>:
 80135e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135e6:	1f18      	subs	r0, r3, #4
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	bfbc      	itt	lt
 80135ec:	580b      	ldrlt	r3, [r1, r0]
 80135ee:	18c0      	addlt	r0, r0, r3
 80135f0:	4770      	bx	lr

080135f2 <_raise_r>:
 80135f2:	291f      	cmp	r1, #31
 80135f4:	b538      	push	{r3, r4, r5, lr}
 80135f6:	4605      	mov	r5, r0
 80135f8:	460c      	mov	r4, r1
 80135fa:	d904      	bls.n	8013606 <_raise_r+0x14>
 80135fc:	2316      	movs	r3, #22
 80135fe:	6003      	str	r3, [r0, #0]
 8013600:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013604:	bd38      	pop	{r3, r4, r5, pc}
 8013606:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013608:	b112      	cbz	r2, 8013610 <_raise_r+0x1e>
 801360a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801360e:	b94b      	cbnz	r3, 8013624 <_raise_r+0x32>
 8013610:	4628      	mov	r0, r5
 8013612:	f000 f831 	bl	8013678 <_getpid_r>
 8013616:	4622      	mov	r2, r4
 8013618:	4601      	mov	r1, r0
 801361a:	4628      	mov	r0, r5
 801361c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013620:	f000 b818 	b.w	8013654 <_kill_r>
 8013624:	2b01      	cmp	r3, #1
 8013626:	d00a      	beq.n	801363e <_raise_r+0x4c>
 8013628:	1c59      	adds	r1, r3, #1
 801362a:	d103      	bne.n	8013634 <_raise_r+0x42>
 801362c:	2316      	movs	r3, #22
 801362e:	6003      	str	r3, [r0, #0]
 8013630:	2001      	movs	r0, #1
 8013632:	e7e7      	b.n	8013604 <_raise_r+0x12>
 8013634:	2100      	movs	r1, #0
 8013636:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801363a:	4620      	mov	r0, r4
 801363c:	4798      	blx	r3
 801363e:	2000      	movs	r0, #0
 8013640:	e7e0      	b.n	8013604 <_raise_r+0x12>
	...

08013644 <raise>:
 8013644:	4b02      	ldr	r3, [pc, #8]	@ (8013650 <raise+0xc>)
 8013646:	4601      	mov	r1, r0
 8013648:	6818      	ldr	r0, [r3, #0]
 801364a:	f7ff bfd2 	b.w	80135f2 <_raise_r>
 801364e:	bf00      	nop
 8013650:	24000028 	.word	0x24000028

08013654 <_kill_r>:
 8013654:	b538      	push	{r3, r4, r5, lr}
 8013656:	4d07      	ldr	r5, [pc, #28]	@ (8013674 <_kill_r+0x20>)
 8013658:	2300      	movs	r3, #0
 801365a:	4604      	mov	r4, r0
 801365c:	4608      	mov	r0, r1
 801365e:	4611      	mov	r1, r2
 8013660:	602b      	str	r3, [r5, #0]
 8013662:	f7f1 faa5 	bl	8004bb0 <_kill>
 8013666:	1c43      	adds	r3, r0, #1
 8013668:	d102      	bne.n	8013670 <_kill_r+0x1c>
 801366a:	682b      	ldr	r3, [r5, #0]
 801366c:	b103      	cbz	r3, 8013670 <_kill_r+0x1c>
 801366e:	6023      	str	r3, [r4, #0]
 8013670:	bd38      	pop	{r3, r4, r5, pc}
 8013672:	bf00      	nop
 8013674:	24000bf4 	.word	0x24000bf4

08013678 <_getpid_r>:
 8013678:	f7f1 ba92 	b.w	8004ba0 <_getpid>

0801367c <lrintf>:
 801367c:	ee10 3a10 	vmov	r3, s0
 8013680:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013684:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8013688:	281e      	cmp	r0, #30
 801368a:	b082      	sub	sp, #8
 801368c:	dc2c      	bgt.n	80136e8 <lrintf+0x6c>
 801368e:	2816      	cmp	r0, #22
 8013690:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8013694:	dd09      	ble.n	80136aa <lrintf+0x2e>
 8013696:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801369a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801369e:	3a96      	subs	r2, #150	@ 0x96
 80136a0:	fa03 f002 	lsl.w	r0, r3, r2
 80136a4:	b321      	cbz	r1, 80136f0 <lrintf+0x74>
 80136a6:	4240      	negs	r0, r0
 80136a8:	e022      	b.n	80136f0 <lrintf+0x74>
 80136aa:	4b13      	ldr	r3, [pc, #76]	@ (80136f8 <lrintf+0x7c>)
 80136ac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80136b0:	ed93 7a00 	vldr	s14, [r3]
 80136b4:	ee37 0a00 	vadd.f32	s0, s14, s0
 80136b8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80136bc:	eddd 7a01 	vldr	s15, [sp, #4]
 80136c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136c4:	ee17 3a90 	vmov	r3, s15
 80136c8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80136cc:	d010      	beq.n	80136f0 <lrintf+0x74>
 80136ce:	f3c3 50c7 	ubfx	r0, r3, #23, #8
 80136d2:	387f      	subs	r0, #127	@ 0x7f
 80136d4:	d40e      	bmi.n	80136f4 <lrintf+0x78>
 80136d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80136da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80136de:	f1c0 0017 	rsb	r0, r0, #23
 80136e2:	fa23 f000 	lsr.w	r0, r3, r0
 80136e6:	e7dd      	b.n	80136a4 <lrintf+0x28>
 80136e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80136ec:	ee17 0a90 	vmov	r0, s15
 80136f0:	b002      	add	sp, #8
 80136f2:	4770      	bx	lr
 80136f4:	2000      	movs	r0, #0
 80136f6:	e7d5      	b.n	80136a4 <lrintf+0x28>
 80136f8:	080152f4 	.word	0x080152f4

080136fc <_init>:
 80136fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136fe:	bf00      	nop
 8013700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013702:	bc08      	pop	{r3}
 8013704:	469e      	mov	lr, r3
 8013706:	4770      	bx	lr

08013708 <_fini>:
 8013708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801370a:	bf00      	nop
 801370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801370e:	bc08      	pop	{r3}
 8013710:	469e      	mov	lr, r3
 8013712:	4770      	bx	lr
