
11-Complete Code H7 TIM - 6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001488c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d68  08014b60  08014b60  00015b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080168c8  080168c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080168d0  080168d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080168d4  080168d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  24000000  080168d8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a38  240001e8  08016ac0  000181e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c20  08016ac0  00018c20  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000181e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029574  00000000  00000000  00018216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005a8a  00000000  00000000  0004178a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002178  00000000  00000000  00047218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000019ad  00000000  00000000  00049390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e485  00000000  00000000  0004ad3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029de1  00000000  00000000  000891c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001705d5  00000000  00000000  000b2fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00223578  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a320  00000000  00000000  002235bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  0022d8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014b44 	.word	0x08014b44

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	08014b44 	.word	0x08014b44

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	@ 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f043 0201 	orr.w	r2, r3, #1
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6a1a      	ldr	r2, [r3, #32]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	431a      	orrs	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	621a      	str	r2, [r3, #32]
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a1a      	ldr	r2, [r3, #32]
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	43db      	mvns	r3, r3
 80007ac:	401a      	ands	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	621a      	str	r2, [r3, #32]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <Buzzer_On>:
  * @brief  Turn the buzzer on with a specific prescaler
  * @param  prescaler: Timer prescaler value
  * @retval None
  */
void Buzzer_On(uint16_t prescaler)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
    BUZZER_TIM->PSC = prescaler;
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	6293      	str	r3, [r2, #40]	@ 0x28
    BUZZER_TIM->CCR1 = BUZZER_TIM->ARR * BUZZER_DEFAULT_DUTY / 100;
 80007d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007d8:	4613      	mov	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	009a      	lsls	r2, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e6:	4909      	ldr	r1, [pc, #36]	@ (800080c <Buzzer_On+0x4c>)
 80007e8:	fba1 1303 	umull	r1, r3, r1, r3
 80007ec:	095b      	lsrs	r3, r3, #5
 80007ee:	6353      	str	r3, [r2, #52]	@ 0x34
    LL_TIM_EnableCounter(BUZZER_TIM);
 80007f0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80007f4:	f7ff ffb0 	bl	8000758 <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 80007f8:	2101      	movs	r1, #1
 80007fa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80007fe:	f7ff ffbb 	bl	8000778 <LL_TIM_CC_EnableChannel>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	51eb851f 	.word	0x51eb851f

08000810 <Buzzer_Off>:
/**
  * @brief  Turn the buzzer off
  * @retval None
  */
void Buzzer_Off(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
//    LL_TIM_DisableCounter(BUZZER_TIM);
    LL_TIM_CC_DisableChannel(BUZZER_TIM, BUZZER_TIM_CHANNEL);
 8000814:	2101      	movs	r1, #1
 8000816:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800081a:	f7ff ffbe 	bl	800079a <LL_TIM_CC_DisableChannel>
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
}
 800082c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800082e:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <__NVIC_SystemReset+0x24>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000836:	4904      	ldr	r1, [pc, #16]	@ (8000848 <__NVIC_SystemReset+0x24>)
 8000838:	4b04      	ldr	r3, [pc, #16]	@ (800084c <__NVIC_SystemReset+0x28>)
 800083a:	4313      	orrs	r3, r2
 800083c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800083e:	f3bf 8f4f 	dsb	sy
}
 8000842:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <__NVIC_SystemReset+0x20>
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	05fa0004 	.word	0x05fa0004

08000850 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	69db      	ldr	r3, [r3, #28]
 800085c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000860:	2b40      	cmp	r3, #64	@ 0x40
 8000862:	d101      	bne.n	8000868 <LL_USART_IsActiveFlag_TC+0x18>
 8000864:	2301      	movs	r3, #1
 8000866:	e000      	b.n	800086a <LL_USART_IsActiveFlag_TC+0x1a>
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <is_cmd_mode>:

//extern filter_state_t filter_state;

volatile uint8_t cmd_mode = 0; // Command mode flag (0 = normal, 1 = command mode)

uint8_t is_cmd_mode(void) {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
    return cmd_mode;
 800087c:	4b03      	ldr	r3, [pc, #12]	@ (800088c <is_cmd_mode+0x14>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	24000204 	.word	0x24000204

08000890 <strip_brackets>:

void strip_brackets(char *str) {
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
    if (str[0] == '[') {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b5b      	cmp	r3, #91	@ 0x5b
 800089e:	d10a      	bne.n	80008b6 <strip_brackets+0x26>
        memmove(str, str + 1, strlen(str));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	1c5c      	adds	r4, r3, #1
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fd93 	bl	80003d0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	4621      	mov	r1, r4
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f011 f963 	bl	8011b7c <memmove>
    }
    char *end = strchr(str, ']');
 80008b6:	215d      	movs	r1, #93	@ 0x5d
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f011 f981 	bl	8011bc0 <strchr>
 80008be:	60f8      	str	r0, [r7, #12]
    if (end) *end = '\0';
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <strip_brackets+0x3c>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <process_command>:

void process_command(char *cmd) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0c4      	sub	sp, #272	@ 0x110
 80008d8:	af0a      	add	r7, sp, #40	@ 0x28
 80008da:	6078      	str	r0, [r7, #4]
    strip_brackets(cmd);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ffd7 	bl	8000890 <strip_brackets>

    if (strcmp(cmd, "CMD") == 0) {
 80008e2:	49bc      	ldr	r1, [pc, #752]	@ (8000bd4 <process_command+0x300>)
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff fd13 	bl	8000310 <strcmp>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d10e      	bne.n	800090e <process_command+0x3a>
        cmd_mode = 1;
 80008f0:	4bb9      	ldr	r3, [pc, #740]	@ (8000bd8 <process_command+0x304>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
        printf("\r\n\r\nEntered command mode\r\n\r\n");
 80008f6:	48b9      	ldr	r0, [pc, #740]	@ (8000bdc <process_command+0x308>)
 80008f8:	f011 f832 	bl	8011960 <puts>
        main_led(0, 255, 0, 255, 1);
 80008fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000900:	23ff      	movs	r3, #255	@ 0xff
 8000902:	2200      	movs	r2, #0
 8000904:	21ff      	movs	r1, #255	@ 0xff
 8000906:	2000      	movs	r0, #0
 8000908:	f002 fa9a 	bl	8002e40 <main_led>
        return;
 800090c:	e315      	b.n	8000f3a <process_command+0x666>
    }

    if (!cmd_mode) {
 800090e:	4bb2      	ldr	r3, [pc, #712]	@ (8000bd8 <process_command+0x304>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d103      	bne.n	8000920 <process_command+0x4c>
        printf("Not in command mode\n");
 8000918:	48b1      	ldr	r0, [pc, #708]	@ (8000be0 <process_command+0x30c>)
 800091a:	f011 f821 	bl	8011960 <puts>
        return;
 800091e:	e30c      	b.n	8000f3a <process_command+0x666>
    }

    if (strcmp(cmd, "exit") == 0) {
 8000920:	49b0      	ldr	r1, [pc, #704]	@ (8000be4 <process_command+0x310>)
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff fcf4 	bl	8000310 <strcmp>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d138      	bne.n	80009a0 <process_command+0xcc>
        cmd_mode = 0;
 800092e:	4baa      	ldr	r3, [pc, #680]	@ (8000bd8 <process_command+0x304>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
        printf("\r\nExiting command mode, rebooting...\r\n\r\n");
 8000934:	48ac      	ldr	r0, [pc, #688]	@ (8000be8 <process_command+0x314>)
 8000936:	f011 f813 	bl	8011960 <puts>
        // Wait for UART transmission to complete
        while (!LL_USART_IsActiveFlag_TC(USART6)); // Ensure transmission complete
 800093a:	bf00      	nop
 800093c:	48ab      	ldr	r0, [pc, #684]	@ (8000bec <process_command+0x318>)
 800093e:	f7ff ff87 	bl	8000850 <LL_USART_IsActiveFlag_TC>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f9      	beq.n	800093c <process_command+0x68>
        // Busy-wait instead of HAL_Delay
        for (volatile uint32_t i = 0; i < 1000000; i++); // ~200ms at 480MHz
 8000948:	2300      	movs	r3, #0
 800094a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800094e:	e004      	b.n	800095a <process_command+0x86>
 8000950:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000954:	3301      	adds	r3, #1
 8000956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800095a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800095e:	4aa4      	ldr	r2, [pc, #656]	@ (8000bf0 <process_command+0x31c>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d9f5      	bls.n	8000950 <process_command+0x7c>
        // Check for pending faults
        if (SCB->HFSR) {
 8000964:	4ba3      	ldr	r3, [pc, #652]	@ (8000bf4 <process_command+0x320>)
 8000966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000968:	2b00      	cmp	r3, #0
 800096a:	d005      	beq.n	8000978 <process_command+0xa4>
            printf("Hard Fault pending: HFSR=0x%08lX\r\n", SCB->HFSR);
 800096c:	4ba1      	ldr	r3, [pc, #644]	@ (8000bf4 <process_command+0x320>)
 800096e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000970:	4619      	mov	r1, r3
 8000972:	48a1      	ldr	r0, [pc, #644]	@ (8000bf8 <process_command+0x324>)
 8000974:	f010 ff84 	bl	8011880 <iprintf>
        }
        if (SCB->CFSR) {
 8000978:	4b9e      	ldr	r3, [pc, #632]	@ (8000bf4 <process_command+0x320>)
 800097a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097c:	2b00      	cmp	r3, #0
 800097e:	d005      	beq.n	800098c <process_command+0xb8>
            printf("Configurable Fault pending: CFSR=0x%08lX\r\n", SCB->CFSR);
 8000980:	4b9c      	ldr	r3, [pc, #624]	@ (8000bf4 <process_command+0x320>)
 8000982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000984:	4619      	mov	r1, r3
 8000986:	489d      	ldr	r0, [pc, #628]	@ (8000bfc <process_command+0x328>)
 8000988:	f010 ff7a 	bl	8011880 <iprintf>
        }
        printf("Disabling interrupts\r\n"); // Debug
 800098c:	489c      	ldr	r0, [pc, #624]	@ (8000c00 <process_command+0x32c>)
 800098e:	f010 ffe7 	bl	8011960 <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 8000992:	b672      	cpsid	i
}
 8000994:	bf00      	nop
        __disable_irq(); // Disable all interrupts
        printf("Triggering NVIC_SystemReset\r\n"); // Debug
 8000996:	489b      	ldr	r0, [pc, #620]	@ (8000c04 <process_command+0x330>)
 8000998:	f010 ffe2 	bl	8011960 <puts>
        NVIC_SystemReset(); // Primary reset
 800099c:	f7ff ff42 	bl	8000824 <__NVIC_SystemReset>
        printf("NVIC_SystemReset failed, trying SCB reset\r\n"); // Debug (should not reach)
        SCB->AIRCR = (0x5FA << SCB_AIRCR_VECTKEY_Pos) | SCB_AIRCR_SYSRESETREQ_Msk;
        printf("SCB reset triggered\r\n"); // Debug (should not reach)
        while (true); // Trap if reset fails
    }
    else if (strcmp(cmd, "cal_accel_gyro") == 0) {
 80009a0:	4999      	ldr	r1, [pc, #612]	@ (8000c08 <process_command+0x334>)
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fcb4 	bl	8000310 <strcmp>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 82c5 	beq.w	8000f3a <process_command+0x666>
//        start_accel_and_gyro_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_mag") == 0) {
 80009b0:	4996      	ldr	r1, [pc, #600]	@ (8000c0c <process_command+0x338>)
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fcac 	bl	8000310 <strcmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 82bd 	beq.w	8000f3a <process_command+0x666>
//        start_mag_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cal_all") == 0) {
 80009c0:	4993      	ldr	r1, [pc, #588]	@ (8000c10 <process_command+0x33c>)
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fca4 	bl	8000310 <strcmp>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 82b5 	beq.w	8000f3a <process_command+0x666>
//        start_full_calibration(&filter_state);
    }
    else if (strcmp(cmd, "cancel_cal") == 0) {
 80009d0:	4990      	ldr	r1, [pc, #576]	@ (8000c14 <process_command+0x340>)
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fc9c 	bl	8000310 <strcmp>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 82ad 	beq.w	8000f3a <process_command+0x666>
//        cancel_calibration();
    }
    else if (strcmp(cmd, "status") == 0) {
 80009e0:	498d      	ldr	r1, [pc, #564]	@ (8000c18 <process_command+0x344>)
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff fc94 	bl	8000310 <strcmp>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d103      	bne.n	80009f6 <process_command+0x122>
        printf("Status OK\n");
 80009ee:	488b      	ldr	r0, [pc, #556]	@ (8000c1c <process_command+0x348>)
 80009f0:	f010 ffb6 	bl	8011960 <puts>
 80009f4:	e2a1      	b.n	8000f3a <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_ON") == 0) {
 80009f6:	498a      	ldr	r1, [pc, #552]	@ (8000c20 <process_command+0x34c>)
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff fc89 	bl	8000310 <strcmp>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d10e      	bne.n	8000a22 <process_command+0x14e>
        printf("CMD: Executing main_led_ON command\n");
 8000a04:	4887      	ldr	r0, [pc, #540]	@ (8000c24 <process_command+0x350>)
 8000a06:	f010 ffab 	bl	8011960 <puts>
        main_led(0, 255, 0, 255, 1);
 8000a0a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000a0e:	23ff      	movs	r3, #255	@ 0xff
 8000a10:	2200      	movs	r2, #0
 8000a12:	21ff      	movs	r1, #255	@ 0xff
 8000a14:	2000      	movs	r0, #0
 8000a16:	f002 fa13 	bl	8002e40 <main_led>
        printf("Main LED ON\n");
 8000a1a:	4883      	ldr	r0, [pc, #524]	@ (8000c28 <process_command+0x354>)
 8000a1c:	f010 ffa0 	bl	8011960 <puts>
 8000a20:	e28b      	b.n	8000f3a <process_command+0x666>
    }
    else if (strcmp(cmd, "main_led_OFF") == 0) {
 8000a22:	4982      	ldr	r1, [pc, #520]	@ (8000c2c <process_command+0x358>)
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f7ff fc73 	bl	8000310 <strcmp>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10e      	bne.n	8000a4e <process_command+0x17a>
        printf("CMD: Executing main_led_OFF command\n");
 8000a30:	487f      	ldr	r0, [pc, #508]	@ (8000c30 <process_command+0x35c>)
 8000a32:	f010 ff95 	bl	8011960 <puts>
        main_led(0, 0, 0, 0, 0);
 8000a36:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8000c34 <process_command+0x360>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2000      	movs	r0, #0
 8000a42:	f002 f9fd 	bl	8002e40 <main_led>
        printf("Main LED OFF\n");
 8000a46:	487c      	ldr	r0, [pc, #496]	@ (8000c38 <process_command+0x364>)
 8000a48:	f010 ff8a 	bl	8011960 <puts>
 8000a4c:	e275      	b.n	8000f3a <process_command+0x666>
    }
    else if (strncmp(cmd, "set_main_led", 12) == 0) {
 8000a4e:	220c      	movs	r2, #12
 8000a50:	497a      	ldr	r1, [pc, #488]	@ (8000c3c <process_command+0x368>)
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f011 f8c1 	bl	8011bda <strncmp>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d13a      	bne.n	8000ad4 <process_command+0x200>
        int index, r, g, b;
        float brightness;
        char *params_start = strchr(cmd, '(');
 8000a5e:	2128      	movs	r1, #40	@ 0x28
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f011 f8ad 	bl	8011bc0 <strchr>
 8000a66:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
        if (params_start) {
 8000a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	f000 8263 	beq.w	8000f3a <process_command+0x666>
            if (sscanf(params_start, "(%d,%d,%d,%d,%f)", &index, &r, &g, &b, &brightness) == 5) {
 8000a74:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 8000a78:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8000a7c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	496b      	ldr	r1, [pc, #428]	@ (8000c40 <process_command+0x36c>)
 8000a92:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8000a96:	f010 ff6b 	bl	8011970 <siscanf>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b05      	cmp	r3, #5
 8000a9e:	d115      	bne.n	8000acc <process_command+0x1f8>
                main_led(index, r, g, b, brightness);
 8000aa0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aaa:	b2d9      	uxtb	r1, r3
 8000aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 8000abc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac0:	f002 f9be 	bl	8002e40 <main_led>
                printf("Main LED Set\n");
 8000ac4:	485f      	ldr	r0, [pc, #380]	@ (8000c44 <process_command+0x370>)
 8000ac6:	f010 ff4b 	bl	8011960 <puts>
 8000aca:	e236      	b.n	8000f3a <process_command+0x666>
            } else {
                printf("Invalid Parameters\n");
 8000acc:	485e      	ldr	r0, [pc, #376]	@ (8000c48 <process_command+0x374>)
 8000ace:	f010 ff47 	bl	8011960 <puts>
 8000ad2:	e232      	b.n	8000f3a <process_command+0x666>
            }
        }
    }
    else if (strncmp(cmd, "SetRollPID", 10) == 0) {
 8000ad4:	220a      	movs	r2, #10
 8000ad6:	495d      	ldr	r1, [pc, #372]	@ (8000c4c <process_command+0x378>)
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f011 f87e 	bl	8011bda <strncmp>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f040 80bf 	bne.w	8000c64 <process_command+0x390>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 8000ae6:	2128      	movs	r1, #40	@ 0x28
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f011 f869 	bl	8011bc0 <strchr>
 8000aee:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
        if (params_start) {
 8000af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d068      	beq.n	8000bcc <process_command+0x2f8>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000afa:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8000afe:	f107 02bc 	add.w	r2, r7, #188	@ 0xbc
 8000b02:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8000b06:	9303      	str	r3, [sp, #12]
 8000b08:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b0c:	9302      	str	r3, [sp, #8]
 8000b0e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	494c      	ldr	r1, [pc, #304]	@ (8000c50 <process_command+0x37c>)
 8000b1e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000b22:	f010 ff25 	bl	8011970 <siscanf>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b06      	cmp	r3, #6
 8000b2a:	d14b      	bne.n	8000bc4 <process_command+0x2f0>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t roll_pid = {
 8000b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000b30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000b34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000b38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000b3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000b44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000b54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000b58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetRollPID(&roll_pid) == W25Qxx_OK) {
 8000b5c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fc0b 	bl	800137c <EEPROM_SetRollPID>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d127      	bne.n	8000bbc <process_command+0x2e8>
                    printf("Roll PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000b6c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8000b70:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000b74:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8000b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7c:	edd7 6a2d 	vldr	s13, [r7, #180]	@ 0xb4
 8000b80:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b84:	edd7 5a2c 	vldr	s11, [r7, #176]	@ 0xb0
 8000b88:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000b8c:	edd7 4a2b 	vldr	s9, [r7, #172]	@ 0xac
 8000b90:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000b94:	edd7 3a2a 	vldr	s7, [r7, #168]	@ 0xa8
 8000b98:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000b9c:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000ba0:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000ba4:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000ba8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000bac:	ed8d 7b00 	vstr	d7, [sp]
 8000bb0:	ec53 2b12 	vmov	r2, r3, d2
 8000bb4:	4827      	ldr	r0, [pc, #156]	@ (8000c54 <process_command+0x380>)
 8000bb6:	f010 fe63 	bl	8011880 <iprintf>
 8000bba:	e1be      	b.n	8000f3a <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Roll PID\n");
 8000bbc:	4826      	ldr	r0, [pc, #152]	@ (8000c58 <process_command+0x384>)
 8000bbe:	f010 fecf 	bl	8011960 <puts>
 8000bc2:	e1ba      	b.n	8000f3a <process_command+0x666>
                }
            } else {
                printf("Invalid Roll PID Parameters\n");
 8000bc4:	4825      	ldr	r0, [pc, #148]	@ (8000c5c <process_command+0x388>)
 8000bc6:	f010 fecb 	bl	8011960 <puts>
 8000bca:	e1b6      	b.n	8000f3a <process_command+0x666>
            }
        } else {
            printf("Invalid Roll PID Command Format\n");
 8000bcc:	4824      	ldr	r0, [pc, #144]	@ (8000c60 <process_command+0x38c>)
 8000bce:	f010 fec7 	bl	8011960 <puts>
 8000bd2:	e1b2      	b.n	8000f3a <process_command+0x666>
 8000bd4:	08014b60 	.word	0x08014b60
 8000bd8:	24000204 	.word	0x24000204
 8000bdc:	08014b64 	.word	0x08014b64
 8000be0:	08014b80 	.word	0x08014b80
 8000be4:	08014b94 	.word	0x08014b94
 8000be8:	08014b9c 	.word	0x08014b9c
 8000bec:	40011400 	.word	0x40011400
 8000bf0:	000f423f 	.word	0x000f423f
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	08014bc4 	.word	0x08014bc4
 8000bfc:	08014be8 	.word	0x08014be8
 8000c00:	08014c14 	.word	0x08014c14
 8000c04:	08014c2c 	.word	0x08014c2c
 8000c08:	08014c4c 	.word	0x08014c4c
 8000c0c:	08014c5c 	.word	0x08014c5c
 8000c10:	08014c64 	.word	0x08014c64
 8000c14:	08014c6c 	.word	0x08014c6c
 8000c18:	08014c78 	.word	0x08014c78
 8000c1c:	08014c80 	.word	0x08014c80
 8000c20:	08014c8c 	.word	0x08014c8c
 8000c24:	08014c98 	.word	0x08014c98
 8000c28:	08014cbc 	.word	0x08014cbc
 8000c2c:	08014cc8 	.word	0x08014cc8
 8000c30:	08014cd8 	.word	0x08014cd8
 8000c34:	00000000 	.word	0x00000000
 8000c38:	08014cfc 	.word	0x08014cfc
 8000c3c:	08014d0c 	.word	0x08014d0c
 8000c40:	08014d1c 	.word	0x08014d1c
 8000c44:	08014d30 	.word	0x08014d30
 8000c48:	08014d40 	.word	0x08014d40
 8000c4c:	08014d54 	.word	0x08014d54
 8000c50:	08014d60 	.word	0x08014d60
 8000c54:	08014d78 	.word	0x08014d78
 8000c58:	08014dc4 	.word	0x08014dc4
 8000c5c:	08014ddc 	.word	0x08014ddc
 8000c60:	08014df8 	.word	0x08014df8
        }
    }
    else if (strncmp(cmd, "SetPitchPID", 11) == 0) {
 8000c64:	220b      	movs	r2, #11
 8000c66:	49b6      	ldr	r1, [pc, #728]	@ (8000f40 <process_command+0x66c>)
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f010 ffb6 	bl	8011bda <strncmp>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d16e      	bne.n	8000d52 <process_command+0x47e>
        float outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd;
        char *params_start = strchr(cmd, '(');
 8000c74:	2128      	movs	r1, #40	@ 0x28
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f010 ffa2 	bl	8011bc0 <strchr>
 8000c7c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
        if (params_start) {
 8000c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d060      	beq.n	8000d4a <process_command+0x476>
            if (sscanf(params_start, "({%f,%f,%f},{%f,%f,%f})",
 8000c88:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000c8c:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8000c90:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c94:	9303      	str	r3, [sp, #12]
 8000c96:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c9a:	9302      	str	r3, [sp, #8]
 8000c9c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	49a6      	ldr	r1, [pc, #664]	@ (8000f44 <process_command+0x670>)
 8000cac:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8000cb0:	f010 fe5e 	bl	8011970 <siscanf>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d143      	bne.n	8000d42 <process_command+0x46e>
                       &outer_kp, &outer_ki, &outer_kd, &inner_kp, &inner_ki, &inner_kd) == 6) {
                DualPID_t pitch_pid = {
 8000cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8000cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000cc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000cca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000cd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000cd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000cd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8000cd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000cd8:	677b      	str	r3, [r7, #116]	@ 0x74
                    .out = {outer_kp, outer_ki, outer_kd},
                    .in = {inner_kp, inner_ki, inner_kd}
                };
                if (EEPROM_SetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000cda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 fb9e 	bl	8001420 <EEPROM_SetPitchPID>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d127      	bne.n	8000d3a <process_command+0x466>
                    printf("Pitch PID Set: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000cea:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000cee:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
 8000cf2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000cf6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cfa:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8000cfe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000d02:	edd7 5a20 	vldr	s11, [r7, #128]	@ 0x80
 8000d06:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8000d0a:	edd7 4a1f 	vldr	s9, [r7, #124]	@ 0x7c
 8000d0e:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8000d12:	edd7 3a1e 	vldr	s7, [r7, #120]	@ 0x78
 8000d16:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000d1a:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000d1e:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000d22:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000d26:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000d2a:	ed8d 7b00 	vstr	d7, [sp]
 8000d2e:	ec53 2b12 	vmov	r2, r3, d2
 8000d32:	4885      	ldr	r0, [pc, #532]	@ (8000f48 <process_command+0x674>)
 8000d34:	f010 fda4 	bl	8011880 <iprintf>
 8000d38:	e0ff      	b.n	8000f3a <process_command+0x666>
                           outer_kp, outer_ki, outer_kd, inner_kp, inner_ki, inner_kd);
                } else {
                    printf("Failed to set Pitch PID\n");
 8000d3a:	4884      	ldr	r0, [pc, #528]	@ (8000f4c <process_command+0x678>)
 8000d3c:	f010 fe10 	bl	8011960 <puts>
 8000d40:	e0fb      	b.n	8000f3a <process_command+0x666>
                }
            } else {
                printf("Invalid Pitch PID Parameters\n");
 8000d42:	4883      	ldr	r0, [pc, #524]	@ (8000f50 <process_command+0x67c>)
 8000d44:	f010 fe0c 	bl	8011960 <puts>
 8000d48:	e0f7      	b.n	8000f3a <process_command+0x666>
            }
        } else {
            printf("Invalid Pitch PID Command Format\n");
 8000d4a:	4882      	ldr	r0, [pc, #520]	@ (8000f54 <process_command+0x680>)
 8000d4c:	f010 fe08 	bl	8011960 <puts>
 8000d50:	e0f3      	b.n	8000f3a <process_command+0x666>
        }
    }
    else if (strncmp(cmd, "SetYawRatePID", 13) == 0) {
 8000d52:	220d      	movs	r2, #13
 8000d54:	4980      	ldr	r1, [pc, #512]	@ (8000f58 <process_command+0x684>)
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f010 ff3f 	bl	8011bda <strncmp>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d149      	bne.n	8000df6 <process_command+0x522>
        float kp, ki, kd;
        char *params_start = strchr(cmd, '(');
 8000d62:	2128      	movs	r1, #40	@ 0x28
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f010 ff2b 	bl	8011bc0 <strchr>
 8000d6a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
        if (params_start) {
 8000d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d03b      	beq.n	8000dee <process_command+0x51a>
            if (sscanf(params_start, "({%f,%f,%f})", &kp, &ki, &kd) == 3) {
 8000d76:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000d7a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8000d7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	460b      	mov	r3, r1
 8000d86:	4975      	ldr	r1, [pc, #468]	@ (8000f5c <process_command+0x688>)
 8000d88:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8000d8c:	f010 fdf0 	bl	8011970 <siscanf>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d127      	bne.n	8000de6 <process_command+0x512>
                PID_t yaw_rate_pid = {kp, ki, kd};
 8000d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000da0:	653b      	str	r3, [r7, #80]	@ 0x50
                if (EEPROM_SetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000da2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fb8c 	bl	80014c4 <EEPROM_SetYawRatePID>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d115      	bne.n	8000dde <process_command+0x50a>
                    printf("Yaw Rate PID Set: Kp=%.3f, Ki=%.3f, Kd=%.3f\n", kp, ki, kd);
 8000db2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000db6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000dba:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8000dbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc2:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8000dc6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000dca:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000dce:	ed8d 7b00 	vstr	d7, [sp]
 8000dd2:	ec53 2b15 	vmov	r2, r3, d5
 8000dd6:	4862      	ldr	r0, [pc, #392]	@ (8000f60 <process_command+0x68c>)
 8000dd8:	f010 fd52 	bl	8011880 <iprintf>
 8000ddc:	e0ad      	b.n	8000f3a <process_command+0x666>
                } else {
                    printf("Failed to set Yaw Rate PID\n");
 8000dde:	4861      	ldr	r0, [pc, #388]	@ (8000f64 <process_command+0x690>)
 8000de0:	f010 fdbe 	bl	8011960 <puts>
 8000de4:	e0a9      	b.n	8000f3a <process_command+0x666>
                }
            } else {
                printf("Invalid Yaw Rate PID Parameters\n");
 8000de6:	4860      	ldr	r0, [pc, #384]	@ (8000f68 <process_command+0x694>)
 8000de8:	f010 fdba 	bl	8011960 <puts>
 8000dec:	e0a5      	b.n	8000f3a <process_command+0x666>
            }
        } else {
            printf("Invalid Yaw Rate PID Command Format\n");
 8000dee:	485f      	ldr	r0, [pc, #380]	@ (8000f6c <process_command+0x698>)
 8000df0:	f010 fdb6 	bl	8011960 <puts>
 8000df4:	e0a1      	b.n	8000f3a <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_roll_pid") == 0) {
 8000df6:	495e      	ldr	r1, [pc, #376]	@ (8000f70 <process_command+0x69c>)
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff fa89 	bl	8000310 <strcmp>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d133      	bne.n	8000e6c <process_command+0x598>
        DualPID_t roll_pid;
        if (EEPROM_GetRollPID(&roll_pid) == W25Qxx_OK) {
 8000e04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fa95 	bl	8001338 <EEPROM_GetRollPID>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d127      	bne.n	8000e64 <process_command+0x590>
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000e14:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e18:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000e1c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   roll_pid.out.kp, roll_pid.out.ki, roll_pid.out.kd,
 8000e24:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e28:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000e2c:	edd7 5a0f 	vldr	s11, [r7, #60]	@ 0x3c
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e30:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000e34:	edd7 4a10 	vldr	s9, [r7, #64]	@ 0x40
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e38:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   roll_pid.in.kp, roll_pid.in.ki, roll_pid.in.kd);
 8000e3c:	edd7 3a11 	vldr	s7, [r7, #68]	@ 0x44
            printf("Roll PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e40:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000e44:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000e48:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000e4c:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000e50:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000e54:	ed8d 7b00 	vstr	d7, [sp]
 8000e58:	ec53 2b12 	vmov	r2, r3, d2
 8000e5c:	4845      	ldr	r0, [pc, #276]	@ (8000f74 <process_command+0x6a0>)
 8000e5e:	f010 fd0f 	bl	8011880 <iprintf>
 8000e62:	e06a      	b.n	8000f3a <process_command+0x666>
        } else {
            printf("Failed to get Roll PID\n");
 8000e64:	4844      	ldr	r0, [pc, #272]	@ (8000f78 <process_command+0x6a4>)
 8000e66:	f010 fd7b 	bl	8011960 <puts>
 8000e6a:	e066      	b.n	8000f3a <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_pitch_pid") == 0) {
 8000e6c:	4943      	ldr	r1, [pc, #268]	@ (8000f7c <process_command+0x6a8>)
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fa4e 	bl	8000310 <strcmp>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d133      	bne.n	8000ee2 <process_command+0x60e>
        DualPID_t pitch_pid;
        if (EEPROM_GetPitchPID(&pitch_pid) == W25Qxx_OK) {
 8000e7a:	f107 0318 	add.w	r3, r7, #24
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 faac 	bl	80013dc <EEPROM_GetPitchPID>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d127      	bne.n	8000eda <process_command+0x606>
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e8a:	edd7 7a06 	vldr	s15, [r7, #24]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e8e:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e92:	edd7 7a07 	vldr	s15, [r7, #28]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   pitch_pid.out.kp, pitch_pid.out.ki, pitch_pid.out.kd,
 8000e9a:	edd7 6a08 	vldr	s13, [r7, #32]
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000e9e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000ea2:	edd7 5a09 	vldr	s11, [r7, #36]	@ 0x24
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000ea6:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000eaa:	edd7 4a0a 	vldr	s9, [r7, #40]	@ 0x28
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000eae:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
                   pitch_pid.in.kp, pitch_pid.in.ki, pitch_pid.in.kd);
 8000eb2:	edd7 3a0b 	vldr	s7, [r7, #44]	@ 0x2c
            printf("Pitch PID: Out Kp=%.3f, Ki=%.3f, Kd=%.3f; In Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000eb6:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8000eba:	ed8d 3b08 	vstr	d3, [sp, #32]
 8000ebe:	ed8d 4b06 	vstr	d4, [sp, #24]
 8000ec2:	ed8d 5b04 	vstr	d5, [sp, #16]
 8000ec6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000eca:	ed8d 7b00 	vstr	d7, [sp]
 8000ece:	ec53 2b12 	vmov	r2, r3, d2
 8000ed2:	482b      	ldr	r0, [pc, #172]	@ (8000f80 <process_command+0x6ac>)
 8000ed4:	f010 fcd4 	bl	8011880 <iprintf>
 8000ed8:	e02f      	b.n	8000f3a <process_command+0x666>
        } else {
            printf("Failed to get Pitch PID\n");
 8000eda:	482a      	ldr	r0, [pc, #168]	@ (8000f84 <process_command+0x6b0>)
 8000edc:	f010 fd40 	bl	8011960 <puts>
 8000ee0:	e02b      	b.n	8000f3a <process_command+0x666>
        }
    }
    else if (strcmp(cmd, "get_yaw_rate_pid") == 0) {
 8000ee2:	4929      	ldr	r1, [pc, #164]	@ (8000f88 <process_command+0x6b4>)
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fa13 	bl	8000310 <strcmp>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d121      	bne.n	8000f34 <process_command+0x660>
        PID_t yaw_rate_pid;
        if (EEPROM_GetYawRatePID(&yaw_rate_pid) == W25Qxx_OK) {
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fac3 	bl	8001480 <EEPROM_GetYawRatePID>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d115      	bne.n	8000f2c <process_command+0x658>
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000f00:	edd7 7a03 	vldr	s15, [r7, #12]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000f04:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000f08:	edd7 7a04 	vldr	s15, [r7, #16]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000f0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
                   yaw_rate_pid.kp, yaw_rate_pid.ki, yaw_rate_pid.kd);
 8000f10:	edd7 6a05 	vldr	s13, [r7, #20]
            printf("Yaw Rate PID: Kp=%.3f, Ki=%.3f, Kd=%.3f\n",
 8000f14:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000f18:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000f1c:	ed8d 7b00 	vstr	d7, [sp]
 8000f20:	ec53 2b15 	vmov	r2, r3, d5
 8000f24:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <process_command+0x6b8>)
 8000f26:	f010 fcab 	bl	8011880 <iprintf>
 8000f2a:	e006      	b.n	8000f3a <process_command+0x666>
        } else {
            printf("Failed to get Yaw Rate PID\n");
 8000f2c:	4818      	ldr	r0, [pc, #96]	@ (8000f90 <process_command+0x6bc>)
 8000f2e:	f010 fd17 	bl	8011960 <puts>
 8000f32:	e002      	b.n	8000f3a <process_command+0x666>
        }
    }
    else {
        printf("Unknown Command\n");
 8000f34:	4817      	ldr	r0, [pc, #92]	@ (8000f94 <process_command+0x6c0>)
 8000f36:	f010 fd13 	bl	8011960 <puts>
    }
}
 8000f3a:	37e8      	adds	r7, #232	@ 0xe8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	08014e18 	.word	0x08014e18
 8000f44:	08014d60 	.word	0x08014d60
 8000f48:	08014e24 	.word	0x08014e24
 8000f4c:	08014e70 	.word	0x08014e70
 8000f50:	08014e88 	.word	0x08014e88
 8000f54:	08014ea8 	.word	0x08014ea8
 8000f58:	08014ecc 	.word	0x08014ecc
 8000f5c:	08014edc 	.word	0x08014edc
 8000f60:	08014eec 	.word	0x08014eec
 8000f64:	08014f1c 	.word	0x08014f1c
 8000f68:	08014f38 	.word	0x08014f38
 8000f6c:	08014f58 	.word	0x08014f58
 8000f70:	08014f7c 	.word	0x08014f7c
 8000f74:	08014f8c 	.word	0x08014f8c
 8000f78:	08014fd4 	.word	0x08014fd4
 8000f7c:	08014fec 	.word	0x08014fec
 8000f80:	08014ffc 	.word	0x08014ffc
 8000f84:	08015044 	.word	0x08015044
 8000f88:	0801505c 	.word	0x0801505c
 8000f8c:	08015070 	.word	0x08015070
 8000f90:	0801509c 	.word	0x0801509c
 8000f94:	080150b8 	.word	0x080150b8

08000f98 <EEPROM_Init>:

/**
  * @brief Initialize the W25Qxx flash memory
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_Init(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b096      	sub	sp, #88	@ 0x58
 8000f9c:	af00      	add	r7, sp, #0
    uint8_t jedec_id[3];
    OSPI_RegularCmdTypeDef cmd = {0};
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2250      	movs	r2, #80	@ 0x50
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f010 fe03 	bl	8011bb0 <memset>

    /* Configure command to read JEDEC ID */
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
    cmd.Instruction = W25Qxx_CMD_JEDEC_ID;
 8000fae:	239f      	movs	r3, #159	@ 0x9f
 8000fb0:	60fb      	str	r3, [r7, #12]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	613b      	str	r3, [r7, #16]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8000fc2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.NbData = 3;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DummyCycles = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4815      	ldr	r0, [pc, #84]	@ (8001034 <EEPROM_Init+0x9c>)
 8000fde:	f009 fa5b 	bl	800a498 <HAL_OSPI_Command>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <EEPROM_Init+0x5c>
        printf("Failed to configure JEDEC ID command\r\n");
 8000fe8:	4813      	ldr	r0, [pc, #76]	@ (8001038 <EEPROM_Init+0xa0>)
 8000fea:	f010 fcb9 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff2:	e01b      	b.n	800102c <EEPROM_Init+0x94>
    }

    if (HAL_OSPI_Receive(&hospi1, jedec_id, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000ff4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480d      	ldr	r0, [pc, #52]	@ (8001034 <EEPROM_Init+0x9c>)
 8001000:	f009 fb4a 	bl	800a698 <HAL_OSPI_Receive>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d005      	beq.n	8001016 <EEPROM_Init+0x7e>
        printf("Failed to read JEDEC ID\r\n");
 800100a:	480c      	ldr	r0, [pc, #48]	@ (800103c <EEPROM_Init+0xa4>)
 800100c:	f010 fca8 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001010:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001014:	e00a      	b.n	800102c <EEPROM_Init+0x94>
    }

    /* Check for valid JEDEC ID (example: Winbond W25Q series) */
    if (jedec_id[0] != 0xEF) { // Manufacturer ID for Winbond
 8001016:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800101a:	2bef      	cmp	r3, #239	@ 0xef
 800101c:	d005      	beq.n	800102a <EEPROM_Init+0x92>
        printf("Invalid JEDEC ID\r\n");
 800101e:	4808      	ldr	r0, [pc, #32]	@ (8001040 <EEPROM_Init+0xa8>)
 8001020:	f010 fc9e 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001028:	e000      	b.n	800102c <EEPROM_Init+0x94>
    }

    return W25Qxx_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3758      	adds	r7, #88	@ 0x58
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	240006a8 	.word	0x240006a8
 8001038:	080150c8 	.word	0x080150c8
 800103c:	080150f0 	.word	0x080150f0
 8001040:	0801510c 	.word	0x0801510c

08001044 <EEPROM_ReadConfig>:
/**
  * @brief Read configuration from EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_ReadConfig(DroneConfig_t *config) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b0a8      	sub	sp, #160	@ 0xa0
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    if (W25Qxx_Read(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2290      	movs	r2, #144	@ 0x90
 8001052:	4619      	mov	r1, r3
 8001054:	2000      	movs	r0, #0
 8001056:	f000 fad9 	bl	800160c <W25Qxx_Read>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <EEPROM_ReadConfig+0x28>
        printf("Failed to read data from flash\r\n");
 8001060:	4812      	ldr	r0, [pc, #72]	@ (80010ac <EEPROM_ReadConfig+0x68>)
 8001062:	f010 fc7d 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800106a:	e01b      	b.n	80010a4 <EEPROM_ReadConfig+0x60>
    }

    memcpy(config, buffer, sizeof(DroneConfig_t));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2290      	movs	r2, #144	@ 0x90
 8001076:	4619      	mov	r1, r3
 8001078:	f010 fe39 	bl	8011cee <memcpy>
    uint32_t calculated_crc = CalculateCRC32((uint8_t*)config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 800107c:	218c      	movs	r1, #140	@ 0x8c
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f83c 	bl	80010fc <CalculateCRC32>
 8001084:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (calculated_crc != config->crc) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800108e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001092:	429a      	cmp	r2, r3
 8001094:	d005      	beq.n	80010a2 <EEPROM_ReadConfig+0x5e>
        printf("EEPROM config CRC mismatch\r\n");
 8001096:	4806      	ldr	r0, [pc, #24]	@ (80010b0 <EEPROM_ReadConfig+0x6c>)
 8001098:	f010 fc62 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a0:	e000      	b.n	80010a4 <EEPROM_ReadConfig+0x60>
    }

    return W25Qxx_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	37a0      	adds	r7, #160	@ 0xa0
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	08015120 	.word	0x08015120
 80010b0:	08015140 	.word	0x08015140

080010b4 <EEPROM_WriteConfig>:
/**
  * @brief Write configuration to EEPROM
  * @param config Pointer to DroneConfig_t structure
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_WriteConfig(DroneConfig_t *config) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0a6      	sub	sp, #152	@ 0x98
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    uint8_t buffer[sizeof(DroneConfig_t)];
    memcpy(buffer, config, sizeof(DroneConfig_t));
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4611      	mov	r1, r2
 80010c4:	2290      	movs	r2, #144	@ 0x90
 80010c6:	4618      	mov	r0, r3
 80010c8:	f010 fe11 	bl	8011cee <memcpy>

    if (W25Qxx_Write(W25Qxx_CONFIG_ADDRESS, buffer, sizeof(DroneConfig_t)) != W25Qxx_OK) {
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	2290      	movs	r2, #144	@ 0x90
 80010d2:	4619      	mov	r1, r3
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 faed 	bl	80016b4 <W25Qxx_Write>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <EEPROM_WriteConfig+0x38>
        printf("Failed to write data to flash\r\n");
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <EEPROM_WriteConfig+0x44>)
 80010e2:	f010 fc3d 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ea:	e000      	b.n	80010ee <EEPROM_WriteConfig+0x3a>
    }

    return W25Qxx_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3798      	adds	r7, #152	@ 0x98
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	0801515c 	.word	0x0801515c

080010fc <CalculateCRC32>:
  * @brief Calculate CRC32 for data integrity
  * @param data Pointer to data
  * @param length Length of data
  * @retval uint32_t CRC value
  */
uint32_t CalculateCRC32(const uint8_t *data, uint32_t length) {
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800110a:	617b      	str	r3, [r7, #20]
    const uint32_t polynomial = 0x04C11DB7;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <CalculateCRC32+0x70>)
 800110e:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = 0; i < length; i++) {
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	e01f      	b.n	8001156 <CalculateCRC32+0x5a>
        crc ^= (uint32_t)data[i] << 24;
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	061b      	lsls	r3, r3, #24
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4053      	eors	r3, r2
 8001124:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e00e      	b.n	800114a <CalculateCRC32+0x4e>
            if (crc & 0x80000000) {
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	da05      	bge.n	800113e <CalculateCRC32+0x42>
                crc = (crc << 1) ^ polynomial;
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	4053      	eors	r3, r2
 800113a:	617b      	str	r3, [r7, #20]
 800113c:	e002      	b.n	8001144 <CalculateCRC32+0x48>
            } else {
                crc <<= 1;
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	617b      	str	r3, [r7, #20]
        for (uint8_t j = 0; j < 8; j++) {
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	3301      	adds	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b07      	cmp	r3, #7
 800114e:	d9ed      	bls.n	800112c <CalculateCRC32+0x30>
    for (uint32_t i = 0; i < length; i++) {
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	3301      	adds	r3, #1
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3db      	bcc.n	8001116 <CalculateCRC32+0x1a>
            }
        }
    }
    return crc;
 800115e:	697b      	ldr	r3, [r7, #20]
}
 8001160:	4618      	mov	r0, r3
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	04c11db7 	.word	0x04c11db7

08001170 <EEPROM_GetAccelCalibration>:
/**
  * @brief Get accelerometer calibration data
  * @param accel_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAccelCalibration(float accel_cal[3]) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b0aa      	sub	sp, #168	@ 0xa8
 8001174:	af04      	add	r7, sp, #16
 8001176:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff61 	bl	8001044 <EEPROM_ReadConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d012      	beq.n	80011ae <EEPROM_GetAccelCalibration+0x3e>
        printf("Failed to read config during GetAccelCalibration\r\n");
 8001188:	481c      	ldr	r0, [pc, #112]	@ (80011fc <EEPROM_GetAccelCalibration+0x8c>)
 800118a:	f010 fbe9 	bl	8011960 <puts>
        accel_cal[0] = accel_cal[1] = accel_cal[2] = 0.0f; // Initialize on error
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f103 0208 	add.w	r2, r3, #8
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3304      	adds	r3, #4
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011ac:	e021      	b.n	80011f2 <EEPROM_GetAccelCalibration+0x82>
    }
    memcpy(accel_cal, config.accel_cal, 3 * sizeof(float));
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	220c      	movs	r2, #12
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f010 fd99 	bl	8011cee <memcpy>
    printf("Retrieved accel_cal: X=%f, Y=%f, Z=%f\r\n", accel_cal[0], accel_cal[1], accel_cal[2]);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3304      	adds	r3, #4
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3308      	adds	r3, #8
 80011d6:	edd3 6a00 	vldr	s13, [r3]
 80011da:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80011de:	ed8d 6b02 	vstr	d6, [sp, #8]
 80011e2:	ed8d 7b00 	vstr	d7, [sp]
 80011e6:	ec53 2b15 	vmov	r2, r3, d5
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <EEPROM_GetAccelCalibration+0x90>)
 80011ec:	f010 fb48 	bl	8011880 <iprintf>
    return W25Qxx_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3798      	adds	r7, #152	@ 0x98
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	0801517c 	.word	0x0801517c
 8001200:	080151b0 	.word	0x080151b0

08001204 <EEPROM_GetGyroCalibration>:
/**
  * @brief Get gyroscope calibration data
  * @param gyro_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetGyroCalibration(float gyro_cal[3]) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b0aa      	sub	sp, #168	@ 0xa8
 8001208:	af04      	add	r7, sp, #16
 800120a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff17 	bl	8001044 <EEPROM_ReadConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d012      	beq.n	8001242 <EEPROM_GetGyroCalibration+0x3e>
        printf("Failed to read config during GetGyroCalibration\r\n");
 800121c:	481c      	ldr	r0, [pc, #112]	@ (8001290 <EEPROM_GetGyroCalibration+0x8c>)
 800121e:	f010 fb9f 	bl	8011960 <puts>
        gyro_cal[0] = gyro_cal[1] = gyro_cal[2] = 0.0f; // Initialize on error
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f103 0208 	add.w	r2, r3, #8
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3304      	adds	r3, #4
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 800123c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001240:	e022      	b.n	8001288 <EEPROM_GetGyroCalibration+0x84>
    }
    memcpy(gyro_cal, config.gyro_cal, 3 * sizeof(float));
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	330c      	adds	r3, #12
 8001248:	220c      	movs	r2, #12
 800124a:	4619      	mov	r1, r3
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f010 fd4e 	bl	8011cee <memcpy>
    printf("Retrieved gyro_cal: X=%f, Y=%f, Z=%f\r\n", gyro_cal[0], gyro_cal[1], gyro_cal[2]);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3304      	adds	r3, #4
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3308      	adds	r3, #8
 800126c:	edd3 6a00 	vldr	s13, [r3]
 8001270:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001274:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001278:	ed8d 7b00 	vstr	d7, [sp]
 800127c:	ec53 2b15 	vmov	r2, r3, d5
 8001280:	4804      	ldr	r0, [pc, #16]	@ (8001294 <EEPROM_GetGyroCalibration+0x90>)
 8001282:	f010 fafd 	bl	8011880 <iprintf>
    return W25Qxx_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3798      	adds	r7, #152	@ 0x98
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	0801520c 	.word	0x0801520c
 8001294:	08015240 	.word	0x08015240

08001298 <EEPROM_GetMagCalibration>:
/**
  * @brief Get magnetometer calibration data
  * @param mag_cal Array to store calibration values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetMagCalibration(float mag_cal[3]) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b0a6      	sub	sp, #152	@ 0x98
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fecd 	bl	8001044 <EEPROM_ReadConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d012      	beq.n	80012d6 <EEPROM_GetMagCalibration+0x3e>
        printf("Failed to read config during GetMagCalibration\r\n");
 80012b0:	480f      	ldr	r0, [pc, #60]	@ (80012f0 <EEPROM_GetMagCalibration+0x58>)
 80012b2:	f010 fb55 	bl	8011960 <puts>
        mag_cal[0] = mag_cal[1] = mag_cal[2] = 0.0f; // Initialize on error
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f103 0208 	add.w	r2, r3, #8
 80012bc:	f04f 0300 	mov.w	r3, #0
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3304      	adds	r3, #4
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	601a      	str	r2, [r3, #0]
        return W25Qxx_ERROR;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012d4:	e008      	b.n	80012e8 <EEPROM_GetMagCalibration+0x50>
    }
    memcpy(mag_cal, config.mag_cal, 3 * sizeof(float));
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	3318      	adds	r3, #24
 80012dc:	220c      	movs	r2, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f010 fd04 	bl	8011cee <memcpy>
    return W25Qxx_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3798      	adds	r7, #152	@ 0x98
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	0801529c 	.word	0x0801529c

080012f4 <EEPROM_GetPID>:
/**
  * @brief Get legacy PID values
  * @param pid Array to store PID values
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPID(float pid[3]) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0a6      	sub	sp, #152	@ 0x98
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fe9f 	bl	8001044 <EEPROM_ReadConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <EEPROM_GetPID+0x24>
        printf("Failed to read config during GetPID\r\n");
 800130c:	4809      	ldr	r0, [pc, #36]	@ (8001334 <EEPROM_GetPID+0x40>)
 800130e:	f010 fb27 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001316:	e008      	b.n	800132a <EEPROM_GetPID+0x36>
    }
    memcpy(pid, config.pid, 3 * sizeof(float));
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	3324      	adds	r3, #36	@ 0x24
 800131e:	220c      	movs	r2, #12
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f010 fce3 	bl	8011cee <memcpy>
    return W25Qxx_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3798      	adds	r7, #152	@ 0x98
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	080152fc 	.word	0x080152fc

08001338 <EEPROM_GetRollPID>:
/**
  * @brief Get roll PID values
  * @param roll_pid Pointer to store roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetRollPID(DualPID_t *roll_pid) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b0a6      	sub	sp, #152	@ 0x98
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001340:	f107 0308 	add.w	r3, r7, #8
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe7d 	bl	8001044 <EEPROM_ReadConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <EEPROM_GetRollPID+0x24>
        printf("Failed to read config during GetRollPID\r\n");
 8001350:	4809      	ldr	r0, [pc, #36]	@ (8001378 <EEPROM_GetRollPID+0x40>)
 8001352:	f010 fb05 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800135a:	e008      	b.n	800136e <EEPROM_GetRollPID+0x36>
    }
    memcpy(roll_pid, &config.roll_pid, sizeof(DualPID_t));
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	3340      	adds	r3, #64	@ 0x40
 8001362:	2218      	movs	r2, #24
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f010 fcc1 	bl	8011cee <memcpy>
    return W25Qxx_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3798      	adds	r7, #152	@ 0x98
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	080153f4 	.word	0x080153f4

0800137c <EEPROM_SetRollPID>:
/**
  * @brief Set roll PID values
  * @param roll_pid Pointer to roll PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetRollPID(const DualPID_t *roll_pid) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b0a6      	sub	sp, #152	@ 0x98
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe5b 	bl	8001044 <EEPROM_ReadConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <EEPROM_SetRollPID+0x24>
        printf("Failed to read config during SetRollPID\r\n");
 8001394:	4810      	ldr	r0, [pc, #64]	@ (80013d8 <EEPROM_SetRollPID+0x5c>)
 8001396:	f010 fae3 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800139e:	e016      	b.n	80013ce <EEPROM_SetRollPID+0x52>
    }
    memcpy(&config.roll_pid, roll_pid, sizeof(DualPID_t));
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	3340      	adds	r3, #64	@ 0x40
 80013a6:	2218      	movs	r2, #24
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f010 fc9f 	bl	8011cee <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	218c      	movs	r1, #140	@ 0x8c
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fea0 	bl	80010fc <CalculateCRC32>
 80013bc:	4603      	mov	r3, r0
 80013be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe74 	bl	80010b4 <EEPROM_WriteConfig>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3798      	adds	r7, #152	@ 0x98
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	08015420 	.word	0x08015420

080013dc <EEPROM_GetPitchPID>:
/**
  * @brief Get pitch PID values
  * @param pitch_pid Pointer to store pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetPitchPID(DualPID_t *pitch_pid) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0a6      	sub	sp, #152	@ 0x98
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fe2b 	bl	8001044 <EEPROM_ReadConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <EEPROM_GetPitchPID+0x24>
        printf("Failed to read config during GetPitchPID\r\n");
 80013f4:	4809      	ldr	r0, [pc, #36]	@ (800141c <EEPROM_GetPitchPID+0x40>)
 80013f6:	f010 fab3 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013fe:	e008      	b.n	8001412 <EEPROM_GetPitchPID+0x36>
    }
    memcpy(pitch_pid, &config.pitch_pid, sizeof(DualPID_t));
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	3358      	adds	r3, #88	@ 0x58
 8001406:	2218      	movs	r2, #24
 8001408:	4619      	mov	r1, r3
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f010 fc6f 	bl	8011cee <memcpy>
    return W25Qxx_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3798      	adds	r7, #152	@ 0x98
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	0801544c 	.word	0x0801544c

08001420 <EEPROM_SetPitchPID>:
/**
  * @brief Set pitch PID values
  * @param pitch_pid Pointer to pitch PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetPitchPID(const DualPID_t *pitch_pid) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b0a6      	sub	sp, #152	@ 0x98
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe09 	bl	8001044 <EEPROM_ReadConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <EEPROM_SetPitchPID+0x24>
        printf("Failed to read config during SetPitchPID\r\n");
 8001438:	4810      	ldr	r0, [pc, #64]	@ (800147c <EEPROM_SetPitchPID+0x5c>)
 800143a:	f010 fa91 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001442:	e016      	b.n	8001472 <EEPROM_SetPitchPID+0x52>
    }
    memcpy(&config.pitch_pid, pitch_pid, sizeof(DualPID_t));
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	3358      	adds	r3, #88	@ 0x58
 800144a:	2218      	movs	r2, #24
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f010 fc4d 	bl	8011cee <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	218c      	movs	r1, #140	@ 0x8c
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fe4e 	bl	80010fc <CalculateCRC32>
 8001460:	4603      	mov	r3, r0
 8001462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe22 	bl	80010b4 <EEPROM_WriteConfig>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3798      	adds	r7, #152	@ 0x98
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	08015478 	.word	0x08015478

08001480 <EEPROM_GetYawRatePID>:
/**
  * @brief Get yaw rate PID values
  * @param yaw_rate_pid Pointer to store yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetYawRatePID(PID_t *yaw_rate_pid) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b0a6      	sub	sp, #152	@ 0x98
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fdd9 	bl	8001044 <EEPROM_ReadConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <EEPROM_GetYawRatePID+0x24>
        printf("Failed to read config during GetYawRatePID\r\n");
 8001498:	4809      	ldr	r0, [pc, #36]	@ (80014c0 <EEPROM_GetYawRatePID+0x40>)
 800149a:	f010 fa61 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a2:	e008      	b.n	80014b6 <EEPROM_GetYawRatePID+0x36>
    }
    memcpy(yaw_rate_pid, &config.yaw_rate_pid, sizeof(PID_t));
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	3370      	adds	r3, #112	@ 0x70
 80014aa:	220c      	movs	r2, #12
 80014ac:	4619      	mov	r1, r3
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f010 fc1d 	bl	8011cee <memcpy>
    return W25Qxx_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3798      	adds	r7, #152	@ 0x98
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	080154a4 	.word	0x080154a4

080014c4 <EEPROM_SetYawRatePID>:
/**
  * @brief Set yaw rate PID values
  * @param yaw_rate_pid Pointer to yaw rate PID
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_SetYawRatePID(const PID_t *yaw_rate_pid) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0a6      	sub	sp, #152	@ 0x98
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fdb7 	bl	8001044 <EEPROM_ReadConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <EEPROM_SetYawRatePID+0x24>
        printf("Failed to read config during SetYawRatePID\r\n");
 80014dc:	4810      	ldr	r0, [pc, #64]	@ (8001520 <EEPROM_SetYawRatePID+0x5c>)
 80014de:	f010 fa3f 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e6:	e016      	b.n	8001516 <EEPROM_SetYawRatePID+0x52>
    }
    memcpy(&config.yaw_rate_pid, yaw_rate_pid, sizeof(PID_t));
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	3370      	adds	r3, #112	@ 0x70
 80014ee:	220c      	movs	r2, #12
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f010 fbfb 	bl	8011cee <memcpy>
    config.crc = CalculateCRC32((uint8_t*)&config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	218c      	movs	r1, #140	@ 0x8c
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fdfc 	bl	80010fc <CalculateCRC32>
 8001504:	4603      	mov	r3, r0
 8001506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    return EEPROM_WriteConfig(&config);
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff fdd0 	bl	80010b4 <EEPROM_WriteConfig>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3798      	adds	r7, #152	@ 0x98
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	080154d0 	.word	0x080154d0

08001524 <EEPROM_GetAircraftLights>:
/**
  * @brief Get aircraft lights configuration
  * @param lights Pointer to store lights configuration
  * @retval W25Qxx_Result_t
  */
W25Qxx_Result_t EEPROM_GetAircraftLights(AircraftLights_t *lights) {
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b0a7      	sub	sp, #156	@ 0x9c
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    DroneConfig_t config;
    if (EEPROM_ReadConfig(&config) != W25Qxx_OK) {
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fd87 	bl	8001044 <EEPROM_ReadConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <EEPROM_GetAircraftLights+0x24>
        printf("Failed to read config during GetAircraftLights\r\n");
 800153c:	480a      	ldr	r0, [pc, #40]	@ (8001568 <EEPROM_GetAircraftLights+0x44>)
 800153e:	f010 fa0f 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001546:	e00a      	b.n	800155e <EEPROM_GetAircraftLights+0x3a>
    }
    memcpy(lights, &config.lights, sizeof(AircraftLights_t));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	461c      	mov	r4, r3
 800154c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001550:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001552:	6020      	str	r0, [r4, #0]
 8001554:	6061      	str	r1, [r4, #4]
 8001556:	60a2      	str	r2, [r4, #8]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	7323      	strb	r3, [r4, #12]
    return W25Qxx_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	379c      	adds	r7, #156	@ 0x9c
 8001562:	46bd      	mov	sp, r7
 8001564:	bd90      	pop	{r4, r7, pc}
 8001566:	bf00      	nop
 8001568:	080154fc 	.word	0x080154fc

0800156c <W25Qxx_WaitForWriteEnd>:

/**
  * @brief Wait for write operation to complete
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_WaitForWriteEnd(void) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b096      	sub	sp, #88	@ 0x58
 8001570:	af00      	add	r7, sp, #0
    OSPI_RegularCmdTypeDef cmd = {0};
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2250      	movs	r2, #80	@ 0x50
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f010 fb18 	bl	8011bb0 <memset>
    uint8_t status;

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
    cmd.Instruction = W25Qxx_CMD_READ_STATUS1;
 8001584:	2305      	movs	r3, #5
 8001586:	613b      	str	r3, [r7, #16]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8001588:	2301      	movs	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 800158c:	2300      	movs	r3, #0
 800158e:	61bb      	str	r3, [r7, #24]
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 8001598:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800159c:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.NbData = 1;
 800159e:	2301      	movs	r3, #1
 80015a0:	647b      	str	r3, [r7, #68]	@ 0x44
    cmd.DummyCycles = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	653b      	str	r3, [r7, #80]	@ 0x50

    do {
        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b2:	4619      	mov	r1, r3
 80015b4:	4812      	ldr	r0, [pc, #72]	@ (8001600 <W25Qxx_WaitForWriteEnd+0x94>)
 80015b6:	f008 ff6f 	bl	800a498 <HAL_OSPI_Command>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <W25Qxx_WaitForWriteEnd+0x60>
            printf("Failed to configure read status command\r\n");
 80015c0:	4810      	ldr	r0, [pc, #64]	@ (8001604 <W25Qxx_WaitForWriteEnd+0x98>)
 80015c2:	f010 f9cd 	bl	8011960 <puts>
            return W25Qxx_ERROR;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ca:	e015      	b.n	80015f8 <W25Qxx_WaitForWriteEnd+0x8c>
        }
        if (HAL_OSPI_Receive(&hospi1, &status, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d2:	4619      	mov	r1, r3
 80015d4:	480a      	ldr	r0, [pc, #40]	@ (8001600 <W25Qxx_WaitForWriteEnd+0x94>)
 80015d6:	f009 f85f 	bl	800a698 <HAL_OSPI_Receive>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <W25Qxx_WaitForWriteEnd+0x80>
            printf("Failed to read status\r\n");
 80015e0:	4809      	ldr	r0, [pc, #36]	@ (8001608 <W25Qxx_WaitForWriteEnd+0x9c>)
 80015e2:	f010 f9bd 	bl	8011960 <puts>
            return W25Qxx_ERROR;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ea:	e005      	b.n	80015f8 <W25Qxx_WaitForWriteEnd+0x8c>
        }
    } while (status & 0x01); // Busy bit
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1d9      	bne.n	80015aa <W25Qxx_WaitForWriteEnd+0x3e>

    return W25Qxx_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3758      	adds	r7, #88	@ 0x58
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	240006a8 	.word	0x240006a8
 8001604:	0801555c 	.word	0x0801555c
 8001608:	08015588 	.word	0x08015588

0800160c <W25Qxx_Read>:
  * @param address Start address
  * @param buffer Buffer to store data
  * @param length Length of data to read
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Read(uint32_t address, uint8_t *buffer, uint32_t length) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b098      	sub	sp, #96	@ 0x60
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	2250      	movs	r2, #80	@ 0x50
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f010 fac5 	bl	8011bb0 <memset>

    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
    cmd.Instruction = W25Qxx_CMD_READ_DATA;
 800162a:	2303      	movs	r3, #3
 800162c:	61bb      	str	r3, [r7, #24]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 800162e:	2301      	movs	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
    cmd.Address = address;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 800163a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8001640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001644:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8001646:	2300      	movs	r3, #0
 8001648:	63fb      	str	r3, [r7, #60]	@ 0x3c
    cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 800164a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800164e:	64bb      	str	r3, [r7, #72]	@ 0x48
    cmd.NbData = length;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	657b      	str	r3, [r7, #84]	@ 0x54
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800165c:	f107 0310 	add.w	r3, r7, #16
 8001660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001664:	4619      	mov	r1, r3
 8001666:	4810      	ldr	r0, [pc, #64]	@ (80016a8 <W25Qxx_Read+0x9c>)
 8001668:	f008 ff16 	bl	800a498 <HAL_OSPI_Command>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <W25Qxx_Read+0x72>
        printf("Failed to configure read command\r\n");
 8001672:	480e      	ldr	r0, [pc, #56]	@ (80016ac <W25Qxx_Read+0xa0>)
 8001674:	f010 f974 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800167c:	e00f      	b.n	800169e <W25Qxx_Read+0x92>
    }

    if (HAL_OSPI_Receive(&hospi1, buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	68b9      	ldr	r1, [r7, #8]
 8001684:	4808      	ldr	r0, [pc, #32]	@ (80016a8 <W25Qxx_Read+0x9c>)
 8001686:	f009 f807 	bl	800a698 <HAL_OSPI_Receive>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <W25Qxx_Read+0x90>
        printf("Failed to read data\r\n");
 8001690:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <W25Qxx_Read+0xa4>)
 8001692:	f010 f965 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800169a:	e000      	b.n	800169e <W25Qxx_Read+0x92>
    }

    return W25Qxx_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3760      	adds	r7, #96	@ 0x60
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	240006a8 	.word	0x240006a8
 80016ac:	080155a0 	.word	0x080155a0
 80016b0:	080155c4 	.word	0x080155c4

080016b4 <W25Qxx_Write>:
  * @param address Start address
  * @param buffer Pointer to data
  * @param length Length of data to write
  * @retval W25Qxx_Result_t
  */
static W25Qxx_Result_t W25Qxx_Write(uint32_t address, uint8_t *buffer, uint32_t length) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b09e      	sub	sp, #120	@ 0x78
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
    OSPI_RegularCmdTypeDef cmd = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2250      	movs	r2, #80	@ 0x50
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f010 fa71 	bl	8011bb0 <memset>
    uint32_t remaining = length;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	677b      	str	r3, [r7, #116]	@ 0x74
    uint32_t current_address = address;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	673b      	str	r3, [r7, #112]	@ 0x70
    uint8_t *current_buffer = buffer;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* Erase sector if necessary */
    uint32_t sector = address / W25Qxx_SECTOR_SIZE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	0b1b      	lsrs	r3, r3, #12
 80016de:	66bb      	str	r3, [r7, #104]	@ 0x68
    cmd.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
    cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 80016e4:	2306      	movs	r3, #6
 80016e6:	61fb      	str	r3, [r7, #28]
    cmd.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
    cmd.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
    cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	643b      	str	r3, [r7, #64]	@ 0x40
    cmd.DataMode = HAL_OSPI_DATA_NONE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    cmd.DummyCycles = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	65bb      	str	r3, [r7, #88]	@ 0x58
    cmd.DQSMode = HAL_OSPI_DQS_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800170c:	4619      	mov	r1, r3
 800170e:	484f      	ldr	r0, [pc, #316]	@ (800184c <W25Qxx_Write+0x198>)
 8001710:	f008 fec2 	bl	800a498 <HAL_OSPI_Command>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <W25Qxx_Write+0x72>
        printf("Failed to enable write for sector erase\r\n");
 800171a:	484d      	ldr	r0, [pc, #308]	@ (8001850 <W25Qxx_Write+0x19c>)
 800171c:	f010 f920 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001724:	e08e      	b.n	8001844 <W25Qxx_Write+0x190>
    }

    cmd.Instruction = W25Qxx_CMD_SECTOR_ERASE;
 8001726:	2320      	movs	r3, #32
 8001728:	61fb      	str	r3, [r7, #28]
    cmd.Address = sector * W25Qxx_SECTOR_SIZE;
 800172a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800172c:	031b      	lsls	r3, r3, #12
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 8001730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001734:	633b      	str	r3, [r7, #48]	@ 0x30
    cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8001736:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001744:	4619      	mov	r1, r3
 8001746:	4841      	ldr	r0, [pc, #260]	@ (800184c <W25Qxx_Write+0x198>)
 8001748:	f008 fea6 	bl	800a498 <HAL_OSPI_Command>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <W25Qxx_Write+0xaa>
        printf("Failed to erase sector\r\n");
 8001752:	4840      	ldr	r0, [pc, #256]	@ (8001854 <W25Qxx_Write+0x1a0>)
 8001754:	f010 f904 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800175c:	e072      	b.n	8001844 <W25Qxx_Write+0x190>
    }

    if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 800175e:	f7ff ff05 	bl	800156c <W25Qxx_WaitForWriteEnd>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d069      	beq.n	800183c <W25Qxx_Write+0x188>
        printf("Timeout waiting for sector erase\r\n");
 8001768:	483b      	ldr	r0, [pc, #236]	@ (8001858 <W25Qxx_Write+0x1a4>)
 800176a:	f010 f8f9 	bl	8011960 <puts>
        return W25Qxx_ERROR;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001772:	e067      	b.n	8001844 <W25Qxx_Write+0x190>
    }

    /* Write data in pages */
    while (remaining > 0) {
        uint32_t page_size = (remaining > W25Qxx_PAGE_SIZE) ? W25Qxx_PAGE_SIZE : remaining;
 8001774:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800177a:	bf28      	it	cs
 800177c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8001780:	667b      	str	r3, [r7, #100]	@ 0x64

        cmd.Instruction = W25Qxx_CMD_WRITE_ENABLE;
 8001782:	2306      	movs	r3, #6
 8001784:	61fb      	str	r3, [r7, #28]
        cmd.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8001786:	2300      	movs	r3, #0
 8001788:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.DataMode = HAL_OSPI_DATA_NONE;
 800178a:	2300      	movs	r3, #0
 800178c:	64fb      	str	r3, [r7, #76]	@ 0x4c

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001796:	4619      	mov	r1, r3
 8001798:	482c      	ldr	r0, [pc, #176]	@ (800184c <W25Qxx_Write+0x198>)
 800179a:	f008 fe7d 	bl	800a498 <HAL_OSPI_Command>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <W25Qxx_Write+0xfc>
            printf("Failed to enable write for page program\r\n");
 80017a4:	482d      	ldr	r0, [pc, #180]	@ (800185c <W25Qxx_Write+0x1a8>)
 80017a6:	f010 f8db 	bl	8011960 <puts>
            return W25Qxx_ERROR;
 80017aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ae:	e049      	b.n	8001844 <W25Qxx_Write+0x190>
        }

        cmd.Instruction = W25Qxx_CMD_PAGE_PROGRAM;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61fb      	str	r3, [r7, #28]
        cmd.Address = current_address;
 80017b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        cmd.AddressMode = HAL_OSPI_ADDRESS_1_LINE;
 80017b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017bc:	633b      	str	r3, [r7, #48]	@ 0x30
        cmd.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 80017be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017c2:	637b      	str	r3, [r7, #52]	@ 0x34
        cmd.DataMode = HAL_OSPI_DATA_1_LINE;
 80017c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        cmd.NbData = page_size;
 80017ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017cc:	653b      	str	r3, [r7, #80]	@ 0x50

        if (HAL_OSPI_Command(&hospi1, &cmd, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d6:	4619      	mov	r1, r3
 80017d8:	481c      	ldr	r0, [pc, #112]	@ (800184c <W25Qxx_Write+0x198>)
 80017da:	f008 fe5d 	bl	800a498 <HAL_OSPI_Command>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <W25Qxx_Write+0x13c>
            printf("Failed to configure page program command\r\n");
 80017e4:	481e      	ldr	r0, [pc, #120]	@ (8001860 <W25Qxx_Write+0x1ac>)
 80017e6:	f010 f8bb 	bl	8011960 <puts>
            return W25Qxx_ERROR;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ee:	e029      	b.n	8001844 <W25Qxx_Write+0x190>
        }

        if (HAL_OSPI_Transmit(&hospi1, current_buffer, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80017f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80017f6:	4815      	ldr	r0, [pc, #84]	@ (800184c <W25Qxx_Write+0x198>)
 80017f8:	f008 fedb 	bl	800a5b2 <HAL_OSPI_Transmit>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <W25Qxx_Write+0x15a>
            printf("Failed to write page data\r\n");
 8001802:	4818      	ldr	r0, [pc, #96]	@ (8001864 <W25Qxx_Write+0x1b0>)
 8001804:	f010 f8ac 	bl	8011960 <puts>
            return W25Qxx_ERROR;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800180c:	e01a      	b.n	8001844 <W25Qxx_Write+0x190>
        }

        if (W25Qxx_WaitForWriteEnd() != W25Qxx_OK) {
 800180e:	f7ff fead 	bl	800156c <W25Qxx_WaitForWriteEnd>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <W25Qxx_Write+0x170>
            printf("Timeout waiting for page write\r\n");
 8001818:	4813      	ldr	r0, [pc, #76]	@ (8001868 <W25Qxx_Write+0x1b4>)
 800181a:	f010 f8a1 	bl	8011960 <puts>
            return W25Qxx_ERROR;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001822:	e00f      	b.n	8001844 <W25Qxx_Write+0x190>
        }

        remaining -= page_size;
 8001824:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001826:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	677b      	str	r3, [r7, #116]	@ 0x74
        current_address += page_size;
 800182c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800182e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001830:	4413      	add	r3, r2
 8001832:	673b      	str	r3, [r7, #112]	@ 0x70
        current_buffer += page_size;
 8001834:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001836:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001838:	4413      	add	r3, r2
 800183a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (remaining > 0) {
 800183c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800183e:	2b00      	cmp	r3, #0
 8001840:	d198      	bne.n	8001774 <W25Qxx_Write+0xc0>
    }

    return W25Qxx_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3778      	adds	r7, #120	@ 0x78
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	240006a8 	.word	0x240006a8
 8001850:	080155dc 	.word	0x080155dc
 8001854:	08015608 	.word	0x08015608
 8001858:	08015620 	.word	0x08015620
 800185c:	08015644 	.word	0x08015644
 8001860:	08015670 	.word	0x08015670
 8001864:	0801569c 	.word	0x0801569c
 8001868:	080156b8 	.word	0x080156b8

0800186c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f833 	bl	80018e4 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800187e:	f000 f8d1 	bl	8001a24 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8001882:	f000 f8eb 	bl	8001a5c <dshot_start_pwm>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f95c 	bl	8001b54 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800189c:	f000 f986 	bl	8001bac <dshot_dma_start>
	dshot_enable_dma_request();
 80018a0:	f000 f9ba 	bl	8001c18 <dshot_enable_dma_request>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d003      	beq.n	80018c4 <dshot_choose_type+0x18>
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d103      	bne.n	80018c8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <dshot_choose_type+0x2c>)
 80018c2:	e002      	b.n	80018ca <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <dshot_choose_type+0x30>)
 80018c6:	e000      	b.n	80018ca <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <dshot_choose_type+0x34>)
	}
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	00b71b00 	.word	0x00b71b00
 80018dc:	005b8d80 	.word	0x005b8d80
 80018e0:	002dc6c0 	.word	0x002dc6c0

080018e4 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	ed2d 8b02 	vpush	{d8}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80018f2:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <dshot_set_timer+0xac>)
 80018f4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ffd2 	bl	80018ac <dshot_choose_type>
 8001908:	ee07 0a90 	vmov	s15, r0
 800190c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001910:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001914:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001994 <dshot_set_timer+0xb0>
 8001918:	ee77 7a87 	vadd.f32	s15, s15, s14
 800191c:	eeb0 0a67 	vmov.f32	s0, s15
 8001920:	f012 fcca 	bl	80142b8 <lrintf>
 8001924:	4603      	mov	r3, r0
 8001926:	b29b      	uxth	r3, r3
 8001928:	3b01      	subs	r3, #1
 800192a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800192c:	4b1a      	ldr	r3, [pc, #104]	@ (8001998 <dshot_set_timer+0xb4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	897a      	ldrh	r2, [r7, #10]
 8001932:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8001934:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <dshot_set_timer+0xb4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2214      	movs	r2, #20
 800193a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800193c:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <dshot_set_timer+0xb4>)
 800193e:	2214      	movs	r2, #20
 8001940:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <dshot_set_timer+0xb4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	897a      	ldrh	r2, [r7, #10]
 8001948:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <dshot_set_timer+0xb4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2214      	movs	r2, #20
 8001950:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <dshot_set_timer+0xb4>)
 8001954:	2214      	movs	r2, #20
 8001956:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <dshot_set_timer+0xb4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	897a      	ldrh	r2, [r7, #10]
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8001960:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <dshot_set_timer+0xb4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2214      	movs	r2, #20
 8001966:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <dshot_set_timer+0xb4>)
 800196a:	2214      	movs	r2, #20
 800196c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <dshot_set_timer+0xb4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	897a      	ldrh	r2, [r7, #10]
 8001974:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8001976:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <dshot_set_timer+0xb4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2214      	movs	r2, #20
 800197c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <dshot_set_timer+0xb4>)
 8001980:	2214      	movs	r2, #20
 8001982:	60da      	str	r2, [r3, #12]
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	ecbd 8b02 	vpop	{d8}
 800198e:	bd80      	pop	{r7, pc}
 8001990:	10642ac0 	.word	0x10642ac0
 8001994:	3c23d70a 	.word	0x3c23d70a
 8001998:	2400082c 	.word	0x2400082c

0800199c <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019a8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d108      	bne.n	80019c6 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019c2:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80019c4:	e028      	b.n	8001a18 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d108      	bne.n	80019e2 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019de:	60da      	str	r2, [r3, #12]
}
 80019e0:	e01a      	b.n	8001a18 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d108      	bne.n	80019fe <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019fa:	60da      	str	r2, [r3, #12]
}
 80019fc:	e00c      	b.n	8001a18 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d107      	bne.n	8001a18 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a16:	60da      	str	r2, [r3, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <dshot_put_tc_callback_function+0x30>)
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <dshot_put_tc_callback_function+0x34>)
 8001a2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <dshot_put_tc_callback_function+0x30>)
 8001a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a34:	4a08      	ldr	r2, [pc, #32]	@ (8001a58 <dshot_put_tc_callback_function+0x34>)
 8001a36:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <dshot_put_tc_callback_function+0x30>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <dshot_put_tc_callback_function+0x34>)
 8001a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <dshot_put_tc_callback_function+0x30>)
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <dshot_put_tc_callback_function+0x34>)
 8001a46:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2400082c 	.word	0x2400082c
 8001a58:	0800199d 	.word	0x0800199d

08001a5c <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8001a60:	2100      	movs	r1, #0
 8001a62:	4808      	ldr	r0, [pc, #32]	@ (8001a84 <dshot_start_pwm+0x28>)
 8001a64:	f00c f9c8 	bl	800ddf8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8001a68:	2104      	movs	r1, #4
 8001a6a:	4806      	ldr	r0, [pc, #24]	@ (8001a84 <dshot_start_pwm+0x28>)
 8001a6c:	f00c f9c4 	bl	800ddf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8001a70:	2108      	movs	r1, #8
 8001a72:	4804      	ldr	r0, [pc, #16]	@ (8001a84 <dshot_start_pwm+0x28>)
 8001a74:	f00c f9c0 	bl	800ddf8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8001a78:	210c      	movs	r1, #12
 8001a7a:	4802      	ldr	r0, [pc, #8]	@ (8001a84 <dshot_start_pwm+0x28>)
 8001a7c:	f00c f9bc 	bl	800ddf8 <HAL_TIM_PWM_Start>
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2400082c 	.word	0x2400082c

08001a88 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8001a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8001aac:	893b      	ldrh	r3, [r7, #8]
 8001aae:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	e009      	b.n	8001aca <dshot_prepare_packet+0x42>
	{
        csum ^=  csum_data; // xor data by nibbles
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4053      	eors	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	ddf2      	ble.n	8001ab6 <dshot_prepare_packet+0x2e>
	}

	csum &= 0xf;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8001ad8:	893b      	ldrh	r3, [r7, #8]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	813b      	strh	r3, [r7, #8]

	return packet;
 8001ae6:	893b      	ldrh	r3, [r7, #8]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ffc0 	bl	8001a88 <dshot_prepare_packet>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	e011      	b.n	8001b36 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8001b12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	da01      	bge.n	8001b1e <dshot_prepare_dmabuffer+0x2a>
 8001b1a:	220e      	movs	r2, #14
 8001b1c:	e000      	b.n	8001b20 <dshot_prepare_dmabuffer+0x2c>
 8001b1e:	2207      	movs	r2, #7
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	440b      	add	r3, r1
 8001b28:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8001b2a:	89fb      	ldrh	r3, [r7, #14]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3301      	adds	r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	ddea      	ble.n	8001b12 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3340      	adds	r3, #64	@ 0x40
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3344      	adds	r3, #68	@ 0x44
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	480e      	ldr	r0, [pc, #56]	@ (8001b9c <dshot_prepare_dmabuffer_all+0x48>)
 8001b64:	f7ff ffc6 	bl	8001af4 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480b      	ldr	r0, [pc, #44]	@ (8001ba0 <dshot_prepare_dmabuffer_all+0x4c>)
 8001b72:	f7ff ffbf 	bl	8001af4 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <dshot_prepare_dmabuffer_all+0x50>)
 8001b80:	f7ff ffb8 	bl	8001af4 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3306      	adds	r3, #6
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <dshot_prepare_dmabuffer_all+0x54>)
 8001b8e:	f7ff ffb1 	bl	8001af4 <dshot_prepare_dmabuffer>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	24000208 	.word	0x24000208
 8001ba0:	24000250 	.word	0x24000250
 8001ba4:	24000298 	.word	0x24000298
 8001ba8:	240002e0 	.word	0x240002e0

08001bac <dshot_dma_start>:

static void dshot_dma_start()
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <dshot_dma_start+0x58>)
 8001bb2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001bb4:	4914      	ldr	r1, [pc, #80]	@ (8001c08 <dshot_dma_start+0x5c>)
 8001bb6:	4b13      	ldr	r3, [pc, #76]	@ (8001c04 <dshot_dma_start+0x58>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3340      	adds	r3, #64	@ 0x40
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2312      	movs	r3, #18
 8001bc0:	f005 fc28 	bl	8007414 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <dshot_dma_start+0x58>)
 8001bc6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8001bc8:	4910      	ldr	r1, [pc, #64]	@ (8001c0c <dshot_dma_start+0x60>)
 8001bca:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <dshot_dma_start+0x58>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	333c      	adds	r3, #60	@ 0x3c
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2312      	movs	r3, #18
 8001bd4:	f005 fc1e 	bl	8007414 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <dshot_dma_start+0x58>)
 8001bda:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <dshot_dma_start+0x64>)
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <dshot_dma_start+0x58>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3334      	adds	r3, #52	@ 0x34
 8001be4:	461a      	mov	r2, r3
 8001be6:	2312      	movs	r3, #18
 8001be8:	f005 fc14 	bl	8007414 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <dshot_dma_start+0x58>)
 8001bee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001bf0:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <dshot_dma_start+0x68>)
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <dshot_dma_start+0x58>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3338      	adds	r3, #56	@ 0x38
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	f005 fc0a 	bl	8007414 <HAL_DMA_Start_IT>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2400082c 	.word	0x2400082c
 8001c08:	24000208 	.word	0x24000208
 8001c0c:	24000250 	.word	0x24000250
 8001c10:	24000298 	.word	0x24000298
 8001c14:	240002e0 	.word	0x240002e0

08001c18 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <dshot_enable_dma_request+0x50>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <dshot_enable_dma_request+0x50>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001c2a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <dshot_enable_dma_request+0x50>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <dshot_enable_dma_request+0x50>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c3a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <dshot_enable_dma_request+0x50>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <dshot_enable_dma_request+0x50>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c4a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <dshot_enable_dma_request+0x50>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <dshot_enable_dma_request+0x50>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c5a:	60da      	str	r2, [r3, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	2400082c 	.word	0x2400082c

08001c6c <Normalize_Vector>:
#include "complementary_filter.h"
#include <math.h>

#define ALPHA 0.9f

void Normalize_Vector(float* x, float* y, float* z) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
    float norm = sqrtf((*x) * (*x) + (*y) * (*y) + (*z) * (*z));
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	ed93 7a00 	vldr	s14, [r3]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	edd3 6a00 	vldr	s13, [r3]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	edd3 6a00 	vldr	s13, [r3]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edd3 7a00 	vldr	s15, [r3]
 8001ca8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb4:	f012 fad4 	bl	8014260 <sqrtf>
 8001cb8:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 0.0001f) {
 8001cbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cc0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001d14 <Normalize_Vector+0xa8>
 8001cc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ccc:	dc00      	bgt.n	8001cd0 <Normalize_Vector+0x64>
        *x /= norm;
        *y /= norm;
        *z /= norm;
    }
}
 8001cce:	e01d      	b.n	8001d0c <Normalize_Vector+0xa0>
        *x /= norm;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	edd3 6a00 	vldr	s13, [r3]
 8001cd6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	edc3 7a00 	vstr	s15, [r3]
        *y /= norm;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	edd3 6a00 	vldr	s13, [r3]
 8001cea:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	edc3 7a00 	vstr	s15, [r3]
        *z /= norm;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	edd3 6a00 	vldr	s13, [r3]
 8001cfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	edc3 7a00 	vstr	s15, [r3]
}
 8001d0c:	bf00      	nop
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	38d1b717 	.word	0x38d1b717

08001d18 <Normalize_Quaternion>:

static void Normalize_Quaternion(Quaternion* q) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    float norm = sqrtf(q->w*q->w + q->x*q->x + q->y*q->y + q->z*q->z);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	ed93 7a00 	vldr	s14, [r3]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d70:	f012 fa76 	bl	8014260 <sqrtf>
 8001d74:	ed87 0a03 	vstr	s0, [r7, #12]
    q->w /= norm;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	edd3 6a00 	vldr	s13, [r3]
 8001d7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	edc3 7a00 	vstr	s15, [r3]
    q->x /= norm;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d92:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y /= norm;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001da6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z /= norm;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	edd3 6a03 	vldr	s13, [r3, #12]
 8001dba:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <Quaternion_Multiply>:

static Quaternion Quaternion_Multiply(Quaternion a, Quaternion b) {
 8001dd0:	b490      	push	{r4, r7}
 8001dd2:	b094      	sub	sp, #80	@ 0x50
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	eeb0 4a40 	vmov.f32	s8, s0
 8001dda:	eef0 4a60 	vmov.f32	s9, s1
 8001dde:	eeb0 5a41 	vmov.f32	s10, s2
 8001de2:	eef0 5a61 	vmov.f32	s11, s3
 8001de6:	eeb0 6a42 	vmov.f32	s12, s4
 8001dea:	eef0 6a62 	vmov.f32	s13, s5
 8001dee:	eeb0 7a43 	vmov.f32	s14, s6
 8001df2:	eef0 7a63 	vmov.f32	s15, s7
 8001df6:	ed87 4a08 	vstr	s8, [r7, #32]
 8001dfa:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 8001dfe:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 8001e02:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8001e06:	ed87 6a04 	vstr	s12, [r7, #16]
 8001e0a:	edc7 6a05 	vstr	s13, [r7, #20]
 8001e0e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001e12:	edc7 7a07 	vstr	s15, [r7, #28]
    Quaternion r;
    r.w = a.w*b.w - a.x*b.x - a.y*b.y - a.z*b.z;
 8001e16:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e22:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001e26:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e32:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e42:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001e46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e52:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    r.x = a.w*b.x + a.x*b.w + a.y*b.z - a.z*b.y;
 8001e56:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e62:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001e66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e72:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001e76:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e82:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e92:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    r.y = a.w*b.y - a.x*b.z + a.y*b.w + a.z*b.x;
 8001e96:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001ea6:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001eb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec2:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    r.z = a.w*b.z + a.x*b.y - a.y*b.x + a.z*b.w;
 8001ed6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001eda:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001ee6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001ef6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f02:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001f06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    return r;
 8001f16:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001f1a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001f24:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001f26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001f28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f2c:	ee06 0a10 	vmov	s12, r0
 8001f30:	ee06 1a90 	vmov	s13, r1
 8001f34:	ee07 2a10 	vmov	s14, r2
 8001f38:	ee07 3a90 	vmov	s15, r3
}
 8001f3c:	eeb0 0a46 	vmov.f32	s0, s12
 8001f40:	eef0 0a66 	vmov.f32	s1, s13
 8001f44:	eeb0 1a47 	vmov.f32	s2, s14
 8001f48:	eef0 1a67 	vmov.f32	s3, s15
 8001f4c:	3750      	adds	r7, #80	@ 0x50
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc90      	pop	{r4, r7}
 8001f52:	4770      	bx	lr

08001f54 <Integrate_Gyro>:

static void Integrate_Gyro(Quaternion* q, float gx, float gy, float gz, float dt) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08e      	sub	sp, #56	@ 0x38
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6178      	str	r0, [r7, #20]
 8001f5c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f60:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f64:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f68:	edc7 1a01 	vstr	s3, [r7, #4]
    Quaternion omega = {0, gx, gy, gz};
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	637b      	str	r3, [r7, #52]	@ 0x34
    Quaternion q_dot = Quaternion_Multiply(*q, omega);
 8001f7e:	ed97 4a0a 	vldr	s8, [r7, #40]	@ 0x28
 8001f82:	edd7 4a0b 	vldr	s9, [r7, #44]	@ 0x2c
 8001f86:	ed97 5a0c 	vldr	s10, [r7, #48]	@ 0x30
 8001f8a:	edd7 5a0d 	vldr	s11, [r7, #52]	@ 0x34
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	ed93 6a00 	vldr	s12, [r3]
 8001f94:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f98:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fa0:	eeb0 2a44 	vmov.f32	s4, s8
 8001fa4:	eef0 2a64 	vmov.f32	s5, s9
 8001fa8:	eeb0 3a45 	vmov.f32	s6, s10
 8001fac:	eef0 3a65 	vmov.f32	s7, s11
 8001fb0:	eeb0 0a46 	vmov.f32	s0, s12
 8001fb4:	eef0 0a66 	vmov.f32	s1, s13
 8001fb8:	eeb0 1a47 	vmov.f32	s2, s14
 8001fbc:	eef0 1a67 	vmov.f32	s3, s15
 8001fc0:	f7ff ff06 	bl	8001dd0 <Quaternion_Multiply>
 8001fc4:	eeb0 6a40 	vmov.f32	s12, s0
 8001fc8:	eef0 6a60 	vmov.f32	s13, s1
 8001fcc:	eeb0 7a41 	vmov.f32	s14, s2
 8001fd0:	eef0 7a61 	vmov.f32	s15, s3
 8001fd4:	ed87 6a06 	vstr	s12, [r7, #24]
 8001fd8:	edc7 6a07 	vstr	s13, [r7, #28]
 8001fdc:	ed87 7a08 	vstr	s14, [r7, #32]
 8001fe0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    q_dot.w *= 0.5f;
 8001fe4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fe8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff0:	edc7 7a06 	vstr	s15, [r7, #24]
    q_dot.x *= 0.5f;
 8001ff4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ff8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002000:	edc7 7a07 	vstr	s15, [r7, #28]
    q_dot.y *= 0.5f;
 8002004:	edd7 7a08 	vldr	s15, [r7, #32]
 8002008:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800200c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002010:	edc7 7a08 	vstr	s15, [r7, #32]
    q_dot.z *= 0.5f;
 8002014:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002018:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800201c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002020:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    q->w += q_dot.w * dt;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	ed93 7a00 	vldr	s14, [r3]
 800202a:	edd7 6a06 	vldr	s13, [r7, #24]
 800202e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	edc3 7a00 	vstr	s15, [r3]
    q->x += q_dot.x * dt;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	ed93 7a01 	vldr	s14, [r3, #4]
 8002046:	edd7 6a07 	vldr	s13, [r7, #28]
 800204a:	edd7 7a01 	vldr	s15, [r7, #4]
 800204e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y += q_dot.y * dt;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002062:	edd7 6a08 	vldr	s13, [r7, #32]
 8002066:	edd7 7a01 	vldr	s15, [r7, #4]
 800206a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800206e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z += q_dot.z * dt;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	ed93 7a03 	vldr	s14, [r3, #12]
 800207e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002082:	edd7 7a01 	vldr	s15, [r7, #4]
 8002086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	edc3 7a03 	vstr	s15, [r3, #12]

    Normalize_Quaternion(q);
 8002094:	6978      	ldr	r0, [r7, #20]
 8002096:	f7ff fe3f 	bl	8001d18 <Normalize_Quaternion>
}
 800209a:	bf00      	nop
 800209c:	3738      	adds	r7, #56	@ 0x38
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <Accel_To_Quaternion>:

static Quaternion Accel_To_Quaternion(float ax, float ay, float az) {
 80020a2:	b590      	push	{r4, r7, lr}
 80020a4:	ed2d 8b02 	vpush	{d8}
 80020a8:	b097      	sub	sp, #92	@ 0x5c
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	ed87 0a07 	vstr	s0, [r7, #28]
 80020b0:	edc7 0a06 	vstr	s1, [r7, #24]
 80020b4:	ed87 1a05 	vstr	s2, [r7, #20]
    float roll = atan2f(ay, az);
 80020b8:	edd7 0a05 	vldr	s1, [r7, #20]
 80020bc:	ed97 0a06 	vldr	s0, [r7, #24]
 80020c0:	f012 f8cc 	bl	801425c <atan2f>
 80020c4:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
    float pitch = atan2f(-ax, sqrtf(ay*ay + az*az));
 80020c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80020cc:	eeb1 8a67 	vneg.f32	s16, s15
 80020d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80020d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80020e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e4:	eeb0 0a67 	vmov.f32	s0, s15
 80020e8:	f012 f8ba 	bl	8014260 <sqrtf>
 80020ec:	eef0 7a40 	vmov.f32	s15, s0
 80020f0:	eef0 0a67 	vmov.f32	s1, s15
 80020f4:	eeb0 0a48 	vmov.f32	s0, s16
 80020f8:	f012 f8b0 	bl	801425c <atan2f>
 80020fc:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50

    float cr = cosf(roll * 0.5f);
 8002100:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002104:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002108:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210c:	eeb0 0a67 	vmov.f32	s0, s15
 8002110:	f012 fa02 	bl	8014518 <cosf>
 8002114:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
    float sr = sinf(roll * 0.5f);
 8002118:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800211c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002124:	eeb0 0a67 	vmov.f32	s0, s15
 8002128:	f012 f932 	bl	8014390 <sinf>
 800212c:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float cp = cosf(pitch * 0.5f);
 8002130:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002134:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213c:	eeb0 0a67 	vmov.f32	s0, s15
 8002140:	f012 f9ea 	bl	8014518 <cosf>
 8002144:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    float sp = sinf(pitch * 0.5f);
 8002148:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800214c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	f012 f91a 	bl	8014390 <sinf>
 800215c:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40

    Quaternion q;
    q.w = cr * cp;
 8002160:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002164:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216c:	edc7 7a08 	vstr	s15, [r7, #32]
    q.x = sr * cp;
 8002170:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002174:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    q.y = cr * sp;
 8002180:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002184:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    q.z = -sr * sp;  // yaw is ignored
 8002190:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002194:	eeb1 7a67 	vneg.f32	s14, s15
 8002198:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800219c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    return q;
 80021a4:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80021a8:	f107 0320 	add.w	r3, r7, #32
 80021ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80021b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ba:	ee06 0a10 	vmov	s12, r0
 80021be:	ee06 1a90 	vmov	s13, r1
 80021c2:	ee07 2a10 	vmov	s14, r2
 80021c6:	ee07 3a90 	vmov	s15, r3
}
 80021ca:	eeb0 0a46 	vmov.f32	s0, s12
 80021ce:	eef0 0a66 	vmov.f32	s1, s13
 80021d2:	eeb0 1a47 	vmov.f32	s2, s14
 80021d6:	eef0 1a67 	vmov.f32	s3, s15
 80021da:	375c      	adds	r7, #92	@ 0x5c
 80021dc:	46bd      	mov	sp, r7
 80021de:	ecbd 8b02 	vpop	{d8}
 80021e2:	bd90      	pop	{r4, r7, pc}

080021e4 <ComplementaryFilter_Update>:
}

void ComplementaryFilter_Update(Quaternion* q,
                                 float gx, float gy, float gz,
                                 float ax, float ay, float az,
                                 float dt) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	@ 0x30
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	61f8      	str	r0, [r7, #28]
 80021ec:	ed87 0a06 	vstr	s0, [r7, #24]
 80021f0:	edc7 0a05 	vstr	s1, [r7, #20]
 80021f4:	ed87 1a04 	vstr	s2, [r7, #16]
 80021f8:	edc7 1a03 	vstr	s3, [r7, #12]
 80021fc:	ed87 2a02 	vstr	s4, [r7, #8]
 8002200:	edc7 2a01 	vstr	s5, [r7, #4]
 8002204:	ed87 3a00 	vstr	s6, [r7]
	gx *= 0.0174533f; // Remove if gyro is already in rad/s
 8002208:	edd7 7a06 	vldr	s15, [r7, #24]
 800220c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002338 <ComplementaryFilter_Update+0x154>
 8002210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002214:	edc7 7a06 	vstr	s15, [r7, #24]
	    gy *= 0.0174533f;
 8002218:	edd7 7a05 	vldr	s15, [r7, #20]
 800221c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002338 <ComplementaryFilter_Update+0x154>
 8002220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002224:	edc7 7a05 	vstr	s15, [r7, #20]
	    gz *= 0.0174533f;
 8002228:	edd7 7a04 	vldr	s15, [r7, #16]
 800222c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8002338 <ComplementaryFilter_Update+0x154>
 8002230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002234:	edc7 7a04 	vstr	s15, [r7, #16]

    Integrate_Gyro(q, gx, gy, gz, dt);
 8002238:	edd7 1a00 	vldr	s3, [r7]
 800223c:	ed97 1a04 	vldr	s2, [r7, #16]
 8002240:	edd7 0a05 	vldr	s1, [r7, #20]
 8002244:	ed97 0a06 	vldr	s0, [r7, #24]
 8002248:	69f8      	ldr	r0, [r7, #28]
 800224a:	f7ff fe83 	bl	8001f54 <Integrate_Gyro>

    Normalize_Vector(&ax, &ay, &az);
 800224e:	1d3a      	adds	r2, r7, #4
 8002250:	f107 0108 	add.w	r1, r7, #8
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fd07 	bl	8001c6c <Normalize_Vector>
    Quaternion acc_q = Accel_To_Quaternion(ax, ay, az);
 800225e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002262:	ed97 7a02 	vldr	s14, [r7, #8]
 8002266:	edd7 6a01 	vldr	s13, [r7, #4]
 800226a:	eeb0 1a66 	vmov.f32	s2, s13
 800226e:	eef0 0a47 	vmov.f32	s1, s14
 8002272:	eeb0 0a67 	vmov.f32	s0, s15
 8002276:	f7ff ff14 	bl	80020a2 <Accel_To_Quaternion>
 800227a:	eeb0 6a40 	vmov.f32	s12, s0
 800227e:	eef0 6a60 	vmov.f32	s13, s1
 8002282:	eeb0 7a41 	vmov.f32	s14, s2
 8002286:	eef0 7a61 	vmov.f32	s15, s3
 800228a:	ed87 6a08 	vstr	s12, [r7, #32]
 800228e:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8002292:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8002296:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    q->w = ALPHA * q->w + (1.0f - ALPHA) * acc_q.w;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800233c <ComplementaryFilter_Update+0x158>
 80022a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80022ac:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002340 <ComplementaryFilter_Update+0x15c>
 80022b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	edc3 7a00 	vstr	s15, [r3]
    q->x = ALPHA * q->x + (1.0f - ALPHA) * acc_q.x;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80022c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800233c <ComplementaryFilter_Update+0x158>
 80022c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80022d0:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002340 <ComplementaryFilter_Update+0x15c>
 80022d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	edc3 7a01 	vstr	s15, [r3, #4]
    q->y = ALPHA * q->y + (1.0f - ALPHA) * acc_q.y;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80022e8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800233c <ComplementaryFilter_Update+0x158>
 80022ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022f0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80022f4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002340 <ComplementaryFilter_Update+0x15c>
 80022f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	edc3 7a02 	vstr	s15, [r3, #8]
    q->z = ALPHA * q->z + (1.0f - ALPHA) * acc_q.z;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	edd3 7a03 	vldr	s15, [r3, #12]
 800230c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800233c <ComplementaryFilter_Update+0x158>
 8002310:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002314:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002318:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002340 <ComplementaryFilter_Update+0x15c>
 800231c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	edc3 7a03 	vstr	s15, [r3, #12]

    Normalize_Quaternion(q);
 800232a:	69f8      	ldr	r0, [r7, #28]
 800232c:	f7ff fcf4 	bl	8001d18 <Normalize_Quaternion>
}
 8002330:	bf00      	nop
 8002332:	3730      	adds	r7, #48	@ 0x30
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	3c8efa39 	.word	0x3c8efa39
 800233c:	3f666666 	.word	0x3f666666
 8002340:	3dccccd0 	.word	0x3dccccd0

08002344 <Quaternion_ToEuler>:

void Quaternion_ToEuler(const Quaternion* q, float* roll, float* pitch) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
    *roll = atan2f(2.0f * (q->w*q->x + q->y*q->z), 1.0f - 2.0f * (q->x*q->x + q->y*q->y));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	ed93 7a00 	vldr	s14, [r3]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	edd3 7a01 	vldr	s15, [r3, #4]
 800235c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	edd3 6a02 	vldr	s13, [r3, #8]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	edd3 7a03 	vldr	s15, [r3, #12]
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	ed93 7a01 	vldr	s14, [r3, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	edd3 7a01 	vldr	s15, [r3, #4]
 8002384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	edd3 6a02 	vldr	s13, [r3, #8]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	edd3 7a02 	vldr	s15, [r3, #8]
 8002394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a8:	eef0 0a67 	vmov.f32	s1, s15
 80023ac:	eeb0 0a46 	vmov.f32	s0, s12
 80023b0:	f011 ff54 	bl	801425c <atan2f>
 80023b4:	eef0 7a40 	vmov.f32	s15, s0
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	edc3 7a00 	vstr	s15, [r3]
    *pitch = asinf(2.0f * (q->w*q->y - q->z*q->x));
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	ed93 7a00 	vldr	s14, [r3]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80023da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023e6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ea:	f011 ff0b 	bl	8014204 <asinf>
 80023ee:	eef0 7a40 	vmov.f32	s15, s0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	edc3 7a00 	vstr	s15, [r3]
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HMC5883L_WriteReg>:
static volatile uint8_t i2c_error = 0;
static uint32_t last_reset_time = 0;
static uint8_t reset_attempts = 0;
static const uint8_t max_reset_attempts = 5;

static void HMC5883L_WriteReg(uint8_t reg, uint8_t value) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af02      	add	r7, sp, #8
 8002406:	4603      	mov	r3, r0
 8002408:	460a      	mov	r2, r1
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	4613      	mov	r3, r2
 800240e:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, value};
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	733b      	strb	r3, [r7, #12]
 8002414:	79bb      	ldrb	r3, [r7, #6]
 8002416:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, tx_data, 2, 100);
 8002418:	f107 020c 	add.w	r2, r7, #12
 800241c:	2364      	movs	r3, #100	@ 0x64
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2302      	movs	r3, #2
 8002422:	213c      	movs	r1, #60	@ 0x3c
 8002424:	4803      	ldr	r0, [pc, #12]	@ (8002434 <HMC5883L_WriteReg+0x34>)
 8002426:	f007 fa2f 	bl	8009888 <HAL_I2C_Master_Transmit>
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	240004c0 	.word	0x240004c0

08002438 <HMC5883L_ReadReg>:

uint8_t HMC5883L_ReadReg(uint8_t reg) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af02      	add	r7, sp, #8
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_I2C_Master_Transmit(&hi2c1, HMC5883L_ADDR, &reg, 1, 100);
 8002442:	1dfa      	adds	r2, r7, #7
 8002444:	2364      	movs	r3, #100	@ 0x64
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2301      	movs	r3, #1
 800244a:	213c      	movs	r1, #60	@ 0x3c
 800244c:	4808      	ldr	r0, [pc, #32]	@ (8002470 <HMC5883L_ReadReg+0x38>)
 800244e:	f007 fa1b 	bl	8009888 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, HMC5883L_ADDR, &rx_data, 1, 100);
 8002452:	f107 020f 	add.w	r2, r7, #15
 8002456:	2364      	movs	r3, #100	@ 0x64
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	213c      	movs	r1, #60	@ 0x3c
 800245e:	4804      	ldr	r0, [pc, #16]	@ (8002470 <HMC5883L_ReadReg+0x38>)
 8002460:	f007 fb2a 	bl	8009ab8 <HAL_I2C_Master_Receive>
    return rx_data;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	240004c0 	.word	0x240004c0

08002474 <HMC5883L_Init>:

void HMC5883L_Init(void) {
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x80); // Soft reset
 8002478:	2180      	movs	r1, #128	@ 0x80
 800247a:	2000      	movs	r0, #0
 800247c:	f7ff ffc0 	bl	8002400 <HMC5883L_WriteReg>
    HAL_Delay(100);
 8002480:	2064      	movs	r0, #100	@ 0x64
 8002482:	f004 fac3 	bl	8006a0c <HAL_Delay>
    HMC5883L_WriteReg(HMC5883L_CONFIG_A, 0x78); // 8-avg, 75 Hz, normal mode
 8002486:	2178      	movs	r1, #120	@ 0x78
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff ffb9 	bl	8002400 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_CONFIG_B, 0x20); // ±1.3 Gauss
 800248e:	2120      	movs	r1, #32
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff ffb5 	bl	8002400 <HMC5883L_WriteReg>
    HMC5883L_WriteReg(HMC5883L_MODE, 0x00);     // Continuous mode
 8002496:	2100      	movs	r1, #0
 8002498:	2002      	movs	r0, #2
 800249a:	f7ff ffb1 	bl	8002400 <HMC5883L_WriteReg>
    HAL_Delay(10);
 800249e:	200a      	movs	r0, #10
 80024a0:	f004 fab4 	bl	8006a0c <HAL_Delay>
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	601a      	str	r2, [r3, #0]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 0201 	bic.w	r2, r3, #1
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	601a      	str	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_SPI_SetMode>:
  *         @arg @ref LL_SPI_MODE_MASTER
  *         @arg @ref LL_SPI_MODE_SLAVE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetMode(SPI_TypeDef *SPIx, uint32_t Mode)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_MASTER, Mode);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60da      	str	r2, [r3, #12]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_SPI_StartMasterTransfer>:
  * @rmtoll CR1          CSTART        LL_SPI_StartMasterTransfer
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_StartMasterTransfer(SPI_TypeDef *SPIx)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_CSTART);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <LL_SPI_SetClockPhase>:
  *         @arg @ref LL_SPI_PHASE_1EDGE
  *         @arg @ref LL_SPI_PHASE_2EDGE
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPhase(SPI_TypeDef *SPIx, uint32_t ClockPhase)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPHA, ClockPhase);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	60da      	str	r2, [r3, #12]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_SPI_SetClockPolarity>:
  *         @arg @ref LL_SPI_POLARITY_LOW
  *         @arg @ref LL_SPI_POLARITY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetClockPolarity(SPI_TypeDef *SPIx, uint32_t ClockPolarity)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_CPOL, ClockPolarity);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60da      	str	r2, [r3, #12]
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <LL_SPI_SetBaudRatePrescaler>:
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV128
  *         @arg @ref LL_SPI_BAUDRATEPRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetBaudRatePrescaler(SPI_TypeDef *SPIx, uint32_t Baudrate)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR, Baudrate);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	609a      	str	r2, [r3, #8]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_SPI_SetTransferBitOrder>:
  *         @arg @ref LL_SPI_LSB_FIRST
  *         @arg @ref LL_SPI_MSB_FIRST
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferBitOrder(SPI_TypeDef *SPIx, uint32_t BitOrder)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_LSBFRST, BitOrder);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	60da      	str	r2, [r3, #12]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_SPI_SetTransferDirection>:
  *         @arg @ref LL_SPI_HALF_DUPLEX_RX
  *         @arg @ref LL_SPI_HALF_DUPLEX_TX
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetTransferDirection(SPI_TypeDef *SPIx, uint32_t TransferDirection)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR,  TransferDirection & SPI_CR1_HDDIR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_COMM, TransferDirection & SPI_CFG2_COMM);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_SPI_SetDataWidth>:
  *         @arg @ref LL_SPI_DATAWIDTH_31BIT
  *         @arg @ref LL_SPI_DATAWIDTH_32BIT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetDataWidth(SPI_TypeDef *SPIx, uint32_t DataWidth)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_DSIZE, DataWidth);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f023 021f 	bic.w	r2, r3, #31
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	609a      	str	r2, [r3, #8]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_SPI_SetFIFOThreshold>:
  *         @arg @ref LL_SPI_FIFO_TH_15DATA
  *         @arg @ref LL_SPI_FIFO_TH_16DATA
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetFIFOThreshold(SPI_TypeDef *SPIx, uint32_t Threshold)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_SPI_SetNSSMode>:
  *         @arg @ref LL_SPI_NSS_HARD_INPUT
  *         @arg @ref LL_SPI_NSS_HARD_OUTPUT
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetNSSMode(SPI_TypeDef *SPIx, uint32_t NSS)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM | SPI_CFG2_SSOE, NSS);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 5210 	bic.w	r2, r3, #603979776	@ 0x24000000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60da      	str	r2, [r3, #12]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_SPI_IsActiveFlag_RXP>:
  * @rmtoll SR           RXP           LL_SPI_IsActiveFlag_RXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXP(const SPI_TypeDef *SPIx)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXP) == (SPI_SR_RXP)) ? 1UL : 0UL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <LL_SPI_IsActiveFlag_RXP+0x18>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <LL_SPI_IsActiveFlag_RXP+0x1a>
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_SPI_IsActiveFlag_TXP>:
  * @rmtoll SR           TXP           LL_SPI_IsActiveFlag_TXP
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0)
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXP(const SPI_TypeDef *SPIx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXP) == (SPI_SR_TXP)) ? 1UL : 0UL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d101      	bne.n	80026b4 <LL_SPI_IsActiveFlag_TXP+0x18>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_SPI_IsActiveFlag_TXP+0x1a>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_SPI_ReceiveData8>:
  * @rmtoll RXDR         .       LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval 0..0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx) /* Derogation MISRAC2012-Rule-8.13 */
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->RXDR));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3330      	adds	r3, #48	@ 0x30
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	b2db      	uxtb	r3, r3
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData 0..0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	460b      	mov	r3, r1
 80026e8:	70fb      	strb	r3, [r7, #3]
  *((__IO uint8_t *)&SPIx->TXDR) = TxData;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3320      	adds	r3, #32
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	701a      	strb	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8002708:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <LL_AHB4_GRP1_EnableClock+0x34>)
 800270a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800270e:	4909      	ldr	r1, [pc, #36]	@ (8002734 <LL_AHB4_GRP1_EnableClock+0x34>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <LL_AHB4_GRP1_EnableClock+0x34>)
 800271a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4013      	ands	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002724:	68fb      	ldr	r3, [r7, #12]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	58024400 	.word	0x58024400

08002738 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8002740:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <LL_APB1_GRP1_EnableClock+0x34>)
 8002742:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002746:	4909      	ldr	r1, [pc, #36]	@ (800276c <LL_APB1_GRP1_EnableClock+0x34>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <LL_APB1_GRP1_EnableClock+0x34>)
 8002752:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	58024400 	.word	0x58024400

08002770 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(const GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	4013      	ands	r3, r2
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d101      	bne.n	800278c <LL_GPIO_IsInputPinSet+0x1c>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <LL_GPIO_IsInputPinSet+0x1e>
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	041a      	lsls	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	619a      	str	r2, [r3, #24]
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <ICM42688P_GPIO_SPI_Initialization>:
    if (value < -2048) return -2048;
    return (int16_t)value;
}

void ICM42688P_GPIO_SPI_Initialization(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b090      	sub	sp, #64	@ 0x40
 80027d8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80027da:	f107 0318 	add.w	r3, r7, #24
 80027de:	2228      	movs	r2, #40	@ 0x28
 80027e0:	2100      	movs	r1, #0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f00f f9e4 	bl	8011bb0 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	463b      	mov	r3, r7
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]
 80027f6:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable for STM32H7 */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80027f8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80027fc:	f7ff ff9c 	bl	8002738 <LL_APB1_GRP1_EnableClock>

	/* GPIO clock enable for STM32H7 */
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8002800:	2001      	movs	r0, #1
 8002802:	f7ff ff7d 	bl	8002700 <LL_AHB4_GRP1_EnableClock>
	LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8002806:	2004      	movs	r0, #4
 8002808:	f7ff ff7a 	bl	8002700 <LL_AHB4_GRP1_EnableClock>
	/**SPI3 GPIO Configuration for STM32H7
	 * PC10  ------> SPI3_SCK
	 * PC11  ------> SPI3_MISO
	 * PC12  ------> SPI3_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800280c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002810:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002812:	2302      	movs	r3, #2
 8002814:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6; // SPI3 alternate function for STM32H7
 8002822:	2306      	movs	r3, #6
 8002824:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002826:	463b      	mov	r3, r7
 8002828:	4619      	mov	r1, r3
 800282a:	4830      	ldr	r0, [pc, #192]	@ (80028ec <ICM42688P_GPIO_SPI_Initialization+0x118>)
 800282c:	f00d f928 	bl	800fa80 <LL_GPIO_Init>
	 * PA15  ------> ICM42688P_SPI_CS_PIN (output)
	 * PC8   ------> ICM42688P_INT1_PIN (input)
	 */

	/* Chip Select Pin */
	LL_GPIO_SetOutputPin(ICM42688P_SPI_CS_PORT, ICM42688P_SPI_CS_PIN); // Start with CS high
 8002830:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002834:	482e      	ldr	r0, [pc, #184]	@ (80028f0 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 8002836:	f7ff ffb0 	bl	800279a <LL_GPIO_SetOutputPin>

	GPIO_InitStruct.Pin = ICM42688P_SPI_CS_PIN;
 800283a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800283e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002840:	2301      	movs	r3, #1
 8002842:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800284c:	2300      	movs	r3, #0
 800284e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_SPI_CS_PORT, &GPIO_InitStruct);
 8002850:	463b      	mov	r3, r7
 8002852:	4619      	mov	r1, r3
 8002854:	4826      	ldr	r0, [pc, #152]	@ (80028f0 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 8002856:	f00d f913 	bl	800fa80 <LL_GPIO_Init>

	/* Interrupt Pin */
	GPIO_InitStruct.Pin = ICM42688P_INT1_PIN;
 800285a:	2310      	movs	r3, #16
 800285c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800285e:	2300      	movs	r3, #0
 8002860:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002862:	2301      	movs	r3, #1
 8002864:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM42688P_INT1_PORT, &GPIO_InitStruct);
 8002866:	463b      	mov	r3, r7
 8002868:	4619      	mov	r1, r3
 800286a:	4822      	ldr	r0, [pc, #136]	@ (80028f4 <ICM42688P_GPIO_SPI_Initialization+0x120>)
 800286c:	f00d f908 	bl	800fa80 <LL_GPIO_Init>

	/* STM32H7 SPI3 configuration - Fixed for proper LL driver usage */
	// Disable SPI first
	LL_SPI_Disable(ICM42688P_SPI_CHANNEL);
 8002870:	4821      	ldr	r0, [pc, #132]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002872:	f7ff fe29 	bl	80024c8 <LL_SPI_Disable>

	// Configure SPI3 - STM32H7 style
	LL_SPI_SetBaudRatePrescaler(ICM42688P_SPI_CHANNEL, LL_SPI_BAUDRATEPRESCALER_DIV8);
 8002876:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 800287a:	481f      	ldr	r0, [pc, #124]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 800287c:	f7ff fe7d 	bl	800257a <LL_SPI_SetBaudRatePrescaler>
	LL_SPI_SetTransferDirection(ICM42688P_SPI_CHANNEL, LL_SPI_FULL_DUPLEX);
 8002880:	2100      	movs	r1, #0
 8002882:	481d      	ldr	r0, [pc, #116]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002884:	f7ff fe9f 	bl	80025c6 <LL_SPI_SetTransferDirection>
	LL_SPI_SetClockPhase(ICM42688P_SPI_CHANNEL, LL_SPI_PHASE_2EDGE);
 8002888:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800288c:	481a      	ldr	r0, [pc, #104]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 800288e:	f7ff fe4e 	bl	800252e <LL_SPI_SetClockPhase>
	LL_SPI_SetClockPolarity(ICM42688P_SPI_CHANNEL, LL_SPI_POLARITY_HIGH);
 8002892:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002896:	4818      	ldr	r0, [pc, #96]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 8002898:	f7ff fe5c 	bl	8002554 <LL_SPI_SetClockPolarity>
	LL_SPI_SetTransferBitOrder(ICM42688P_SPI_CHANNEL, LL_SPI_MSB_FIRST);
 800289c:	2100      	movs	r1, #0
 800289e:	4816      	ldr	r0, [pc, #88]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80028a0:	f7ff fe7e 	bl	80025a0 <LL_SPI_SetTransferBitOrder>
	LL_SPI_SetDataWidth(ICM42688P_SPI_CHANNEL, LL_SPI_DATAWIDTH_8BIT);
 80028a4:	2107      	movs	r1, #7
 80028a6:	4814      	ldr	r0, [pc, #80]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80028a8:	f7ff feac 	bl	8002604 <LL_SPI_SetDataWidth>
	LL_SPI_SetNSSMode(ICM42688P_SPI_CHANNEL, LL_SPI_NSS_SOFT);
 80028ac:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80028b0:	4811      	ldr	r0, [pc, #68]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80028b2:	f7ff fecd 	bl	8002650 <LL_SPI_SetNSSMode>
	LL_SPI_SetMode(ICM42688P_SPI_CHANNEL, LL_SPI_MODE_MASTER);
 80028b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80028ba:	480f      	ldr	r0, [pc, #60]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80028bc:	f7ff fe14 	bl	80024e8 <LL_SPI_SetMode>

	// STM32H7 specific settings
	LL_SPI_SetFIFOThreshold(ICM42688P_SPI_CHANNEL, LL_SPI_FIFO_TH_01DATA);
 80028c0:	2100      	movs	r1, #0
 80028c2:	480d      	ldr	r0, [pc, #52]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80028c4:	f7ff feb1 	bl	800262a <LL_SPI_SetFIFOThreshold>

	// Enable SPI
	LL_SPI_Enable(ICM42688P_SPI_CHANNEL);
 80028c8:	480b      	ldr	r0, [pc, #44]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80028ca:	f7ff fded 	bl	80024a8 <LL_SPI_Enable>

	// Start SPI (STM32H7 requirement)
	LL_SPI_StartMasterTransfer(ICM42688P_SPI_CHANNEL);
 80028ce:	480a      	ldr	r0, [pc, #40]	@ (80028f8 <ICM42688P_GPIO_SPI_Initialization+0x124>)
 80028d0:	f7ff fe1d 	bl	800250e <LL_SPI_StartMasterTransfer>

	CHIP_DESELECT(ICM42688P);
 80028d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028d8:	4805      	ldr	r0, [pc, #20]	@ (80028f0 <ICM42688P_GPIO_SPI_Initialization+0x11c>)
 80028da:	f7ff ff5e 	bl	800279a <LL_GPIO_SetOutputPin>

	printf("SPI3 initialized for STM32H7\n");
 80028de:	4807      	ldr	r0, [pc, #28]	@ (80028fc <ICM42688P_GPIO_SPI_Initialization+0x128>)
 80028e0:	f00f f83e 	bl	8011960 <puts>
}
 80028e4:	bf00      	nop
 80028e6:	3740      	adds	r7, #64	@ 0x40
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	58020800 	.word	0x58020800
 80028f0:	58020000 	.word	0x58020000
 80028f4:	58021000 	.word	0x58021000
 80028f8:	40003c00 	.word	0x40003c00
 80028fc:	080156d8 	.word	0x080156d8

08002900 <ICM42688P_SelectBank>:

// ====== BANK SELECT ======
void ICM42688P_SelectBank(uint8_t bank)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
	printf("Selecting bank %d\n", bank);
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	4619      	mov	r1, r3
 800290e:	4807      	ldr	r0, [pc, #28]	@ (800292c <ICM42688P_SelectBank+0x2c>)
 8002910:	f00e ffb6 	bl	8011880 <iprintf>
	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	4619      	mov	r1, r3
 8002918:	2076      	movs	r0, #118	@ 0x76
 800291a:	f000 f87d 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(1); // Small delay after bank selection
 800291e:	2001      	movs	r0, #1
 8002920:	f004 f874 	bl	8006a0c <HAL_Delay>
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	080156f8 	.word	0x080156f8

08002930 <SPI3_SendByte>:

uint8_t SPI3_SendByte(uint8_t data)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXP(ICM42688P_SPI_CHANNEL)==RESET);
 800293a:	bf00      	nop
 800293c:	480c      	ldr	r0, [pc, #48]	@ (8002970 <SPI3_SendByte+0x40>)
 800293e:	f7ff fead 	bl	800269c <LL_SPI_IsActiveFlag_TXP>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f9      	beq.n	800293c <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(ICM42688P_SPI_CHANNEL, data);
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	4619      	mov	r1, r3
 800294c:	4808      	ldr	r0, [pc, #32]	@ (8002970 <SPI3_SendByte+0x40>)
 800294e:	f7ff fec6 	bl	80026de <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXP(ICM42688P_SPI_CHANNEL)==RESET);
 8002952:	bf00      	nop
 8002954:	4806      	ldr	r0, [pc, #24]	@ (8002970 <SPI3_SendByte+0x40>)
 8002956:	f7ff fe8e 	bl	8002676 <LL_SPI_IsActiveFlag_RXP>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f9      	beq.n	8002954 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM42688P_SPI_CHANNEL);
 8002960:	4803      	ldr	r0, [pc, #12]	@ (8002970 <SPI3_SendByte+0x40>)
 8002962:	f7ff feae 	bl	80026c2 <LL_SPI_ReceiveData8>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40003c00 	.word	0x40003c00

08002974 <ICM42688P_ReadByte>:
//	ICM42688P_WriteByte(ICM42688P_REG_BANK_SEL, bank);
//	HAL_Delay(1); // Small delay after bank selection
//}

uint8_t ICM42688P_ReadByte(uint8_t reg_addr)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM42688P);
 800297e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002982:	480c      	ldr	r0, [pc, #48]	@ (80029b4 <ICM42688P_ReadByte+0x40>)
 8002984:	f7ff ff17 	bl	80027b6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800298e:	b2db      	uxtb	r3, r3
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ffcd 	bl	8002930 <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY to read data
 8002996:	2000      	movs	r0, #0
 8002998:	f7ff ffca 	bl	8002930 <SPI3_SendByte>
 800299c:	4603      	mov	r3, r0
 800299e:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM42688P);
 80029a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029a4:	4803      	ldr	r0, [pc, #12]	@ (80029b4 <ICM42688P_ReadByte+0x40>)
 80029a6:	f7ff fef8 	bl	800279a <LL_GPIO_SetOutputPin>

//	printf("0x%02x\n", val);
	return val;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	58020000 	.word	0x58020000

080029b8 <ICM42688P_ReadBytes>:

void ICM42688P_ReadBytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	603a      	str	r2, [r7, #0]
 80029c2:	71fb      	strb	r3, [r7, #7]
 80029c4:	460b      	mov	r3, r1
 80029c6:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM42688P);
 80029cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029d0:	4810      	ldr	r0, [pc, #64]	@ (8002a14 <ICM42688P_ReadBytes+0x5c>)
 80029d2:	f7ff fef0 	bl	80027b6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ffa6 	bl	8002930 <SPI3_SendByte>
	while(i < len)
 80029e4:	e009      	b.n	80029fa <ICM42688P_ReadBytes+0x42>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY to read data
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	60fa      	str	r2, [r7, #12]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	18d4      	adds	r4, r2, r3
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7ff ff9d 	bl	8002930 <SPI3_SendByte>
 80029f6:	4603      	mov	r3, r0
 80029f8:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80029fa:	79bb      	ldrb	r3, [r7, #6]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d3f1      	bcc.n	80029e6 <ICM42688P_ReadBytes+0x2e>
	}
	CHIP_DESELECT(ICM42688P);
 8002a02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a06:	4803      	ldr	r0, [pc, #12]	@ (8002a14 <ICM42688P_ReadBytes+0x5c>)
 8002a08:	f7ff fec7 	bl	800279a <LL_GPIO_SetOutputPin>
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd90      	pop	{r4, r7, pc}
 8002a14:	58020000 	.word	0x58020000

08002a18 <ICM42688P_WriteByte>:

void ICM42688P_WriteByte(uint8_t reg_addr, uint8_t val)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460a      	mov	r2, r1
 8002a22:	71fb      	strb	r3, [r7, #7]
 8002a24:	4613      	mov	r3, r2
 8002a26:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM42688P);
 8002a28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a2c:	480b      	ldr	r0, [pc, #44]	@ (8002a5c <ICM42688P_WriteByte+0x44>)
 8002a2e:	f7ff fec2 	bl	80027b6 <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff78 	bl	8002930 <SPI3_SendByte>
	SPI3_SendByte(val); //Send Data to write
 8002a40:	79bb      	ldrb	r3, [r7, #6]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff74 	bl	8002930 <SPI3_SendByte>
	CHIP_DESELECT(ICM42688P);
 8002a48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a4c:	4803      	ldr	r0, [pc, #12]	@ (8002a5c <ICM42688P_WriteByte+0x44>)
 8002a4e:	f7ff fea4 	bl	800279a <LL_GPIO_SetOutputPin>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	58020000 	.word	0x58020000

08002a60 <ICM42688P_Initialization>:
	}
	CHIP_DESELECT(ICM42688P);
}

int ICM42688P_Initialization(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
	uint8_t who_am_i = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8002a6a:	f107 0308 	add.w	r3, r7, #8
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002a74:	463b      	mov	r3, r7
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	809a      	strh	r2, [r3, #4]

	ICM42688P_GPIO_SPI_Initialization();
 8002a7c:	f7ff feaa 	bl	80027d4 <ICM42688P_GPIO_SPI_Initialization>

	printf("Checking ICM42688P...\n");
 8002a80:	483f      	ldr	r0, [pc, #252]	@ (8002b80 <ICM42688P_Initialization+0x120>)
 8002a82:	f00e ff6d 	bl	8011960 <puts>

	// check WHO_AM_I (0x75)
	who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I);
 8002a86:	2075      	movs	r0, #117	@ 0x75
 8002a88:	f7ff ff74 	bl	8002974 <ICM42688P_ReadByte>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x47
	if(who_am_i == 0x47)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b47      	cmp	r3, #71	@ 0x47
 8002a94:	d105      	bne.n	8002aa2 <ICM42688P_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	483a      	ldr	r0, [pc, #232]	@ (8002b84 <ICM42688P_Initialization+0x124>)
 8002a9c:	f00e fef0 	bl	8011880 <iprintf>
 8002aa0:	e012      	b.n	8002ac8 <ICM42688P_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x47)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b47      	cmp	r3, #71	@ 0x47
 8002aa6:	d00f      	beq.n	8002ac8 <ICM42688P_Initialization+0x68>
	{
		who_am_i = ICM42688P_ReadByte(ICM42688P_WHO_AM_I); // check again WHO_AM_I (0x75)
 8002aa8:	2075      	movs	r0, #117	@ 0x75
 8002aaa:	f7ff ff63 	bl	8002974 <ICM42688P_ReadByte>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x47){
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b47      	cmp	r3, #71	@ 0x47
 8002ab6:	d007      	beq.n	8002ac8 <ICM42688P_Initialization+0x68>
			printf( "ICM42688P Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x47);
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	2247      	movs	r2, #71	@ 0x47
 8002abc:	4619      	mov	r1, r3
 8002abe:	4832      	ldr	r0, [pc, #200]	@ (8002b88 <ICM42688P_Initialization+0x128>)
 8002ac0:	f00e fede 	bl	8011880 <iprintf>
			return 1; //ERROR
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e056      	b.n	8002b76 <ICM42688P_Initialization+0x116>
		}
	}

	// Reset ICM42688P
	// DEVICE_CONFIG 0x11
	ICM42688P_WriteByte(ICM42688P_DEVICE_CONFIG, 0x01); // Software reset
 8002ac8:	2101      	movs	r1, #1
 8002aca:	2011      	movs	r0, #17
 8002acc:	f7ff ffa4 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002ad0:	2032      	movs	r0, #50	@ 0x32
 8002ad2:	f003 ff9b 	bl	8006a0c <HAL_Delay>

	// Wait for reset to complete and switch to user bank 0
	ICM42688P_SelectBank(ICM42688P_BANK_SEL_0); // Select user bank 0
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7ff ff12 	bl	8002900 <ICM42688P_SelectBank>
	HAL_Delay(10);
 8002adc:	200a      	movs	r0, #10
 8002ade:	f003 ff95 	bl	8006a0c <HAL_Delay>

	// PWR_MGMT0 0x4E - Main power management
	// Enable Gyro and Accel in Low Noise mode, keep temperature sensor enabled
	ICM42688P_WriteByte(ICM42688P_PWR_MGMT0, ICM42688P_PWR_MGMT0_GYRO_MODE_LN | ICM42688P_PWR_MGMT0_ACCEL_MODE_LN);
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	204e      	movs	r0, #78	@ 0x4e
 8002ae6:	f7ff ff97 	bl	8002a18 <ICM42688P_WriteByte>
	// 온도센서 끄면 자이로 값 이상하게 출력됨 (same as original comment)
	HAL_Delay(50);
 8002aea:	2032      	movs	r0, #50	@ 0x32
 8002aec:	f003 ff8e 	bl	8006a0c <HAL_Delay>

	// GYRO_CONFIG0 0x4F - Gyro configuration
	// Set Gyro to ±2000dps and 1kHz ODR (equivalent to original 2000dps setting)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG0, (ICM42688P_GYRO_FS_SEL_2000DPS << 5) | ICM42688P_ODR_4KHZ);
 8002af0:	2104      	movs	r1, #4
 8002af2:	204f      	movs	r0, #79	@ 0x4f
 8002af4:	f7ff ff90 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002af8:	2032      	movs	r0, #50	@ 0x32
 8002afa:	f003 ff87 	bl	8006a0c <HAL_Delay>

	// ACCEL_CONFIG0 0x50 - Accelerometer configuration
	// Set Accel to ±16g and 1kHz ODR (equivalent to original 16g setting)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG0, (ICM42688P_ACCEL_FS_SEL_16G << 5) | ICM42688P_ODR_4KHZ);
 8002afe:	2104      	movs	r1, #4
 8002b00:	2050      	movs	r0, #80	@ 0x50
 8002b02:	f7ff ff89 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002b06:	2032      	movs	r0, #50	@ 0x32
 8002b08:	f003 ff80 	bl	8006a0c <HAL_Delay>

	// GYRO_CONFIG1 0x51 - Gyro filter configuration
	// Enable gyro DLPF with low-pass filter (equivalent to original 20Hz filter)
	ICM42688P_WriteByte(ICM42688P_GYRO_CONFIG1, 0x16); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8002b0c:	2116      	movs	r1, #22
 8002b0e:	2051      	movs	r0, #81	@ 0x51
 8002b10:	f7ff ff82 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002b14:	2032      	movs	r0, #50	@ 0x32
 8002b16:	f003 ff79 	bl	8006a0c <HAL_Delay>

	// ACCEL_CONFIG1 0x53 - Accel filter configuration
	// Enable accel DLPF with low-pass filter (equivalent to original 44.8Hz filter)
	ICM42688P_WriteByte(ICM42688P_ACCEL_CONFIG1, 0x15); // DLPF enabled, ~53Hz bandwidth at 1kHz ODR
 8002b1a:	2115      	movs	r1, #21
 8002b1c:	2053      	movs	r0, #83	@ 0x53
 8002b1e:	f7ff ff7b 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002b22:	2032      	movs	r0, #50	@ 0x32
 8002b24:	f003 ff72 	bl	8006a0c <HAL_Delay>

	// TMST_CONFIG 0x54 - Timestamp configuration (optional)
	ICM42688P_WriteByte(ICM42688P_TMST_CONFIG, 0x23); // Enable timestamp, 1kHz resolution
 8002b28:	2123      	movs	r1, #35	@ 0x23
 8002b2a:	2054      	movs	r0, #84	@ 0x54
 8002b2c:	f7ff ff74 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002b30:	2032      	movs	r0, #50	@ 0x32
 8002b32:	f003 ff6b 	bl	8006a0c <HAL_Delay>

	// FIFO_CONFIG 0x16 - FIFO configuration (disable for this setup, equivalent to original)
	ICM42688P_WriteByte(ICM42688P_FIFO_CONFIG, 0x00); // FIFO bypass mode
 8002b36:	2100      	movs	r1, #0
 8002b38:	2016      	movs	r0, #22
 8002b3a:	f7ff ff6d 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002b3e:	2032      	movs	r0, #50	@ 0x32
 8002b40:	f003 ff64 	bl	8006a0c <HAL_Delay>

	// INT_CONFIG 0x14 - Interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG, 0x12); // INT1 push-pull, active high, pulse mode
 8002b44:	2112      	movs	r1, #18
 8002b46:	2014      	movs	r0, #20
 8002b48:	f7ff ff66 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002b4c:	2032      	movs	r0, #50	@ 0x32
 8002b4e:	f003 ff5d 	bl	8006a0c <HAL_Delay>

	// INT_CONFIG1 0x64 - Additional interrupt configuration
	ICM42688P_WriteByte(ICM42688P_INT_CONFIG1, 0x00); // Default settings
 8002b52:	2100      	movs	r1, #0
 8002b54:	2064      	movs	r0, #100	@ 0x64
 8002b56:	f7ff ff5f 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002b5a:	2032      	movs	r0, #50	@ 0x32
 8002b5c:	f003 ff56 	bl	8006a0c <HAL_Delay>

	// INT_SOURCE0 0x65 - Enable data ready interrupt (equivalent to original INT_ENABLE)
	ICM42688P_WriteByte(ICM42688P_INT_SOURCE0, 0x18); // Enable UI data ready interrupt for INT1
 8002b60:	2118      	movs	r1, #24
 8002b62:	2065      	movs	r0, #101	@ 0x65
 8002b64:	f7ff ff58 	bl	8002a18 <ICM42688P_WriteByte>
	HAL_Delay(50);
 8002b68:	2032      	movs	r0, #50	@ 0x32
 8002b6a:	f003 ff4f 	bl	8006a0c <HAL_Delay>

	printf("ICM42688P initialized successfully!\n");
 8002b6e:	4807      	ldr	r0, [pc, #28]	@ (8002b8c <ICM42688P_Initialization+0x12c>)
 8002b70:	f00e fef6 	bl	8011960 <puts>

	return 0; //OK
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	0801570c 	.word	0x0801570c
 8002b84:	08015724 	.word	0x08015724
 8002b88:	08015748 	.word	0x08015748
 8002b8c:	08015774 	.word	0x08015774

08002b90 <ICM42688P_Get6AxisRawData>:

void ICM42688P_Get6AxisRawData(short* accel, short* gyro)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM42688P_ReadBytes(ICM42688P_ACCEL_DATA_X1, 14, data);
 8002b9a:	f107 0308 	add.w	r3, r7, #8
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	210e      	movs	r1, #14
 8002ba2:	201f      	movs	r0, #31
 8002ba4:	f7ff ff08 	bl	80029b8 <ICM42688P_ReadBytes>

	accel[0] = (data[0] << 8) | data[1];
 8002ba8:	7a3b      	ldrb	r3, [r7, #8]
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	b21a      	sxth	r2, r3
 8002bb0:	7a7b      	ldrb	r3, [r7, #9]
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	b21a      	sxth	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 8002bbc:	7abb      	ldrb	r3, [r7, #10]
 8002bbe:	b21b      	sxth	r3, r3
 8002bc0:	021b      	lsls	r3, r3, #8
 8002bc2:	b219      	sxth	r1, r3
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
 8002bc6:	b21a      	sxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3302      	adds	r3, #2
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	b212      	sxth	r2, r2
 8002bd0:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 8002bd2:	7b3b      	ldrb	r3, [r7, #12]
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	b219      	sxth	r1, r3
 8002bda:	7b7b      	ldrb	r3, [r7, #13]
 8002bdc:	b21a      	sxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	430a      	orrs	r2, r1
 8002be4:	b212      	sxth	r2, r2
 8002be6:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[6] << 8) | data[7]);
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	b21b      	sxth	r3, r3
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	b21a      	sxth	r2, r3
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	b21b      	sxth	r3, r3
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[8] << 8) | data[9]);
 8002bfc:	7c3b      	ldrb	r3, [r7, #16]
 8002bfe:	b21b      	sxth	r3, r3
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	b219      	sxth	r1, r3
 8002c04:	7c7b      	ldrb	r3, [r7, #17]
 8002c06:	b21a      	sxth	r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	b212      	sxth	r2, r2
 8002c10:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[10] << 8) | data[11]);
 8002c12:	7cbb      	ldrb	r3, [r7, #18]
 8002c14:	b21b      	sxth	r3, r3
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	b219      	sxth	r1, r3
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	b21a      	sxth	r2, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3304      	adds	r3, #4
 8002c22:	430a      	orrs	r2, r1
 8002c24:	b212      	sxth	r2, r2
 8002c26:	801a      	strh	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <ICM42688P_DataReady>:
	gyro[1] = ((data[2] << 8) | data[3]);
	gyro[2] = ((data[4] << 8) | data[5]);
}

int ICM42688P_DataReady(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM42688P_INT1_PORT, ICM42688P_INT1_PIN);
 8002c34:	2110      	movs	r1, #16
 8002c36:	4803      	ldr	r0, [pc, #12]	@ (8002c44 <ICM42688P_DataReady+0x14>)
 8002c38:	f7ff fd9a 	bl	8002770 <LL_GPIO_IsInputPinSet>
 8002c3c:	4603      	mov	r3, r0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	58021000 	.word	0x58021000

08002c48 <WS2812_SetColor>:
    if (brightness < 0.0) brightness = 0.0;
    if (brightness > 1.0) brightness = 1.0;
    global_brightness = brightness;
}

void WS2812_SetColor(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8002c48:	b480      	push	{r7}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	ed87 0a01 	vstr	s0, [r7, #4]
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	72fb      	strb	r3, [r7, #11]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	72bb      	strb	r3, [r7, #10]
 8002c62:	4613      	mov	r3, r2
 8002c64:	727b      	strb	r3, [r7, #9]
    if (led_index < LED_COUNT) {
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d165      	bne.n	8002d38 <WS2812_SetColor+0xf0>
        // Clamp brightness between 0.0 and 1.0
        if (brightness < 0.0) brightness = 0.0;
 8002c6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	d502      	bpl.n	8002c80 <WS2812_SetColor+0x38>
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	607b      	str	r3, [r7, #4]
        if (brightness > 1.0) brightness = 1.0;
 8002c80:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c90:	dd02      	ble.n	8002c98 <WS2812_SetColor+0x50>
 8002c92:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002c96:	607b      	str	r3, [r7, #4]
        // Apply brightness scaling (combine with global brightness)
        float total_brightness = brightness * global_brightness;
 8002c98:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <WS2812_SetColor+0xfc>)
 8002c9a:	edd3 7a00 	vldr	s15, [r3]
 8002c9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca6:	edc7 7a05 	vstr	s15, [r7, #20]
        led_data[led_index][0] = (uint8_t)(green * total_brightness); // GRB order
 8002caa:	7abb      	ldrb	r3, [r7, #10]
 8002cac:	ee07 3a90 	vmov	s15, r3
 8002cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc0:	edc7 7a00 	vstr	s15, [r7]
 8002cc4:	783b      	ldrb	r3, [r7, #0]
 8002cc6:	b2d8      	uxtb	r0, r3
 8002cc8:	491f      	ldr	r1, [pc, #124]	@ (8002d48 <WS2812_SetColor+0x100>)
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	701a      	strb	r2, [r3, #0]
        led_data[led_index][1] = (uint8_t)(red * total_brightness);
 8002cd8:	7afb      	ldrb	r3, [r7, #11]
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cee:	edc7 7a00 	vstr	s15, [r7]
 8002cf2:	783b      	ldrb	r3, [r7, #0]
 8002cf4:	b2d8      	uxtb	r0, r3
 8002cf6:	4914      	ldr	r1, [pc, #80]	@ (8002d48 <WS2812_SetColor+0x100>)
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	440b      	add	r3, r1
 8002d02:	3301      	adds	r3, #1
 8002d04:	4602      	mov	r2, r0
 8002d06:	701a      	strb	r2, [r3, #0]
        led_data[led_index][2] = (uint8_t)(blue * total_brightness);
 8002d08:	7a7b      	ldrb	r3, [r7, #9]
 8002d0a:	ee07 3a90 	vmov	s15, r3
 8002d0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d12:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d1e:	edc7 7a00 	vstr	s15, [r7]
 8002d22:	783b      	ldrb	r3, [r7, #0]
 8002d24:	b2d8      	uxtb	r0, r3
 8002d26:	4908      	ldr	r1, [pc, #32]	@ (8002d48 <WS2812_SetColor+0x100>)
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	3302      	adds	r3, #2
 8002d34:	4602      	mov	r2, r0
 8002d36:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 SetColor: LED %lu, R=%d, G=%d, B=%d, Brightness=%.2f\n",
//               led_index, led_data[led_index][1], led_data[led_index][0], led_data[led_index][2], brightness);
    }
}
 8002d38:	bf00      	nop
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	24000000 	.word	0x24000000
 8002d48:	24000498 	.word	0x24000498

08002d4c <WS2812_Send>:

void WS2812_Send(void) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
    uint32_t buffer_index = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]

    // Clear buffer to ensure no stale data
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e007      	b.n	8002d6c <WS2812_Send+0x20>
        pwm_buffer[i] = DUTY_RESET;
 8002d5c:	4a34      	ldr	r2, [pc, #208]	@ (8002e30 <WS2812_Send+0xe4>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2100      	movs	r1, #0
 8002d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint32_t i = 0; i < BUFFER_SIZE; i++) {
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b49      	cmp	r3, #73	@ 0x49
 8002d70:	d9f4      	bls.n	8002d5c <WS2812_Send+0x10>
    }

    // Convert LED data to PWM duty cycles
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e039      	b.n	8002dec <WS2812_Send+0xa0>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	e030      	b.n	8002de0 <WS2812_Send+0x94>
            for (int8_t bit = 7; bit >= 0; bit--) {
 8002d7e:	2307      	movs	r3, #7
 8002d80:	71fb      	strb	r3, [r7, #7]
 8002d82:	e026      	b.n	8002dd2 <WS2812_Send+0x86>
                if (led_data[led][color] & (1 << bit)) {
 8002d84:	492b      	ldr	r1, [pc, #172]	@ (8002e34 <WS2812_Send+0xe8>)
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	18ca      	adds	r2, r1, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4413      	add	r3, r2
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9c:	fa42 f303 	asr.w	r3, r2, r3
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <WS2812_Send+0x6c>
                    pwm_buffer[buffer_index++] = DUTY_1; // Logical 1
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	617a      	str	r2, [r7, #20]
 8002dae:	4a20      	ldr	r2, [pc, #128]	@ (8002e30 <WS2812_Send+0xe4>)
 8002db0:	21a0      	movs	r1, #160	@ 0xa0
 8002db2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002db6:	e006      	b.n	8002dc6 <WS2812_Send+0x7a>
                } else {
                    pwm_buffer[buffer_index++] = DUTY_0; // Logical 0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	617a      	str	r2, [r7, #20]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002e30 <WS2812_Send+0xe4>)
 8002dc0:	2150      	movs	r1, #80	@ 0x50
 8002dc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            for (int8_t bit = 7; bit >= 0; bit--) {
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	71fb      	strb	r3, [r7, #7]
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	dad4      	bge.n	8002d84 <WS2812_Send+0x38>
        for (uint32_t color = 0; color < 3; color++) { // GRB
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d9cb      	bls.n	8002d7e <WS2812_Send+0x32>
    for (uint32_t led = 0; led < LED_COUNT; led++) {
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3301      	adds	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0c2      	beq.n	8002d78 <WS2812_Send+0x2c>
            }
        }
    }

    // Stop previous DMA and timer
    HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8002df2:	2104      	movs	r1, #4
 8002df4:	4810      	ldr	r0, [pc, #64]	@ (8002e38 <WS2812_Send+0xec>)
 8002df6:	f00b fb4f 	bl	800e498 <HAL_TIM_PWM_Stop_DMA>
    HAL_TIM_Base_Stop(&WS2812_TIMER);
 8002dfa:	480f      	ldr	r0, [pc, #60]	@ (8002e38 <WS2812_Send+0xec>)
 8002dfc:	f00a ff74 	bl	800dce8 <HAL_TIM_Base_Stop>

    // Ensure DMA interrupt is enabled
    HAL_NVIC_SetPriority(WS2812_DMA_IRQn, 0, 0);
 8002e00:	2200      	movs	r2, #0
 8002e02:	2100      	movs	r1, #0
 8002e04:	200f      	movs	r0, #15
 8002e06:	f003 ff00 	bl	8006c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WS2812_DMA_IRQn);
 8002e0a:	200f      	movs	r0, #15
 8002e0c:	f003 ff17 	bl	8006c3e <HAL_NVIC_EnableIRQ>

    // Reset flag and start new DMA transfer
    data_sent_flag = 0;
 8002e10:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <WS2812_Send+0xf0>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start(&WS2812_TIMER);
 8002e16:	4808      	ldr	r0, [pc, #32]	@ (8002e38 <WS2812_Send+0xec>)
 8002e18:	f00a fee8 	bl	800dbec <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL, pwm_buffer, BUFFER_SIZE);
 8002e1c:	234a      	movs	r3, #74	@ 0x4a
 8002e1e:	4a04      	ldr	r2, [pc, #16]	@ (8002e30 <WS2812_Send+0xe4>)
 8002e20:	2104      	movs	r1, #4
 8002e22:	4805      	ldr	r0, [pc, #20]	@ (8002e38 <WS2812_Send+0xec>)
 8002e24:	f00b f904 	bl	800e030 <HAL_TIM_PWM_Start_DMA>
//    printf("WS2812 Send Started\n");
}
 8002e28:	bf00      	nop
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	24000370 	.word	0x24000370
 8002e34:	24000498 	.word	0x24000498
 8002e38:	240007e0 	.word	0x240007e0
 8002e3c:	2400036c 	.word	0x2400036c

08002e40 <main_led>:

void main_led(uint32_t led_index, uint8_t red, uint8_t green, uint8_t blue, float brightness) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e52:	4603      	mov	r3, r0
 8002e54:	72fb      	strb	r3, [r7, #11]
 8002e56:	460b      	mov	r3, r1
 8002e58:	72bb      	strb	r3, [r7, #10]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	727b      	strb	r3, [r7, #9]
    WS2812_SetColor(led_index, red, green, blue, brightness);
 8002e5e:	7a7b      	ldrb	r3, [r7, #9]
 8002e60:	7aba      	ldrb	r2, [r7, #10]
 8002e62:	7af9      	ldrb	r1, [r7, #11]
 8002e64:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7ff feed 	bl	8002c48 <WS2812_SetColor>
    WS2812_Send();
 8002e6e:	f7ff ff6d 	bl	8002d4c <WS2812_Send>
    led_active = true;
 8002e72:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <main_led+0x50>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
    led_start_time = HAL_GetTick();
 8002e78:	f003 fdbc 	bl	80069f4 <HAL_GetTick>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	4a05      	ldr	r2, [pc, #20]	@ (8002e94 <main_led+0x54>)
 8002e80:	6013      	str	r3, [r2, #0]
    led_on_time = 100; // Default duration (100ms)
 8002e82:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <main_led+0x58>)
 8002e84:	2264      	movs	r2, #100	@ 0x64
 8002e86:	601a      	str	r2, [r3, #0]
//    printf("main_led: LED %lu set, duration=%lu ms\n", led_index, led_on_time);
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	240004a4 	.word	0x240004a4
 8002e94:	240004a0 	.word	0x240004a0
 8002e98:	2400049c 	.word	0x2400049c

08002e9c <WS2812_Update>:

void WS2812_Update(void) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
    if (led_active && data_sent_flag) {
 8002ea0:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <WS2812_Update+0x4c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01b      	beq.n	8002ee2 <WS2812_Update+0x46>
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <WS2812_Update+0x50>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d016      	beq.n	8002ee2 <WS2812_Update+0x46>
        if ((HAL_GetTick() - led_start_time) >= led_on_time) {
 8002eb4:	f003 fd9e 	bl	80069f4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <WS2812_Update+0x54>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	1ad2      	subs	r2, r2, r3
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <WS2812_Update+0x58>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d30c      	bcc.n	8002ee2 <WS2812_Update+0x46>
            // Turn off LED by setting color to black
            WS2812_SetColor(0, 0, 0, 0, 1.0);
 8002ec8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ecc:	2300      	movs	r3, #0
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7ff feb8 	bl	8002c48 <WS2812_SetColor>
            WS2812_Send();
 8002ed8:	f7ff ff38 	bl	8002d4c <WS2812_Send>
            led_active = false;
 8002edc:	4b02      	ldr	r3, [pc, #8]	@ (8002ee8 <WS2812_Update+0x4c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
//            printf("WS2812 LED turned off\n");
        }
    }
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	240004a4 	.word	0x240004a4
 8002eec:	2400036c 	.word	0x2400036c
 8002ef0:	240004a0 	.word	0x240004a0
 8002ef4:	2400049c 	.word	0x2400049c

08002ef8 <HAL_TIM_PWM_PulseFinishedCallback>:

__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a08      	ldr	r2, [pc, #32]	@ (8002f28 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d109      	bne.n	8002f1e <HAL_TIM_PWM_PulseFinishedCallback+0x26>
        HAL_TIM_PWM_Stop_DMA(&WS2812_TIMER, WS2812_TIMER_CHANNEL);
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	4807      	ldr	r0, [pc, #28]	@ (8002f2c <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002f0e:	f00b fac3 	bl	800e498 <HAL_TIM_PWM_Stop_DMA>
        HAL_TIM_Base_Stop(&WS2812_TIMER);
 8002f12:	4806      	ldr	r0, [pc, #24]	@ (8002f2c <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 8002f14:	f00a fee8 	bl	800dce8 <HAL_TIM_Base_Stop>
        data_sent_flag = 1;
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
//        printf("WS2812 DMA Transfer Complete\n");
    }
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	240007e0 	.word	0x240007e0
 8002f30:	2400036c 	.word	0x2400036c

08002f34 <iBus_Check_CHKSUM>:

#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len){
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8002f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < len-2; i++){
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	e00a      	b.n	8002f62 <iBus_Check_CHKSUM+0x2e>
		chksum = chksum - data[i];
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	89fb      	ldrh	r3, [r7, #14]
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < len-2; i++){
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	3b02      	subs	r3, #2
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	dbef      	blt.n	8002f4c <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff) == data[30] && (chksum>>8)==data[31]);
 8002f6c:	89fb      	ldrh	r3, [r7, #14]
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	321e      	adds	r2, #30
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d109      	bne.n	8002f8e <iBus_Check_CHKSUM+0x5a>
 8002f7a:	89fb      	ldrh	r3, [r7, #14]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	321f      	adds	r2, #31
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d101      	bne.n	8002f8e <iBus_Check_CHKSUM+0x5a>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <iBus_Check_CHKSUM+0x5c>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus) {
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0fff;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3302      	adds	r3, #2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b21a      	sxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3303      	adds	r3, #3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b21b      	sxth	r3, r3
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	b21b      	sxth	r3, r3
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b21b      	sxth	r3, r3
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0fff;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b21a      	sxth	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3305      	adds	r3, #5
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b21b      	sxth	r3, r3
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	b21b      	sxth	r3, r3
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0fff;;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3306      	adds	r3, #6
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	b21a      	sxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3307      	adds	r3, #7
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	b21b      	sxth	r3, r3
 8003004:	4313      	orrs	r3, r2
 8003006:	b21b      	sxth	r3, r3
 8003008:	b29b      	uxth	r3, r3
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	b29a      	uxth	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0fff;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3308      	adds	r3, #8
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b21a      	sxth	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3309      	adds	r3, #9
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b21b      	sxth	r3, r3
 8003024:	021b      	lsls	r3, r3, #8
 8003026:	b21b      	sxth	r3, r3
 8003028:	4313      	orrs	r3, r2
 800302a:	b21b      	sxth	r3, r3
 800302c:	b29b      	uxth	r3, r3
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	b29a      	uxth	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	330a      	adds	r3, #10
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b21a      	sxth	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	330b      	adds	r3, #11
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b21b      	sxth	r3, r3
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	b21b      	sxth	r3, r3
 800304c:	4313      	orrs	r3, r2
 800304e:	b21b      	sxth	r3, r3
 8003050:	b29b      	uxth	r3, r3
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	b29a      	uxth	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0fff;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	330c      	adds	r3, #12
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b21a      	sxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	330d      	adds	r3, #13
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	b21b      	sxth	r3, r3
 800306c:	021b      	lsls	r3, r3, #8
 800306e:	b21b      	sxth	r3, r3
 8003070:	4313      	orrs	r3, r2
 8003072:	b21b      	sxth	r3, r3
 8003074:	b29b      	uxth	r3, r3
 8003076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307a:	b29a      	uxth	r2, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	815a      	strh	r2, [r3, #10]
	iBus->SwC = (data[14] | data[15]<<8) & 0x0fff;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	330e      	adds	r3, #14
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b21a      	sxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	330f      	adds	r3, #15
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b21b      	sxth	r3, r3
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	b21b      	sxth	r3, r3
 8003094:	4313      	orrs	r3, r2
 8003096:	b21b      	sxth	r3, r3
 8003098:	b29b      	uxth	r3, r3
 800309a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800309e:	b29a      	uxth	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[16] | data[17]<<8) & 0x0fff;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3310      	adds	r3, #16
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	b21a      	sxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3311      	adds	r3, #17
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b21b      	sxth	r3, r3
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	4313      	orrs	r3, r2
 80030ba:	b21b      	sxth	r3, r3
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	81da      	strh	r2, [r3, #14]
	iBus->VrA = (data[18] | data[19]<<8) & 0x0fff;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3312      	adds	r3, #18
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	b21a      	sxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3313      	adds	r3, #19
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b21b      	sxth	r3, r3
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	b21b      	sxth	r3, r3
 80030dc:	4313      	orrs	r3, r2
 80030de:	b21b      	sxth	r3, r3
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[20] | data[21]<<8) & 0x0fff;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3314      	adds	r3, #20
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b21a      	sxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3315      	adds	r3, #21
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b21b      	sxth	r3, r3
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	b21b      	sxth	r3, r3
 8003100:	4313      	orrs	r3, r2
 8003102:	b21b      	sxth	r3, r3
 8003104:	b29b      	uxth	r3, r3
 8003106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800310a:	b29a      	uxth	r2, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	825a      	strh	r2, [r3, #18]

	iBus->FailSafe = (data[13] >> 4);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	330d      	adds	r3, #13
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	829a      	strh	r2, [r3, #20]

}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <iBus_isActiveFailsafe>:

#ifdef _USE_FS_I6
	iBus->FailSafe = (data[13] >> 4);
#endif

unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus) {
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	8a9b      	ldrh	r3, [r3, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <__NVIC_GetPriorityGrouping>:
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <__NVIC_GetPriorityGrouping+0x18>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	f003 0307 	and.w	r3, r3, #7
}
 800315e:	4618      	mov	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <__NVIC_EnableIRQ>:
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800317a:	2b00      	cmp	r3, #0
 800317c:	db0b      	blt.n	8003196 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4907      	ldr	r1, [pc, #28]	@ (80031a4 <__NVIC_EnableIRQ+0x38>)
 8003186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	2001      	movs	r0, #1
 800318e:	fa00 f202 	lsl.w	r2, r0, r2
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000e100 	.word	0xe000e100

080031a8 <__NVIC_SetPriority>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	db0a      	blt.n	80031d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	490c      	ldr	r1, [pc, #48]	@ (80031f4 <__NVIC_SetPriority+0x4c>)
 80031c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c6:	0112      	lsls	r2, r2, #4
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	440b      	add	r3, r1
 80031cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80031d0:	e00a      	b.n	80031e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4908      	ldr	r1, [pc, #32]	@ (80031f8 <__NVIC_SetPriority+0x50>)
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	3b04      	subs	r3, #4
 80031e0:	0112      	lsls	r2, r2, #4
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	440b      	add	r3, r1
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000e100 	.word	0xe000e100
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <NVIC_EncodePriority>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	@ 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f1c3 0307 	rsb	r3, r3, #7
 8003216:	2b04      	cmp	r3, #4
 8003218:	bf28      	it	cs
 800321a:	2304      	movcs	r3, #4
 800321c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3304      	adds	r3, #4
 8003222:	2b06      	cmp	r3, #6
 8003224:	d902      	bls.n	800322c <NVIC_EncodePriority+0x30>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3b03      	subs	r3, #3
 800322a:	e000      	b.n	800322e <NVIC_EncodePriority+0x32>
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	401a      	ands	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003244:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa01 f303 	lsl.w	r3, r1, r3
 800324e:	43d9      	mvns	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	4313      	orrs	r3, r2
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800326a:	4b3d      	ldr	r3, [pc, #244]	@ (8003360 <MX_DMA_Init+0xfc>)
 800326c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003270:	4a3b      	ldr	r2, [pc, #236]	@ (8003360 <MX_DMA_Init+0xfc>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800327a:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <MX_DMA_Init+0xfc>)
 800327c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	607b      	str	r3, [r7, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003288:	4b35      	ldr	r3, [pc, #212]	@ (8003360 <MX_DMA_Init+0xfc>)
 800328a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800328e:	4a34      	ldr	r2, [pc, #208]	@ (8003360 <MX_DMA_Init+0xfc>)
 8003290:	f043 0302 	orr.w	r3, r3, #2
 8003294:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003298:	4b31      	ldr	r3, [pc, #196]	@ (8003360 <MX_DMA_Init+0xfc>)
 800329a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80032a6:	2200      	movs	r2, #0
 80032a8:	2100      	movs	r1, #0
 80032aa:	200b      	movs	r0, #11
 80032ac:	f003 fcad 	bl	8006c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80032b0:	200b      	movs	r0, #11
 80032b2:	f003 fcc4 	bl	8006c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	200c      	movs	r0, #12
 80032bc:	f003 fca5 	bl	8006c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80032c0:	200c      	movs	r0, #12
 80032c2:	f003 fcbc 	bl	8006c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2100      	movs	r1, #0
 80032ca:	200d      	movs	r0, #13
 80032cc:	f003 fc9d 	bl	8006c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80032d0:	200d      	movs	r0, #13
 80032d2:	f003 fcb4 	bl	8006c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80032d6:	f7ff ff3b 	bl	8003150 <__NVIC_GetPriorityGrouping>
 80032da:	4603      	mov	r3, r0
 80032dc:	2200      	movs	r2, #0
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff8b 	bl	80031fc <NVIC_EncodePriority>
 80032e6:	4603      	mov	r3, r0
 80032e8:	4619      	mov	r1, r3
 80032ea:	200e      	movs	r0, #14
 80032ec:	f7ff ff5c 	bl	80031a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80032f0:	200e      	movs	r0, #14
 80032f2:	f7ff ff3b 	bl	800316c <__NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80032f6:	f7ff ff2b 	bl	8003150 <__NVIC_GetPriorityGrouping>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2200      	movs	r2, #0
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff7b 	bl	80031fc <NVIC_EncodePriority>
 8003306:	4603      	mov	r3, r0
 8003308:	4619      	mov	r1, r3
 800330a:	200f      	movs	r0, #15
 800330c:	f7ff ff4c 	bl	80031a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003310:	200f      	movs	r0, #15
 8003312:	f7ff ff2b 	bl	800316c <__NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003316:	2200      	movs	r2, #0
 8003318:	2100      	movs	r1, #0
 800331a:	2010      	movs	r0, #16
 800331c:	f003 fc75 	bl	8006c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003320:	2010      	movs	r0, #16
 8003322:	f003 fc8c 	bl	8006c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003326:	2200      	movs	r2, #0
 8003328:	2100      	movs	r1, #0
 800332a:	2011      	movs	r0, #17
 800332c:	f003 fc6d 	bl	8006c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003330:	2011      	movs	r0, #17
 8003332:	f003 fc84 	bl	8006c3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	202f      	movs	r0, #47	@ 0x2f
 800333c:	f003 fc65 	bl	8006c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003340:	202f      	movs	r0, #47	@ 0x2f
 8003342:	f003 fc7c 	bl	8006c3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	2038      	movs	r0, #56	@ 0x38
 800334c:	f003 fc5d 	bl	8006c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003350:	2038      	movs	r0, #56	@ 0x38
 8003352:	f003 fc74 	bl	8006c3e <HAL_NVIC_EnableIRQ>

}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	58024400 	.word	0x58024400

08003364 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08c      	sub	sp, #48	@ 0x30
 8003368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336a:	f107 031c 	add.w	r3, r7, #28
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800337a:	4b49      	ldr	r3, [pc, #292]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 800337c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003380:	4a47      	ldr	r2, [pc, #284]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 8003382:	f043 0310 	orr.w	r3, r3, #16
 8003386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800338a:	4b45      	ldr	r3, [pc, #276]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 800338c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	61bb      	str	r3, [r7, #24]
 8003396:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003398:	4b41      	ldr	r3, [pc, #260]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 800339a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800339e:	4a40      	ldr	r2, [pc, #256]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033a8:	4b3d      	ldr	r3, [pc, #244]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b6:	4b3a      	ldr	r3, [pc, #232]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033bc:	4a38      	ldr	r2, [pc, #224]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033c6:	4b36      	ldr	r3, [pc, #216]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d4:	4b32      	ldr	r3, [pc, #200]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033da:	4a31      	ldr	r2, [pc, #196]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033dc:	f043 0302 	orr.w	r3, r3, #2
 80033e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033e4:	4b2e      	ldr	r3, [pc, #184]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f2:	4b2b      	ldr	r3, [pc, #172]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033f8:	4a29      	ldr	r2, [pc, #164]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 80033fa:	f043 0308 	orr.w	r3, r3, #8
 80033fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003402:	4b27      	ldr	r3, [pc, #156]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 8003404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003410:	4b23      	ldr	r3, [pc, #140]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 8003412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003416:	4a22      	ldr	r2, [pc, #136]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003420:	4b1f      	ldr	r3, [pc, #124]	@ (80034a0 <MX_GPIO_Init+0x13c>)
 8003422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 800342e:	2200      	movs	r2, #0
 8003430:	2128      	movs	r1, #40	@ 0x28
 8003432:	481c      	ldr	r0, [pc, #112]	@ (80034a4 <MX_GPIO_Init+0x140>)
 8003434:	f006 f958 	bl	80096e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CSA15_GPIO_Port, SPI3_CSA15_Pin, GPIO_PIN_RESET);
 8003438:	2200      	movs	r2, #0
 800343a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800343e:	481a      	ldr	r0, [pc, #104]	@ (80034a8 <MX_GPIO_Init+0x144>)
 8003440:	f006 f952 	bl	80096e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8003444:	2328      	movs	r3, #40	@ 0x28
 8003446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003448:	2301      	movs	r3, #1
 800344a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003450:	2300      	movs	r3, #0
 8003452:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003454:	f107 031c 	add.w	r3, r7, #28
 8003458:	4619      	mov	r1, r3
 800345a:	4812      	ldr	r0, [pc, #72]	@ (80034a4 <MX_GPIO_Init+0x140>)
 800345c:	f005 ff9c 	bl	8009398 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8003460:	2310      	movs	r3, #16
 8003462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003464:	2300      	movs	r3, #0
 8003466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800346c:	f107 031c 	add.w	r3, r7, #28
 8003470:	4619      	mov	r1, r3
 8003472:	480c      	ldr	r0, [pc, #48]	@ (80034a4 <MX_GPIO_Init+0x140>)
 8003474:	f005 ff90 	bl	8009398 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CSA15_Pin */
  GPIO_InitStruct.Pin = SPI3_CSA15_Pin;
 8003478:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347e:	2301      	movs	r3, #1
 8003480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003486:	2300      	movs	r3, #0
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CSA15_GPIO_Port, &GPIO_InitStruct);
 800348a:	f107 031c 	add.w	r3, r7, #28
 800348e:	4619      	mov	r1, r3
 8003490:	4805      	ldr	r0, [pc, #20]	@ (80034a8 <MX_GPIO_Init+0x144>)
 8003492:	f005 ff81 	bl	8009398 <HAL_GPIO_Init>

}
 8003496:	bf00      	nop
 8003498:	3730      	adds	r7, #48	@ 0x30
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	58024400 	.word	0x58024400
 80034a4:	58021000 	.word	0x58021000
 80034a8:	58020000 	.word	0x58020000

080034ac <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003524 <MX_I2C1_Init+0x78>)
 80034b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D049FB;
 80034b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <MX_I2C1_Init+0x7c>)
 80034ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034bc:	4b18      	ldr	r3, [pc, #96]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034c2:	4b17      	ldr	r3, [pc, #92]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034c8:	4b15      	ldr	r3, [pc, #84]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034ce:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034d4:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034da:	4b11      	ldr	r3, [pc, #68]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034dc:	2200      	movs	r2, #0
 80034de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034e6:	480e      	ldr	r0, [pc, #56]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034e8:	f006 f932 	bl	8009750 <HAL_I2C_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80034f2:	f001 f9b7 	bl	8004864 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034f6:	2100      	movs	r1, #0
 80034f8:	4809      	ldr	r0, [pc, #36]	@ (8003520 <MX_I2C1_Init+0x74>)
 80034fa:	f006 fe79 	bl	800a1f0 <HAL_I2CEx_ConfigAnalogFilter>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003504:	f001 f9ae 	bl	8004864 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003508:	2100      	movs	r1, #0
 800350a:	4805      	ldr	r0, [pc, #20]	@ (8003520 <MX_I2C1_Init+0x74>)
 800350c:	f006 febb 	bl	800a286 <HAL_I2CEx_ConfigDigitalFilter>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003516:	f001 f9a5 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	240004c0 	.word	0x240004c0
 8003524:	40005400 	.word	0x40005400
 8003528:	00d049fb 	.word	0x00d049fb

0800352c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b0b8      	sub	sp, #224	@ 0xe0
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003534:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	609a      	str	r2, [r3, #8]
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003544:	f107 0310 	add.w	r3, r7, #16
 8003548:	22b8      	movs	r2, #184	@ 0xb8
 800354a:	2100      	movs	r1, #0
 800354c:	4618      	mov	r0, r3
 800354e:	f00e fb2f 	bl	8011bb0 <memset>
  if(i2cHandle->Instance==I2C1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a54      	ldr	r2, [pc, #336]	@ (80036a8 <HAL_I2C_MspInit+0x17c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	f040 80a1 	bne.w	80036a0 <HAL_I2C_MspInit+0x174>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800355e:	f04f 0208 	mov.w	r2, #8
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800356a:	2300      	movs	r3, #0
 800356c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003570:	f107 0310 	add.w	r3, r7, #16
 8003574:	4618      	mov	r0, r3
 8003576:	f008 ffdd 	bl	800c534 <HAL_RCCEx_PeriphCLKConfig>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8003580:	f001 f970 	bl	8004864 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003584:	4b49      	ldr	r3, [pc, #292]	@ (80036ac <HAL_I2C_MspInit+0x180>)
 8003586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800358a:	4a48      	ldr	r2, [pc, #288]	@ (80036ac <HAL_I2C_MspInit+0x180>)
 800358c:	f043 0302 	orr.w	r3, r3, #2
 8003590:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003594:	4b45      	ldr	r3, [pc, #276]	@ (80036ac <HAL_I2C_MspInit+0x180>)
 8003596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80035a2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80035a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035aa:	2312      	movs	r3, #18
 80035ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035bc:	2304      	movs	r3, #4
 80035be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80035c6:	4619      	mov	r1, r3
 80035c8:	4839      	ldr	r0, [pc, #228]	@ (80036b0 <HAL_I2C_MspInit+0x184>)
 80035ca:	f005 fee5 	bl	8009398 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035ce:	4b37      	ldr	r3, [pc, #220]	@ (80036ac <HAL_I2C_MspInit+0x180>)
 80035d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035d4:	4a35      	ldr	r2, [pc, #212]	@ (80036ac <HAL_I2C_MspInit+0x180>)
 80035d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035de:	4b33      	ldr	r3, [pc, #204]	@ (80036ac <HAL_I2C_MspInit+0x180>)
 80035e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 80035ec:	4b31      	ldr	r3, [pc, #196]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 80035ee:	4a32      	ldr	r2, [pc, #200]	@ (80036b8 <HAL_I2C_MspInit+0x18c>)
 80035f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80035f2:	4b30      	ldr	r3, [pc, #192]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 80035f4:	2221      	movs	r2, #33	@ 0x21
 80035f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f8:	4b2e      	ldr	r3, [pc, #184]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fe:	4b2d      	ldr	r3, [pc, #180]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 8003600:	2200      	movs	r2, #0
 8003602:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003604:	4b2b      	ldr	r3, [pc, #172]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 8003606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800360a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800360c:	4b29      	ldr	r3, [pc, #164]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 800360e:	2200      	movs	r2, #0
 8003610:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003612:	4b28      	ldr	r3, [pc, #160]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003618:	4b26      	ldr	r3, [pc, #152]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 800361a:	2200      	movs	r2, #0
 800361c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800361e:	4b25      	ldr	r3, [pc, #148]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 8003620:	2200      	movs	r2, #0
 8003622:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003624:	4b23      	ldr	r3, [pc, #140]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800362a:	4822      	ldr	r0, [pc, #136]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 800362c:	f003 fb9a 	bl	8006d64 <HAL_DMA_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8003636:	f001 f915 	bl	8004864 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 800363e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003640:	4a1c      	ldr	r2, [pc, #112]	@ (80036b4 <HAL_I2C_MspInit+0x188>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA2_Stream0;
 8003646:	4b1d      	ldr	r3, [pc, #116]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 8003648:	4a1d      	ldr	r2, [pc, #116]	@ (80036c0 <HAL_I2C_MspInit+0x194>)
 800364a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800364c:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 800364e:	2222      	movs	r2, #34	@ 0x22
 8003650:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003652:	4b1a      	ldr	r3, [pc, #104]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 8003654:	2240      	movs	r2, #64	@ 0x40
 8003656:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003658:	4b18      	ldr	r3, [pc, #96]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 8003660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003664:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003666:	4b15      	ldr	r3, [pc, #84]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 8003668:	2200      	movs	r2, #0
 800366a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800366c:	4b13      	ldr	r3, [pc, #76]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 8003674:	2200      	movs	r2, #0
 8003676:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003678:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 800367a:	2200      	movs	r2, #0
 800367c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800367e:	4b0f      	ldr	r3, [pc, #60]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 8003680:	2200      	movs	r2, #0
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003684:	480d      	ldr	r0, [pc, #52]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 8003686:	f003 fb6d 	bl	8006d64 <HAL_DMA_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8003690:	f001 f8e8 	bl	8004864 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a09      	ldr	r2, [pc, #36]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 8003698:	639a      	str	r2, [r3, #56]	@ 0x38
 800369a:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <HAL_I2C_MspInit+0x190>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80036a0:	bf00      	nop
 80036a2:	37e0      	adds	r7, #224	@ 0xe0
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40005400 	.word	0x40005400
 80036ac:	58024400 	.word	0x58024400
 80036b0:	58020400 	.word	0x58020400
 80036b4:	24000514 	.word	0x24000514
 80036b8:	400200b8 	.word	0x400200b8
 80036bc:	2400058c 	.word	0x2400058c
 80036c0:	40020410 	.word	0x40020410

080036c4 <LL_TIM_EnableCounter>:
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f043 0201 	orr.w	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <LL_USART_IsActiveFlag_FE>:
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d101      	bne.n	800371c <LL_USART_IsActiveFlag_FE+0x18>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <LL_USART_IsActiveFlag_FE+0x1a>
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <LL_USART_IsActiveFlag_ORE>:
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b08      	cmp	r3, #8
 800373c:	d101      	bne.n	8003742 <LL_USART_IsActiveFlag_ORE+0x18>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <LL_USART_IsActiveFlag_ORE+0x1a>
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <LL_USART_IsActiveFlag_TC>:
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003760:	2b40      	cmp	r3, #64	@ 0x40
 8003762:	d101      	bne.n	8003768 <LL_USART_IsActiveFlag_TC+0x18>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <LL_USART_IsActiveFlag_TC+0x1a>
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b80      	cmp	r3, #128	@ 0x80
 8003788:	d101      	bne.n	800378e <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_USART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2208      	movs	r2, #8
 80037c2:	621a      	str	r2, [r3, #32]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	@ 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f043 0320 	orr.w	r3, r3, #32
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	61ba      	str	r2, [r7, #24]
 80037f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	6979      	ldr	r1, [r7, #20]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	613b      	str	r3, [r7, #16]
   return(result);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e9      	bne.n	80037d8 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3724      	adds	r7, #36	@ 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	460b      	mov	r3, r1
 800381c:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800381e:	78fa      	ldrb	r2, [r7, #3]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_write>:
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* *********** USART6 printf function code ************ */
int _write(int file, char* p, int len)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++) {
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e025      	b.n	800388e <_write+0x5e>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
            if (LL_USART_IsActiveFlag_ORE(USART6) || LL_USART_IsActiveFlag_FE(USART6)) {
 8003842:	481b      	ldr	r0, [pc, #108]	@ (80038b0 <_write+0x80>)
 8003844:	f7ff ff71 	bl	800372a <LL_USART_IsActiveFlag_ORE>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d105      	bne.n	800385a <_write+0x2a>
 800384e:	4818      	ldr	r0, [pc, #96]	@ (80038b0 <_write+0x80>)
 8003850:	f7ff ff58 	bl	8003704 <LL_USART_IsActiveFlag_FE>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <_write+0x3c>
                LL_USART_ClearFlag_ORE(USART6);
 800385a:	4815      	ldr	r0, [pc, #84]	@ (80038b0 <_write+0x80>)
 800385c:	f7ff ffab 	bl	80037b6 <LL_USART_ClearFlag_ORE>
                LL_USART_ClearFlag_FE(USART6);
 8003860:	4813      	ldr	r0, [pc, #76]	@ (80038b0 <_write+0x80>)
 8003862:	f7ff ff9b 	bl	800379c <LL_USART_ClearFlag_FE>
                return -1; // Indicate error
 8003866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800386a:	e01c      	b.n	80038a6 <_write+0x76>
        while (!LL_USART_IsActiveFlag_TXE(USART6)) {
 800386c:	4810      	ldr	r0, [pc, #64]	@ (80038b0 <_write+0x80>)
 800386e:	f7ff ff82 	bl	8003776 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0e4      	beq.n	8003842 <_write+0x12>
            }
        }
        LL_USART_TransmitData8(USART6, *(p + i));
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	4413      	add	r3, r2
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	4619      	mov	r1, r3
 8003882:	480b      	ldr	r0, [pc, #44]	@ (80038b0 <_write+0x80>)
 8003884:	f7ff ffc5 	bl	8003812 <LL_USART_TransmitData8>
    for (int i = 0; i < len; i++) {
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	3301      	adds	r3, #1
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	dbea      	blt.n	800386c <_write+0x3c>
    }
    while (!LL_USART_IsActiveFlag_TC(USART6)) {}
 8003896:	bf00      	nop
 8003898:	4805      	ldr	r0, [pc, #20]	@ (80038b0 <_write+0x80>)
 800389a:	f7ff ff59 	bl	8003750 <LL_USART_IsActiveFlag_TC>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f9      	beq.n	8003898 <_write+0x68>
    return len;
 80038a4:	687b      	ldr	r3, [r7, #4]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40011400 	.word	0x40011400
 80038b4:	00000000 	.word	0x00000000

080038b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038bc:	b0de      	sub	sp, #376	@ 0x178
 80038be:	af0a      	add	r7, sp, #40	@ 0x28

  /* USER CODE BEGIN 1 */

	static int16_t gyro_offsets_lsb[3] = {8, 4, -2}; // Initialize to zero

	unsigned char motor_arming_flag = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
	unsigned short iBus_SwA_Prev = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c
	unsigned char iBus_rx_cnt = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
	unsigned short ccr1, ccr2, ccr3, ccr4;

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80038d2:	f000 ff9b 	bl	800480c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038d6:	f003 f807 	bl	80068e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038da:	f000 fe45 	bl	8004568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038de:	f7ff fd41 	bl	8003364 <MX_GPIO_Init>
  MX_DMA_Init();
 80038e2:	f7ff fcbf 	bl	8003264 <MX_DMA_Init>
  MX_TIM5_Init();
 80038e6:	f002 fa39 	bl	8005d5c <MX_TIM5_Init>
  MX_OCTOSPI1_Init();
 80038ea:	f000 ffc1 	bl	8004870 <MX_OCTOSPI1_Init>
  MX_USART6_UART_Init();
 80038ee:	f002 ff31 	bl	8006754 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 80038f2:	f002 facb 	bl	8005e8c <MX_TIM7_Init>
  MX_SPI3_Init();
 80038f6:	f001 fb49 	bl	8004f8c <MX_SPI3_Init>
  MX_UART4_Init();
 80038fa:	f002 fe91 	bl	8006620 <MX_UART4_Init>
  MX_TIM2_Init();
 80038fe:	f002 f93f 	bl	8005b80 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003902:	f002 f9b3 	bl	8005c6c <MX_TIM3_Init>
  MX_I2C1_Init();
 8003906:	f7ff fdd1 	bl	80034ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  LL_USART_EnableIT_RXNE(USART6);
 800390a:	48b2      	ldr	r0, [pc, #712]	@ (8003bd4 <main+0x31c>)
 800390c:	f7ff ff60 	bl	80037d0 <LL_USART_EnableIT_RXNE_RXFNE>
//  StartupTone();
  LL_USART_EnableIT_RXNE_RXFNE(UART4);
 8003910:	48b1      	ldr	r0, [pc, #708]	@ (8003bd8 <main+0x320>)
 8003912:	f7ff ff5d 	bl	80037d0 <LL_USART_EnableIT_RXNE_RXFNE>

  /* ======================== EEPROM Code START ======================== */

  if (EEPROM_Init() != W25Qxx_OK) {
 8003916:	f7fd fb3f 	bl	8000f98 <EEPROM_Init>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <main+0x72>
	  printf("EEPROM Init Failed\r\n");
 8003920:	48ae      	ldr	r0, [pc, #696]	@ (8003bdc <main+0x324>)
 8003922:	f00e f81d 	bl	8011960 <puts>
	  Error_Handler();
 8003926:	f000 ff9d 	bl	8004864 <Error_Handler>
  }

  DroneConfig_t config;
  if (EEPROM_ReadConfig(&config) == W25Qxx_OK) {
 800392a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fb88 	bl	8001044 <EEPROM_ReadConfig>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10c      	bne.n	8003954 <main+0x9c>
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
			  config.flight_mode, config.pid[0]);
 800393a:	f897 30d4 	ldrb.w	r3, [r7, #212]	@ 0xd4
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 800393e:	4619      	mov	r1, r3
			  config.flight_mode, config.pid[0]);
 8003940:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
	  printf("Config Loaded: Flight Mode %d, PID P: %.2f\r\n",
 8003944:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003948:	ec53 2b17 	vmov	r2, r3, d7
 800394c:	48a4      	ldr	r0, [pc, #656]	@ (8003be0 <main+0x328>)
 800394e:	f00d ff97 	bl	8011880 <iprintf>
 8003952:	e02a      	b.n	80039aa <main+0xf2>
  } else {
	  printf("No valid config found, loading defaults\r\n");
 8003954:	48a3      	ldr	r0, [pc, #652]	@ (8003be4 <main+0x32c>)
 8003956:	f00e f803 	bl	8011960 <puts>
	  DroneConfig_t default_config = {
 800395a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800395e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003962:	4aa1      	ldr	r2, [pc, #644]	@ (8003be8 <main+0x330>)
 8003964:	4618      	mov	r0, r3
 8003966:	4611      	mov	r1, r2
 8003968:	2390      	movs	r3, #144	@ 0x90
 800396a:	461a      	mov	r2, r3
 800396c:	f00e f9bf 	bl	8011cee <memcpy>
					  .rgb = {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}},
					  .mode = 0
			  },
			  .crc = 0
	  };
	  default_config.crc = CalculateCRC32((uint8_t*)&default_config, sizeof(DroneConfig_t) - sizeof(uint32_t));
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	218c      	movs	r1, #140	@ 0x8c
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd fbc0 	bl	80010fc <CalculateCRC32>
 800397c:	4602      	mov	r2, r0
 800397e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003982:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	  if (EEPROM_WriteConfig(&default_config) != W25Qxx_OK) {
 800398a:	f107 0314 	add.w	r3, r7, #20
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fb90 	bl	80010b4 <EEPROM_WriteConfig>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <main+0xec>
		  printf("Failed to write default config\r\n");
 800399a:	4894      	ldr	r0, [pc, #592]	@ (8003bec <main+0x334>)
 800399c:	f00d ffe0 	bl	8011960 <puts>
		  Error_Handler();
 80039a0:	f000 ff60 	bl	8004864 <Error_Handler>
	  }
	  printf("Default config written and verified\r\n");
 80039a4:	4892      	ldr	r0, [pc, #584]	@ (8003bf0 <main+0x338>)
 80039a6:	f00d ffdb 	bl	8011960 <puts>
  }

  if (EEPROM_GetPID(eeprom_pid_read) == W25Qxx_OK) {
 80039aa:	4892      	ldr	r0, [pc, #584]	@ (8003bf4 <main+0x33c>)
 80039ac:	f7fd fca2 	bl	80012f4 <EEPROM_GetPID>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d118      	bne.n	80039e8 <main+0x130>
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 80039b6:	4b8f      	ldr	r3, [pc, #572]	@ (8003bf4 <main+0x33c>)
 80039b8:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 80039bc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 80039c0:	4b8c      	ldr	r3, [pc, #560]	@ (8003bf4 <main+0x33c>)
 80039c2:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 80039c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pid_read[0], eeprom_pid_read[1], eeprom_pid_read[2]);
 80039ca:	4b8a      	ldr	r3, [pc, #552]	@ (8003bf4 <main+0x33c>)
 80039cc:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM PID read: P=%.2f, I=%.2f, D=%.2f\r\n",
 80039d0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80039d4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80039d8:	ed8d 7b00 	vstr	d7, [sp]
 80039dc:	ec53 2b15 	vmov	r2, r3, d5
 80039e0:	4885      	ldr	r0, [pc, #532]	@ (8003bf8 <main+0x340>)
 80039e2:	f00d ff4d 	bl	8011880 <iprintf>
 80039e6:	e002      	b.n	80039ee <main+0x136>
  } else {
	  printf("Failed to read PID\r\n");
 80039e8:	4884      	ldr	r0, [pc, #528]	@ (8003bfc <main+0x344>)
 80039ea:	f00d ffb9 	bl	8011960 <puts>
  }

  if (EEPROM_GetGyroCalibration(eeprom_gyro_read) == W25Qxx_OK) {
 80039ee:	4884      	ldr	r0, [pc, #528]	@ (8003c00 <main+0x348>)
 80039f0:	f7fd fc08 	bl	8001204 <EEPROM_GetGyroCalibration>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d118      	bne.n	8003a2c <main+0x174>
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 80039fa:	4b81      	ldr	r3, [pc, #516]	@ (8003c00 <main+0x348>)
 80039fc:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003a00:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8003a04:	4b7e      	ldr	r3, [pc, #504]	@ (8003c00 <main+0x348>)
 8003a06:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003a0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_gyro_read[0], eeprom_gyro_read[1], eeprom_gyro_read[2]);
 8003a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c00 <main+0x348>)
 8003a10:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Gyro read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003a14:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003a18:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003a1c:	ed8d 7b00 	vstr	d7, [sp]
 8003a20:	ec53 2b15 	vmov	r2, r3, d5
 8003a24:	4877      	ldr	r0, [pc, #476]	@ (8003c04 <main+0x34c>)
 8003a26:	f00d ff2b 	bl	8011880 <iprintf>
 8003a2a:	e002      	b.n	8003a32 <main+0x17a>
  } else {
	  printf("Failed to read EEPROM Gyro Data\r\n");
 8003a2c:	4876      	ldr	r0, [pc, #472]	@ (8003c08 <main+0x350>)
 8003a2e:	f00d ff97 	bl	8011960 <puts>
  }

  if (EEPROM_GetAccelCalibration(eeprom_accel_read) == W25Qxx_OK) {
 8003a32:	4876      	ldr	r0, [pc, #472]	@ (8003c0c <main+0x354>)
 8003a34:	f7fd fb9c 	bl	8001170 <EEPROM_GetAccelCalibration>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d118      	bne.n	8003a70 <main+0x1b8>
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8003a3e:	4b73      	ldr	r3, [pc, #460]	@ (8003c0c <main+0x354>)
 8003a40:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003a44:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8003a48:	4b70      	ldr	r3, [pc, #448]	@ (8003c0c <main+0x354>)
 8003a4a:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003a4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_accel_read[0], eeprom_accel_read[1], eeprom_accel_read[2]);
 8003a52:	4b6e      	ldr	r3, [pc, #440]	@ (8003c0c <main+0x354>)
 8003a54:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Accel read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003a58:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003a5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003a60:	ed8d 7b00 	vstr	d7, [sp]
 8003a64:	ec53 2b15 	vmov	r2, r3, d5
 8003a68:	4869      	ldr	r0, [pc, #420]	@ (8003c10 <main+0x358>)
 8003a6a:	f00d ff09 	bl	8011880 <iprintf>
 8003a6e:	e002      	b.n	8003a76 <main+0x1be>
  } else {
	  printf("Failed to read EEPROM Accel Data\r\n");
 8003a70:	4868      	ldr	r0, [pc, #416]	@ (8003c14 <main+0x35c>)
 8003a72:	f00d ff75 	bl	8011960 <puts>
  }

  if (EEPROM_GetMagCalibration(eeprom_mag_read) == W25Qxx_OK) {
 8003a76:	4868      	ldr	r0, [pc, #416]	@ (8003c18 <main+0x360>)
 8003a78:	f7fd fc0e 	bl	8001298 <EEPROM_GetMagCalibration>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d118      	bne.n	8003ab4 <main+0x1fc>
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8003a82:	4b65      	ldr	r3, [pc, #404]	@ (8003c18 <main+0x360>)
 8003a84:	edd3 7a00 	vldr	s15, [r3]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003a88:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8003a8c:	4b62      	ldr	r3, [pc, #392]	@ (8003c18 <main+0x360>)
 8003a8e:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003a92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_mag_read[0], eeprom_mag_read[1], eeprom_mag_read[2]);
 8003a96:	4b60      	ldr	r3, [pc, #384]	@ (8003c18 <main+0x360>)
 8003a98:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("EEPROM Mag read: X=%.2f, Y=%.2f, Z=%.2f\r\n",
 8003a9c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003aa0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003aa4:	ed8d 7b00 	vstr	d7, [sp]
 8003aa8:	ec53 2b15 	vmov	r2, r3, d5
 8003aac:	485b      	ldr	r0, [pc, #364]	@ (8003c1c <main+0x364>)
 8003aae:	f00d fee7 	bl	8011880 <iprintf>
 8003ab2:	e002      	b.n	8003aba <main+0x202>
  } else {
	  printf("Failed to read EEPROM Mag Data\r\n");
 8003ab4:	485a      	ldr	r0, [pc, #360]	@ (8003c20 <main+0x368>)
 8003ab6:	f00d ff53 	bl	8011960 <puts>
  }

  if (EEPROM_GetRollPID(&eeprom_roll_pid_read) == W25Qxx_OK) {
 8003aba:	485a      	ldr	r0, [pc, #360]	@ (8003c24 <main+0x36c>)
 8003abc:	f7fd fc3c 	bl	8001338 <EEPROM_GetRollPID>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d12d      	bne.n	8003b22 <main+0x26a>
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8003ac6:	4b57      	ldr	r3, [pc, #348]	@ (8003c24 <main+0x36c>)
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003acc:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8003ad0:	4b54      	ldr	r3, [pc, #336]	@ (8003c24 <main+0x36c>)
 8003ad2:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003ad6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_roll_pid_read.out.kp, eeprom_roll_pid_read.out.ki, eeprom_roll_pid_read.out.kd,
 8003ada:	4b52      	ldr	r3, [pc, #328]	@ (8003c24 <main+0x36c>)
 8003adc:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003ae0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8003ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8003c24 <main+0x36c>)
 8003ae6:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003aea:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8003aee:	4b4d      	ldr	r3, [pc, #308]	@ (8003c24 <main+0x36c>)
 8003af0:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003af4:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_roll_pid_read.in.kp, eeprom_roll_pid_read.in.ki, eeprom_roll_pid_read.in.kd);
 8003af8:	4b4a      	ldr	r3, [pc, #296]	@ (8003c24 <main+0x36c>)
 8003afa:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Roll PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003afe:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8003b02:	ed8d 3b08 	vstr	d3, [sp, #32]
 8003b06:	ed8d 4b06 	vstr	d4, [sp, #24]
 8003b0a:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003b0e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003b12:	ed8d 7b00 	vstr	d7, [sp]
 8003b16:	ec53 2b12 	vmov	r2, r3, d2
 8003b1a:	4843      	ldr	r0, [pc, #268]	@ (8003c28 <main+0x370>)
 8003b1c:	f00d feb0 	bl	8011880 <iprintf>
 8003b20:	e002      	b.n	8003b28 <main+0x270>
  } else {
	  printf("Failed to read Roll PID\r\n");
 8003b22:	4842      	ldr	r0, [pc, #264]	@ (8003c2c <main+0x374>)
 8003b24:	f00d ff1c 	bl	8011960 <puts>
  }

  if (EEPROM_GetPitchPID(&eeprom_pitch_pid_read) == W25Qxx_OK) {
 8003b28:	4841      	ldr	r0, [pc, #260]	@ (8003c30 <main+0x378>)
 8003b2a:	f7fd fc57 	bl	80013dc <EEPROM_GetPitchPID>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d12d      	bne.n	8003b90 <main+0x2d8>
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8003b34:	4b3e      	ldr	r3, [pc, #248]	@ (8003c30 <main+0x378>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003b3a:	eeb7 2ae7 	vcvt.f64.f32	d2, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8003b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8003c30 <main+0x378>)
 8003b40:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003b44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_pitch_pid_read.out.kp, eeprom_pitch_pid_read.out.ki, eeprom_pitch_pid_read.out.kd,
 8003b48:	4b39      	ldr	r3, [pc, #228]	@ (8003c30 <main+0x378>)
 8003b4a:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003b4e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8003b52:	4b37      	ldr	r3, [pc, #220]	@ (8003c30 <main+0x378>)
 8003b54:	edd3 5a03 	vldr	s11, [r3, #12]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003b58:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8003b5c:	4b34      	ldr	r3, [pc, #208]	@ (8003c30 <main+0x378>)
 8003b5e:	edd3 4a04 	vldr	s9, [r3, #16]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003b62:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
			  eeprom_pitch_pid_read.in.kp, eeprom_pitch_pid_read.in.ki, eeprom_pitch_pid_read.in.kd);
 8003b66:	4b32      	ldr	r3, [pc, #200]	@ (8003c30 <main+0x378>)
 8003b68:	edd3 3a05 	vldr	s7, [r3, #20]
	  printf("Pitch PID: Out P=%.3f, I=%.3f, D=%.3f, In P=%.3f, I=%.3f, D=%.3f\r\n",
 8003b6c:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 8003b70:	ed8d 3b08 	vstr	d3, [sp, #32]
 8003b74:	ed8d 4b06 	vstr	d4, [sp, #24]
 8003b78:	ed8d 5b04 	vstr	d5, [sp, #16]
 8003b7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003b80:	ed8d 7b00 	vstr	d7, [sp]
 8003b84:	ec53 2b12 	vmov	r2, r3, d2
 8003b88:	482a      	ldr	r0, [pc, #168]	@ (8003c34 <main+0x37c>)
 8003b8a:	f00d fe79 	bl	8011880 <iprintf>
 8003b8e:	e002      	b.n	8003b96 <main+0x2de>
  } else {
	  printf("Failed to read Pitch PID\r\n");
 8003b90:	4829      	ldr	r0, [pc, #164]	@ (8003c38 <main+0x380>)
 8003b92:	f00d fee5 	bl	8011960 <puts>
  }

  if (EEPROM_GetYawRatePID(&eeprom_yaw_rate_pid_read) == W25Qxx_OK) {
 8003b96:	4829      	ldr	r0, [pc, #164]	@ (8003c3c <main+0x384>)
 8003b98:	f7fd fc72 	bl	8001480 <EEPROM_GetYawRatePID>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d150      	bne.n	8003c44 <main+0x38c>
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8003ba2:	4b26      	ldr	r3, [pc, #152]	@ (8003c3c <main+0x384>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8003ba8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8003bac:	4b23      	ldr	r3, [pc, #140]	@ (8003c3c <main+0x384>)
 8003bae:	edd3 7a01 	vldr	s15, [r3, #4]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8003bb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			  eeprom_yaw_rate_pid_read.kp, eeprom_yaw_rate_pid_read.ki, eeprom_yaw_rate_pid_read.kd);
 8003bb6:	4b21      	ldr	r3, [pc, #132]	@ (8003c3c <main+0x384>)
 8003bb8:	edd3 6a02 	vldr	s13, [r3, #8]
	  printf("Yaw Rate PID: P=%.3f, I=%.3f, D=%.3f\r\n",
 8003bbc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003bc0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003bc4:	ed8d 7b00 	vstr	d7, [sp]
 8003bc8:	ec53 2b15 	vmov	r2, r3, d5
 8003bcc:	481c      	ldr	r0, [pc, #112]	@ (8003c40 <main+0x388>)
 8003bce:	f00d fe57 	bl	8011880 <iprintf>
 8003bd2:	e03a      	b.n	8003c4a <main+0x392>
 8003bd4:	40011400 	.word	0x40011400
 8003bd8:	40004c00 	.word	0x40004c00
 8003bdc:	08015ee8 	.word	0x08015ee8
 8003be0:	08015efc 	.word	0x08015efc
 8003be4:	08015f2c 	.word	0x08015f2c
 8003be8:	08016294 	.word	0x08016294
 8003bec:	08015f58 	.word	0x08015f58
 8003bf0:	08015f78 	.word	0x08015f78
 8003bf4:	24000608 	.word	0x24000608
 8003bf8:	08015fa0 	.word	0x08015fa0
 8003bfc:	08015fcc 	.word	0x08015fcc
 8003c00:	24000614 	.word	0x24000614
 8003c04:	08015fe0 	.word	0x08015fe0
 8003c08:	0801600c 	.word	0x0801600c
 8003c0c:	24000620 	.word	0x24000620
 8003c10:	08016030 	.word	0x08016030
 8003c14:	0801605c 	.word	0x0801605c
 8003c18:	2400062c 	.word	0x2400062c
 8003c1c:	08016080 	.word	0x08016080
 8003c20:	080160ac 	.word	0x080160ac
 8003c24:	24000638 	.word	0x24000638
 8003c28:	080160cc 	.word	0x080160cc
 8003c2c:	08016110 	.word	0x08016110
 8003c30:	24000650 	.word	0x24000650
 8003c34:	0801612c 	.word	0x0801612c
 8003c38:	08016170 	.word	0x08016170
 8003c3c:	24000668 	.word	0x24000668
 8003c40:	0801618c 	.word	0x0801618c
  } else {
	  printf("Failed to read Yaw Rate PID\r\n");
 8003c44:	48c3      	ldr	r0, [pc, #780]	@ (8003f54 <main+0x69c>)
 8003c46:	f00d fe8b 	bl	8011960 <puts>
  }

  if (EEPROM_GetAircraftLights(&aircraft_lights) == W25Qxx_OK) {
 8003c4a:	48c3      	ldr	r0, [pc, #780]	@ (8003f58 <main+0x6a0>)
 8003c4c:	f7fd fc6a 	bl	8001524 <EEPROM_GetAircraftLights>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d139      	bne.n	8003cca <main+0x412>
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8003c56:	4bc0      	ldr	r3, [pc, #768]	@ (8003f58 <main+0x6a0>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c5a:	469c      	mov	ip, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8003c5c:	4bbe      	ldr	r3, [pc, #760]	@ (8003f58 <main+0x6a0>)
 8003c5e:	785b      	ldrb	r3, [r3, #1]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c60:	469e      	mov	lr, r3
			  aircraft_lights.rgb[0][0], aircraft_lights.rgb[0][1], aircraft_lights.rgb[0][2],
 8003c62:	4bbd      	ldr	r3, [pc, #756]	@ (8003f58 <main+0x6a0>)
 8003c64:	789b      	ldrb	r3, [r3, #2]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c66:	4698      	mov	r8, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8003c68:	4bbb      	ldr	r3, [pc, #748]	@ (8003f58 <main+0x6a0>)
 8003c6a:	78db      	ldrb	r3, [r3, #3]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c6c:	461a      	mov	r2, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8003c6e:	4bba      	ldr	r3, [pc, #744]	@ (8003f58 <main+0x6a0>)
 8003c70:	791b      	ldrb	r3, [r3, #4]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c72:	4619      	mov	r1, r3
			  aircraft_lights.rgb[1][0], aircraft_lights.rgb[1][1], aircraft_lights.rgb[1][2],
 8003c74:	4bb8      	ldr	r3, [pc, #736]	@ (8003f58 <main+0x6a0>)
 8003c76:	795b      	ldrb	r3, [r3, #5]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c78:	4618      	mov	r0, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8003c7a:	4bb7      	ldr	r3, [pc, #732]	@ (8003f58 <main+0x6a0>)
 8003c7c:	799b      	ldrb	r3, [r3, #6]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c7e:	461c      	mov	r4, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8003c80:	4bb5      	ldr	r3, [pc, #724]	@ (8003f58 <main+0x6a0>)
 8003c82:	79db      	ldrb	r3, [r3, #7]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c84:	461d      	mov	r5, r3
			  aircraft_lights.rgb[2][0], aircraft_lights.rgb[2][1], aircraft_lights.rgb[2][2],
 8003c86:	4bb4      	ldr	r3, [pc, #720]	@ (8003f58 <main+0x6a0>)
 8003c88:	7a1b      	ldrb	r3, [r3, #8]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c8a:	461e      	mov	r6, r3
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8003c8c:	4bb2      	ldr	r3, [pc, #712]	@ (8003f58 <main+0x6a0>)
 8003c8e:	7a5b      	ldrb	r3, [r3, #9]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c90:	60fb      	str	r3, [r7, #12]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8003c92:	4bb1      	ldr	r3, [pc, #708]	@ (8003f58 <main+0x6a0>)
 8003c94:	7a9b      	ldrb	r3, [r3, #10]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c96:	60bb      	str	r3, [r7, #8]
			  aircraft_lights.rgb[3][0], aircraft_lights.rgb[3][1], aircraft_lights.rgb[3][2],
 8003c98:	4baf      	ldr	r3, [pc, #700]	@ (8003f58 <main+0x6a0>)
 8003c9a:	7adb      	ldrb	r3, [r3, #11]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003c9c:	607b      	str	r3, [r7, #4]
			  aircraft_lights.mode);
 8003c9e:	4bae      	ldr	r3, [pc, #696]	@ (8003f58 <main+0x6a0>)
 8003ca0:	7b1b      	ldrb	r3, [r3, #12]
	  printf("Lights: LED1(R=%d,G=%d,B=%d), LED2(R=%d,G=%d,B=%d), LED3(R=%d,G=%d,B=%d), LED4(R=%d,G=%d,B=%d), Mode=%d\r\n",
 8003ca2:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	9308      	str	r3, [sp, #32]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	9307      	str	r3, [sp, #28]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	9306      	str	r3, [sp, #24]
 8003cb0:	9605      	str	r6, [sp, #20]
 8003cb2:	9504      	str	r5, [sp, #16]
 8003cb4:	9403      	str	r4, [sp, #12]
 8003cb6:	9002      	str	r0, [sp, #8]
 8003cb8:	9101      	str	r1, [sp, #4]
 8003cba:	9200      	str	r2, [sp, #0]
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	4672      	mov	r2, lr
 8003cc0:	4661      	mov	r1, ip
 8003cc2:	48a6      	ldr	r0, [pc, #664]	@ (8003f5c <main+0x6a4>)
 8003cc4:	f00d fddc 	bl	8011880 <iprintf>
 8003cc8:	e002      	b.n	8003cd0 <main+0x418>
  } else {
	  printf("Failed to read Aircraft Lights\r\n");
 8003cca:	48a5      	ldr	r0, [pc, #660]	@ (8003f60 <main+0x6a8>)
 8003ccc:	f00d fe48 	bl	8011960 <puts>
  //          yaw_rate_pid.kp = eeprom_yaw_rate_pid_read.kp;
  //          yaw_rate_pid.ki = eeprom_yaw_rate_pid_read.ki;
  //          yaw_rate_pid.kd = eeprom_yaw_rate_pid_read.kd;


  printf("\n");
 8003cd0:	200a      	movs	r0, #10
 8003cd2:	f00d fde7 	bl	80118a4 <putchar>

  /* *********** iBus Calibration Check ************ */

  while (Is_iBus_Received() == 0) {
 8003cd6:	e00b      	b.n	8003cf0 <main+0x438>
	  Buzzer_On(3000);
 8003cd8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003cdc:	f7fc fd70 	bl	80007c0 <Buzzer_On>
	  HAL_Delay(200);
 8003ce0:	20c8      	movs	r0, #200	@ 0xc8
 8003ce2:	f002 fe93 	bl	8006a0c <HAL_Delay>
	  Buzzer_Off();
 8003ce6:	f7fc fd93 	bl	8000810 <Buzzer_Off>
	  HAL_Delay(200);
 8003cea:	20c8      	movs	r0, #200	@ 0xc8
 8003cec:	f002 fe8e 	bl	8006a0c <HAL_Delay>
  while (Is_iBus_Received() == 0) {
 8003cf0:	f000 fd3e 	bl	8004770 <Is_iBus_Received>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0ee      	beq.n	8003cd8 <main+0x420>
  }
  if (iBus.SwC == 2000) {
 8003cfa:	4b9a      	ldr	r3, [pc, #616]	@ (8003f64 <main+0x6ac>)
 8003cfc:	899b      	ldrh	r3, [r3, #12]
 8003cfe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003d02:	d144      	bne.n	8003d8e <main+0x4d6>
	  Buzzer_On(1500);
 8003d04:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003d08:	f7fc fd5a 	bl	80007c0 <Buzzer_On>
	  HAL_Delay(200);
 8003d0c:	20c8      	movs	r0, #200	@ 0xc8
 8003d0e:	f002 fe7d 	bl	8006a0c <HAL_Delay>
	  Buzzer_On(2000);
 8003d12:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003d16:	f7fc fd53 	bl	80007c0 <Buzzer_On>
	  HAL_Delay(200);
 8003d1a:	20c8      	movs	r0, #200	@ 0xc8
 8003d1c:	f002 fe76 	bl	8006a0c <HAL_Delay>
	  Buzzer_On(1500);
 8003d20:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003d24:	f7fc fd4c 	bl	80007c0 <Buzzer_On>
	  HAL_Delay(200);
 8003d28:	20c8      	movs	r0, #200	@ 0xc8
 8003d2a:	f002 fe6f 	bl	8006a0c <HAL_Delay>
	  Buzzer_On(2000);
 8003d2e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003d32:	f7fc fd45 	bl	80007c0 <Buzzer_On>
	  HAL_Delay(200);
 8003d36:	20c8      	movs	r0, #200	@ 0xc8
 8003d38:	f002 fe68 	bl	8006a0c <HAL_Delay>
	  Buzzer_Off();
 8003d3c:	f7fc fd68 	bl	8000810 <Buzzer_Off>
	  ESC_Calibration();
 8003d40:	f000 fccc 	bl	80046dc <ESC_Calibration>
	  while (iBus.SwC != 1000) {
 8003d44:	e011      	b.n	8003d6a <main+0x4b2>
		  Is_iBus_Received();
 8003d46:	f000 fd13 	bl	8004770 <Is_iBus_Received>
		  Buzzer_On(1500);
 8003d4a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8003d4e:	f7fc fd37 	bl	80007c0 <Buzzer_On>
		  HAL_Delay(200);
 8003d52:	20c8      	movs	r0, #200	@ 0xc8
 8003d54:	f002 fe5a 	bl	8006a0c <HAL_Delay>
		  Buzzer_On(2000);
 8003d58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003d5c:	f7fc fd30 	bl	80007c0 <Buzzer_On>
		  HAL_Delay(200);
 8003d60:	20c8      	movs	r0, #200	@ 0xc8
 8003d62:	f002 fe53 	bl	8006a0c <HAL_Delay>
		  Buzzer_Off();
 8003d66:	f7fc fd53 	bl	8000810 <Buzzer_Off>
	  while (iBus.SwC != 1000) {
 8003d6a:	4b7e      	ldr	r3, [pc, #504]	@ (8003f64 <main+0x6ac>)
 8003d6c:	899b      	ldrh	r3, [r3, #12]
 8003d6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d72:	d1e8      	bne.n	8003d46 <main+0x48e>

  /* *********** iBus Calibration Check END ************ */

  /* *********** iBus Throttle Check ************ */

  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 8003d74:	e00b      	b.n	8003d8e <main+0x4d6>
	  Buzzer_On(343);
 8003d76:	f240 1057 	movw	r0, #343	@ 0x157
 8003d7a:	f7fc fd21 	bl	80007c0 <Buzzer_On>
	  HAL_Delay(70);
 8003d7e:	2046      	movs	r0, #70	@ 0x46
 8003d80:	f002 fe44 	bl	8006a0c <HAL_Delay>
	  Buzzer_Off();
 8003d84:	f7fc fd44 	bl	8000810 <Buzzer_Off>
	  HAL_Delay(70);
 8003d88:	2046      	movs	r0, #70	@ 0x46
 8003d8a:	f002 fe3f 	bl	8006a0c <HAL_Delay>
  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000) {
 8003d8e:	f000 fc59 	bl	8004644 <Is_iBus_Throttle_Min>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ee      	beq.n	8003d76 <main+0x4be>
 8003d98:	4b72      	ldr	r3, [pc, #456]	@ (8003f64 <main+0x6ac>)
 8003d9a:	891b      	ldrh	r3, [r3, #8]
 8003d9c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003da0:	d0e9      	beq.n	8003d76 <main+0x4be>

  /* *********** iBus Throttle Check END ************ */

  /* *********** ESC Startup START ************ */

  __HAL_TIM_DISABLE(&htim5); // Reset timers
 8003da2:	4b71      	ldr	r3, [pc, #452]	@ (8003f68 <main+0x6b0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10f      	bne.n	8003dd2 <main+0x51a>
 8003db2:	4b6d      	ldr	r3, [pc, #436]	@ (8003f68 <main+0x6b0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d107      	bne.n	8003dd2 <main+0x51a>
 8003dc2:	4b69      	ldr	r3, [pc, #420]	@ (8003f68 <main+0x6b0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b67      	ldr	r3, [pc, #412]	@ (8003f68 <main+0x6b0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
  HAL_Delay(10);
 8003dd2:	200a      	movs	r0, #10
 8003dd4:	f002 fe1a 	bl	8006a0c <HAL_Delay>
  dshot_init(DSHOT600);
 8003dd8:	2002      	movs	r0, #2
 8003dda:	f7fd fd47 	bl	800186c <dshot_init>
  main_led(0, 255, 0, 0, 1);
 8003dde:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003de2:	2300      	movs	r3, #0
 8003de4:	2200      	movs	r2, #0
 8003de6:	21ff      	movs	r1, #255	@ 0xff
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7ff f829 	bl	8002e40 <main_led>

  // Arming sequence: Send 0 for 3 seconds
  for (uint32_t i = 0; i < 3000; i++) {
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003df4:	e00a      	b.n	8003e0c <main+0x554>
	  dshot_write(my_motor_value);
 8003df6:	485d      	ldr	r0, [pc, #372]	@ (8003f6c <main+0x6b4>)
 8003df8:	f7fd fd49 	bl	800188e <dshot_write>
	  HAL_Delay(1);
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	f002 fe05 	bl	8006a0c <HAL_Delay>
  for (uint32_t i = 0; i < 3000; i++) {
 8003e02:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003e06:	3301      	adds	r3, #1
 8003e08:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003e0c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003e10:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d9ee      	bls.n	8003df6 <main+0x53e>
  }

  my_motor_value[0] = 0; // Motor 1
 8003e18:	4b54      	ldr	r3, [pc, #336]	@ (8003f6c <main+0x6b4>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	801a      	strh	r2, [r3, #0]
  my_motor_value[1] = 0; // Motor 2
 8003e1e:	4b53      	ldr	r3, [pc, #332]	@ (8003f6c <main+0x6b4>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	805a      	strh	r2, [r3, #2]
  my_motor_value[2] = 0; // Motor 3
 8003e24:	4b51      	ldr	r3, [pc, #324]	@ (8003f6c <main+0x6b4>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	809a      	strh	r2, [r3, #4]
  my_motor_value[3] = 0; // Motor 4
 8003e2a:	4b50      	ldr	r3, [pc, #320]	@ (8003f6c <main+0x6b4>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	80da      	strh	r2, [r3, #6]

  main_led(0, 100, 0, 155, 1);
 8003e30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003e34:	239b      	movs	r3, #155	@ 0x9b
 8003e36:	2200      	movs	r2, #0
 8003e38:	2164      	movs	r1, #100	@ 0x64
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7ff f800 	bl	8002e40 <main_led>

  /* *********** ESC Startup END ************ */

  LL_TIM_EnableCounter(TIM7);
 8003e40:	484b      	ldr	r0, [pc, #300]	@ (8003f70 <main+0x6b8>)
 8003e42:	f7ff fc3f 	bl	80036c4 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM7);
 8003e46:	484a      	ldr	r0, [pc, #296]	@ (8003f70 <main+0x6b8>)
 8003e48:	f7ff fc4c 	bl	80036e4 <LL_TIM_EnableIT_UPDATE>

  if(ICM42688P_Initialization() == 0)
 8003e4c:	f7fe fe08 	bl	8002a60 <ICM42688P_Initialization>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <main+0x5a4>
  {
	  printf("=== Sensor Ready ===\n\n");
 8003e56:	4847      	ldr	r0, [pc, #284]	@ (8003f74 <main+0x6bc>)
 8003e58:	f00d fd82 	bl	8011960 <puts>

  }



  HMC5883L_Init();
 8003e5c:	f7fe fb0a 	bl	8002474 <HMC5883L_Init>
  uint8_t hmc_id = HMC5883L_ReadReg(HMC5883L_ID_A);
 8003e60:	200a      	movs	r0, #10
 8003e62:	f7fe fae9 	bl	8002438 <HMC5883L_ReadReg>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
  printf("HMC5883L ID: %c\n", hmc_id);
 8003e6c:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8003e70:	4619      	mov	r1, r3
 8003e72:	4841      	ldr	r0, [pc, #260]	@ (8003f78 <main+0x6c0>)
 8003e74:	f00d fd04 	bl	8011880 <iprintf>
  printf("\n");
 8003e78:	200a      	movs	r0, #10
 8003e7a:	f00d fd13 	bl	80118a4 <putchar>
//  ICM42688P_WriteByte(0x16, (gyro_y_offset*-2));
//
//  ICM42688P_WriteByte(0x17, (gyro_z_offset*-2)>>8);
//  ICM42688P_WriteByte(0x18, (gyro_z_offset*-2));

  main_led(0, 0, 0, 255, 1);
 8003e7e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003e82:	23ff      	movs	r3, #255	@ 0xff
 8003e84:	2200      	movs	r2, #0
 8003e86:	2100      	movs	r1, #0
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7fe ffd9 	bl	8002e40 <main_led>
  HAL_Delay(500);
 8003e8e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e92:	f002 fdbb 	bl	8006a0c <HAL_Delay>
  main_led(0, 0, 0, 255, 0);
 8003e96:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8003f7c <main+0x6c4>
 8003e9a:	23ff      	movs	r3, #255	@ 0xff
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	f7fe ffcd 	bl	8002e40 <main_led>
  HAL_Delay(500);
 8003ea6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003eaa:	f002 fdaf 	bl	8006a0c <HAL_Delay>
  main_led(0, 0, 0, 255, 1);
 8003eae:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003eb2:	23ff      	movs	r3, #255	@ 0xff
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	2000      	movs	r0, #0
 8003eba:	f7fe ffc1 	bl	8002e40 <main_led>
  HAL_Delay(500);
 8003ebe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ec2:	f002 fda3 	bl	8006a0c <HAL_Delay>
  main_led(0, 0, 0, 255, 0);
 8003ec6:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8003f7c <main+0x6c4>
 8003eca:	23ff      	movs	r3, #255	@ 0xff
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2100      	movs	r1, #0
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	f7fe ffb5 	bl	8002e40 <main_led>
  HAL_Delay(500);
 8003ed6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003eda:	f002 fd97 	bl	8006a0c <HAL_Delay>
  main_led(0, 0, 255, 0, 1);
 8003ede:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	22ff      	movs	r2, #255	@ 0xff
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	2000      	movs	r0, #0
 8003eea:	f7fe ffa9 	bl	8002e40 <main_led>
  HAL_Delay(500);
 8003eee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ef2:	f002 fd8b 	bl	8006a0c <HAL_Delay>
  main_led(0, 0, 255, 0, 0);
 8003ef6:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8003f7c <main+0x6c4>
 8003efa:	2300      	movs	r3, #0
 8003efc:	22ff      	movs	r2, #255	@ 0xff
 8003efe:	2100      	movs	r1, #0
 8003f00:	2000      	movs	r0, #0
 8003f02:	f7fe ff9d 	bl	8002e40 <main_led>
  HAL_Delay(500);
 8003f06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003f0a:	f002 fd7f 	bl	8006a0c <HAL_Delay>

  main_led(0, 0, 255, 0, 0.1);
 8003f0e:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8003f80 <main+0x6c8>
 8003f12:	2300      	movs	r3, #0
 8003f14:	22ff      	movs	r2, #255	@ 0xff
 8003f16:	2100      	movs	r1, #0
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f7fe ff91 	bl	8002e40 <main_led>


  while (Is_iBus_Throttle_Armed() == 0) {
 8003f1e:	e040      	b.n	8003fa2 <main+0x6ea>
	  // Debug: Print loop status
	  static uint32_t last_loop_print = 0;
	  if ((HAL_GetTick() - last_loop_print) >= 1000) {
 8003f20:	f002 fd68 	bl	80069f4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b17      	ldr	r3, [pc, #92]	@ (8003f84 <main+0x6cc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f30:	d304      	bcc.n	8003f3c <main+0x684>
		  last_loop_print = HAL_GetTick();
 8003f32:	f002 fd5f 	bl	80069f4 <HAL_GetTick>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a12      	ldr	r2, [pc, #72]	@ (8003f84 <main+0x6cc>)
 8003f3a:	6013      	str	r3, [r2, #0]
	  }

	  //	  calibration_task(); // Always call calibration_task
	  dshot_write(my_motor_value);
 8003f3c:	480b      	ldr	r0, [pc, #44]	@ (8003f6c <main+0x6b4>)
 8003f3e:	f7fd fca6 	bl	800188e <dshot_write>
	  if (is_cmd_mode()) {
 8003f42:	f7fc fc99 	bl	8000878 <is_cmd_mode>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01d      	beq.n	8003f88 <main+0x6d0>
		  dshot_write(my_motor_value);
 8003f4c:	4807      	ldr	r0, [pc, #28]	@ (8003f6c <main+0x6b4>)
 8003f4e:	f7fd fc9e 	bl	800188e <dshot_write>
		  continue; // Skip all other tasks in command mode
 8003f52:	e026      	b.n	8003fa2 <main+0x6ea>
 8003f54:	080161b4 	.word	0x080161b4
 8003f58:	24000674 	.word	0x24000674
 8003f5c:	080161d4 	.word	0x080161d4
 8003f60:	08016240 	.word	0x08016240
 8003f64:	240004a8 	.word	0x240004a8
 8003f68:	2400082c 	.word	0x2400082c
 8003f6c:	24000684 	.word	0x24000684
 8003f70:	40001400 	.word	0x40001400
 8003f74:	08016260 	.word	0x08016260
 8003f78:	08016278 	.word	0x08016278
 8003f7c:	00000000 	.word	0x00000000
 8003f80:	3dcccccd 	.word	0x3dcccccd
 8003f84:	240006a4 	.word	0x240006a4
	  }

	  if (tim7_20ms_flag == 1 && tim7_100ms_flag != 1) {
 8003f88:	4bc1      	ldr	r3, [pc, #772]	@ (8004290 <main+0x9d8>)
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d108      	bne.n	8003fa2 <main+0x6ea>
 8003f90:	4bc0      	ldr	r3, [pc, #768]	@ (8004294 <main+0x9dc>)
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d004      	beq.n	8003fa2 <main+0x6ea>
		  tim7_20ms_flag = 0;
 8003f98:	4bbd      	ldr	r3, [pc, #756]	@ (8004290 <main+0x9d8>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	801a      	strh	r2, [r3, #0]
		  check_command_timeout();
 8003f9e:	f000 fc07 	bl	80047b0 <check_command_timeout>
  while (Is_iBus_Throttle_Armed() == 0) {
 8003fa2:	f000 fb75 	bl	8004690 <Is_iBus_Throttle_Armed>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0b9      	beq.n	8003f20 <main+0x668>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(tim7_1ms_flag == 1)
 8003fac:	4bba      	ldr	r3, [pc, #744]	@ (8004298 <main+0x9e0>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 80db 	bne.w	800416c <main+0x8b4>
	  {
		  tim7_1ms_flag = 0;
 8003fb6:	4bb8      	ldr	r3, [pc, #736]	@ (8004298 <main+0x9e0>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	801a      	strh	r2, [r3, #0]

//		  pitch_reference = (iBus.RV - 1500) * 0.1f;
//		  pitch_error = pitch_reference -

		  ccr1 = 240 + (((iBus.LV - 1000)*10 + (iBus.RV - 1500)*5 + (iBus.RH - 1500)*5 + (iBus.LH - 1500)*5 ) * 0.176); // back left
 8003fbc:	4bb7      	ldr	r3, [pc, #732]	@ (800429c <main+0x9e4>)
 8003fbe:	889b      	ldrh	r3, [r3, #4]
 8003fc0:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4bb3      	ldr	r3, [pc, #716]	@ (800429c <main+0x9e4>)
 8003fd0:	885b      	ldrh	r3, [r3, #2]
 8003fd2:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	4419      	add	r1, r3
 8003fde:	4baf      	ldr	r3, [pc, #700]	@ (800429c <main+0x9e4>)
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	4419      	add	r1, r3
 8003fee:	4bab      	ldr	r3, [pc, #684]	@ (800429c <main+0x9e4>)
 8003ff0:	88db      	ldrh	r3, [r3, #6]
 8003ff2:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004006:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 8004280 <main+0x9c8>
 800400a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800400e:	ed9f 6b9e 	vldr	d6, [pc, #632]	@ 8004288 <main+0x9d0>
 8004012:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004016:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800401a:	ee17 3a90 	vmov	r3, s15
 800401e:	f8a7 3148 	strh.w	r3, [r7, #328]	@ 0x148
		  ccr2 = 240 + (((iBus.LV - 1000)*10 - (iBus.RV - 1500)*5 + (iBus.RH - 1500)*5 - (iBus.LH - 1500)*5 ) * 0.176); // front left
 8004022:	4b9e      	ldr	r3, [pc, #632]	@ (800429c <main+0x9e4>)
 8004024:	889b      	ldrh	r3, [r3, #4]
 8004026:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4619      	mov	r1, r3
 8004034:	4b99      	ldr	r3, [pc, #612]	@ (800429c <main+0x9e4>)
 8004036:	885b      	ldrh	r3, [r3, #2]
 8004038:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 800403c:	4613      	mov	r3, r2
 800403e:	079b      	lsls	r3, r3, #30
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	4419      	add	r1, r3
 8004048:	4b94      	ldr	r3, [pc, #592]	@ (800429c <main+0x9e4>)
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	4419      	add	r1, r3
 8004058:	4b90      	ldr	r3, [pc, #576]	@ (800429c <main+0x9e4>)
 800405a:	88db      	ldrh	r3, [r3, #6]
 800405c:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8004060:	4613      	mov	r3, r2
 8004062:	079b      	lsls	r3, r3, #30
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	440b      	add	r3, r1
 800406c:	ee07 3a90 	vmov	s15, r3
 8004070:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004074:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8004280 <main+0x9c8>
 8004078:	ee27 7b06 	vmul.f64	d7, d7, d6
 800407c:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8004288 <main+0x9d0>
 8004080:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004084:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004088:	ee17 3a90 	vmov	r3, s15
 800408c:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
		  ccr3 = 240 + (((iBus.LV - 1000)*10 + (iBus.RV - 1500)*5 - (iBus.RH - 1500)*5 - (iBus.LH - 1500)*5 ) * 0.176); // back right
 8004090:	4b82      	ldr	r3, [pc, #520]	@ (800429c <main+0x9e4>)
 8004092:	889b      	ldrh	r3, [r3, #4]
 8004094:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4619      	mov	r1, r3
 80040a2:	4b7e      	ldr	r3, [pc, #504]	@ (800429c <main+0x9e4>)
 80040a4:	885b      	ldrh	r3, [r3, #2]
 80040a6:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	4419      	add	r1, r3
 80040b2:	4b7a      	ldr	r3, [pc, #488]	@ (800429c <main+0x9e4>)
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 80040ba:	4613      	mov	r3, r2
 80040bc:	079b      	lsls	r3, r3, #30
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	4419      	add	r1, r3
 80040c6:	4b75      	ldr	r3, [pc, #468]	@ (800429c <main+0x9e4>)
 80040c8:	88db      	ldrh	r3, [r3, #6]
 80040ca:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 80040ce:	4613      	mov	r3, r2
 80040d0:	079b      	lsls	r3, r3, #30
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	440b      	add	r3, r1
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80040e2:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8004280 <main+0x9c8>
 80040e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040ea:	ed9f 6b67 	vldr	d6, [pc, #412]	@ 8004288 <main+0x9d0>
 80040ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80040f6:	ee17 3a90 	vmov	r3, s15
 80040fa:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
		  ccr4 = 240 + (((iBus.LV - 1000)*10 - (iBus.RV - 1500)*5 - (iBus.RH - 1500)*5 + (iBus.LH - 1500)*5 ) * 0.176); // front right
 80040fe:	4b67      	ldr	r3, [pc, #412]	@ (800429c <main+0x9e4>)
 8004100:	889b      	ldrh	r3, [r3, #4]
 8004102:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4619      	mov	r1, r3
 8004110:	4b62      	ldr	r3, [pc, #392]	@ (800429c <main+0x9e4>)
 8004112:	885b      	ldrh	r3, [r3, #2]
 8004114:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8004118:	4613      	mov	r3, r2
 800411a:	079b      	lsls	r3, r3, #30
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	4419      	add	r1, r3
 8004124:	4b5d      	ldr	r3, [pc, #372]	@ (800429c <main+0x9e4>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 800412c:	4613      	mov	r3, r2
 800412e:	079b      	lsls	r3, r3, #30
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	4419      	add	r1, r3
 8004138:	4b58      	ldr	r3, [pc, #352]	@ (800429c <main+0x9e4>)
 800413a:	88db      	ldrh	r3, [r3, #6]
 800413c:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	440b      	add	r3, r1
 8004148:	ee07 3a90 	vmov	s15, r3
 800414c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004150:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8004280 <main+0x9c8>
 8004154:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004158:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8004288 <main+0x9d0>
 800415c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004160:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004164:	ee17 3a90 	vmov	r3, s15
 8004168:	f8a7 3142 	strh.w	r3, [r7, #322]	@ 0x142

	  }

	  if(tim7_2ms_flag == 1)
 800416c:	4b4c      	ldr	r3, [pc, #304]	@ (80042a0 <main+0x9e8>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d102      	bne.n	800417a <main+0x8c2>
	  {
		  tim7_2ms_flag = 0;
 8004174:	4b4a      	ldr	r3, [pc, #296]	@ (80042a0 <main+0x9e8>)
 8004176:	2200      	movs	r2, #0
 8004178:	801a      	strh	r2, [r3, #0]
//				  (int)(ICM42688P.gyro_x), (int)(ICM42688P.gyro_y), (int)(ICM42688P.gyro_z));
//		  printf("%d\t%d\t%d\t%d\t\n", my_motor_value[2], my_motor_value[3], my_motor_value[1], my_motor_value[0]);

	  }

	  if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 800417a:	4b48      	ldr	r3, [pc, #288]	@ (800429c <main+0x9e4>)
 800417c:	891b      	ldrh	r3, [r3, #8]
 800417e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004182:	d125      	bne.n	80041d0 <main+0x918>
 8004184:	f8b7 314c 	ldrh.w	r3, [r7, #332]	@ 0x14c
 8004188:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800418c:	d020      	beq.n	80041d0 <main+0x918>
	  {
		  if(iBus.LV < 1010)
 800418e:	4b43      	ldr	r3, [pc, #268]	@ (800429c <main+0x9e4>)
 8004190:	889b      	ldrh	r3, [r3, #4]
 8004192:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8004196:	4293      	cmp	r3, r2
 8004198:	d810      	bhi.n	80041bc <main+0x904>
		  {
			  motor_arming_flag = 1;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 80041a0:	e016      	b.n	80041d0 <main+0x918>
		  }
		  else{
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
			  {
				  Buzzer_On(1200);
 80041a2:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80041a6:	f7fc fb0b 	bl	80007c0 <Buzzer_On>
				  HAL_Delay(300);
 80041aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80041ae:	f002 fc2d 	bl	8006a0c <HAL_Delay>
				  Buzzer_Off();
 80041b2:	f7fc fb2d 	bl	8000810 <Buzzer_Off>
				  HAL_Delay(70);
 80041b6:	2046      	movs	r0, #70	@ 0x46
 80041b8:	f002 fc28 	bl	8006a0c <HAL_Delay>
			  while(Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000)
 80041bc:	f000 fa42 	bl	8004644 <Is_iBus_Throttle_Min>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ed      	beq.n	80041a2 <main+0x8ea>
 80041c6:	4b35      	ldr	r3, [pc, #212]	@ (800429c <main+0x9e4>)
 80041c8:	891b      	ldrh	r3, [r3, #8]
 80041ca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80041ce:	d0e8      	beq.n	80041a2 <main+0x8ea>
			  }
		  }
	  }

	  iBus_SwA_Prev = iBus.SwA;
 80041d0:	4b32      	ldr	r3, [pc, #200]	@ (800429c <main+0x9e4>)
 80041d2:	891b      	ldrh	r3, [r3, #8]
 80041d4:	f8a7 314c 	strh.w	r3, [r7, #332]	@ 0x14c

	  if(iBus.SwA != 2000)
 80041d8:	4b30      	ldr	r3, [pc, #192]	@ (800429c <main+0x9e4>)
 80041da:	891b      	ldrh	r3, [r3, #8]
 80041dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80041e0:	d002      	beq.n	80041e8 <main+0x930>
	  {
		  motor_arming_flag = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
	  }

	  if(motor_arming_flag == 1)
 80041e8:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d16d      	bne.n	80042cc <main+0xa14>
	  {
		  if(failsafe_flag == 0)
 80041f0:	4b2c      	ldr	r3, [pc, #176]	@ (80042a4 <main+0x9ec>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d159      	bne.n	80042ac <main+0x9f4>
		  {
			  my_motor_value[2] = ccr1 > 2000 ? 2000 : ccr1 < 240 ? 240 : ccr1;
 80041f8:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 80041fc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004200:	d806      	bhi.n	8004210 <main+0x958>
 8004202:	f8b7 3148 	ldrh.w	r3, [r7, #328]	@ 0x148
 8004206:	2bf0      	cmp	r3, #240	@ 0xf0
 8004208:	bf38      	it	cc
 800420a:	23f0      	movcc	r3, #240	@ 0xf0
 800420c:	b29b      	uxth	r3, r3
 800420e:	e001      	b.n	8004214 <main+0x95c>
 8004210:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004214:	4a24      	ldr	r2, [pc, #144]	@ (80042a8 <main+0x9f0>)
 8004216:	8093      	strh	r3, [r2, #4]
			  my_motor_value[3] = ccr2 > 2000 ? 2000 : ccr2 < 240 ? 240 : ccr2;
 8004218:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 800421c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004220:	d806      	bhi.n	8004230 <main+0x978>
 8004222:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8004226:	2bf0      	cmp	r3, #240	@ 0xf0
 8004228:	bf38      	it	cc
 800422a:	23f0      	movcc	r3, #240	@ 0xf0
 800422c:	b29b      	uxth	r3, r3
 800422e:	e001      	b.n	8004234 <main+0x97c>
 8004230:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004234:	4a1c      	ldr	r2, [pc, #112]	@ (80042a8 <main+0x9f0>)
 8004236:	80d3      	strh	r3, [r2, #6]
			  my_motor_value[1] = ccr3 > 2000 ? 2000 : ccr3 < 240 ? 240 : ccr3;
 8004238:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 800423c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004240:	d806      	bhi.n	8004250 <main+0x998>
 8004242:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8004246:	2bf0      	cmp	r3, #240	@ 0xf0
 8004248:	bf38      	it	cc
 800424a:	23f0      	movcc	r3, #240	@ 0xf0
 800424c:	b29b      	uxth	r3, r3
 800424e:	e001      	b.n	8004254 <main+0x99c>
 8004250:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004254:	4a14      	ldr	r2, [pc, #80]	@ (80042a8 <main+0x9f0>)
 8004256:	8053      	strh	r3, [r2, #2]
			  my_motor_value[0] = ccr4 > 2000 ? 2000 : ccr4 < 240 ? 240 : ccr4;
 8004258:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 800425c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004260:	d806      	bhi.n	8004270 <main+0x9b8>
 8004262:	f8b7 3142 	ldrh.w	r3, [r7, #322]	@ 0x142
 8004266:	2bf0      	cmp	r3, #240	@ 0xf0
 8004268:	bf38      	it	cc
 800426a:	23f0      	movcc	r3, #240	@ 0xf0
 800426c:	b29b      	uxth	r3, r3
 800426e:	e001      	b.n	8004274 <main+0x9bc>
 8004270:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004274:	4a0c      	ldr	r2, [pc, #48]	@ (80042a8 <main+0x9f0>)
 8004276:	8013      	strh	r3, [r2, #0]
			  dshot_write(my_motor_value);
 8004278:	480b      	ldr	r0, [pc, #44]	@ (80042a8 <main+0x9f0>)
 800427a:	f7fd fb08 	bl	800188e <dshot_write>
 800427e:	e034      	b.n	80042ea <main+0xa32>
 8004280:	020c49ba 	.word	0x020c49ba
 8004284:	3fc6872b 	.word	0x3fc6872b
 8004288:	00000000 	.word	0x00000000
 800428c:	406e0000 	.word	0x406e0000
 8004290:	2400072e 	.word	0x2400072e
 8004294:	24000732 	.word	0x24000732
 8004298:	2400072a 	.word	0x2400072a
 800429c:	240004a8 	.word	0x240004a8
 80042a0:	2400072c 	.word	0x2400072c
 80042a4:	24000604 	.word	0x24000604
 80042a8:	24000684 	.word	0x24000684
//			  printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t\n",
//					  iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.SwC, iBus.SwD, iBus.VrA, iBus.VrB);
		  }
		  else
		  {
			  my_motor_value[2] = 0;
 80042ac:	4b9c      	ldr	r3, [pc, #624]	@ (8004520 <main+0xc68>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	809a      	strh	r2, [r3, #4]
			  my_motor_value[3] = 0;
 80042b2:	4b9b      	ldr	r3, [pc, #620]	@ (8004520 <main+0xc68>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	80da      	strh	r2, [r3, #6]
			  my_motor_value[1] = 0;
 80042b8:	4b99      	ldr	r3, [pc, #612]	@ (8004520 <main+0xc68>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	805a      	strh	r2, [r3, #2]
			  my_motor_value[0] = 0;
 80042be:	4b98      	ldr	r3, [pc, #608]	@ (8004520 <main+0xc68>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	801a      	strh	r2, [r3, #0]
			  dshot_write(my_motor_value);
 80042c4:	4896      	ldr	r0, [pc, #600]	@ (8004520 <main+0xc68>)
 80042c6:	f7fd fae2 	bl	800188e <dshot_write>
 80042ca:	e00e      	b.n	80042ea <main+0xa32>
		  }
	  }
	  else
	  {
		  my_motor_value[2] = 0;
 80042cc:	4b94      	ldr	r3, [pc, #592]	@ (8004520 <main+0xc68>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	809a      	strh	r2, [r3, #4]
		  my_motor_value[3] = 0;
 80042d2:	4b93      	ldr	r3, [pc, #588]	@ (8004520 <main+0xc68>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	80da      	strh	r2, [r3, #6]
		  my_motor_value[1] = 0;
 80042d8:	4b91      	ldr	r3, [pc, #580]	@ (8004520 <main+0xc68>)
 80042da:	2200      	movs	r2, #0
 80042dc:	805a      	strh	r2, [r3, #2]
		  my_motor_value[0] = 0;
 80042de:	4b90      	ldr	r3, [pc, #576]	@ (8004520 <main+0xc68>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	801a      	strh	r2, [r3, #0]
		  dshot_write(my_motor_value);
 80042e4:	488e      	ldr	r0, [pc, #568]	@ (8004520 <main+0xc68>)
 80042e6:	f7fd fad2 	bl	800188e <dshot_write>
	  }

	  if(ibus_rx_cplt_flag == 1)
 80042ea:	4b8e      	ldr	r3, [pc, #568]	@ (8004524 <main+0xc6c>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d11f      	bne.n	8004332 <main+0xa7a>
	  {
		  ibus_rx_cplt_flag = 0;
 80042f2:	4b8c      	ldr	r3, [pc, #560]	@ (8004524 <main+0xc6c>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
		  if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 80042f8:	2120      	movs	r1, #32
 80042fa:	488b      	ldr	r0, [pc, #556]	@ (8004528 <main+0xc70>)
 80042fc:	f7fe fe1a 	bl	8002f34 <iBus_Check_CHKSUM>
 8004300:	4603      	mov	r3, r0
 8004302:	2b01      	cmp	r3, #1
 8004304:	d115      	bne.n	8004332 <main+0xa7a>
		  {

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004306:	4989      	ldr	r1, [pc, #548]	@ (800452c <main+0xc74>)
 8004308:	4887      	ldr	r0, [pc, #540]	@ (8004528 <main+0xc70>)
 800430a:	f7fe fe48 	bl	8002f9e <iBus_Parsing>
			  iBus_rx_cnt++;
 800430e:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 8004312:	3301      	adds	r3, #1
 8004314:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b

			  if(iBus_isActiveFailsafe(&iBus) == 1)
 8004318:	4884      	ldr	r0, [pc, #528]	@ (800452c <main+0xc74>)
 800431a:	f7fe ff07 	bl	800312c <iBus_isActiveFailsafe>
 800431e:	4603      	mov	r3, r0
 8004320:	2b01      	cmp	r3, #1
 8004322:	d103      	bne.n	800432c <main+0xa74>
			  {
				  failsafe_flag = 1;
 8004324:	4b82      	ldr	r3, [pc, #520]	@ (8004530 <main+0xc78>)
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	e002      	b.n	8004332 <main+0xa7a>
			  }
			  else
			  {
				  failsafe_flag = 0;
 800432c:	4b80      	ldr	r3, [pc, #512]	@ (8004530 <main+0xc78>)
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
			  //					  iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwC);
			  //			  HAL_Delay(100);
		  }
	  }

	  if(tim7_1000ms_flag == 1)
 8004332:	4b80      	ldr	r3, [pc, #512]	@ (8004534 <main+0xc7c>)
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10c      	bne.n	8004354 <main+0xa9c>
	  {
		  tim7_1000ms_flag = 0;
 800433a:	4b7e      	ldr	r3, [pc, #504]	@ (8004534 <main+0xc7c>)
 800433c:	2200      	movs	r2, #0
 800433e:	801a      	strh	r2, [r3, #0]

		  if(iBus_rx_cnt == 0)
 8004340:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <main+0xa96>
		  {
			  failsafe_flag = 2;
 8004348:	4b79      	ldr	r3, [pc, #484]	@ (8004530 <main+0xc78>)
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
		  }
		  iBus_rx_cnt = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
	  }

	  if(ICM42688P_DataReady() == 1)
 8004354:	f7fe fc6c 	bl	8002c30 <ICM42688P_DataReady>
 8004358:	4603      	mov	r3, r0
 800435a:	2b01      	cmp	r3, #1
 800435c:	f47f ae26 	bne.w	8003fac <main+0x6f4>
	  {

		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8004360:	2108      	movs	r1, #8
 8004362:	4875      	ldr	r0, [pc, #468]	@ (8004538 <main+0xc80>)
 8004364:	f005 f9d9 	bl	800971a <HAL_GPIO_TogglePin>

		  ICM42688P_Get6AxisRawData(&ICM42688P.acc_x_raw, &ICM42688P.gyro_x_raw);
 8004368:	4974      	ldr	r1, [pc, #464]	@ (800453c <main+0xc84>)
 800436a:	4875      	ldr	r0, [pc, #468]	@ (8004540 <main+0xc88>)
 800436c:	f7fe fc10 	bl	8002b90 <ICM42688P_Get6AxisRawData>

		  // Apply gyro offsets in software (subtract offsets from raw data)
		  int16_t gyro_x_corrected = ICM42688P.gyro_x_raw + gyro_offsets_lsb[0];	//  8
 8004370:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <main+0xc88>)
 8004372:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004376:	b29a      	uxth	r2, r3
 8004378:	4b72      	ldr	r3, [pc, #456]	@ (8004544 <main+0xc8c>)
 800437a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800437e:	b29b      	uxth	r3, r3
 8004380:	4413      	add	r3, r2
 8004382:	b29b      	uxth	r3, r3
 8004384:	f8a7 3138 	strh.w	r3, [r7, #312]	@ 0x138
		  int16_t gyro_y_corrected = ICM42688P.gyro_y_raw + gyro_offsets_lsb[1];	//  4
 8004388:	4b6d      	ldr	r3, [pc, #436]	@ (8004540 <main+0xc88>)
 800438a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800438e:	b29a      	uxth	r2, r3
 8004390:	4b6c      	ldr	r3, [pc, #432]	@ (8004544 <main+0xc8c>)
 8004392:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004396:	b29b      	uxth	r3, r3
 8004398:	4413      	add	r3, r2
 800439a:	b29b      	uxth	r3, r3
 800439c:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
		  int16_t gyro_z_corrected = ICM42688P.gyro_z_raw + gyro_offsets_lsb[2];	// -2
 80043a0:	4b67      	ldr	r3, [pc, #412]	@ (8004540 <main+0xc88>)
 80043a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	4b66      	ldr	r3, [pc, #408]	@ (8004544 <main+0xc8c>)
 80043aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134

		  ICM42688P.gyro_x = gyro_x_corrected * 2000.f / 32768.f;
 80043b8:	f9b7 3138 	ldrsh.w	r3, [r7, #312]	@ 0x138
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043c4:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8004548 <main+0xc90>
 80043c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043cc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800454c <main+0xc94>
 80043d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004540 <main+0xc88>)
 80043d6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		  ICM42688P.gyro_y = gyro_y_corrected * 2000.f / 32768.f;
 80043da:	f9b7 3136 	ldrsh.w	r3, [r7, #310]	@ 0x136
 80043de:	ee07 3a90 	vmov	s15, r3
 80043e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e6:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8004548 <main+0xc90>
 80043ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043ee:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800454c <main+0xc94>
 80043f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043f6:	4b52      	ldr	r3, [pc, #328]	@ (8004540 <main+0xc88>)
 80043f8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		  ICM42688P.gyro_z = gyro_z_corrected * 2000.f / 32768.f;
 80043fc:	f9b7 3134 	ldrsh.w	r3, [r7, #308]	@ 0x134
 8004400:	ee07 3a90 	vmov	s15, r3
 8004404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004408:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8004548 <main+0xc90>
 800440c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004410:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800454c <main+0xc94>
 8004414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004418:	4b49      	ldr	r3, [pc, #292]	@ (8004540 <main+0xc88>)
 800441a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		  ICM42688P.acc_x = ICM42688P.acc_x_raw * 0.0004883f;
 800441e:	4b48      	ldr	r3, [pc, #288]	@ (8004540 <main+0xc88>)
 8004420:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004424:	ee07 3a90 	vmov	s15, r3
 8004428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800442c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8004550 <main+0xc98>
 8004430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004434:	4b42      	ldr	r3, [pc, #264]	@ (8004540 <main+0xc88>)
 8004436:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM42688P.acc_y = ICM42688P.acc_y_raw * 0.0004883f;
 800443a:	4b41      	ldr	r3, [pc, #260]	@ (8004540 <main+0xc88>)
 800443c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004440:	ee07 3a90 	vmov	s15, r3
 8004444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004448:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8004550 <main+0xc98>
 800444c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004450:	4b3b      	ldr	r3, [pc, #236]	@ (8004540 <main+0xc88>)
 8004452:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM42688P.acc_z = ICM42688P.acc_z_raw * 0.0004883f;
 8004456:	4b3a      	ldr	r3, [pc, #232]	@ (8004540 <main+0xc88>)
 8004458:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800445c:	ee07 3a90 	vmov	s15, r3
 8004460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004464:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8004550 <main+0xc98>
 8004468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446c:	4b34      	ldr	r3, [pc, #208]	@ (8004540 <main+0xc88>)
 800446e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		  ComplementaryFilter_Update(&q, ICM42688P.gyro_x, ICM42688P.gyro_y, ICM42688P.gyro_z,
 8004472:	4b33      	ldr	r3, [pc, #204]	@ (8004540 <main+0xc88>)
 8004474:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004478:	4b31      	ldr	r3, [pc, #196]	@ (8004540 <main+0xc88>)
 800447a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800447e:	4b30      	ldr	r3, [pc, #192]	@ (8004540 <main+0xc88>)
 8004480:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8004484:	4b2e      	ldr	r3, [pc, #184]	@ (8004540 <main+0xc88>)
 8004486:	ed93 6a07 	vldr	s12, [r3, #28]
 800448a:	4b2d      	ldr	r3, [pc, #180]	@ (8004540 <main+0xc88>)
 800448c:	edd3 5a08 	vldr	s11, [r3, #32]
 8004490:	4b2b      	ldr	r3, [pc, #172]	@ (8004540 <main+0xc88>)
 8004492:	ed93 5a09 	vldr	s10, [r3, #36]	@ 0x24
 8004496:	4b2f      	ldr	r3, [pc, #188]	@ (8004554 <main+0xc9c>)
 8004498:	edd3 4a00 	vldr	s9, [r3]
 800449c:	eeb0 3a64 	vmov.f32	s6, s9
 80044a0:	eef0 2a45 	vmov.f32	s5, s10
 80044a4:	eeb0 2a65 	vmov.f32	s4, s11
 80044a8:	eef0 1a46 	vmov.f32	s3, s12
 80044ac:	eeb0 1a66 	vmov.f32	s2, s13
 80044b0:	eef0 0a47 	vmov.f32	s1, s14
 80044b4:	eeb0 0a67 	vmov.f32	s0, s15
 80044b8:	4827      	ldr	r0, [pc, #156]	@ (8004558 <main+0xca0>)
 80044ba:	f7fd fe93 	bl	80021e4 <ComplementaryFilter_Update>
				  ICM42688P.acc_x, ICM42688P.acc_y, ICM42688P.acc_z, dt);

		  Quaternion_ToEuler(&q, &roll, &pitch);
 80044be:	4a27      	ldr	r2, [pc, #156]	@ (800455c <main+0xca4>)
 80044c0:	4927      	ldr	r1, [pc, #156]	@ (8004560 <main+0xca8>)
 80044c2:	4825      	ldr	r0, [pc, #148]	@ (8004558 <main+0xca0>)
 80044c4:	f7fd ff3e 	bl	8002344 <Quaternion_ToEuler>

//		  	printf("Pitch: %.4f\r\n", pitch);

		  roll *= 180.0f/M_PI;
 80044c8:	4b25      	ldr	r3, [pc, #148]	@ (8004560 <main+0xca8>)
 80044ca:	edd3 7a00 	vldr	s15, [r3]
 80044ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044d2:	ed9f 6b11 	vldr	d6, [pc, #68]	@ 8004518 <main+0xc60>
 80044d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80044da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80044de:	4b20      	ldr	r3, [pc, #128]	@ (8004560 <main+0xca8>)
 80044e0:	edc3 7a00 	vstr	s15, [r3]
		  pitch *= 180.0f/M_PI;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <main+0xca4>)
 80044e6:	edd3 7a00 	vldr	s15, [r3]
 80044ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044ee:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8004518 <main+0xc60>
 80044f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80044f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80044fa:	4b18      	ldr	r3, [pc, #96]	@ (800455c <main+0xca4>)
 80044fc:	edc3 7a00 	vstr	s15, [r3]

		  printf("%.4f\r\n", ICM42688P.gyro_x);
 8004500:	4b0f      	ldr	r3, [pc, #60]	@ (8004540 <main+0xc88>)
 8004502:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004506:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800450a:	ec53 2b17 	vmov	r2, r3, d7
 800450e:	4815      	ldr	r0, [pc, #84]	@ (8004564 <main+0xcac>)
 8004510:	f00d f9b6 	bl	8011880 <iprintf>
	  if(tim7_1ms_flag == 1)
 8004514:	e54a      	b.n	8003fac <main+0x6f4>
 8004516:	bf00      	nop
 8004518:	1a63c1f8 	.word	0x1a63c1f8
 800451c:	404ca5dc 	.word	0x404ca5dc
 8004520:	24000684 	.word	0x24000684
 8004524:	24000728 	.word	0x24000728
 8004528:	24000708 	.word	0x24000708
 800452c:	240004a8 	.word	0x240004a8
 8004530:	24000604 	.word	0x24000604
 8004534:	24000736 	.word	0x24000736
 8004538:	58021000 	.word	0x58021000
 800453c:	24000330 	.word	0x24000330
 8004540:	24000328 	.word	0x24000328
 8004544:	24000008 	.word	0x24000008
 8004548:	44fa0000 	.word	0x44fa0000
 800454c:	47000000 	.word	0x47000000
 8004550:	3a000142 	.word	0x3a000142
 8004554:	24000004 	.word	0x24000004
 8004558:	24000694 	.word	0x24000694
 800455c:	24000690 	.word	0x24000690
 8004560:	2400068c 	.word	0x2400068c
 8004564:	0801628c 	.word	0x0801628c

08004568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b09c      	sub	sp, #112	@ 0x70
 800456c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800456e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004572:	224c      	movs	r2, #76	@ 0x4c
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f00d fb1a 	bl	8011bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800457c:	1d3b      	adds	r3, r7, #4
 800457e:	2220      	movs	r2, #32
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f00d fb14 	bl	8011bb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004588:	2002      	movs	r0, #2
 800458a:	f007 f88f 	bl	800b6ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800458e:	2300      	movs	r3, #0
 8004590:	603b      	str	r3, [r7, #0]
 8004592:	4b2b      	ldr	r3, [pc, #172]	@ (8004640 <SystemClock_Config+0xd8>)
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	4a2a      	ldr	r2, [pc, #168]	@ (8004640 <SystemClock_Config+0xd8>)
 8004598:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800459c:	6193      	str	r3, [r2, #24]
 800459e:	4b28      	ldr	r3, [pc, #160]	@ (8004640 <SystemClock_Config+0xd8>)
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80045aa:	bf00      	nop
 80045ac:	4b24      	ldr	r3, [pc, #144]	@ (8004640 <SystemClock_Config+0xd8>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045b8:	d1f8      	bne.n	80045ac <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045c4:	2302      	movs	r3, #2
 80045c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045c8:	2302      	movs	r3, #2
 80045ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80045cc:	2302      	movs	r3, #2
 80045ce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80045d0:	232c      	movs	r3, #44	@ 0x2c
 80045d2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80045d4:	2301      	movs	r3, #1
 80045d6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80045d8:	2303      	movs	r3, #3
 80045da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80045dc:	2302      	movs	r3, #2
 80045de:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80045e0:	230c      	movs	r3, #12
 80045e2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f007 f895 	bl	800b720 <HAL_RCC_OscConfig>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80045fc:	f000 f932 	bl	8004864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004600:	233f      	movs	r3, #63	@ 0x3f
 8004602:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004604:	2303      	movs	r3, #3
 8004606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800460c:	2308      	movs	r3, #8
 800460e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004610:	2340      	movs	r3, #64	@ 0x40
 8004612:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004614:	2340      	movs	r3, #64	@ 0x40
 8004616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800461c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800461e:	2340      	movs	r3, #64	@ 0x40
 8004620:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004622:	1d3b      	adds	r3, r7, #4
 8004624:	2103      	movs	r1, #3
 8004626:	4618      	mov	r0, r3
 8004628:	f007 fc54 	bl	800bed4 <HAL_RCC_ClockConfig>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8004632:	f000 f917 	bl	8004864 <Error_Handler>
  }
}
 8004636:	bf00      	nop
 8004638:	3770      	adds	r7, #112	@ 0x70
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	58024800 	.word	0x58024800

08004644 <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */

int Is_iBus_Throttle_Min(void){
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8004648:	4b0e      	ldr	r3, [pc, #56]	@ (8004684 <Is_iBus_Throttle_Min+0x40>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d115      	bne.n	800467c <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8004650:	4b0c      	ldr	r3, [pc, #48]	@ (8004684 <Is_iBus_Throttle_Min+0x40>)
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8004656:	2120      	movs	r1, #32
 8004658:	480b      	ldr	r0, [pc, #44]	@ (8004688 <Is_iBus_Throttle_Min+0x44>)
 800465a:	f7fe fc6b 	bl	8002f34 <iBus_Check_CHKSUM>
 800465e:	4603      	mov	r3, r0
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10b      	bne.n	800467c <Is_iBus_Throttle_Min+0x38>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004664:	4909      	ldr	r1, [pc, #36]	@ (800468c <Is_iBus_Throttle_Min+0x48>)
 8004666:	4808      	ldr	r0, [pc, #32]	@ (8004688 <Is_iBus_Throttle_Min+0x44>)
 8004668:	f7fe fc99 	bl	8002f9e <iBus_Parsing>
			if(iBus.LV < 1010) return 1;
 800466c:	4b07      	ldr	r3, [pc, #28]	@ (800468c <Is_iBus_Throttle_Min+0x48>)
 800466e:	889b      	ldrh	r3, [r3, #4]
 8004670:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8004674:	4293      	cmp	r3, r2
 8004676:	d801      	bhi.n	800467c <Is_iBus_Throttle_Min+0x38>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <Is_iBus_Throttle_Min+0x3a>
		}
	}
	return 0;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	24000728 	.word	0x24000728
 8004688:	24000708 	.word	0x24000708
 800468c:	240004a8 	.word	0x240004a8

08004690 <Is_iBus_Throttle_Armed>:

int Is_iBus_Throttle_Armed(void){
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8004694:	4b0e      	ldr	r3, [pc, #56]	@ (80046d0 <Is_iBus_Throttle_Armed+0x40>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d115      	bne.n	80046c8 <Is_iBus_Throttle_Armed+0x38>
		ibus_rx_cplt_flag = 0;
 800469c:	4b0c      	ldr	r3, [pc, #48]	@ (80046d0 <Is_iBus_Throttle_Armed+0x40>)
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 80046a2:	2120      	movs	r1, #32
 80046a4:	480b      	ldr	r0, [pc, #44]	@ (80046d4 <Is_iBus_Throttle_Armed+0x44>)
 80046a6:	f7fe fc45 	bl	8002f34 <iBus_Check_CHKSUM>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d10b      	bne.n	80046c8 <Is_iBus_Throttle_Armed+0x38>
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80046b0:	4909      	ldr	r1, [pc, #36]	@ (80046d8 <Is_iBus_Throttle_Armed+0x48>)
 80046b2:	4808      	ldr	r0, [pc, #32]	@ (80046d4 <Is_iBus_Throttle_Armed+0x44>)
 80046b4:	f7fe fc73 	bl	8002f9e <iBus_Parsing>
			if(iBus.SwA >= 1900)  // HIGH = armed
 80046b8:	4b07      	ldr	r3, [pc, #28]	@ (80046d8 <Is_iBus_Throttle_Armed+0x48>)
 80046ba:	891b      	ldrh	r3, [r3, #8]
 80046bc:	f240 726b 	movw	r2, #1899	@ 0x76b
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <Is_iBus_Throttle_Armed+0x38>
				return 1;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <Is_iBus_Throttle_Armed+0x3a>
		}
	}
	return 0;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	24000728 	.word	0x24000728
 80046d4:	24000708 	.word	0x24000708
 80046d8:	240004a8 	.word	0x240004a8

080046dc <ESC_Calibration>:

void ESC_Calibration(void){
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0

	   TIM5->CCR1 = 2000;
 80046e0:	4b20      	ldr	r3, [pc, #128]	@ (8004764 <ESC_Calibration+0x88>)
 80046e2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80046e6:	635a      	str	r2, [r3, #52]	@ 0x34
	   TIM5->CCR2 = 2000;
 80046e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004764 <ESC_Calibration+0x88>)
 80046ea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80046ee:	639a      	str	r2, [r3, #56]	@ 0x38
	   TIM5->CCR3 = 2000;
 80046f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004764 <ESC_Calibration+0x88>)
 80046f2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80046f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	   TIM5->CCR4 = 2000;
 80046f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004764 <ESC_Calibration+0x88>)
 80046fa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40

	   main_led(0, 255, 0, 0, 0.1);
 8004700:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8004768 <ESC_Calibration+0x8c>
 8004704:	2300      	movs	r3, #0
 8004706:	2200      	movs	r2, #0
 8004708:	21ff      	movs	r1, #255	@ 0xff
 800470a:	2000      	movs	r0, #0
 800470c:	f7fe fb98 	bl	8002e40 <main_led>

	   HAL_Delay(7000);
 8004710:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8004714:	f002 f97a 	bl	8006a0c <HAL_Delay>

	   TIM5->CCR1 = 1000;
 8004718:	4b12      	ldr	r3, [pc, #72]	@ (8004764 <ESC_Calibration+0x88>)
 800471a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800471e:	635a      	str	r2, [r3, #52]	@ 0x34
	   TIM5->CCR2 = 1000;
 8004720:	4b10      	ldr	r3, [pc, #64]	@ (8004764 <ESC_Calibration+0x88>)
 8004722:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004726:	639a      	str	r2, [r3, #56]	@ 0x38
	   TIM5->CCR3 = 1000;
 8004728:	4b0e      	ldr	r3, [pc, #56]	@ (8004764 <ESC_Calibration+0x88>)
 800472a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800472e:	63da      	str	r2, [r3, #60]	@ 0x3c
	   TIM5->CCR4 = 1000;
 8004730:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <ESC_Calibration+0x88>)
 8004732:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004736:	641a      	str	r2, [r3, #64]	@ 0x40

	   main_led(0, 0, 0, 255, 0.1);
 8004738:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8004768 <ESC_Calibration+0x8c>
 800473c:	23ff      	movs	r3, #255	@ 0xff
 800473e:	2200      	movs	r2, #0
 8004740:	2100      	movs	r1, #0
 8004742:	2000      	movs	r0, #0
 8004744:	f7fe fb7c 	bl	8002e40 <main_led>

	   HAL_Delay(8000);
 8004748:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 800474c:	f002 f95e 	bl	8006a0c <HAL_Delay>

	   main_led(0, 0, 0, 255, 0);
 8004750:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800476c <ESC_Calibration+0x90>
 8004754:	23ff      	movs	r3, #255	@ 0xff
 8004756:	2200      	movs	r2, #0
 8004758:	2100      	movs	r1, #0
 800475a:	2000      	movs	r0, #0
 800475c:	f7fe fb70 	bl	8002e40 <main_led>
}
 8004760:	bf00      	nop
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40000c00 	.word	0x40000c00
 8004768:	3dcccccd 	.word	0x3dcccccd
 800476c:	00000000 	.word	0x00000000

08004770 <Is_iBus_Received>:

int Is_iBus_Received(void){
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8004774:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <Is_iBus_Received+0x34>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10f      	bne.n	800479c <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 800477c:	4b09      	ldr	r3, [pc, #36]	@ (80047a4 <Is_iBus_Received+0x34>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1)
 8004782:	2120      	movs	r1, #32
 8004784:	4808      	ldr	r0, [pc, #32]	@ (80047a8 <Is_iBus_Received+0x38>)
 8004786:	f7fe fbd5 	bl	8002f34 <iBus_Check_CHKSUM>
 800478a:	4603      	mov	r3, r0
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <Is_iBus_Received+0x2c>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004790:	4906      	ldr	r1, [pc, #24]	@ (80047ac <Is_iBus_Received+0x3c>)
 8004792:	4805      	ldr	r0, [pc, #20]	@ (80047a8 <Is_iBus_Received+0x38>)
 8004794:	f7fe fc03 	bl	8002f9e <iBus_Parsing>
			return 1;
 8004798:	2301      	movs	r3, #1
 800479a:	e000      	b.n	800479e <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	24000728 	.word	0x24000728
 80047a8:	24000708 	.word	0x24000708
 80047ac:	240004a8 	.word	0x240004a8

080047b0 <check_command_timeout>:

void check_command_timeout(void) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
	if (cmd_receiving && !is_cmd_mode()) { // Only in normal mode
 80047b4:	4b11      	ldr	r3, [pc, #68]	@ (80047fc <check_command_timeout+0x4c>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01b      	beq.n	80047f6 <check_command_timeout+0x46>
 80047be:	f7fc f85b 	bl	8000878 <is_cmd_mode>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d116      	bne.n	80047f6 <check_command_timeout+0x46>
		if ((HAL_GetTick() - last_char_time) > CMD_TIMEOUT_MS) {
 80047c8:	f002 f914 	bl	80069f4 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004800 <check_command_timeout+0x50>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80047d6:	d90e      	bls.n	80047f6 <check_command_timeout+0x46>
			cmd_receiving = 0;
 80047d8:	4b08      	ldr	r3, [pc, #32]	@ (80047fc <check_command_timeout+0x4c>)
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]
			cmd_index = 0;
 80047de:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <check_command_timeout+0x54>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
			printf("Main: Command timeout at %lu ms\n", HAL_GetTick());
 80047e4:	f002 f906 	bl	80069f4 <HAL_GetTick>
 80047e8:	4603      	mov	r3, r0
 80047ea:	4619      	mov	r1, r3
 80047ec:	4806      	ldr	r0, [pc, #24]	@ (8004808 <check_command_timeout+0x58>)
 80047ee:	f00d f847 	bl	8011880 <iprintf>
			WS2812_Update();
 80047f2:	f7fe fb53 	bl	8002e9c <WS2812_Update>
		}
	}
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	24000779 	.word	0x24000779
 8004800:	2400077c 	.word	0x2400077c
 8004804:	24000778 	.word	0x24000778
 8004808:	08016324 	.word	0x08016324

0800480c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8004812:	463b      	mov	r3, r7
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800481e:	f002 fa29 	bl	8006c74 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004822:	2301      	movs	r3, #1
 8004824:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004826:	2300      	movs	r3, #0
 8004828:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800482e:	231f      	movs	r3, #31
 8004830:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8004832:	2387      	movs	r3, #135	@ 0x87
 8004834:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004836:	2300      	movs	r3, #0
 8004838:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800483a:	2300      	movs	r3, #0
 800483c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800483e:	2301      	movs	r3, #1
 8004840:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004842:	2301      	movs	r3, #1
 8004844:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004846:	2300      	movs	r3, #0
 8004848:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800484e:	463b      	mov	r3, r7
 8004850:	4618      	mov	r0, r3
 8004852:	f002 fa47 	bl	8006ce4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004856:	2004      	movs	r0, #4
 8004858:	f002 fa24 	bl	8006ca4 <HAL_MPU_Enable>

}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004868:	b672      	cpsid	i
}
 800486a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800486c:	bf00      	nop
 800486e:	e7fd      	b.n	800486c <Error_Handler+0x8>

08004870 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8004876:	463b      	mov	r3, r7
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	611a      	str	r2, [r3, #16]
 8004884:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8004886:	4b28      	ldr	r3, [pc, #160]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 8004888:	4a28      	ldr	r2, [pc, #160]	@ (800492c <MX_OCTOSPI1_Init+0xbc>)
 800488a:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800488c:	4b26      	ldr	r3, [pc, #152]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 800488e:	2201      	movs	r2, #1
 8004890:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8004892:	4b25      	ldr	r3, [pc, #148]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 8004894:	2200      	movs	r2, #0
 8004896:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8004898:	4b23      	ldr	r3, [pc, #140]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 800489a:	2200      	movs	r2, #0
 800489c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800489e:	4b22      	ldr	r3, [pc, #136]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048a0:	2217      	movs	r2, #23
 80048a2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80048a4:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048a6:	2202      	movs	r2, #2
 80048a8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80048aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 80048b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80048b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 3-1;
 80048bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048be:	2202      	movs	r2, #2
 80048c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80048c2:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80048c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80048ca:	4b17      	ldr	r3, [pc, #92]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80048d0:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80048d6:	4b14      	ldr	r3, [pc, #80]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048d8:	2208      	movs	r2, #8
 80048da:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80048dc:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048de:	2200      	movs	r2, #0
 80048e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80048e2:	4b11      	ldr	r3, [pc, #68]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80048e8:	480f      	ldr	r0, [pc, #60]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 80048ea:	f005 fd19 	bl	800a320 <HAL_OSPI_Init>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <MX_OCTOSPI1_Init+0x88>
  {
    Error_Handler();
 80048f4:	f7ff ffb6 	bl	8004864 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80048f8:	2301      	movs	r3, #1
 80048fa:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 80048fc:	2301      	movs	r3, #1
 80048fe:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8004900:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004904:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004906:	463b      	mov	r3, r7
 8004908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490c:	4619      	mov	r1, r3
 800490e:	4806      	ldr	r0, [pc, #24]	@ (8004928 <MX_OCTOSPI1_Init+0xb8>)
 8004910:	f005 ff74 	bl	800a7fc <HAL_OSPIM_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <MX_OCTOSPI1_Init+0xae>
  {
    Error_Handler();
 800491a:	f7ff ffa3 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	240006a8 	.word	0x240006a8
 800492c:	52005000 	.word	0x52005000

08004930 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b0bc      	sub	sp, #240	@ 0xf0
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004938:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004948:	f107 0320 	add.w	r3, r7, #32
 800494c:	22b8      	movs	r2, #184	@ 0xb8
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f00d f92d 	bl	8011bb0 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a5d      	ldr	r2, [pc, #372]	@ (8004ad0 <HAL_OSPI_MspInit+0x1a0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	f040 80b2 	bne.w	8004ac6 <HAL_OSPI_MspInit+0x196>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8004962:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 800496e:	2300      	movs	r3, #0
 8004970:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004972:	f107 0320 	add.w	r3, r7, #32
 8004976:	4618      	mov	r0, r3
 8004978:	f007 fddc 	bl	800c534 <HAL_RCCEx_PeriphCLKConfig>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8004982:	f7ff ff6f 	bl	8004864 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8004986:	4b53      	ldr	r3, [pc, #332]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 8004988:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800498c:	4a51      	ldr	r2, [pc, #324]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 800498e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004992:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8004996:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 8004998:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800499c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80049a4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 80049a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049aa:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 80049ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80049b4:	4b47      	ldr	r3, [pc, #284]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 80049b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80049ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80049c2:	4b44      	ldr	r3, [pc, #272]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 80049c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049c8:	4a42      	ldr	r2, [pc, #264]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 80049ca:	f043 0310 	orr.w	r3, r3, #16
 80049ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049d2:	4b40      	ldr	r3, [pc, #256]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 80049d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049e0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 80049e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049e6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 80049e8:	f043 0302 	orr.w	r3, r3, #2
 80049ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049f0:	4b38      	ldr	r3, [pc, #224]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 80049f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049fe:	4b35      	ldr	r3, [pc, #212]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 8004a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a04:	4a33      	ldr	r2, [pc, #204]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 8004a06:	f043 0308 	orr.w	r3, r3, #8
 8004a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a0e:	4b31      	ldr	r3, [pc, #196]	@ (8004ad4 <HAL_OSPI_MspInit+0x1a4>)
 8004a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PD13     ------> OCTOSPIM_P1_IO3
    PB6     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a22:	2302      	movs	r3, #2
 8004a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8004a34:	2309      	movs	r3, #9
 8004a36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a3a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4825      	ldr	r0, [pc, #148]	@ (8004ad8 <HAL_OSPI_MspInit+0x1a8>)
 8004a42:	f004 fca9 	bl	8009398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a46:	2304      	movs	r3, #4
 8004a48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8004a5e:	2309      	movs	r3, #9
 8004a60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a64:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004a68:	4619      	mov	r1, r3
 8004a6a:	481c      	ldr	r0, [pc, #112]	@ (8004adc <HAL_OSPI_MspInit+0x1ac>)
 8004a6c:	f004 fc94 	bl	8009398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004a70:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8004a74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a84:	2303      	movs	r3, #3
 8004a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8004a8a:	2309      	movs	r3, #9
 8004a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a90:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004a94:	4619      	mov	r1, r3
 8004a96:	4812      	ldr	r0, [pc, #72]	@ (8004ae0 <HAL_OSPI_MspInit+0x1b0>)
 8004a98:	f004 fc7e 	bl	8009398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004a9c:	2340      	movs	r3, #64	@ 0x40
 8004a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8004ab4:	230a      	movs	r3, #10
 8004ab6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4806      	ldr	r0, [pc, #24]	@ (8004adc <HAL_OSPI_MspInit+0x1ac>)
 8004ac2:	f004 fc69 	bl	8009398 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8004ac6:	bf00      	nop
 8004ac8:	37f0      	adds	r7, #240	@ 0xf0
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	52005000 	.word	0x52005000
 8004ad4:	58024400 	.word	0x58024400
 8004ad8:	58021000 	.word	0x58021000
 8004adc:	58020400 	.word	0x58020400
 8004ae0:	58020c00 	.word	0x58020c00

08004ae4 <__NVIC_GetPriorityGrouping>:
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae8:	4b04      	ldr	r3, [pc, #16]	@ (8004afc <__NVIC_GetPriorityGrouping+0x18>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	f003 0307 	and.w	r3, r3, #7
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <__NVIC_EnableIRQ>:
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	4603      	mov	r3, r0
 8004b08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	db0b      	blt.n	8004b2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	f003 021f 	and.w	r2, r3, #31
 8004b18:	4907      	ldr	r1, [pc, #28]	@ (8004b38 <__NVIC_EnableIRQ+0x38>)
 8004b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	2001      	movs	r0, #1
 8004b22:	fa00 f202 	lsl.w	r2, r0, r2
 8004b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	e000e100 	.word	0xe000e100

08004b3c <__NVIC_SetPriority>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	6039      	str	r1, [r7, #0]
 8004b46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	db0a      	blt.n	8004b66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	490c      	ldr	r1, [pc, #48]	@ (8004b88 <__NVIC_SetPriority+0x4c>)
 8004b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	440b      	add	r3, r1
 8004b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b64:	e00a      	b.n	8004b7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4908      	ldr	r1, [pc, #32]	@ (8004b8c <__NVIC_SetPriority+0x50>)
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	3b04      	subs	r3, #4
 8004b74:	0112      	lsls	r2, r2, #4
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	440b      	add	r3, r1
 8004b7a:	761a      	strb	r2, [r3, #24]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100
 8004b8c:	e000ed00 	.word	0xe000ed00

08004b90 <NVIC_EncodePriority>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	b089      	sub	sp, #36	@ 0x24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f1c3 0307 	rsb	r3, r3, #7
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	bf28      	it	cs
 8004bae:	2304      	movcs	r3, #4
 8004bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d902      	bls.n	8004bc0 <NVIC_EncodePriority+0x30>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3b03      	subs	r3, #3
 8004bbe:	e000      	b.n	8004bc2 <NVIC_EncodePriority+0x32>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fa01 f303 	lsl.w	r3, r1, r3
 8004be2:	43d9      	mvns	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be8:	4313      	orrs	r3, r2
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3724      	adds	r7, #36	@ 0x24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <LL_SPI_SetStandard>:
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG2, SPI_CFG2_SP, Standard);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f423 1260 	bic.w	r2, r3, #3670016	@ 0x380000
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60da      	str	r2, [r3, #12]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <LL_SPI_SetFIFOThreshold>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CFG1, SPI_CFG1_FTHLV, Threshold);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f423 72f0 	bic.w	r2, r3, #480	@ 0x1e0
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	609a      	str	r2, [r3, #8]
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <LL_SPI_EnableNSSPulseMgt>:
{
 8004c42:	b480      	push	{r7}
 8004c44:	b083      	sub	sp, #12
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CFG2, SPI_CFG2_SSOM);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	60da      	str	r2, [r3, #12]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <LL_AHB4_GRP1_EnableClock>:
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c98 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004c6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004c72:	4909      	ldr	r1, [pc, #36]	@ (8004c98 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8004c7c:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <LL_AHB4_GRP1_EnableClock+0x34>)
 8004c7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4013      	ands	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004c88:	68fb      	ldr	r3, [r7, #12]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	58024400 	.word	0x58024400

08004c9c <LL_APB1_GRP1_EnableClock>:
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <LL_APB1_GRP1_EnableClock+0x34>)
 8004ca6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8004caa:	4909      	ldr	r1, [pc, #36]	@ (8004cd0 <LL_APB1_GRP1_EnableClock+0x34>)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8004cb4:	4b06      	ldr	r3, [pc, #24]	@ (8004cd0 <LL_APB1_GRP1_EnableClock+0x34>)
 8004cb6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
}
 8004cc2:	bf00      	nop
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	58024400 	.word	0x58024400

08004cd4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8004d1c <LL_DMA_SetDataTransferDirection+0x48>)
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cf8:	4908      	ldr	r1, [pc, #32]	@ (8004d1c <LL_DMA_SetDataTransferDirection+0x48>)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	440b      	add	r3, r1
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	4619      	mov	r1, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	440b      	add	r3, r1
 8004d06:	4619      	mov	r1, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	600b      	str	r3, [r1, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	08016354 	.word	0x08016354

08004d20 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8004d30:	4a0d      	ldr	r2, [pc, #52]	@ (8004d68 <LL_DMA_SetMode+0x48>)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	4413      	add	r3, r2
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8004d44:	4908      	ldr	r1, [pc, #32]	@ (8004d68 <LL_DMA_SetMode+0x48>)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	440b      	add	r3, r1
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	440b      	add	r3, r1
 8004d52:	4619      	mov	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	600b      	str	r3, [r1, #0]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	08016354 	.word	0x08016354

08004d6c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 8004d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8004db4 <LL_DMA_SetPeriphIncMode+0x48>)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	4413      	add	r3, r2
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d90:	4908      	ldr	r1, [pc, #32]	@ (8004db4 <LL_DMA_SetPeriphIncMode+0x48>)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	440b      	add	r3, r1
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	440b      	add	r3, r1
 8004d9e:	4619      	mov	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	600b      	str	r3, [r1, #0]
}
 8004da6:	bf00      	nop
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	08016354 	.word	0x08016354

08004db8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8004dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e00 <LL_DMA_SetMemoryIncMode+0x48>)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4413      	add	r3, r2
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ddc:	4908      	ldr	r1, [pc, #32]	@ (8004e00 <LL_DMA_SetMemoryIncMode+0x48>)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	440b      	add	r3, r1
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	4619      	mov	r1, r3
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	440b      	add	r3, r1
 8004dea:	4619      	mov	r1, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	08016354 	.word	0x08016354

08004e04 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8004e14:	4a0d      	ldr	r2, [pc, #52]	@ (8004e4c <LL_DMA_SetPeriphSize+0x48>)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4413      	add	r3, r2
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4413      	add	r3, r2
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8004e28:	4908      	ldr	r1, [pc, #32]	@ (8004e4c <LL_DMA_SetPeriphSize+0x48>)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	440b      	add	r3, r1
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	4619      	mov	r1, r3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	440b      	add	r3, r1
 8004e36:	4619      	mov	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	08016354 	.word	0x08016354

08004e50 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8004e60:	4a0d      	ldr	r2, [pc, #52]	@ (8004e98 <LL_DMA_SetMemorySize+0x48>)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4413      	add	r3, r2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8004e74:	4908      	ldr	r1, [pc, #32]	@ (8004e98 <LL_DMA_SetMemorySize+0x48>)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	440b      	add	r3, r1
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	440b      	add	r3, r1
 8004e82:	4619      	mov	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	600b      	str	r3, [r1, #0]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	08016354 	.word	0x08016354

08004e9c <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8004eac:	4a0d      	ldr	r2, [pc, #52]	@ (8004ee4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	4413      	add	r3, r2
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ec0:	4908      	ldr	r1, [pc, #32]	@ (8004ee4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	440b      	add	r3, r1
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	440b      	add	r3, r1
 8004ece:	4619      	mov	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	08016354 	.word	0x08016354

08004ee8 <LL_DMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	4b12      	ldr	r3, [pc, #72]	@ (8004f40 <LL_DMA_SetPeriphRequest+0x58>)
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4911      	ldr	r1, [pc, #68]	@ (8004f44 <LL_DMA_SetPeriphRequest+0x5c>)
 8004f00:	428a      	cmp	r2, r1
 8004f02:	d101      	bne.n	8004f08 <LL_DMA_SetPeriphRequest+0x20>
 8004f04:	2200      	movs	r2, #0
 8004f06:	e000      	b.n	8004f0a <LL_DMA_SetPeriphRequest+0x22>
 8004f08:	2220      	movs	r2, #32
 8004f0a:	4413      	add	r3, r2
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	4b0a      	ldr	r3, [pc, #40]	@ (8004f40 <LL_DMA_SetPeriphRequest+0x58>)
 8004f16:	440b      	add	r3, r1
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	4809      	ldr	r0, [pc, #36]	@ (8004f44 <LL_DMA_SetPeriphRequest+0x5c>)
 8004f1e:	4281      	cmp	r1, r0
 8004f20:	d101      	bne.n	8004f26 <LL_DMA_SetPeriphRequest+0x3e>
 8004f22:	2100      	movs	r1, #0
 8004f24:	e000      	b.n	8004f28 <LL_DMA_SetPeriphRequest+0x40>
 8004f26:	2120      	movs	r1, #32
 8004f28:	440b      	add	r3, r1
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]
}
 8004f32:	bf00      	nop
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	10008200 	.word	0x10008200
 8004f44:	40020000 	.word	0x40020000

08004f48 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8004f56:	4a0c      	ldr	r2, [pc, #48]	@ (8004f88 <LL_DMA_DisableFifoMode+0x40>)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	4908      	ldr	r1, [pc, #32]	@ (8004f88 <LL_DMA_DisableFifoMode+0x40>)
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	7812      	ldrb	r2, [r2, #0]
 8004f6e:	4611      	mov	r1, r2
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	440a      	add	r2, r1
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	6153      	str	r3, [r2, #20]
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	08016354 	.word	0x08016354

08004f8c <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b0be      	sub	sp, #248	@ 0xf8
 8004f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004f92:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8004f96:	2228      	movs	r2, #40	@ 0x28
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f00c fe08 	bl	8011bb0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	609a      	str	r2, [r3, #8]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	611a      	str	r2, [r3, #16]
 8004fb0:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	22b8      	movs	r2, #184	@ 0xb8
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f00c fdf9 	bl	8011bb0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004fbe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004fce:	463b      	mov	r3, r7
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f007 faaf 	bl	800c534 <HAL_RCCEx_PeriphCLKConfig>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_SPI3_Init+0x54>
  {
    Error_Handler();
 8004fdc:	f7ff fc42 	bl	8004864 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8004fe0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004fe4:	f7ff fe5a 	bl	8004c9c <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8004fe8:	2004      	movs	r0, #4
 8004fea:	f7ff fe3b 	bl	8004c64 <LL_AHB4_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8004fee:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005002:	2300      	movs	r3, #0
 8005004:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005008:	2300      	movs	r3, #0
 800500a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800500e:	2306      	movs	r3, #6
 8005010:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005014:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8005018:	4619      	mov	r1, r3
 800501a:	4852      	ldr	r0, [pc, #328]	@ (8005164 <MX_SPI3_Init+0x1d8>)
 800501c:	f00a fd30 	bl	800fa80 <LL_GPIO_Init>

  /* SPI3 DMA Init */

  /* SPI3_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_4, LL_DMAMUX1_REQ_SPI3_RX);
 8005020:	223d      	movs	r2, #61	@ 0x3d
 8005022:	2104      	movs	r1, #4
 8005024:	4850      	ldr	r0, [pc, #320]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 8005026:	f7ff ff5f 	bl	8004ee8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800502a:	2200      	movs	r2, #0
 800502c:	2104      	movs	r1, #4
 800502e:	484e      	ldr	r0, [pc, #312]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 8005030:	f7ff fe50 	bl	8004cd4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
 8005034:	2200      	movs	r2, #0
 8005036:	2104      	movs	r1, #4
 8005038:	484b      	ldr	r0, [pc, #300]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 800503a:	f7ff ff2f 	bl	8004e9c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MODE_NORMAL);
 800503e:	2200      	movs	r2, #0
 8005040:	2104      	movs	r1, #4
 8005042:	4849      	ldr	r0, [pc, #292]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 8005044:	f7ff fe6c 	bl	8004d20 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
 8005048:	2200      	movs	r2, #0
 800504a:	2104      	movs	r1, #4
 800504c:	4846      	ldr	r0, [pc, #280]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 800504e:	f7ff fe8d 	bl	8004d6c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
 8005052:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005056:	2104      	movs	r1, #4
 8005058:	4843      	ldr	r0, [pc, #268]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 800505a:	f7ff fead 	bl	8004db8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
 800505e:	2200      	movs	r2, #0
 8005060:	2104      	movs	r1, #4
 8005062:	4841      	ldr	r0, [pc, #260]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 8005064:	f7ff fece 	bl	8004e04 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
 8005068:	2200      	movs	r2, #0
 800506a:	2104      	movs	r1, #4
 800506c:	483e      	ldr	r0, [pc, #248]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 800506e:	f7ff feef 	bl	8004e50 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_4);
 8005072:	2104      	movs	r1, #4
 8005074:	483c      	ldr	r0, [pc, #240]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 8005076:	f7ff ff67 	bl	8004f48 <LL_DMA_DisableFifoMode>

  /* SPI3_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_3, LL_DMAMUX1_REQ_SPI3_TX);
 800507a:	223e      	movs	r2, #62	@ 0x3e
 800507c:	2103      	movs	r1, #3
 800507e:	483a      	ldr	r0, [pc, #232]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 8005080:	f7ff ff32 	bl	8004ee8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8005084:	2240      	movs	r2, #64	@ 0x40
 8005086:	2103      	movs	r1, #3
 8005088:	4837      	ldr	r0, [pc, #220]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 800508a:	f7ff fe23 	bl	8004cd4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_3, LL_DMA_PRIORITY_LOW);
 800508e:	2200      	movs	r2, #0
 8005090:	2103      	movs	r1, #3
 8005092:	4835      	ldr	r0, [pc, #212]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 8005094:	f7ff ff02 	bl	8004e9c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MODE_NORMAL);
 8005098:	2200      	movs	r2, #0
 800509a:	2103      	movs	r1, #3
 800509c:	4832      	ldr	r0, [pc, #200]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 800509e:	f7ff fe3f 	bl	8004d20 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_PERIPH_NOINCREMENT);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2103      	movs	r1, #3
 80050a6:	4830      	ldr	r0, [pc, #192]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 80050a8:	f7ff fe60 	bl	8004d6c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_3, LL_DMA_MEMORY_INCREMENT);
 80050ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050b0:	2103      	movs	r1, #3
 80050b2:	482d      	ldr	r0, [pc, #180]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 80050b4:	f7ff fe80 	bl	8004db8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_3, LL_DMA_PDATAALIGN_BYTE);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2103      	movs	r1, #3
 80050bc:	482a      	ldr	r0, [pc, #168]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 80050be:	f7ff fea1 	bl	8004e04 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_3, LL_DMA_MDATAALIGN_BYTE);
 80050c2:	2200      	movs	r2, #0
 80050c4:	2103      	movs	r1, #3
 80050c6:	4828      	ldr	r0, [pc, #160]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 80050c8:	f7ff fec2 	bl	8004e50 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_3);
 80050cc:	2103      	movs	r1, #3
 80050ce:	4826      	ldr	r0, [pc, #152]	@ (8005168 <MX_SPI3_Init+0x1dc>)
 80050d0:	f7ff ff3a 	bl	8004f48 <LL_DMA_DisableFifoMode>

  /* SPI3 interrupt Init */
  NVIC_SetPriority(SPI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80050d4:	f7ff fd06 	bl	8004ae4 <__NVIC_GetPriorityGrouping>
 80050d8:	4603      	mov	r3, r0
 80050da:	2200      	movs	r2, #0
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fd56 	bl	8004b90 <NVIC_EncodePriority>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4619      	mov	r1, r3
 80050e8:	2033      	movs	r0, #51	@ 0x33
 80050ea:	f7ff fd27 	bl	8004b3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI3_IRQn);
 80050ee:	2033      	movs	r0, #51	@ 0x33
 80050f0:	f7ff fd06 	bl	8004b00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80050f4:	2300      	movs	r3, #0
 80050f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80050fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80050fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005102:	2307      	movs	r3, #7
 8005104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005108:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800510c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005110:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005118:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800511c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8005120:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005124:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005128:	2300      	movs	r3, #0
 800512a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800512e:	2300      	movs	r3, #0
 8005130:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  SPI_InitStruct.CRCPoly = 0x0;
 8005134:	2300      	movs	r3, #0
 8005136:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 800513a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800513e:	4619      	mov	r1, r3
 8005140:	480a      	ldr	r0, [pc, #40]	@ (800516c <MX_SPI3_Init+0x1e0>)
 8005142:	f00b fbef 	bl	8010924 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8005146:	2100      	movs	r1, #0
 8005148:	4808      	ldr	r0, [pc, #32]	@ (800516c <MX_SPI3_Init+0x1e0>)
 800514a:	f7ff fd54 	bl	8004bf6 <LL_SPI_SetStandard>
  LL_SPI_SetFIFOThreshold(SPI3, LL_SPI_FIFO_TH_01DATA);
 800514e:	2100      	movs	r1, #0
 8005150:	4806      	ldr	r0, [pc, #24]	@ (800516c <MX_SPI3_Init+0x1e0>)
 8005152:	f7ff fd63 	bl	8004c1c <LL_SPI_SetFIFOThreshold>
  LL_SPI_EnableNSSPulseMgt(SPI3);
 8005156:	4805      	ldr	r0, [pc, #20]	@ (800516c <MX_SPI3_Init+0x1e0>)
 8005158:	f7ff fd73 	bl	8004c42 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800515c:	bf00      	nop
 800515e:	37f8      	adds	r7, #248	@ 0xf8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	58020800 	.word	0x58020800
 8005168:	40020000 	.word	0x40020000
 800516c:	40003c00 	.word	0x40003c00

08005170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005176:	4b0a      	ldr	r3, [pc, #40]	@ (80051a0 <HAL_MspInit+0x30>)
 8005178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800517c:	4a08      	ldr	r2, [pc, #32]	@ (80051a0 <HAL_MspInit+0x30>)
 800517e:	f043 0302 	orr.w	r3, r3, #2
 8005182:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <HAL_MspInit+0x30>)
 8005188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	607b      	str	r3, [r7, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	58024400 	.word	0x58024400

080051a4 <LL_TIM_ClearFlag_UPDATE>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f06f 0201 	mvn.w	r2, #1
 80051b2:	611a      	str	r2, [r3, #16]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <LL_USART_IsActiveFlag_FE>:
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d101      	bne.n	80051fe <LL_USART_IsActiveFlag_FE+0x18>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <LL_USART_IsActiveFlag_FE+0x1a>
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <LL_USART_IsActiveFlag_NE>:
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b04      	cmp	r3, #4
 800521e:	d101      	bne.n	8005224 <LL_USART_IsActiveFlag_NE+0x18>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <LL_USART_IsActiveFlag_NE+0x1a>
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <LL_USART_IsActiveFlag_ORE>:
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b08      	cmp	r3, #8
 8005244:	d101      	bne.n	800524a <LL_USART_IsActiveFlag_ORE+0x18>
 8005246:	2301      	movs	r3, #1
 8005248:	e000      	b.n	800524c <LL_USART_IsActiveFlag_ORE+0x1a>
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b20      	cmp	r3, #32
 800526a:	d101      	bne.n	8005270 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <LL_USART_ClearFlag_FE>:
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2202      	movs	r2, #2
 800528a:	621a      	str	r2, [r3, #32]
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <LL_USART_ClearFlag_NE>:
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_NECF);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2204      	movs	r2, #4
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_USART_ClearFlag_ORE>:
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2208      	movs	r2, #8
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_USART_ReceiveData8>:
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	b2db      	uxtb	r3, r3
}
 80052da:	4618      	mov	r0, r3
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052e6:	b480      	push	{r7}
 80052e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <NMI_Handler+0x4>

080052ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <HardFault_Handler+0x4>

080052f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052f6:	b480      	push	{r7}
 80052f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <MemManage_Handler+0x4>

080052fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005302:	bf00      	nop
 8005304:	e7fd      	b.n	8005302 <BusFault_Handler+0x4>

08005306 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800530a:	bf00      	nop
 800530c:	e7fd      	b.n	800530a <UsageFault_Handler+0x4>

0800530e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800530e:	b480      	push	{r7}
 8005310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005312:	bf00      	nop
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005320:	bf00      	nop
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800532e:	bf00      	nop
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800533c:	f001 fb46 	bl	80069cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005340:	bf00      	nop
 8005342:	bd80      	pop	{r7, pc}

08005344 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8005348:	4802      	ldr	r0, [pc, #8]	@ (8005354 <DMA1_Stream0_IRQHandler+0x10>)
 800534a:	f002 fd13 	bl	8007d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	240008f0 	.word	0x240008f0

08005358 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 800535c:	4802      	ldr	r0, [pc, #8]	@ (8005368 <DMA1_Stream1_IRQHandler+0x10>)
 800535e:	f002 fd09 	bl	8007d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	24000968 	.word	0x24000968

0800536c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3);
 8005370:	4802      	ldr	r0, [pc, #8]	@ (800537c <DMA1_Stream2_IRQHandler+0x10>)
 8005372:	f002 fcff 	bl	8007d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	240009e0 	.word	0x240009e0

08005380 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr

0800538e <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800538e:	b480      	push	{r7}
 8005390:	af00      	add	r7, sp, #0

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005392:	bf00      	nop
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80053a0:	4802      	ldr	r0, [pc, #8]	@ (80053ac <DMA1_Stream5_IRQHandler+0x10>)
 80053a2:	f002 fce7 	bl	8007d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80053a6:	bf00      	nop
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	24000a58 	.word	0x24000a58

080053b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80053b4:	4802      	ldr	r0, [pc, #8]	@ (80053c0 <DMA1_Stream6_IRQHandler+0x10>)
 80053b6:	f002 fcdd 	bl	8007d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80053ba:	bf00      	nop
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	24000878 	.word	0x24000878

080053c4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80053c8:	4802      	ldr	r0, [pc, #8]	@ (80053d4 <DMA1_Stream7_IRQHandler+0x10>)
 80053ca:	f002 fcd3 	bl	8007d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	24000514 	.word	0x24000514

080053d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80053dc:	4802      	ldr	r0, [pc, #8]	@ (80053e8 <TIM5_IRQHandler+0x10>)
 80053de:	f009 f953 	bl	800e688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2400082c 	.word	0x2400082c

080053ec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0

  /* USER CODE END SPI3_IRQn 0 */
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80053f0:	bf00      	nop
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

	static unsigned char cnt = 0;
	//    static uint8_t ibus_rx_buf[32];

	if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8005400:	483f      	ldr	r0, [pc, #252]	@ (8005500 <UART4_IRQHandler+0x104>)
 8005402:	f7ff ff29 	bl	8005258 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d059      	beq.n	80054c0 <UART4_IRQHandler+0xc4>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);
 800540c:	483c      	ldr	r0, [pc, #240]	@ (8005500 <UART4_IRQHandler+0x104>)
 800540e:	f7ff ff5d 	bl	80052cc <LL_USART_ReceiveData8>
 8005412:	4603      	mov	r3, r0
 8005414:	461a      	mov	r2, r3
 8005416:	4b3b      	ldr	r3, [pc, #236]	@ (8005504 <UART4_IRQHandler+0x108>)
 8005418:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;
 800541a:	4b3b      	ldr	r3, [pc, #236]	@ (8005508 <UART4_IRQHandler+0x10c>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]

		switch (cnt) {
 8005420:	4b3a      	ldr	r3, [pc, #232]	@ (800550c <UART4_IRQHandler+0x110>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b1f      	cmp	r3, #31
 8005426:	d02e      	beq.n	8005486 <UART4_IRQHandler+0x8a>
 8005428:	2b1f      	cmp	r3, #31
 800542a:	dc3a      	bgt.n	80054a2 <UART4_IRQHandler+0xa6>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <UART4_IRQHandler+0x3a>
 8005430:	2b01      	cmp	r3, #1
 8005432:	d012      	beq.n	800545a <UART4_IRQHandler+0x5e>
 8005434:	e035      	b.n	80054a2 <UART4_IRQHandler+0xa6>
		case 0:
			if (uart4_rx_data == 0x20) {
 8005436:	4b33      	ldr	r3, [pc, #204]	@ (8005504 <UART4_IRQHandler+0x108>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b20      	cmp	r3, #32
 800543c:	d13f      	bne.n	80054be <UART4_IRQHandler+0xc2>
				ibus_rx_buf[cnt] = uart4_rx_data;
 800543e:	4b33      	ldr	r3, [pc, #204]	@ (800550c <UART4_IRQHandler+0x110>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	4b2f      	ldr	r3, [pc, #188]	@ (8005504 <UART4_IRQHandler+0x108>)
 8005446:	7819      	ldrb	r1, [r3, #0]
 8005448:	4b31      	ldr	r3, [pc, #196]	@ (8005510 <UART4_IRQHandler+0x114>)
 800544a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800544c:	4b2f      	ldr	r3, [pc, #188]	@ (800550c <UART4_IRQHandler+0x110>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	b2da      	uxtb	r2, r3
 8005454:	4b2d      	ldr	r3, [pc, #180]	@ (800550c <UART4_IRQHandler+0x110>)
 8005456:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005458:	e031      	b.n	80054be <UART4_IRQHandler+0xc2>
		case 1:
			if (uart4_rx_data == 0x40) {
 800545a:	4b2a      	ldr	r3, [pc, #168]	@ (8005504 <UART4_IRQHandler+0x108>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b40      	cmp	r3, #64	@ 0x40
 8005460:	d10d      	bne.n	800547e <UART4_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart4_rx_data;
 8005462:	4b2a      	ldr	r3, [pc, #168]	@ (800550c <UART4_IRQHandler+0x110>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	4b26      	ldr	r3, [pc, #152]	@ (8005504 <UART4_IRQHandler+0x108>)
 800546a:	7819      	ldrb	r1, [r3, #0]
 800546c:	4b28      	ldr	r3, [pc, #160]	@ (8005510 <UART4_IRQHandler+0x114>)
 800546e:	5499      	strb	r1, [r3, r2]
				cnt++;
 8005470:	4b26      	ldr	r3, [pc, #152]	@ (800550c <UART4_IRQHandler+0x110>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	3301      	adds	r3, #1
 8005476:	b2da      	uxtb	r2, r3
 8005478:	4b24      	ldr	r3, [pc, #144]	@ (800550c <UART4_IRQHandler+0x110>)
 800547a:	701a      	strb	r2, [r3, #0]
			} else {
				cnt = 0; // Reset if invalid header
			}
			break;
 800547c:	e020      	b.n	80054c0 <UART4_IRQHandler+0xc4>
				cnt = 0; // Reset if invalid header
 800547e:	4b23      	ldr	r3, [pc, #140]	@ (800550c <UART4_IRQHandler+0x110>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
			break;
 8005484:	e01c      	b.n	80054c0 <UART4_IRQHandler+0xc4>
		case 31:
			ibus_rx_buf[cnt] = uart4_rx_data;
 8005486:	4b21      	ldr	r3, [pc, #132]	@ (800550c <UART4_IRQHandler+0x110>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	4b1d      	ldr	r3, [pc, #116]	@ (8005504 <UART4_IRQHandler+0x108>)
 800548e:	7819      	ldrb	r1, [r3, #0]
 8005490:	4b1f      	ldr	r3, [pc, #124]	@ (8005510 <UART4_IRQHandler+0x114>)
 8005492:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8005494:	4b1d      	ldr	r3, [pc, #116]	@ (800550c <UART4_IRQHandler+0x110>)
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 800549a:	4b1e      	ldr	r3, [pc, #120]	@ (8005514 <UART4_IRQHandler+0x118>)
 800549c:	2201      	movs	r2, #1
 800549e:	701a      	strb	r2, [r3, #0]
			//	                for (uint8_t i = 0; i < len; i++) {
			//	                    while (!LL_USART_IsActiveFlag_TXE(USART6)) {}
			//	//                    LL_USART_TransmitData8(USART6, buffer[i]);
			//	                }
			//	                while (!LL_USART_IsActiveFlag_TC(USART6)) {}
			break;
 80054a0:	e00e      	b.n	80054c0 <UART4_IRQHandler+0xc4>
		default:
			ibus_rx_buf[cnt] = uart4_rx_data;
 80054a2:	4b1a      	ldr	r3, [pc, #104]	@ (800550c <UART4_IRQHandler+0x110>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	461a      	mov	r2, r3
 80054a8:	4b16      	ldr	r3, [pc, #88]	@ (8005504 <UART4_IRQHandler+0x108>)
 80054aa:	7819      	ldrb	r1, [r3, #0]
 80054ac:	4b18      	ldr	r3, [pc, #96]	@ (8005510 <UART4_IRQHandler+0x114>)
 80054ae:	5499      	strb	r1, [r3, r2]
			cnt++;
 80054b0:	4b16      	ldr	r3, [pc, #88]	@ (800550c <UART4_IRQHandler+0x110>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	4b14      	ldr	r3, [pc, #80]	@ (800550c <UART4_IRQHandler+0x110>)
 80054ba:	701a      	strb	r2, [r3, #0]
			break;
 80054bc:	e000      	b.n	80054c0 <UART4_IRQHandler+0xc4>
			break;
 80054be:	bf00      	nop
		}
	}

	// Handle UART errors
	if (LL_USART_IsActiveFlag_ORE(UART4) || LL_USART_IsActiveFlag_FE(UART4) || LL_USART_IsActiveFlag_NE(UART4)) {
 80054c0:	480f      	ldr	r0, [pc, #60]	@ (8005500 <UART4_IRQHandler+0x104>)
 80054c2:	f7ff feb6 	bl	8005232 <LL_USART_IsActiveFlag_ORE>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <UART4_IRQHandler+0xe8>
 80054cc:	480c      	ldr	r0, [pc, #48]	@ (8005500 <UART4_IRQHandler+0x104>)
 80054ce:	f7ff fe8a 	bl	80051e6 <LL_USART_IsActiveFlag_FE>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <UART4_IRQHandler+0xe8>
 80054d8:	4809      	ldr	r0, [pc, #36]	@ (8005500 <UART4_IRQHandler+0x104>)
 80054da:	f7ff fe97 	bl	800520c <LL_USART_IsActiveFlag_NE>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00b      	beq.n	80054fc <UART4_IRQHandler+0x100>
		LL_USART_ClearFlag_ORE(UART4);
 80054e4:	4806      	ldr	r0, [pc, #24]	@ (8005500 <UART4_IRQHandler+0x104>)
 80054e6:	f7ff fee4 	bl	80052b2 <LL_USART_ClearFlag_ORE>
		LL_USART_ClearFlag_FE(UART4);
 80054ea:	4805      	ldr	r0, [pc, #20]	@ (8005500 <UART4_IRQHandler+0x104>)
 80054ec:	f7ff fec7 	bl	800527e <LL_USART_ClearFlag_FE>
		LL_USART_ClearFlag_NE(UART4);
 80054f0:	4803      	ldr	r0, [pc, #12]	@ (8005500 <UART4_IRQHandler+0x104>)
 80054f2:	f7ff fed1 	bl	8005298 <LL_USART_ClearFlag_NE>
		cnt = 0; // Reset buffer on error
 80054f6:	4b05      	ldr	r3, [pc, #20]	@ (800550c <UART4_IRQHandler+0x110>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80054fc:	bf00      	nop
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40004c00 	.word	0x40004c00
 8005504:	24000705 	.word	0x24000705
 8005508:	24000704 	.word	0x24000704
 800550c:	24000780 	.word	0x24000780
 8005510:	24000708 	.word	0x24000708
 8005514:	24000728 	.word	0x24000728

08005518 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
	static uint16_t tim7_50ms_count   = 0;
	static uint16_t tim7_100ms_count  = 0;
	static uint16_t tim7_200ms_count  = 0;
	static uint16_t tim7_1000ms_count = 0;

	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800551c:	483d      	ldr	r0, [pc, #244]	@ (8005614 <TIM7_IRQHandler+0xfc>)
 800551e:	f7ff fe4f 	bl	80051c0 <LL_TIM_IsActiveFlag_UPDATE>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d073      	beq.n	8005610 <TIM7_IRQHandler+0xf8>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8005528:	483a      	ldr	r0, [pc, #232]	@ (8005614 <TIM7_IRQHandler+0xfc>)
 800552a:	f7ff fe3b 	bl	80051a4 <LL_TIM_ClearFlag_UPDATE>

		if (++tim7_1ms_count >= 1) {
 800552e:	4b3a      	ldr	r3, [pc, #232]	@ (8005618 <TIM7_IRQHandler+0x100>)
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	3301      	adds	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	4b38      	ldr	r3, [pc, #224]	@ (8005618 <TIM7_IRQHandler+0x100>)
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	4b37      	ldr	r3, [pc, #220]	@ (8005618 <TIM7_IRQHandler+0x100>)
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <TIM7_IRQHandler+0x36>
			tim7_1ms_count = 0;
 8005542:	4b35      	ldr	r3, [pc, #212]	@ (8005618 <TIM7_IRQHandler+0x100>)
 8005544:	2200      	movs	r2, #0
 8005546:	801a      	strh	r2, [r3, #0]
			tim7_1ms_flag = 1;
 8005548:	4b34      	ldr	r3, [pc, #208]	@ (800561c <TIM7_IRQHandler+0x104>)
 800554a:	2201      	movs	r2, #1
 800554c:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_2ms_count >= 2) {
 800554e:	4b34      	ldr	r3, [pc, #208]	@ (8005620 <TIM7_IRQHandler+0x108>)
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	4b32      	ldr	r3, [pc, #200]	@ (8005620 <TIM7_IRQHandler+0x108>)
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	4b31      	ldr	r3, [pc, #196]	@ (8005620 <TIM7_IRQHandler+0x108>)
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d905      	bls.n	800556e <TIM7_IRQHandler+0x56>
			tim7_2ms_count = 0;
 8005562:	4b2f      	ldr	r3, [pc, #188]	@ (8005620 <TIM7_IRQHandler+0x108>)
 8005564:	2200      	movs	r2, #0
 8005566:	801a      	strh	r2, [r3, #0]
			tim7_2ms_flag = 1;
 8005568:	4b2e      	ldr	r3, [pc, #184]	@ (8005624 <TIM7_IRQHandler+0x10c>)
 800556a:	2201      	movs	r2, #1
 800556c:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_20ms_count >= 20) {
 800556e:	4b2e      	ldr	r3, [pc, #184]	@ (8005628 <TIM7_IRQHandler+0x110>)
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	4b2c      	ldr	r3, [pc, #176]	@ (8005628 <TIM7_IRQHandler+0x110>)
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	4b2b      	ldr	r3, [pc, #172]	@ (8005628 <TIM7_IRQHandler+0x110>)
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	2b13      	cmp	r3, #19
 8005580:	d905      	bls.n	800558e <TIM7_IRQHandler+0x76>
			tim7_20ms_count = 0;
 8005582:	4b29      	ldr	r3, [pc, #164]	@ (8005628 <TIM7_IRQHandler+0x110>)
 8005584:	2200      	movs	r2, #0
 8005586:	801a      	strh	r2, [r3, #0]
			tim7_20ms_flag = 1;
 8005588:	4b28      	ldr	r3, [pc, #160]	@ (800562c <TIM7_IRQHandler+0x114>)
 800558a:	2201      	movs	r2, #1
 800558c:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_50ms_count >= 50) {
 800558e:	4b28      	ldr	r3, [pc, #160]	@ (8005630 <TIM7_IRQHandler+0x118>)
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	b29a      	uxth	r2, r3
 8005596:	4b26      	ldr	r3, [pc, #152]	@ (8005630 <TIM7_IRQHandler+0x118>)
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	4b25      	ldr	r3, [pc, #148]	@ (8005630 <TIM7_IRQHandler+0x118>)
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	2b31      	cmp	r3, #49	@ 0x31
 80055a0:	d905      	bls.n	80055ae <TIM7_IRQHandler+0x96>
			tim7_50ms_count = 0;
 80055a2:	4b23      	ldr	r3, [pc, #140]	@ (8005630 <TIM7_IRQHandler+0x118>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	801a      	strh	r2, [r3, #0]
			tim7_50ms_flag = 1;
 80055a8:	4b22      	ldr	r3, [pc, #136]	@ (8005634 <TIM7_IRQHandler+0x11c>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_100ms_count >= 100) {
 80055ae:	4b22      	ldr	r3, [pc, #136]	@ (8005638 <TIM7_IRQHandler+0x120>)
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	4b20      	ldr	r3, [pc, #128]	@ (8005638 <TIM7_IRQHandler+0x120>)
 80055b8:	801a      	strh	r2, [r3, #0]
 80055ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005638 <TIM7_IRQHandler+0x120>)
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	2b63      	cmp	r3, #99	@ 0x63
 80055c0:	d905      	bls.n	80055ce <TIM7_IRQHandler+0xb6>
			tim7_100ms_count = 0;
 80055c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005638 <TIM7_IRQHandler+0x120>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	801a      	strh	r2, [r3, #0]
			tim7_100ms_flag = 1;
 80055c8:	4b1c      	ldr	r3, [pc, #112]	@ (800563c <TIM7_IRQHandler+0x124>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_200ms_count >= 200) {
 80055ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005640 <TIM7_IRQHandler+0x128>)
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	3301      	adds	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005640 <TIM7_IRQHandler+0x128>)
 80055d8:	801a      	strh	r2, [r3, #0]
 80055da:	4b19      	ldr	r3, [pc, #100]	@ (8005640 <TIM7_IRQHandler+0x128>)
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	2bc7      	cmp	r3, #199	@ 0xc7
 80055e0:	d905      	bls.n	80055ee <TIM7_IRQHandler+0xd6>
			tim7_200ms_count = 0;
 80055e2:	4b17      	ldr	r3, [pc, #92]	@ (8005640 <TIM7_IRQHandler+0x128>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	801a      	strh	r2, [r3, #0]
			tim7_200ms_flag = 1;
 80055e8:	4b16      	ldr	r3, [pc, #88]	@ (8005644 <TIM7_IRQHandler+0x12c>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	801a      	strh	r2, [r3, #0]
		}

		if (++tim7_1000ms_count >= 1000) {
 80055ee:	4b16      	ldr	r3, [pc, #88]	@ (8005648 <TIM7_IRQHandler+0x130>)
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	4b14      	ldr	r3, [pc, #80]	@ (8005648 <TIM7_IRQHandler+0x130>)
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	4b13      	ldr	r3, [pc, #76]	@ (8005648 <TIM7_IRQHandler+0x130>)
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005602:	d305      	bcc.n	8005610 <TIM7_IRQHandler+0xf8>
			tim7_1000ms_count = 0;
 8005604:	4b10      	ldr	r3, [pc, #64]	@ (8005648 <TIM7_IRQHandler+0x130>)
 8005606:	2200      	movs	r2, #0
 8005608:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 800560a:	4b10      	ldr	r3, [pc, #64]	@ (800564c <TIM7_IRQHandler+0x134>)
 800560c:	2201      	movs	r2, #1
 800560e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005610:	bf00      	nop
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40001400 	.word	0x40001400
 8005618:	24000782 	.word	0x24000782
 800561c:	2400072a 	.word	0x2400072a
 8005620:	24000784 	.word	0x24000784
 8005624:	2400072c 	.word	0x2400072c
 8005628:	24000786 	.word	0x24000786
 800562c:	2400072e 	.word	0x2400072e
 8005630:	24000788 	.word	0x24000788
 8005634:	24000730 	.word	0x24000730
 8005638:	2400078a 	.word	0x2400078a
 800563c:	24000732 	.word	0x24000732
 8005640:	2400078c 	.word	0x2400078c
 8005644:	24000734 	.word	0x24000734
 8005648:	2400078e 	.word	0x2400078e
 800564c:	24000736 	.word	0x24000736

08005650 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005654:	4802      	ldr	r0, [pc, #8]	@ (8005660 <DMA2_Stream0_IRQHandler+0x10>)
 8005656:	f002 fb8d 	bl	8007d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2400058c 	.word	0x2400058c

08005664 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

	if (LL_USART_IsActiveFlag_RXNE(USART6)) {
 800566a:	482b      	ldr	r0, [pc, #172]	@ (8005718 <USART6_IRQHandler+0xb4>)
 800566c:	f7ff fdf4 	bl	8005258 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d04b      	beq.n	800570e <USART6_IRQHandler+0xaa>
		char c = LL_USART_ReceiveData8(USART6);
 8005676:	4828      	ldr	r0, [pc, #160]	@ (8005718 <USART6_IRQHandler+0xb4>)
 8005678:	f7ff fe28 	bl	80052cc <LL_USART_ReceiveData8>
 800567c:	4603      	mov	r3, r0
 800567e:	71fb      	strb	r3, [r7, #7]
		last_char_time = HAL_GetTick();  // update timestamp
 8005680:	f001 f9b8 	bl	80069f4 <HAL_GetTick>
 8005684:	4603      	mov	r3, r0
 8005686:	4a25      	ldr	r2, [pc, #148]	@ (800571c <USART6_IRQHandler+0xb8>)
 8005688:	6013      	str	r3, [r2, #0]

		if (!cmd_receiving) {
 800568a:	4b25      	ldr	r3, [pc, #148]	@ (8005720 <USART6_IRQHandler+0xbc>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f083 0301 	eor.w	r3, r3, #1
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <USART6_IRQHandler+0x4a>
			if (c == '[') {
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	2b5b      	cmp	r3, #91	@ 0x5b
 800569e:	d136      	bne.n	800570e <USART6_IRQHandler+0xaa>
				cmd_receiving = true;
 80056a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005720 <USART6_IRQHandler+0xbc>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 80056a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005724 <USART6_IRQHandler+0xc0>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80056ac:	e02f      	b.n	800570e <USART6_IRQHandler+0xaa>
			if (c == ']') {
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	2b5d      	cmp	r3, #93	@ 0x5d
 80056b2:	d115      	bne.n	80056e0 <USART6_IRQHandler+0x7c>
				if (cmd_index < CMD_BUFFER_SIZE) {
 80056b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005724 <USART6_IRQHandler+0xc0>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80056bc:	d809      	bhi.n	80056d2 <USART6_IRQHandler+0x6e>
					cmd_buffer[cmd_index] = '\0';  // null-terminate
 80056be:	4b19      	ldr	r3, [pc, #100]	@ (8005724 <USART6_IRQHandler+0xc0>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	461a      	mov	r2, r3
 80056c6:	4b18      	ldr	r3, [pc, #96]	@ (8005728 <USART6_IRQHandler+0xc4>)
 80056c8:	2100      	movs	r1, #0
 80056ca:	5499      	strb	r1, [r3, r2]
					process_command((char*)cmd_buffer);  // parse the command
 80056cc:	4816      	ldr	r0, [pc, #88]	@ (8005728 <USART6_IRQHandler+0xc4>)
 80056ce:	f7fb f901 	bl	80008d4 <process_command>
				cmd_receiving = false;
 80056d2:	4b13      	ldr	r3, [pc, #76]	@ (8005720 <USART6_IRQHandler+0xbc>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
				cmd_index = 0;
 80056d8:	4b12      	ldr	r3, [pc, #72]	@ (8005724 <USART6_IRQHandler+0xc0>)
 80056da:	2200      	movs	r2, #0
 80056dc:	701a      	strb	r2, [r3, #0]
}
 80056de:	e016      	b.n	800570e <USART6_IRQHandler+0xaa>
				if (cmd_index < CMD_BUFFER_SIZE - 1) {
 80056e0:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <USART6_IRQHandler+0xc0>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80056e8:	d80b      	bhi.n	8005702 <USART6_IRQHandler+0x9e>
					cmd_buffer[cmd_index++] = c;
 80056ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005724 <USART6_IRQHandler+0xc0>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	b2d1      	uxtb	r1, r2
 80056f4:	4a0b      	ldr	r2, [pc, #44]	@ (8005724 <USART6_IRQHandler+0xc0>)
 80056f6:	7011      	strb	r1, [r2, #0]
 80056f8:	4619      	mov	r1, r3
 80056fa:	4a0b      	ldr	r2, [pc, #44]	@ (8005728 <USART6_IRQHandler+0xc4>)
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	5453      	strb	r3, [r2, r1]
}
 8005700:	e005      	b.n	800570e <USART6_IRQHandler+0xaa>
					cmd_receiving = false;
 8005702:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <USART6_IRQHandler+0xbc>)
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
					cmd_index = 0;
 8005708:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <USART6_IRQHandler+0xc0>)
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40011400 	.word	0x40011400
 800571c:	2400077c 	.word	0x2400077c
 8005720:	24000779 	.word	0x24000779
 8005724:	24000778 	.word	0x24000778
 8005728:	24000738 	.word	0x24000738

0800572c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return 1;
 8005730:	2301      	movs	r3, #1
}
 8005732:	4618      	mov	r0, r3
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <_kill>:

int _kill(int pid, int sig)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005746:	f00c faa5 	bl	8011c94 <__errno>
 800574a:	4603      	mov	r3, r0
 800574c:	2216      	movs	r2, #22
 800574e:	601a      	str	r2, [r3, #0]
  return -1;
 8005750:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <_exit>:

void _exit (int status)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005764:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ffe7 	bl	800573c <_kill>
  while (1) {}    /* Make sure we hang here */
 800576e:	bf00      	nop
 8005770:	e7fd      	b.n	800576e <_exit+0x12>

08005772 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b086      	sub	sp, #24
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e00a      	b.n	800579a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005784:	f3af 8000 	nop.w
 8005788:	4601      	mov	r1, r0
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	60ba      	str	r2, [r7, #8]
 8005790:	b2ca      	uxtb	r2, r1
 8005792:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	3301      	adds	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	429a      	cmp	r2, r3
 80057a0:	dbf0      	blt.n	8005784 <_read+0x12>
  }

  return len;
 80057a2:	687b      	ldr	r3, [r7, #4]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80057b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80057d4:	605a      	str	r2, [r3, #4]
  return 0;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <_isatty>:

int _isatty(int file)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80057ec:	2301      	movs	r3, #1
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b085      	sub	sp, #20
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800581c:	4a14      	ldr	r2, [pc, #80]	@ (8005870 <_sbrk+0x5c>)
 800581e:	4b15      	ldr	r3, [pc, #84]	@ (8005874 <_sbrk+0x60>)
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005828:	4b13      	ldr	r3, [pc, #76]	@ (8005878 <_sbrk+0x64>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005830:	4b11      	ldr	r3, [pc, #68]	@ (8005878 <_sbrk+0x64>)
 8005832:	4a12      	ldr	r2, [pc, #72]	@ (800587c <_sbrk+0x68>)
 8005834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005836:	4b10      	ldr	r3, [pc, #64]	@ (8005878 <_sbrk+0x64>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4413      	add	r3, r2
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	429a      	cmp	r2, r3
 8005842:	d207      	bcs.n	8005854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005844:	f00c fa26 	bl	8011c94 <__errno>
 8005848:	4603      	mov	r3, r0
 800584a:	220c      	movs	r2, #12
 800584c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005852:	e009      	b.n	8005868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005854:	4b08      	ldr	r3, [pc, #32]	@ (8005878 <_sbrk+0x64>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800585a:	4b07      	ldr	r3, [pc, #28]	@ (8005878 <_sbrk+0x64>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	4a05      	ldr	r2, [pc, #20]	@ (8005878 <_sbrk+0x64>)
 8005864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005866:	68fb      	ldr	r3, [r7, #12]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	24050000 	.word	0x24050000
 8005874:	00000400 	.word	0x00000400
 8005878:	24000790 	.word	0x24000790
 800587c:	24000c20 	.word	0x24000c20

08005880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005884:	4b3e      	ldr	r3, [pc, #248]	@ (8005980 <SystemInit+0x100>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588a:	4a3d      	ldr	r2, [pc, #244]	@ (8005980 <SystemInit+0x100>)
 800588c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005894:	4b3b      	ldr	r3, [pc, #236]	@ (8005984 <SystemInit+0x104>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	2b06      	cmp	r3, #6
 800589e:	d807      	bhi.n	80058b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058a0:	4b38      	ldr	r3, [pc, #224]	@ (8005984 <SystemInit+0x104>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f023 030f 	bic.w	r3, r3, #15
 80058a8:	4a36      	ldr	r2, [pc, #216]	@ (8005984 <SystemInit+0x104>)
 80058aa:	f043 0307 	orr.w	r3, r3, #7
 80058ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80058b0:	4b35      	ldr	r3, [pc, #212]	@ (8005988 <SystemInit+0x108>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a34      	ldr	r2, [pc, #208]	@ (8005988 <SystemInit+0x108>)
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058bc:	4b32      	ldr	r3, [pc, #200]	@ (8005988 <SystemInit+0x108>)
 80058be:	2200      	movs	r2, #0
 80058c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80058c2:	4b31      	ldr	r3, [pc, #196]	@ (8005988 <SystemInit+0x108>)
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4930      	ldr	r1, [pc, #192]	@ (8005988 <SystemInit+0x108>)
 80058c8:	4b30      	ldr	r3, [pc, #192]	@ (800598c <SystemInit+0x10c>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005984 <SystemInit+0x104>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058da:	4b2a      	ldr	r3, [pc, #168]	@ (8005984 <SystemInit+0x104>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 030f 	bic.w	r3, r3, #15
 80058e2:	4a28      	ldr	r2, [pc, #160]	@ (8005984 <SystemInit+0x104>)
 80058e4:	f043 0307 	orr.w	r3, r3, #7
 80058e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80058ea:	4b27      	ldr	r3, [pc, #156]	@ (8005988 <SystemInit+0x108>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80058f0:	4b25      	ldr	r3, [pc, #148]	@ (8005988 <SystemInit+0x108>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80058f6:	4b24      	ldr	r3, [pc, #144]	@ (8005988 <SystemInit+0x108>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80058fc:	4b22      	ldr	r3, [pc, #136]	@ (8005988 <SystemInit+0x108>)
 80058fe:	4a24      	ldr	r2, [pc, #144]	@ (8005990 <SystemInit+0x110>)
 8005900:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005902:	4b21      	ldr	r3, [pc, #132]	@ (8005988 <SystemInit+0x108>)
 8005904:	4a23      	ldr	r2, [pc, #140]	@ (8005994 <SystemInit+0x114>)
 8005906:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005908:	4b1f      	ldr	r3, [pc, #124]	@ (8005988 <SystemInit+0x108>)
 800590a:	4a23      	ldr	r2, [pc, #140]	@ (8005998 <SystemInit+0x118>)
 800590c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800590e:	4b1e      	ldr	r3, [pc, #120]	@ (8005988 <SystemInit+0x108>)
 8005910:	2200      	movs	r2, #0
 8005912:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005914:	4b1c      	ldr	r3, [pc, #112]	@ (8005988 <SystemInit+0x108>)
 8005916:	4a20      	ldr	r2, [pc, #128]	@ (8005998 <SystemInit+0x118>)
 8005918:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800591a:	4b1b      	ldr	r3, [pc, #108]	@ (8005988 <SystemInit+0x108>)
 800591c:	2200      	movs	r2, #0
 800591e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005920:	4b19      	ldr	r3, [pc, #100]	@ (8005988 <SystemInit+0x108>)
 8005922:	4a1d      	ldr	r2, [pc, #116]	@ (8005998 <SystemInit+0x118>)
 8005924:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005926:	4b18      	ldr	r3, [pc, #96]	@ (8005988 <SystemInit+0x108>)
 8005928:	2200      	movs	r2, #0
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800592c:	4b16      	ldr	r3, [pc, #88]	@ (8005988 <SystemInit+0x108>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <SystemInit+0x108>)
 8005932:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005936:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005938:	4b13      	ldr	r3, [pc, #76]	@ (8005988 <SystemInit+0x108>)
 800593a:	2200      	movs	r2, #0
 800593c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800593e:	4b12      	ldr	r3, [pc, #72]	@ (8005988 <SystemInit+0x108>)
 8005940:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d113      	bne.n	8005974 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800594c:	4b0e      	ldr	r3, [pc, #56]	@ (8005988 <SystemInit+0x108>)
 800594e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005952:	4a0d      	ldr	r2, [pc, #52]	@ (8005988 <SystemInit+0x108>)
 8005954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005958:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800595c:	4b0f      	ldr	r3, [pc, #60]	@ (800599c <SystemInit+0x11c>)
 800595e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005962:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8005964:	4b08      	ldr	r3, [pc, #32]	@ (8005988 <SystemInit+0x108>)
 8005966:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800596a:	4a07      	ldr	r2, [pc, #28]	@ (8005988 <SystemInit+0x108>)
 800596c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005970:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	e000ed00 	.word	0xe000ed00
 8005984:	52002000 	.word	0x52002000
 8005988:	58024400 	.word	0x58024400
 800598c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005990:	02020200 	.word	0x02020200
 8005994:	01ff0000 	.word	0x01ff0000
 8005998:	01010280 	.word	0x01010280
 800599c:	52004000 	.word	0x52004000

080059a0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80059a4:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <ExitRun0Mode+0x2c>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <ExitRun0Mode+0x2c>)
 80059aa:	f043 0302 	orr.w	r3, r3, #2
 80059ae:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80059b0:	bf00      	nop
 80059b2:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <ExitRun0Mode+0x2c>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f9      	beq.n	80059b2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	58024800 	.word	0x58024800

080059d0 <__NVIC_GetPriorityGrouping>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059d4:	4b04      	ldr	r3, [pc, #16]	@ (80059e8 <__NVIC_GetPriorityGrouping+0x18>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	f003 0307 	and.w	r3, r3, #7
}
 80059de:	4618      	mov	r0, r3
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	e000ed00 	.word	0xe000ed00

080059ec <__NVIC_EnableIRQ>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	db0b      	blt.n	8005a16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059fe:	88fb      	ldrh	r3, [r7, #6]
 8005a00:	f003 021f 	and.w	r2, r3, #31
 8005a04:	4907      	ldr	r1, [pc, #28]	@ (8005a24 <__NVIC_EnableIRQ+0x38>)
 8005a06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	2001      	movs	r0, #1
 8005a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	e000e100 	.word	0xe000e100

08005a28 <__NVIC_SetPriority>:
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	6039      	str	r1, [r7, #0]
 8005a32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	db0a      	blt.n	8005a52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	490c      	ldr	r1, [pc, #48]	@ (8005a74 <__NVIC_SetPriority+0x4c>)
 8005a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a46:	0112      	lsls	r2, r2, #4
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005a50:	e00a      	b.n	8005a68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	4908      	ldr	r1, [pc, #32]	@ (8005a78 <__NVIC_SetPriority+0x50>)
 8005a58:	88fb      	ldrh	r3, [r7, #6]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	3b04      	subs	r3, #4
 8005a60:	0112      	lsls	r2, r2, #4
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	440b      	add	r3, r1
 8005a66:	761a      	strb	r2, [r3, #24]
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	e000e100 	.word	0xe000e100
 8005a78:	e000ed00 	.word	0xe000ed00

08005a7c <NVIC_EncodePriority>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b089      	sub	sp, #36	@ 0x24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f1c3 0307 	rsb	r3, r3, #7
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	bf28      	it	cs
 8005a9a:	2304      	movcs	r3, #4
 8005a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	2b06      	cmp	r3, #6
 8005aa4:	d902      	bls.n	8005aac <NVIC_EncodePriority+0x30>
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	3b03      	subs	r3, #3
 8005aaa:	e000      	b.n	8005aae <NVIC_EncodePriority+0x32>
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	43da      	mvns	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	401a      	ands	r2, r3
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ac4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	43d9      	mvns	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad4:	4313      	orrs	r3, r2
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3724      	adds	r7, #36	@ 0x24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <LL_TIM_EnableARRPreload>:
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	bf00      	nop
 8005af8:	370c      	adds	r7, #12
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <LL_TIM_SetTriggerOutput>:
{
 8005b02:	b480      	push	{r7}
 8005b04:	b083      	sub	sp, #12
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	605a      	str	r2, [r3, #4]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <LL_TIM_DisableMasterSlaveMode>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	609a      	str	r2, [r3, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <LL_APB1_GRP1_EnableClock>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8005b50:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <LL_APB1_GRP1_EnableClock+0x34>)
 8005b52:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005b56:	4909      	ldr	r1, [pc, #36]	@ (8005b7c <LL_APB1_GRP1_EnableClock+0x34>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8005b60:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <LL_APB1_GRP1_EnableClock+0x34>)
 8005b62:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
}
 8005b6e:	bf00      	nop
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	58024400 	.word	0x58024400

08005b80 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch3;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08e      	sub	sp, #56	@ 0x38
 8005b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	605a      	str	r2, [r3, #4]
 8005b90:	609a      	str	r2, [r3, #8]
 8005b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b94:	f107 031c 	add.w	r3, r7, #28
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	605a      	str	r2, [r3, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ba0:	463b      	mov	r3, r7
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	605a      	str	r2, [r3, #4]
 8005ba8:	609a      	str	r2, [r3, #8]
 8005baa:	60da      	str	r2, [r3, #12]
 8005bac:	611a      	str	r2, [r3, #16]
 8005bae:	615a      	str	r2, [r3, #20]
 8005bb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005bb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005bb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 546;
 8005bba:	4b2b      	ldr	r3, [pc, #172]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005bbc:	f240 2222 	movw	r2, #546	@ 0x222
 8005bc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bc2:	4b29      	ldr	r3, [pc, #164]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8005bc8:	4b27      	ldr	r3, [pc, #156]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005bca:	22f9      	movs	r2, #249	@ 0xf9
 8005bcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bce:	4b26      	ldr	r3, [pc, #152]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bd4:	4b24      	ldr	r3, [pc, #144]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005bda:	4823      	ldr	r0, [pc, #140]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005bdc:	f007 ffae 	bl	800db3c <HAL_TIM_Base_Init>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8005be6:	f7fe fe3d 	bl	8004864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005bf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	481c      	ldr	r0, [pc, #112]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005bf8:	f008 ff62 	bl	800eac0 <HAL_TIM_ConfigClockSource>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005c02:	f7fe fe2f 	bl	8004864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005c06:	4818      	ldr	r0, [pc, #96]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005c08:	f008 f895 	bl	800dd36 <HAL_TIM_PWM_Init>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005c12:	f7fe fe27 	bl	8004864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c16:	2300      	movs	r3, #0
 8005c18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c1e:	f107 031c 	add.w	r3, r7, #28
 8005c22:	4619      	mov	r1, r3
 8005c24:	4810      	ldr	r0, [pc, #64]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005c26:	f009 fd97 	bl	800f758 <HAL_TIMEx_MasterConfigSynchronization>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005c30:	f7fe fe18 	bl	8004864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c34:	2360      	movs	r3, #96	@ 0x60
 8005c36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 125;
 8005c38:	237d      	movs	r3, #125	@ 0x7d
 8005c3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c44:	463b      	mov	r3, r7
 8005c46:	2200      	movs	r2, #0
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4807      	ldr	r0, [pc, #28]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005c4c:	f008 fe24 	bl	800e898 <HAL_TIM_PWM_ConfigChannel>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8005c56:	f7fe fe05 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005c5a:	4803      	ldr	r0, [pc, #12]	@ (8005c68 <MX_TIM2_Init+0xe8>)
 8005c5c:	f000 fad0 	bl	8006200 <HAL_TIM_MspPostInit>

}
 8005c60:	bf00      	nop
 8005c62:	3738      	adds	r7, #56	@ 0x38
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	24000794 	.word	0x24000794

08005c6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08e      	sub	sp, #56	@ 0x38
 8005c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c72:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
 8005c7c:	609a      	str	r2, [r3, #8]
 8005c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c80:	f107 031c 	add.w	r3, r7, #28
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	605a      	str	r2, [r3, #4]
 8005c8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	609a      	str	r2, [r3, #8]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	611a      	str	r2, [r3, #16]
 8005c9a:	615a      	str	r2, [r3, #20]
 8005c9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8005d58 <MX_TIM3_Init+0xec>)
 8005ca2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005caa:	4b2a      	ldr	r3, [pc, #168]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 343;
 8005cb0:	4b28      	ldr	r3, [pc, #160]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005cb2:	f240 1257 	movw	r2, #343	@ 0x157
 8005cb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cb8:	4b26      	ldr	r3, [pc, #152]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cbe:	4b25      	ldr	r3, [pc, #148]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005cc4:	4823      	ldr	r0, [pc, #140]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005cc6:	f007 ff39 	bl	800db3c <HAL_TIM_Base_Init>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005cd0:	f7fe fdc8 	bl	8004864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005cda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005cde:	4619      	mov	r1, r3
 8005ce0:	481c      	ldr	r0, [pc, #112]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005ce2:	f008 feed 	bl	800eac0 <HAL_TIM_ConfigClockSource>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005cec:	f7fe fdba 	bl	8004864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005cf0:	4818      	ldr	r0, [pc, #96]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005cf2:	f008 f820 	bl	800dd36 <HAL_TIM_PWM_Init>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005cfc:	f7fe fdb2 	bl	8004864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d08:	f107 031c 	add.w	r3, r7, #28
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4811      	ldr	r0, [pc, #68]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005d10:	f009 fd22 	bl	800f758 <HAL_TIMEx_MasterConfigSynchronization>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005d1a:	f7fe fda3 	bl	8004864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d1e:	2360      	movs	r3, #96	@ 0x60
 8005d20:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d2e:	463b      	mov	r3, r7
 8005d30:	2204      	movs	r2, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4807      	ldr	r0, [pc, #28]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005d36:	f008 fdaf 	bl	800e898 <HAL_TIM_PWM_ConfigChannel>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005d40:	f7fe fd90 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005d44:	4803      	ldr	r0, [pc, #12]	@ (8005d54 <MX_TIM3_Init+0xe8>)
 8005d46:	f000 fa5b 	bl	8006200 <HAL_TIM_MspPostInit>

}
 8005d4a:	bf00      	nop
 8005d4c:	3738      	adds	r7, #56	@ 0x38
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	240007e0 	.word	0x240007e0
 8005d58:	40000400 	.word	0x40000400

08005d5c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08e      	sub	sp, #56	@ 0x38
 8005d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	609a      	str	r2, [r3, #8]
 8005d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d70:	f107 031c 	add.w	r3, r7, #28
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	605a      	str	r2, [r3, #4]
 8005d7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	605a      	str	r2, [r3, #4]
 8005d84:	609a      	str	r2, [r3, #8]
 8005d86:	60da      	str	r2, [r3, #12]
 8005d88:	611a      	str	r2, [r3, #16]
 8005d8a:	615a      	str	r2, [r3, #20]
 8005d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005d90:	4a3d      	ldr	r2, [pc, #244]	@ (8005e88 <MX_TIM5_Init+0x12c>)
 8005d92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005d94:	4b3b      	ldr	r3, [pc, #236]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8005da0:	4b38      	ldr	r3, [pc, #224]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005da6:	4b37      	ldr	r3, [pc, #220]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dac:	4b35      	ldr	r3, [pc, #212]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005db2:	4834      	ldr	r0, [pc, #208]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005db4:	f007 fec2 	bl	800db3c <HAL_TIM_Base_Init>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8005dbe:	f7fe fd51 	bl	8004864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005dc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005dc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005dcc:	4619      	mov	r1, r3
 8005dce:	482d      	ldr	r0, [pc, #180]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005dd0:	f008 fe76 	bl	800eac0 <HAL_TIM_ConfigClockSource>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8005dda:	f7fe fd43 	bl	8004864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005dde:	4829      	ldr	r0, [pc, #164]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005de0:	f007 ffa9 	bl	800dd36 <HAL_TIM_PWM_Init>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8005dea:	f7fe fd3b 	bl	8004864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005df6:	f107 031c 	add.w	r3, r7, #28
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4821      	ldr	r0, [pc, #132]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005dfe:	f009 fcab 	bl	800f758 <HAL_TIMEx_MasterConfigSynchronization>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8005e08:	f7fe fd2c 	bl	8004864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e0c:	2360      	movs	r3, #96	@ 0x60
 8005e0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	2200      	movs	r2, #0
 8005e20:	4619      	mov	r1, r3
 8005e22:	4818      	ldr	r0, [pc, #96]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005e24:	f008 fd38 	bl	800e898 <HAL_TIM_PWM_ConfigChannel>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8005e2e:	f7fe fd19 	bl	8004864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e32:	463b      	mov	r3, r7
 8005e34:	2204      	movs	r2, #4
 8005e36:	4619      	mov	r1, r3
 8005e38:	4812      	ldr	r0, [pc, #72]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005e3a:	f008 fd2d 	bl	800e898 <HAL_TIM_PWM_ConfigChannel>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8005e44:	f7fe fd0e 	bl	8004864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005e48:	463b      	mov	r3, r7
 8005e4a:	2208      	movs	r2, #8
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	480d      	ldr	r0, [pc, #52]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005e50:	f008 fd22 	bl	800e898 <HAL_TIM_PWM_ConfigChannel>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <MX_TIM5_Init+0x102>
  {
    Error_Handler();
 8005e5a:	f7fe fd03 	bl	8004864 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005e5e:	463b      	mov	r3, r7
 8005e60:	220c      	movs	r2, #12
 8005e62:	4619      	mov	r1, r3
 8005e64:	4807      	ldr	r0, [pc, #28]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005e66:	f008 fd17 	bl	800e898 <HAL_TIM_PWM_ConfigChannel>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_TIM5_Init+0x118>
  {
    Error_Handler();
 8005e70:	f7fe fcf8 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005e74:	4803      	ldr	r0, [pc, #12]	@ (8005e84 <MX_TIM5_Init+0x128>)
 8005e76:	f000 f9c3 	bl	8006200 <HAL_TIM_MspPostInit>

}
 8005e7a:	bf00      	nop
 8005e7c:	3738      	adds	r7, #56	@ 0x38
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	2400082c 	.word	0x2400082c
 8005e88:	40000c00 	.word	0x40000c00

08005e8c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	605a      	str	r2, [r3, #4]
 8005e9a:	609a      	str	r2, [r3, #8]
 8005e9c:	60da      	str	r2, [r3, #12]
 8005e9e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8005ea0:	2020      	movs	r0, #32
 8005ea2:	f7ff fe51 	bl	8005b48 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005ea6:	f7ff fd93 	bl	80059d0 <__NVIC_GetPriorityGrouping>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2200      	movs	r2, #0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7ff fde3 	bl	8005a7c <NVIC_EncodePriority>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4619      	mov	r1, r3
 8005eba:	2037      	movs	r0, #55	@ 0x37
 8005ebc:	f7ff fdb4 	bl	8005a28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8005ec0:	2037      	movs	r0, #55	@ 0x37
 8005ec2:	f7ff fd93 	bl	80059ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8005ec6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8005eca:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 274;
 8005ed0:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8005ed4:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4808      	ldr	r0, [pc, #32]	@ (8005efc <MX_TIM7_Init+0x70>)
 8005edc:	f00a fdda 	bl	8010a94 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8005ee0:	4806      	ldr	r0, [pc, #24]	@ (8005efc <MX_TIM7_Init+0x70>)
 8005ee2:	f7ff fdfe 	bl	8005ae2 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4804      	ldr	r0, [pc, #16]	@ (8005efc <MX_TIM7_Init+0x70>)
 8005eea:	f7ff fe0a 	bl	8005b02 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8005eee:	4803      	ldr	r0, [pc, #12]	@ (8005efc <MX_TIM7_Init+0x70>)
 8005ef0:	f7ff fe1a 	bl	8005b28 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005ef4:	bf00      	nop
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	40001400 	.word	0x40001400

08005f00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f10:	d10f      	bne.n	8005f32 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f12:	4b2a      	ldr	r3, [pc, #168]	@ (8005fbc <HAL_TIM_Base_MspInit+0xbc>)
 8005f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f18:	4a28      	ldr	r2, [pc, #160]	@ (8005fbc <HAL_TIM_Base_MspInit+0xbc>)
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f22:	4b26      	ldr	r3, [pc, #152]	@ (8005fbc <HAL_TIM_Base_MspInit+0xbc>)
 8005f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005f30:	e14d      	b.n	80061ce <HAL_TIM_Base_MspInit+0x2ce>
  else if(tim_baseHandle->Instance==TIM3)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a22      	ldr	r2, [pc, #136]	@ (8005fc0 <HAL_TIM_Base_MspInit+0xc0>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d147      	bne.n	8005fcc <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005fbc <HAL_TIM_Base_MspInit+0xbc>)
 8005f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f42:	4a1e      	ldr	r2, [pc, #120]	@ (8005fbc <HAL_TIM_Base_MspInit+0xbc>)
 8005f44:	f043 0302 	orr.w	r3, r3, #2
 8005f48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fbc <HAL_TIM_Base_MspInit+0xbc>)
 8005f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream6;
 8005f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005fc8 <HAL_TIM_Base_MspInit+0xc8>)
 8005f5e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8005f60:	4b18      	ldr	r3, [pc, #96]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f62:	2218      	movs	r2, #24
 8005f64:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f66:	4b17      	ldr	r3, [pc, #92]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f68:	2240      	movs	r2, #64	@ 0x40
 8005f6a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f6c:	4b15      	ldr	r3, [pc, #84]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8005f72:	4b14      	ldr	r3, [pc, #80]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005f78:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f7a:	4b12      	ldr	r3, [pc, #72]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005f80:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005f82:	4b10      	ldr	r3, [pc, #64]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f84:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005f88:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8005f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8005f90:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8005f9c:	4809      	ldr	r0, [pc, #36]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005f9e:	f000 fee1 	bl	8006d64 <HAL_DMA_Init>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <HAL_TIM_Base_MspInit+0xac>
      Error_Handler();
 8005fa8:	f7fe fc5c 	bl	8004864 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a05      	ldr	r2, [pc, #20]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005fb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005fb2:	4a04      	ldr	r2, [pc, #16]	@ (8005fc4 <HAL_TIM_Base_MspInit+0xc4>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005fb8:	e109      	b.n	80061ce <HAL_TIM_Base_MspInit+0x2ce>
 8005fba:	bf00      	nop
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	40000400 	.word	0x40000400
 8005fc4:	24000878 	.word	0x24000878
 8005fc8:	400200a0 	.word	0x400200a0
  else if(tim_baseHandle->Instance==TIM5)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a81      	ldr	r2, [pc, #516]	@ (80061d8 <HAL_TIM_Base_MspInit+0x2d8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	f040 80fb 	bne.w	80061ce <HAL_TIM_Base_MspInit+0x2ce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005fd8:	4b80      	ldr	r3, [pc, #512]	@ (80061dc <HAL_TIM_Base_MspInit+0x2dc>)
 8005fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fde:	4a7f      	ldr	r2, [pc, #508]	@ (80061dc <HAL_TIM_Base_MspInit+0x2dc>)
 8005fe0:	f043 0308 	orr.w	r3, r3, #8
 8005fe4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005fe8:	4b7c      	ldr	r3, [pc, #496]	@ (80061dc <HAL_TIM_Base_MspInit+0x2dc>)
 8005fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fee:	f003 0308 	and.w	r3, r3, #8
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch1.Instance = DMA1_Stream0;
 8005ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8005ff8:	4a7a      	ldr	r2, [pc, #488]	@ (80061e4 <HAL_TIM_Base_MspInit+0x2e4>)
 8005ffa:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Request = DMA_REQUEST_TIM5_CH1;
 8005ffc:	4b78      	ldr	r3, [pc, #480]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8005ffe:	2237      	movs	r2, #55	@ 0x37
 8006000:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006002:	4b77      	ldr	r3, [pc, #476]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006004:	2240      	movs	r2, #64	@ 0x40
 8006006:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006008:	4b75      	ldr	r3, [pc, #468]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 800600a:	2200      	movs	r2, #0
 800600c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800600e:	4b74      	ldr	r3, [pc, #464]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006010:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006014:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006016:	4b72      	ldr	r3, [pc, #456]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006018:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800601c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800601e:	4b70      	ldr	r3, [pc, #448]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006020:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006024:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8006026:	4b6e      	ldr	r3, [pc, #440]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006028:	2200      	movs	r2, #0
 800602a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800602c:	4b6c      	ldr	r3, [pc, #432]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 800602e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006032:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006034:	4b6a      	ldr	r3, [pc, #424]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006036:	2204      	movs	r2, #4
 8006038:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800603a:	4b69      	ldr	r3, [pc, #420]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 800603c:	2200      	movs	r2, #0
 800603e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8006040:	4b67      	ldr	r3, [pc, #412]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006042:	2200      	movs	r2, #0
 8006044:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006046:	4b66      	ldr	r3, [pc, #408]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 800604c:	4864      	ldr	r0, [pc, #400]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 800604e:	f000 fe89 	bl	8006d64 <HAL_DMA_Init>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_TIM_Base_MspInit+0x15c>
      Error_Handler();
 8006058:	f7fe fc04 	bl	8004864 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a60      	ldr	r2, [pc, #384]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006060:	625a      	str	r2, [r3, #36]	@ 0x24
 8006062:	4a5f      	ldr	r2, [pc, #380]	@ (80061e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream1;
 8006068:	4b5f      	ldr	r3, [pc, #380]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 800606a:	4a60      	ldr	r2, [pc, #384]	@ (80061ec <HAL_TIM_Base_MspInit+0x2ec>)
 800606c:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 800606e:	4b5e      	ldr	r3, [pc, #376]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 8006070:	2238      	movs	r2, #56	@ 0x38
 8006072:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006074:	4b5c      	ldr	r3, [pc, #368]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 8006076:	2240      	movs	r2, #64	@ 0x40
 8006078:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800607a:	4b5b      	ldr	r3, [pc, #364]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 800607c:	2200      	movs	r2, #0
 800607e:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006080:	4b59      	ldr	r3, [pc, #356]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 8006082:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006086:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006088:	4b57      	ldr	r3, [pc, #348]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 800608a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800608e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006090:	4b55      	ldr	r3, [pc, #340]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 8006092:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006096:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8006098:	4b53      	ldr	r3, [pc, #332]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 800609a:	2200      	movs	r2, #0
 800609c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800609e:	4b52      	ldr	r3, [pc, #328]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80060a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80060a4:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80060a6:	4b50      	ldr	r3, [pc, #320]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80060a8:	2204      	movs	r2, #4
 80060aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80060ac:	4b4e      	ldr	r3, [pc, #312]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80060b2:	4b4d      	ldr	r3, [pc, #308]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80060b8:	4b4b      	ldr	r3, [pc, #300]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80060be:	484a      	ldr	r0, [pc, #296]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80060c0:	f000 fe50 	bl	8006d64 <HAL_DMA_Init>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d001      	beq.n	80060ce <HAL_TIM_Base_MspInit+0x1ce>
      Error_Handler();
 80060ca:	f7fe fbcb 	bl	8004864 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a45      	ldr	r2, [pc, #276]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80060d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80060d4:	4a44      	ldr	r2, [pc, #272]	@ (80061e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch3.Instance = DMA1_Stream2;
 80060da:	4b45      	ldr	r3, [pc, #276]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80060dc:	4a45      	ldr	r2, [pc, #276]	@ (80061f4 <HAL_TIM_Base_MspInit+0x2f4>)
 80060de:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3.Init.Request = DMA_REQUEST_TIM5_CH3;
 80060e0:	4b43      	ldr	r3, [pc, #268]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80060e2:	2239      	movs	r2, #57	@ 0x39
 80060e4:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060e6:	4b42      	ldr	r3, [pc, #264]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80060e8:	2240      	movs	r2, #64	@ 0x40
 80060ea:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80060ec:	4b40      	ldr	r3, [pc, #256]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80060f2:	4b3f      	ldr	r3, [pc, #252]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80060f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060f8:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80060fa:	4b3d      	ldr	r3, [pc, #244]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 80060fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006100:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006102:	4b3b      	ldr	r3, [pc, #236]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8006104:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006108:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3.Init.Mode = DMA_NORMAL;
 800610a:	4b39      	ldr	r3, [pc, #228]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 800610c:	2200      	movs	r2, #0
 800610e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8006110:	4b37      	ldr	r3, [pc, #220]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8006112:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006116:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006118:	4b35      	ldr	r3, [pc, #212]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 800611a:	2204      	movs	r2, #4
 800611c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800611e:	4b34      	ldr	r3, [pc, #208]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8006120:	2200      	movs	r2, #0
 8006122:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8006124:	4b32      	ldr	r3, [pc, #200]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8006126:	2200      	movs	r2, #0
 8006128:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800612a:	4b31      	ldr	r3, [pc, #196]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 800612c:	2200      	movs	r2, #0
 800612e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch3) != HAL_OK)
 8006130:	482f      	ldr	r0, [pc, #188]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8006132:	f000 fe17 	bl	8006d64 <HAL_DMA_Init>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_TIM_Base_MspInit+0x240>
      Error_Handler();
 800613c:	f7fe fb92 	bl	8004864 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a2b      	ldr	r2, [pc, #172]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8006144:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006146:	4a2a      	ldr	r2, [pc, #168]	@ (80061f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream5;
 800614c:	4b2a      	ldr	r3, [pc, #168]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 800614e:	4a2b      	ldr	r2, [pc, #172]	@ (80061fc <HAL_TIM_Base_MspInit+0x2fc>)
 8006150:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8006152:	4b29      	ldr	r3, [pc, #164]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 8006154:	223a      	movs	r2, #58	@ 0x3a
 8006156:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006158:	4b27      	ldr	r3, [pc, #156]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 800615a:	2240      	movs	r2, #64	@ 0x40
 800615c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800615e:	4b26      	ldr	r3, [pc, #152]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 8006160:	2200      	movs	r2, #0
 8006162:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8006164:	4b24      	ldr	r3, [pc, #144]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 8006166:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800616a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800616c:	4b22      	ldr	r3, [pc, #136]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 800616e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006172:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006174:	4b20      	ldr	r3, [pc, #128]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 8006176:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800617a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800617c:	4b1e      	ldr	r3, [pc, #120]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 800617e:	2200      	movs	r2, #0
 8006180:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8006182:	4b1d      	ldr	r3, [pc, #116]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 8006184:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006188:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800618a:	4b1b      	ldr	r3, [pc, #108]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 800618c:	2204      	movs	r2, #4
 800618e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8006190:	4b19      	ldr	r3, [pc, #100]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 8006192:	2200      	movs	r2, #0
 8006194:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8006196:	4b18      	ldr	r3, [pc, #96]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 8006198:	2200      	movs	r2, #0
 800619a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800619c:	4b16      	ldr	r3, [pc, #88]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 800619e:	2200      	movs	r2, #0
 80061a0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80061a2:	4815      	ldr	r0, [pc, #84]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 80061a4:	f000 fdde 	bl	8006d64 <HAL_DMA_Init>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_TIM_Base_MspInit+0x2b2>
      Error_Handler();
 80061ae:	f7fe fb59 	bl	8004864 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a10      	ldr	r2, [pc, #64]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 80061b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80061b8:	4a0f      	ldr	r2, [pc, #60]	@ (80061f8 <HAL_TIM_Base_MspInit+0x2f8>)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80061be:	2200      	movs	r2, #0
 80061c0:	2100      	movs	r1, #0
 80061c2:	2032      	movs	r0, #50	@ 0x32
 80061c4:	f000 fd21 	bl	8006c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80061c8:	2032      	movs	r0, #50	@ 0x32
 80061ca:	f000 fd38 	bl	8006c3e <HAL_NVIC_EnableIRQ>
}
 80061ce:	bf00      	nop
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	58024400 	.word	0x58024400
 80061e0:	240008f0 	.word	0x240008f0
 80061e4:	40020010 	.word	0x40020010
 80061e8:	24000968 	.word	0x24000968
 80061ec:	40020028 	.word	0x40020028
 80061f0:	240009e0 	.word	0x240009e0
 80061f4:	40020040 	.word	0x40020040
 80061f8:	24000a58 	.word	0x24000a58
 80061fc:	40020088 	.word	0x40020088

08006200 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08a      	sub	sp, #40	@ 0x28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	60da      	str	r2, [r3, #12]
 8006216:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006220:	d11f      	bne.n	8006262 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006222:	4b36      	ldr	r3, [pc, #216]	@ (80062fc <HAL_TIM_MspPostInit+0xfc>)
 8006224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006228:	4a34      	ldr	r2, [pc, #208]	@ (80062fc <HAL_TIM_MspPostInit+0xfc>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006232:	4b32      	ldr	r3, [pc, #200]	@ (80062fc <HAL_TIM_MspPostInit+0xfc>)
 8006234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006240:	2320      	movs	r3, #32
 8006242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006244:	2302      	movs	r3, #2
 8006246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006248:	2300      	movs	r3, #0
 800624a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800624c:	2300      	movs	r3, #0
 800624e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006250:	2301      	movs	r3, #1
 8006252:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4619      	mov	r1, r3
 800625a:	4829      	ldr	r0, [pc, #164]	@ (8006300 <HAL_TIM_MspPostInit+0x100>)
 800625c:	f003 f89c 	bl	8009398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8006260:	e048      	b.n	80062f4 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM3)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a27      	ldr	r2, [pc, #156]	@ (8006304 <HAL_TIM_MspPostInit+0x104>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d11f      	bne.n	80062ac <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800626c:	4b23      	ldr	r3, [pc, #140]	@ (80062fc <HAL_TIM_MspPostInit+0xfc>)
 800626e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006272:	4a22      	ldr	r2, [pc, #136]	@ (80062fc <HAL_TIM_MspPostInit+0xfc>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800627c:	4b1f      	ldr	r3, [pc, #124]	@ (80062fc <HAL_TIM_MspPostInit+0xfc>)
 800627e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800628a:	2380      	movs	r3, #128	@ 0x80
 800628c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800628e:	2302      	movs	r3, #2
 8006290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006292:	2300      	movs	r3, #0
 8006294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006296:	2300      	movs	r3, #0
 8006298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800629a:	2302      	movs	r3, #2
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800629e:	f107 0314 	add.w	r3, r7, #20
 80062a2:	4619      	mov	r1, r3
 80062a4:	4816      	ldr	r0, [pc, #88]	@ (8006300 <HAL_TIM_MspPostInit+0x100>)
 80062a6:	f003 f877 	bl	8009398 <HAL_GPIO_Init>
}
 80062aa:	e023      	b.n	80062f4 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM5)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a15      	ldr	r2, [pc, #84]	@ (8006308 <HAL_TIM_MspPostInit+0x108>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d11e      	bne.n	80062f4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062b6:	4b11      	ldr	r3, [pc, #68]	@ (80062fc <HAL_TIM_MspPostInit+0xfc>)
 80062b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062bc:	4a0f      	ldr	r2, [pc, #60]	@ (80062fc <HAL_TIM_MspPostInit+0xfc>)
 80062be:	f043 0301 	orr.w	r3, r3, #1
 80062c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80062c6:	4b0d      	ldr	r3, [pc, #52]	@ (80062fc <HAL_TIM_MspPostInit+0xfc>)
 80062c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80062d4:	230f      	movs	r3, #15
 80062d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062d8:	2302      	movs	r3, #2
 80062da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062e0:	2300      	movs	r3, #0
 80062e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80062e4:	2302      	movs	r3, #2
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062e8:	f107 0314 	add.w	r3, r7, #20
 80062ec:	4619      	mov	r1, r3
 80062ee:	4804      	ldr	r0, [pc, #16]	@ (8006300 <HAL_TIM_MspPostInit+0x100>)
 80062f0:	f003 f852 	bl	8009398 <HAL_GPIO_Init>
}
 80062f4:	bf00      	nop
 80062f6:	3728      	adds	r7, #40	@ 0x28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	58024400 	.word	0x58024400
 8006300:	58020000 	.word	0x58020000
 8006304:	40000400 	.word	0x40000400
 8006308:	40000c00 	.word	0x40000c00

0800630c <__NVIC_GetPriorityGrouping>:
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006310:	4b04      	ldr	r3, [pc, #16]	@ (8006324 <__NVIC_GetPriorityGrouping+0x18>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	0a1b      	lsrs	r3, r3, #8
 8006316:	f003 0307 	and.w	r3, r3, #7
}
 800631a:	4618      	mov	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <__NVIC_EnableIRQ>:
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006336:	2b00      	cmp	r3, #0
 8006338:	db0b      	blt.n	8006352 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	f003 021f 	and.w	r2, r3, #31
 8006340:	4907      	ldr	r1, [pc, #28]	@ (8006360 <__NVIC_EnableIRQ+0x38>)
 8006342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	2001      	movs	r0, #1
 800634a:	fa00 f202 	lsl.w	r2, r0, r2
 800634e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e100 	.word	0xe000e100

08006364 <__NVIC_SetPriority>:
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	6039      	str	r1, [r7, #0]
 800636e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006374:	2b00      	cmp	r3, #0
 8006376:	db0a      	blt.n	800638e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	490c      	ldr	r1, [pc, #48]	@ (80063b0 <__NVIC_SetPriority+0x4c>)
 800637e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006382:	0112      	lsls	r2, r2, #4
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	440b      	add	r3, r1
 8006388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800638c:	e00a      	b.n	80063a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	4908      	ldr	r1, [pc, #32]	@ (80063b4 <__NVIC_SetPriority+0x50>)
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	3b04      	subs	r3, #4
 800639c:	0112      	lsls	r2, r2, #4
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	440b      	add	r3, r1
 80063a2:	761a      	strb	r2, [r3, #24]
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	e000e100 	.word	0xe000e100
 80063b4:	e000ed00 	.word	0xe000ed00

080063b8 <NVIC_EncodePriority>:
{
 80063b8:	b480      	push	{r7}
 80063ba:	b089      	sub	sp, #36	@ 0x24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f1c3 0307 	rsb	r3, r3, #7
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	bf28      	it	cs
 80063d6:	2304      	movcs	r3, #4
 80063d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	3304      	adds	r3, #4
 80063de:	2b06      	cmp	r3, #6
 80063e0:	d902      	bls.n	80063e8 <NVIC_EncodePriority+0x30>
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	3b03      	subs	r3, #3
 80063e6:	e000      	b.n	80063ea <NVIC_EncodePriority+0x32>
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	43da      	mvns	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	401a      	ands	r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006400:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	fa01 f303 	lsl.w	r3, r1, r3
 800640a:	43d9      	mvns	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006410:	4313      	orrs	r3, r2
}
 8006412:	4618      	mov	r0, r3
 8006414:	3724      	adds	r7, #36	@ 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <LL_USART_Enable>:
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f043 0201 	orr.w	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr

0800643e <LL_USART_DisableFIFO>:
{
 800643e:	b480      	push	{r7}
 8006440:	b083      	sub	sp, #12
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	601a      	str	r2, [r3, #0]
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <LL_USART_SetTXFIFOThreshold>:
{
 800645e:	b480      	push	{r7}
 8006460:	b089      	sub	sp, #36	@ 0x24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3308      	adds	r3, #8
 800646c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	60bb      	str	r3, [r7, #8]
   return(result);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	075b      	lsls	r3, r3, #29
 8006480:	4313      	orrs	r3, r2
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	3308      	adds	r3, #8
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	61ba      	str	r2, [r7, #24]
 800648c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6979      	ldr	r1, [r7, #20]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	613b      	str	r3, [r7, #16]
   return(result);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e4      	bne.n	8006468 <LL_USART_SetTXFIFOThreshold+0xa>
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	3724      	adds	r7, #36	@ 0x24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <LL_USART_SetRXFIFOThreshold>:
{
 80064ac:	b480      	push	{r7}
 80064ae:	b089      	sub	sp, #36	@ 0x24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3308      	adds	r3, #8
 80064ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	065b      	lsls	r3, r3, #25
 80064ce:	4313      	orrs	r3, r2
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	3308      	adds	r3, #8
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	61ba      	str	r2, [r7, #24]
 80064da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6979      	ldr	r1, [r7, #20]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	613b      	str	r3, [r7, #16]
   return(result);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e4      	bne.n	80064b6 <LL_USART_SetRXFIFOThreshold+0xa>
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	3724      	adds	r7, #36	@ 0x24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <LL_USART_ConfigAsyncMode>:
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	609a      	str	r2, [r3, #8]
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <LL_USART_IsActiveFlag_TEACK>:
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800653a:	d101      	bne.n	8006540 <LL_USART_IsActiveFlag_TEACK+0x1a>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <LL_USART_IsActiveFlag_REACK>:
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800655e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006562:	d101      	bne.n	8006568 <LL_USART_IsActiveFlag_REACK+0x1a>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <LL_USART_IsActiveFlag_REACK+0x1c>
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	370c      	adds	r7, #12
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
	...

08006578 <LL_AHB4_GRP1_EnableClock>:
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8006580:	4b0a      	ldr	r3, [pc, #40]	@ (80065ac <LL_AHB4_GRP1_EnableClock+0x34>)
 8006582:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006586:	4909      	ldr	r1, [pc, #36]	@ (80065ac <LL_AHB4_GRP1_EnableClock+0x34>)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8006590:	4b06      	ldr	r3, [pc, #24]	@ (80065ac <LL_AHB4_GRP1_EnableClock+0x34>)
 8006592:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4013      	ands	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800659c:	68fb      	ldr	r3, [r7, #12]
}
 800659e:	bf00      	nop
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	58024400 	.word	0x58024400

080065b0 <LL_APB1_GRP1_EnableClock>:
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 80065b8:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <LL_APB1_GRP1_EnableClock+0x34>)
 80065ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80065be:	4909      	ldr	r1, [pc, #36]	@ (80065e4 <LL_APB1_GRP1_EnableClock+0x34>)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80065c8:	4b06      	ldr	r3, [pc, #24]	@ (80065e4 <LL_APB1_GRP1_EnableClock+0x34>)
 80065ca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4013      	ands	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80065d4:	68fb      	ldr	r3, [r7, #12]
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	58024400 	.word	0x58024400

080065e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80065f0:	4b0a      	ldr	r3, [pc, #40]	@ (800661c <LL_APB2_GRP1_EnableClock+0x34>)
 80065f2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80065f6:	4909      	ldr	r1, [pc, #36]	@ (800661c <LL_APB2_GRP1_EnableClock+0x34>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006600:	4b06      	ldr	r3, [pc, #24]	@ (800661c <LL_APB2_GRP1_EnableClock+0x34>)
 8006602:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4013      	ands	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800660c:	68fb      	ldr	r3, [r7, #12]
}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	58024400 	.word	0x58024400

08006620 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b0bc      	sub	sp, #240	@ 0xf0
 8006624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8006626:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800662a:	2220      	movs	r2, #32
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f00b fabe 	bl	8011bb0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006634:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	609a      	str	r2, [r3, #8]
 8006640:	60da      	str	r2, [r3, #12]
 8006642:	611a      	str	r2, [r3, #16]
 8006644:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006646:	463b      	mov	r3, r7
 8006648:	22b8      	movs	r2, #184	@ 0xb8
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f00b faaf 	bl	8011bb0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006652:	f04f 0202 	mov.w	r2, #2
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800665e:	2300      	movs	r3, #0
 8006660:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006662:	463b      	mov	r3, r7
 8006664:	4618      	mov	r0, r3
 8006666:	f005 ff65 	bl	800c534 <HAL_RCCEx_PeriphCLKConfig>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 8006670:	f7fe f8f8 	bl	8004864 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8006674:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006678:	f7ff ff9a 	bl	80065b0 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 800667c:	2008      	movs	r0, #8
 800667e:	f7ff ff7b 	bl	8006578 <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PD0   ------> UART4_RX
  PD1   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8006682:	2303      	movs	r3, #3
 8006684:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006688:	2302      	movs	r3, #2
 800668a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800668e:	2300      	movs	r3, #0
 8006690:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006694:	2300      	movs	r3, #0
 8006696:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800669a:	2300      	movs	r3, #0
 800669c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80066a0:	2308      	movs	r3, #8
 80066a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066a6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80066aa:	4619      	mov	r1, r3
 80066ac:	4827      	ldr	r0, [pc, #156]	@ (800674c <MX_UART4_Init+0x12c>)
 80066ae:	f009 f9e7 	bl	800fa80 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80066b2:	f7ff fe2b 	bl	800630c <__NVIC_GetPriorityGrouping>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fe7b 	bl	80063b8 <NVIC_EncodePriority>
 80066c2:	4603      	mov	r3, r0
 80066c4:	4619      	mov	r1, r3
 80066c6:	2034      	movs	r0, #52	@ 0x34
 80066c8:	f7ff fe4c 	bl	8006364 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 80066cc:	2034      	movs	r0, #52	@ 0x34
 80066ce:	f7ff fe2b 	bl	8006328 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80066d2:	2300      	movs	r3, #0
 80066d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  UART_InitStruct.BaudRate = 115200;
 80066d8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80066dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80066e6:	2300      	movs	r3, #0
 80066e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_RX;
 80066f2:	2304      	movs	r3, #4
 80066f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80066fe:	2300      	movs	r3, #0
 8006700:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(UART4, &UART_InitStruct);
 8006704:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8006708:	4619      	mov	r1, r3
 800670a:	4811      	ldr	r0, [pc, #68]	@ (8006750 <MX_UART4_Init+0x130>)
 800670c:	f00a fb00 	bl	8010d10 <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 8006710:	480f      	ldr	r0, [pc, #60]	@ (8006750 <MX_UART4_Init+0x130>)
 8006712:	f7ff fe94 	bl	800643e <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8006716:	2100      	movs	r1, #0
 8006718:	480d      	ldr	r0, [pc, #52]	@ (8006750 <MX_UART4_Init+0x130>)
 800671a:	f7ff fea0 	bl	800645e <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 800671e:	2100      	movs	r1, #0
 8006720:	480b      	ldr	r0, [pc, #44]	@ (8006750 <MX_UART4_Init+0x130>)
 8006722:	f7ff fec3 	bl	80064ac <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 8006726:	480a      	ldr	r0, [pc, #40]	@ (8006750 <MX_UART4_Init+0x130>)
 8006728:	f7ff fee7 	bl	80064fa <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 800672c:	4808      	ldr	r0, [pc, #32]	@ (8006750 <MX_UART4_Init+0x130>)
 800672e:	f7ff fe76 	bl	800641e <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while(!(LL_USART_IsActiveFlag_REACK(UART4)))
 8006732:	bf00      	nop
 8006734:	4806      	ldr	r0, [pc, #24]	@ (8006750 <MX_UART4_Init+0x130>)
 8006736:	f7ff ff0a 	bl	800654e <LL_USART_IsActiveFlag_REACK>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f9      	beq.n	8006734 <MX_UART4_Init+0x114>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	37f0      	adds	r7, #240	@ 0xf0
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	58020c00 	.word	0x58020c00
 8006750:	40004c00 	.word	0x40004c00

08006754 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b0bc      	sub	sp, #240	@ 0xf0
 8006758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800675a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800675e:	2220      	movs	r2, #32
 8006760:	2100      	movs	r1, #0
 8006762:	4618      	mov	r0, r3
 8006764:	f00b fa24 	bl	8011bb0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006768:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	611a      	str	r2, [r3, #16]
 8006778:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800677a:	463b      	mov	r3, r7
 800677c:	22b8      	movs	r2, #184	@ 0xb8
 800677e:	2100      	movs	r1, #0
 8006780:	4618      	mov	r0, r3
 8006782:	f00b fa15 	bl	8011bb0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006786:	f04f 0201 	mov.w	r2, #1
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8006792:	2300      	movs	r3, #0
 8006794:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006796:	463b      	mov	r3, r7
 8006798:	4618      	mov	r0, r3
 800679a:	f005 fecb 	bl	800c534 <HAL_RCCEx_PeriphCLKConfig>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 80067a4:	f7fe f85e 	bl	8004864 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80067a8:	2020      	movs	r0, #32
 80067aa:	f7ff ff1d 	bl	80065e8 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80067ae:	2004      	movs	r0, #4
 80067b0:	f7ff fee2 	bl	8006578 <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80067b4:	23c0      	movs	r3, #192	@ 0xc0
 80067b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80067ba:	2302      	movs	r3, #2
 80067bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80067cc:	2300      	movs	r3, #0
 80067ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80067d2:	2307      	movs	r3, #7
 80067d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067d8:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80067dc:	4619      	mov	r1, r3
 80067de:	482a      	ldr	r0, [pc, #168]	@ (8006888 <MX_USART6_UART_Init+0x134>)
 80067e0:	f009 f94e 	bl	800fa80 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80067e4:	f7ff fd92 	bl	800630c <__NVIC_GetPriorityGrouping>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2200      	movs	r2, #0
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7ff fde2 	bl	80063b8 <NVIC_EncodePriority>
 80067f4:	4603      	mov	r3, r0
 80067f6:	4619      	mov	r1, r3
 80067f8:	2047      	movs	r0, #71	@ 0x47
 80067fa:	f7ff fdb3 	bl	8006364 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80067fe:	2047      	movs	r0, #71	@ 0x47
 8006800:	f7ff fd92 	bl	8006328 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8006804:	2300      	movs	r3, #0
 8006806:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  USART_InitStruct.BaudRate = 115200;
 800680a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800680e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006812:	2300      	movs	r3, #0
 8006814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8006818:	2300      	movs	r3, #0
 800681a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800681e:	2300      	movs	r3, #0
 8006820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006824:	230c      	movs	r3, #12
 8006826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800682a:	2300      	movs	r3, #0
 800682c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006830:	2300      	movs	r3, #0
 8006832:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LL_USART_Init(USART6, &USART_InitStruct);
 8006836:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800683a:	4619      	mov	r1, r3
 800683c:	4813      	ldr	r0, [pc, #76]	@ (800688c <MX_USART6_UART_Init+0x138>)
 800683e:	f00a fa67 	bl	8010d10 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8006842:	2100      	movs	r1, #0
 8006844:	4811      	ldr	r0, [pc, #68]	@ (800688c <MX_USART6_UART_Init+0x138>)
 8006846:	f7ff fe0a 	bl	800645e <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 800684a:	2100      	movs	r1, #0
 800684c:	480f      	ldr	r0, [pc, #60]	@ (800688c <MX_USART6_UART_Init+0x138>)
 800684e:	f7ff fe2d 	bl	80064ac <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8006852:	480e      	ldr	r0, [pc, #56]	@ (800688c <MX_USART6_UART_Init+0x138>)
 8006854:	f7ff fdf3 	bl	800643e <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 8006858:	480c      	ldr	r0, [pc, #48]	@ (800688c <MX_USART6_UART_Init+0x138>)
 800685a:	f7ff fe4e 	bl	80064fa <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 800685e:	480b      	ldr	r0, [pc, #44]	@ (800688c <MX_USART6_UART_Init+0x138>)
 8006860:	f7ff fddd 	bl	800641e <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8006864:	bf00      	nop
 8006866:	4809      	ldr	r0, [pc, #36]	@ (800688c <MX_USART6_UART_Init+0x138>)
 8006868:	f7ff fe5d 	bl	8006526 <LL_USART_IsActiveFlag_TEACK>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d0f9      	beq.n	8006866 <MX_USART6_UART_Init+0x112>
 8006872:	4806      	ldr	r0, [pc, #24]	@ (800688c <MX_USART6_UART_Init+0x138>)
 8006874:	f7ff fe6b 	bl	800654e <LL_USART_IsActiveFlag_REACK>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f3      	beq.n	8006866 <MX_USART6_UART_Init+0x112>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800687e:	bf00      	nop
 8006880:	bf00      	nop
 8006882:	37f0      	adds	r7, #240	@ 0xf0
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	58020800 	.word	0x58020800
 800688c:	40011400 	.word	0x40011400

08006890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006890:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80068cc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8006894:	f7ff f884 	bl	80059a0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006898:	f7fe fff2 	bl	8005880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800689c:	480c      	ldr	r0, [pc, #48]	@ (80068d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800689e:	490d      	ldr	r1, [pc, #52]	@ (80068d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80068a0:	4a0d      	ldr	r2, [pc, #52]	@ (80068d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80068a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068a4:	e002      	b.n	80068ac <LoopCopyDataInit>

080068a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068aa:	3304      	adds	r3, #4

080068ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068b0:	d3f9      	bcc.n	80068a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068b2:	4a0a      	ldr	r2, [pc, #40]	@ (80068dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80068b4:	4c0a      	ldr	r4, [pc, #40]	@ (80068e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80068b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068b8:	e001      	b.n	80068be <LoopFillZerobss>

080068ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068bc:	3204      	adds	r2, #4

080068be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068c0:	d3fb      	bcc.n	80068ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80068c2:	f00b f9ed 	bl	8011ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068c6:	f7fc fff7 	bl	80038b8 <main>
  bx  lr
 80068ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80068cc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80068d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80068d4:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 80068d8:	080168d8 	.word	0x080168d8
  ldr r2, =_sbss
 80068dc:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 80068e0:	24000c20 	.word	0x24000c20

080068e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068e4:	e7fe      	b.n	80068e4 <ADC3_IRQHandler>
	...

080068e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068ee:	2003      	movs	r0, #3
 80068f0:	f000 f980 	bl	8006bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068f4:	f005 fca4 	bl	800c240 <HAL_RCC_GetSysClockFreq>
 80068f8:	4602      	mov	r2, r0
 80068fa:	4b15      	ldr	r3, [pc, #84]	@ (8006950 <HAL_Init+0x68>)
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	0a1b      	lsrs	r3, r3, #8
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	4913      	ldr	r1, [pc, #76]	@ (8006954 <HAL_Init+0x6c>)
 8006906:	5ccb      	ldrb	r3, [r1, r3]
 8006908:	f003 031f 	and.w	r3, r3, #31
 800690c:	fa22 f303 	lsr.w	r3, r2, r3
 8006910:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006912:	4b0f      	ldr	r3, [pc, #60]	@ (8006950 <HAL_Init+0x68>)
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	4a0e      	ldr	r2, [pc, #56]	@ (8006954 <HAL_Init+0x6c>)
 800691c:	5cd3      	ldrb	r3, [r2, r3]
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	fa22 f303 	lsr.w	r3, r2, r3
 8006928:	4a0b      	ldr	r2, [pc, #44]	@ (8006958 <HAL_Init+0x70>)
 800692a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800692c:	4a0b      	ldr	r2, [pc, #44]	@ (800695c <HAL_Init+0x74>)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006932:	200f      	movs	r0, #15
 8006934:	f000 f814 	bl	8006960 <HAL_InitTick>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e002      	b.n	8006948 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006942:	f7fe fc15 	bl	8005170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	58024400 	.word	0x58024400
 8006954:	0801635c 	.word	0x0801635c
 8006958:	24000014 	.word	0x24000014
 800695c:	24000010 	.word	0x24000010

08006960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006968:	4b15      	ldr	r3, [pc, #84]	@ (80069c0 <HAL_InitTick+0x60>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e021      	b.n	80069b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006974:	4b13      	ldr	r3, [pc, #76]	@ (80069c4 <HAL_InitTick+0x64>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4b11      	ldr	r3, [pc, #68]	@ (80069c0 <HAL_InitTick+0x60>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	4619      	mov	r1, r3
 800697e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006982:	fbb3 f3f1 	udiv	r3, r3, r1
 8006986:	fbb2 f3f3 	udiv	r3, r2, r3
 800698a:	4618      	mov	r0, r3
 800698c:	f000 f965 	bl	8006c5a <HAL_SYSTICK_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e00e      	b.n	80069b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b0f      	cmp	r3, #15
 800699e:	d80a      	bhi.n	80069b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069a0:	2200      	movs	r2, #0
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069a8:	f000 f92f 	bl	8006c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069ac:	4a06      	ldr	r2, [pc, #24]	@ (80069c8 <HAL_InitTick+0x68>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	e000      	b.n	80069b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	2400001c 	.word	0x2400001c
 80069c4:	24000010 	.word	0x24000010
 80069c8:	24000018 	.word	0x24000018

080069cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80069d0:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <HAL_IncTick+0x20>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	4b06      	ldr	r3, [pc, #24]	@ (80069f0 <HAL_IncTick+0x24>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4413      	add	r3, r2
 80069dc:	4a04      	ldr	r2, [pc, #16]	@ (80069f0 <HAL_IncTick+0x24>)
 80069de:	6013      	str	r3, [r2, #0]
}
 80069e0:	bf00      	nop
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	2400001c 	.word	0x2400001c
 80069f0:	24000ad0 	.word	0x24000ad0

080069f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069f4:	b480      	push	{r7}
 80069f6:	af00      	add	r7, sp, #0
  return uwTick;
 80069f8:	4b03      	ldr	r3, [pc, #12]	@ (8006a08 <HAL_GetTick+0x14>)
 80069fa:	681b      	ldr	r3, [r3, #0]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	24000ad0 	.word	0x24000ad0

08006a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a14:	f7ff ffee 	bl	80069f4 <HAL_GetTick>
 8006a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a24:	d005      	beq.n	8006a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a26:	4b0a      	ldr	r3, [pc, #40]	@ (8006a50 <HAL_Delay+0x44>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a32:	bf00      	nop
 8006a34:	f7ff ffde 	bl	80069f4 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d8f7      	bhi.n	8006a34 <HAL_Delay+0x28>
  {
  }
}
 8006a44:	bf00      	nop
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	2400001c 	.word	0x2400001c

08006a54 <__NVIC_SetPriorityGrouping>:
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a64:	4b0b      	ldr	r3, [pc, #44]	@ (8006a94 <__NVIC_SetPriorityGrouping+0x40>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a70:	4013      	ands	r3, r2
 8006a72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006a7c:	4b06      	ldr	r3, [pc, #24]	@ (8006a98 <__NVIC_SetPriorityGrouping+0x44>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a82:	4a04      	ldr	r2, [pc, #16]	@ (8006a94 <__NVIC_SetPriorityGrouping+0x40>)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	60d3      	str	r3, [r2, #12]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	e000ed00 	.word	0xe000ed00
 8006a98:	05fa0000 	.word	0x05fa0000

08006a9c <__NVIC_GetPriorityGrouping>:
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006aa0:	4b04      	ldr	r3, [pc, #16]	@ (8006ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	0a1b      	lsrs	r3, r3, #8
 8006aa6:	f003 0307 	and.w	r3, r3, #7
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	e000ed00 	.word	0xe000ed00

08006ab8 <__NVIC_EnableIRQ>:
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	4603      	mov	r3, r0
 8006ac0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	db0b      	blt.n	8006ae2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	f003 021f 	and.w	r2, r3, #31
 8006ad0:	4907      	ldr	r1, [pc, #28]	@ (8006af0 <__NVIC_EnableIRQ+0x38>)
 8006ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	2001      	movs	r0, #1
 8006ada:	fa00 f202 	lsl.w	r2, r0, r2
 8006ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	e000e100 	.word	0xe000e100

08006af4 <__NVIC_SetPriority>:
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	6039      	str	r1, [r7, #0]
 8006afe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	db0a      	blt.n	8006b1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	490c      	ldr	r1, [pc, #48]	@ (8006b40 <__NVIC_SetPriority+0x4c>)
 8006b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b12:	0112      	lsls	r2, r2, #4
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	440b      	add	r3, r1
 8006b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006b1c:	e00a      	b.n	8006b34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	4908      	ldr	r1, [pc, #32]	@ (8006b44 <__NVIC_SetPriority+0x50>)
 8006b24:	88fb      	ldrh	r3, [r7, #6]
 8006b26:	f003 030f 	and.w	r3, r3, #15
 8006b2a:	3b04      	subs	r3, #4
 8006b2c:	0112      	lsls	r2, r2, #4
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	440b      	add	r3, r1
 8006b32:	761a      	strb	r2, [r3, #24]
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	e000e100 	.word	0xe000e100
 8006b44:	e000ed00 	.word	0xe000ed00

08006b48 <NVIC_EncodePriority>:
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b089      	sub	sp, #36	@ 0x24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	f1c3 0307 	rsb	r3, r3, #7
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	bf28      	it	cs
 8006b66:	2304      	movcs	r3, #4
 8006b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	2b06      	cmp	r3, #6
 8006b70:	d902      	bls.n	8006b78 <NVIC_EncodePriority+0x30>
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	3b03      	subs	r3, #3
 8006b76:	e000      	b.n	8006b7a <NVIC_EncodePriority+0x32>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43da      	mvns	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	401a      	ands	r2, r3
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9a:	43d9      	mvns	r1, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ba0:	4313      	orrs	r3, r2
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3724      	adds	r7, #36	@ 0x24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
	...

08006bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bc0:	d301      	bcc.n	8006bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e00f      	b.n	8006be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8006bf0 <SysTick_Config+0x40>)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bce:	210f      	movs	r1, #15
 8006bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bd4:	f7ff ff8e 	bl	8006af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bd8:	4b05      	ldr	r3, [pc, #20]	@ (8006bf0 <SysTick_Config+0x40>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bde:	4b04      	ldr	r3, [pc, #16]	@ (8006bf0 <SysTick_Config+0x40>)
 8006be0:	2207      	movs	r2, #7
 8006be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	e000e010 	.word	0xe000e010

08006bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff ff29 	bl	8006a54 <__NVIC_SetPriorityGrouping>
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	4603      	mov	r3, r0
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
 8006c16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c18:	f7ff ff40 	bl	8006a9c <__NVIC_GetPriorityGrouping>
 8006c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	6978      	ldr	r0, [r7, #20]
 8006c24:	f7ff ff90 	bl	8006b48 <NVIC_EncodePriority>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c2e:	4611      	mov	r1, r2
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff ff5f 	bl	8006af4 <__NVIC_SetPriority>
}
 8006c36:	bf00      	nop
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b082      	sub	sp, #8
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	4603      	mov	r3, r0
 8006c46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ff33 	bl	8006ab8 <__NVIC_EnableIRQ>
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7ff ffa4 	bl	8006bb0 <SysTick_Config>
 8006c68:	4603      	mov	r3, r0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006c78:	f3bf 8f5f 	dmb	sy
}
 8006c7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006c7e:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <HAL_MPU_Disable+0x28>)
 8006c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c82:	4a06      	ldr	r2, [pc, #24]	@ (8006c9c <HAL_MPU_Disable+0x28>)
 8006c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c88:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006c8a:	4b05      	ldr	r3, [pc, #20]	@ (8006ca0 <HAL_MPU_Disable+0x2c>)
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	605a      	str	r2, [r3, #4]
}
 8006c90:	bf00      	nop
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	e000ed00 	.word	0xe000ed00
 8006ca0:	e000ed90 	.word	0xe000ed90

08006ca4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006cac:	4a0b      	ldr	r2, [pc, #44]	@ (8006cdc <HAL_MPU_Enable+0x38>)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce0 <HAL_MPU_Enable+0x3c>)
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	4a09      	ldr	r2, [pc, #36]	@ (8006ce0 <HAL_MPU_Enable+0x3c>)
 8006cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cc0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006cc2:	f3bf 8f4f 	dsb	sy
}
 8006cc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006cc8:	f3bf 8f6f 	isb	sy
}
 8006ccc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	e000ed90 	.word	0xe000ed90
 8006ce0:	e000ed00 	.word	0xe000ed00

08006ce4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	785a      	ldrb	r2, [r3, #1]
 8006cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d60 <HAL_MPU_ConfigRegion+0x7c>)
 8006cf2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8006d60 <HAL_MPU_ConfigRegion+0x7c>)
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	4a19      	ldr	r2, [pc, #100]	@ (8006d60 <HAL_MPU_ConfigRegion+0x7c>)
 8006cfa:	f023 0301 	bic.w	r3, r3, #1
 8006cfe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006d00:	4a17      	ldr	r2, [pc, #92]	@ (8006d60 <HAL_MPU_ConfigRegion+0x7c>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	7b1b      	ldrb	r3, [r3, #12]
 8006d0c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	7adb      	ldrb	r3, [r3, #11]
 8006d12:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7a9b      	ldrb	r3, [r3, #10]
 8006d1a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7b5b      	ldrb	r3, [r3, #13]
 8006d22:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	7b9b      	ldrb	r3, [r3, #14]
 8006d2a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7bdb      	ldrb	r3, [r3, #15]
 8006d32:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006d34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7a5b      	ldrb	r3, [r3, #9]
 8006d3a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7a1b      	ldrb	r3, [r3, #8]
 8006d42:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006d44:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d4c:	4a04      	ldr	r2, [pc, #16]	@ (8006d60 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006d4e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006d50:	6113      	str	r3, [r2, #16]
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	e000ed90 	.word	0xe000ed90

08006d64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006d6c:	f7ff fe42 	bl	80069f4 <HAL_GetTick>
 8006d70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e312      	b.n	80073a2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a66      	ldr	r2, [pc, #408]	@ (8006f1c <HAL_DMA_Init+0x1b8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d04a      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a65      	ldr	r2, [pc, #404]	@ (8006f20 <HAL_DMA_Init+0x1bc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d045      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a63      	ldr	r2, [pc, #396]	@ (8006f24 <HAL_DMA_Init+0x1c0>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d040      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a62      	ldr	r2, [pc, #392]	@ (8006f28 <HAL_DMA_Init+0x1c4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d03b      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a60      	ldr	r2, [pc, #384]	@ (8006f2c <HAL_DMA_Init+0x1c8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d036      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a5f      	ldr	r2, [pc, #380]	@ (8006f30 <HAL_DMA_Init+0x1cc>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d031      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8006f34 <HAL_DMA_Init+0x1d0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d02c      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8006f38 <HAL_DMA_Init+0x1d4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d027      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8006f3c <HAL_DMA_Init+0x1d8>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d022      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a59      	ldr	r2, [pc, #356]	@ (8006f40 <HAL_DMA_Init+0x1dc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d01d      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a57      	ldr	r2, [pc, #348]	@ (8006f44 <HAL_DMA_Init+0x1e0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d018      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a56      	ldr	r2, [pc, #344]	@ (8006f48 <HAL_DMA_Init+0x1e4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d013      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a54      	ldr	r2, [pc, #336]	@ (8006f4c <HAL_DMA_Init+0x1e8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00e      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a53      	ldr	r2, [pc, #332]	@ (8006f50 <HAL_DMA_Init+0x1ec>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d009      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a51      	ldr	r2, [pc, #324]	@ (8006f54 <HAL_DMA_Init+0x1f0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_DMA_Init+0xb8>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a50      	ldr	r2, [pc, #320]	@ (8006f58 <HAL_DMA_Init+0x1f4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d101      	bne.n	8006e20 <HAL_DMA_Init+0xbc>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <HAL_DMA_Init+0xbe>
 8006e20:	2300      	movs	r3, #0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 813c 	beq.w	80070a0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a37      	ldr	r2, [pc, #220]	@ (8006f1c <HAL_DMA_Init+0x1b8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d04a      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a36      	ldr	r2, [pc, #216]	@ (8006f20 <HAL_DMA_Init+0x1bc>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d045      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a34      	ldr	r2, [pc, #208]	@ (8006f24 <HAL_DMA_Init+0x1c0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d040      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a33      	ldr	r2, [pc, #204]	@ (8006f28 <HAL_DMA_Init+0x1c4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d03b      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a31      	ldr	r2, [pc, #196]	@ (8006f2c <HAL_DMA_Init+0x1c8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d036      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a30      	ldr	r2, [pc, #192]	@ (8006f30 <HAL_DMA_Init+0x1cc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d031      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a2e      	ldr	r2, [pc, #184]	@ (8006f34 <HAL_DMA_Init+0x1d0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d02c      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a2d      	ldr	r2, [pc, #180]	@ (8006f38 <HAL_DMA_Init+0x1d4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d027      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8006f3c <HAL_DMA_Init+0x1d8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d022      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a2a      	ldr	r2, [pc, #168]	@ (8006f40 <HAL_DMA_Init+0x1dc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d01d      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a28      	ldr	r2, [pc, #160]	@ (8006f44 <HAL_DMA_Init+0x1e0>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d018      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a27      	ldr	r2, [pc, #156]	@ (8006f48 <HAL_DMA_Init+0x1e4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d013      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a25      	ldr	r2, [pc, #148]	@ (8006f4c <HAL_DMA_Init+0x1e8>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00e      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a24      	ldr	r2, [pc, #144]	@ (8006f50 <HAL_DMA_Init+0x1ec>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d009      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a22      	ldr	r2, [pc, #136]	@ (8006f54 <HAL_DMA_Init+0x1f0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <HAL_DMA_Init+0x174>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a21      	ldr	r2, [pc, #132]	@ (8006f58 <HAL_DMA_Init+0x1f4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d108      	bne.n	8006eea <HAL_DMA_Init+0x186>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0201 	bic.w	r2, r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
 8006ee8:	e007      	b.n	8006efa <HAL_DMA_Init+0x196>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0201 	bic.w	r2, r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006efa:	e02f      	b.n	8006f5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006efc:	f7ff fd7a 	bl	80069f4 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b05      	cmp	r3, #5
 8006f08:	d928      	bls.n	8006f5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2203      	movs	r2, #3
 8006f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e242      	b.n	80073a2 <HAL_DMA_Init+0x63e>
 8006f1c:	40020010 	.word	0x40020010
 8006f20:	40020028 	.word	0x40020028
 8006f24:	40020040 	.word	0x40020040
 8006f28:	40020058 	.word	0x40020058
 8006f2c:	40020070 	.word	0x40020070
 8006f30:	40020088 	.word	0x40020088
 8006f34:	400200a0 	.word	0x400200a0
 8006f38:	400200b8 	.word	0x400200b8
 8006f3c:	40020410 	.word	0x40020410
 8006f40:	40020428 	.word	0x40020428
 8006f44:	40020440 	.word	0x40020440
 8006f48:	40020458 	.word	0x40020458
 8006f4c:	40020470 	.word	0x40020470
 8006f50:	40020488 	.word	0x40020488
 8006f54:	400204a0 	.word	0x400204a0
 8006f58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1c8      	bne.n	8006efc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4b83      	ldr	r3, [pc, #524]	@ (8007184 <HAL_DMA_Init+0x420>)
 8006f76:	4013      	ands	r3, r2
 8006f78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006f82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d107      	bne.n	8006fc0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b28      	cmp	r3, #40	@ 0x28
 8006fc6:	d903      	bls.n	8006fd0 <HAL_DMA_Init+0x26c>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fce:	d91f      	bls.n	8007010 <HAL_DMA_Init+0x2ac>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fd6:	d903      	bls.n	8006fe0 <HAL_DMA_Init+0x27c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b42      	cmp	r3, #66	@ 0x42
 8006fde:	d917      	bls.n	8007010 <HAL_DMA_Init+0x2ac>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b46      	cmp	r3, #70	@ 0x46
 8006fe6:	d903      	bls.n	8006ff0 <HAL_DMA_Init+0x28c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b48      	cmp	r3, #72	@ 0x48
 8006fee:	d90f      	bls.n	8007010 <HAL_DMA_Init+0x2ac>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b4e      	cmp	r3, #78	@ 0x4e
 8006ff6:	d903      	bls.n	8007000 <HAL_DMA_Init+0x29c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b52      	cmp	r3, #82	@ 0x52
 8006ffe:	d907      	bls.n	8007010 <HAL_DMA_Init+0x2ac>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b73      	cmp	r3, #115	@ 0x73
 8007006:	d905      	bls.n	8007014 <HAL_DMA_Init+0x2b0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b77      	cmp	r3, #119	@ 0x77
 800700e:	d801      	bhi.n	8007014 <HAL_DMA_Init+0x2b0>
 8007010:	2301      	movs	r3, #1
 8007012:	e000      	b.n	8007016 <HAL_DMA_Init+0x2b2>
 8007014:	2300      	movs	r3, #0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007020:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f023 0307 	bic.w	r3, r3, #7
 8007038:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007048:	2b04      	cmp	r3, #4
 800704a:	d117      	bne.n	800707c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00e      	beq.n	800707c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f002 f810 	bl	8009084 <DMA_CheckFifoParam>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2240      	movs	r2, #64	@ 0x40
 800706e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e192      	b.n	80073a2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 ff4b 	bl	8008f20 <DMA_CalcBaseAndBitshift>
 800708a:	4603      	mov	r3, r0
 800708c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007092:	f003 031f 	and.w	r3, r3, #31
 8007096:	223f      	movs	r2, #63	@ 0x3f
 8007098:	409a      	lsls	r2, r3
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	609a      	str	r2, [r3, #8]
 800709e:	e0c8      	b.n	8007232 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a38      	ldr	r2, [pc, #224]	@ (8007188 <HAL_DMA_Init+0x424>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d022      	beq.n	80070f0 <HAL_DMA_Init+0x38c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a37      	ldr	r2, [pc, #220]	@ (800718c <HAL_DMA_Init+0x428>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d01d      	beq.n	80070f0 <HAL_DMA_Init+0x38c>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a35      	ldr	r2, [pc, #212]	@ (8007190 <HAL_DMA_Init+0x42c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d018      	beq.n	80070f0 <HAL_DMA_Init+0x38c>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a34      	ldr	r2, [pc, #208]	@ (8007194 <HAL_DMA_Init+0x430>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <HAL_DMA_Init+0x38c>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a32      	ldr	r2, [pc, #200]	@ (8007198 <HAL_DMA_Init+0x434>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00e      	beq.n	80070f0 <HAL_DMA_Init+0x38c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a31      	ldr	r2, [pc, #196]	@ (800719c <HAL_DMA_Init+0x438>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d009      	beq.n	80070f0 <HAL_DMA_Init+0x38c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a2f      	ldr	r2, [pc, #188]	@ (80071a0 <HAL_DMA_Init+0x43c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <HAL_DMA_Init+0x38c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a2e      	ldr	r2, [pc, #184]	@ (80071a4 <HAL_DMA_Init+0x440>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d101      	bne.n	80070f4 <HAL_DMA_Init+0x390>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <HAL_DMA_Init+0x392>
 80070f4:	2300      	movs	r3, #0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 8092 	beq.w	8007220 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a21      	ldr	r2, [pc, #132]	@ (8007188 <HAL_DMA_Init+0x424>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d021      	beq.n	800714a <HAL_DMA_Init+0x3e6>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a20      	ldr	r2, [pc, #128]	@ (800718c <HAL_DMA_Init+0x428>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d01c      	beq.n	800714a <HAL_DMA_Init+0x3e6>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a1e      	ldr	r2, [pc, #120]	@ (8007190 <HAL_DMA_Init+0x42c>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d017      	beq.n	800714a <HAL_DMA_Init+0x3e6>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1d      	ldr	r2, [pc, #116]	@ (8007194 <HAL_DMA_Init+0x430>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d012      	beq.n	800714a <HAL_DMA_Init+0x3e6>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1b      	ldr	r2, [pc, #108]	@ (8007198 <HAL_DMA_Init+0x434>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00d      	beq.n	800714a <HAL_DMA_Init+0x3e6>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1a      	ldr	r2, [pc, #104]	@ (800719c <HAL_DMA_Init+0x438>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d008      	beq.n	800714a <HAL_DMA_Init+0x3e6>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <HAL_DMA_Init+0x43c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d003      	beq.n	800714a <HAL_DMA_Init+0x3e6>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a17      	ldr	r2, [pc, #92]	@ (80071a4 <HAL_DMA_Init+0x440>)
 8007148:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	4b10      	ldr	r3, [pc, #64]	@ (80071a8 <HAL_DMA_Init+0x444>)
 8007166:	4013      	ands	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b40      	cmp	r3, #64	@ 0x40
 8007170:	d01c      	beq.n	80071ac <HAL_DMA_Init+0x448>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b80      	cmp	r3, #128	@ 0x80
 8007178:	d102      	bne.n	8007180 <HAL_DMA_Init+0x41c>
 800717a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800717e:	e016      	b.n	80071ae <HAL_DMA_Init+0x44a>
 8007180:	2300      	movs	r3, #0
 8007182:	e014      	b.n	80071ae <HAL_DMA_Init+0x44a>
 8007184:	fe10803f 	.word	0xfe10803f
 8007188:	58025408 	.word	0x58025408
 800718c:	5802541c 	.word	0x5802541c
 8007190:	58025430 	.word	0x58025430
 8007194:	58025444 	.word	0x58025444
 8007198:	58025458 	.word	0x58025458
 800719c:	5802546c 	.word	0x5802546c
 80071a0:	58025480 	.word	0x58025480
 80071a4:	58025494 	.word	0x58025494
 80071a8:	fffe000f 	.word	0xfffe000f
 80071ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68d2      	ldr	r2, [r2, #12]
 80071b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80071bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80071c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80071cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80071d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80071dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	4b6e      	ldr	r3, [pc, #440]	@ (80073ac <HAL_DMA_Init+0x648>)
 80071f4:	4413      	add	r3, r2
 80071f6:	4a6e      	ldr	r2, [pc, #440]	@ (80073b0 <HAL_DMA_Init+0x64c>)
 80071f8:	fba2 2303 	umull	r2, r3, r2, r3
 80071fc:	091b      	lsrs	r3, r3, #4
 80071fe:	009a      	lsls	r2, r3, #2
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 fe8b 	bl	8008f20 <DMA_CalcBaseAndBitshift>
 800720a:	4603      	mov	r3, r0
 800720c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007212:	f003 031f 	and.w	r3, r3, #31
 8007216:	2201      	movs	r2, #1
 8007218:	409a      	lsls	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	605a      	str	r2, [r3, #4]
 800721e:	e008      	b.n	8007232 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2240      	movs	r2, #64	@ 0x40
 8007224:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2203      	movs	r2, #3
 800722a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e0b7      	b.n	80073a2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a5f      	ldr	r2, [pc, #380]	@ (80073b4 <HAL_DMA_Init+0x650>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d072      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5d      	ldr	r2, [pc, #372]	@ (80073b8 <HAL_DMA_Init+0x654>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d06d      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5c      	ldr	r2, [pc, #368]	@ (80073bc <HAL_DMA_Init+0x658>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d068      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5a      	ldr	r2, [pc, #360]	@ (80073c0 <HAL_DMA_Init+0x65c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d063      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a59      	ldr	r2, [pc, #356]	@ (80073c4 <HAL_DMA_Init+0x660>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d05e      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a57      	ldr	r2, [pc, #348]	@ (80073c8 <HAL_DMA_Init+0x664>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d059      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a56      	ldr	r2, [pc, #344]	@ (80073cc <HAL_DMA_Init+0x668>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d054      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a54      	ldr	r2, [pc, #336]	@ (80073d0 <HAL_DMA_Init+0x66c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d04f      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a53      	ldr	r2, [pc, #332]	@ (80073d4 <HAL_DMA_Init+0x670>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d04a      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a51      	ldr	r2, [pc, #324]	@ (80073d8 <HAL_DMA_Init+0x674>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d045      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a50      	ldr	r2, [pc, #320]	@ (80073dc <HAL_DMA_Init+0x678>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d040      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a4e      	ldr	r2, [pc, #312]	@ (80073e0 <HAL_DMA_Init+0x67c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d03b      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a4d      	ldr	r2, [pc, #308]	@ (80073e4 <HAL_DMA_Init+0x680>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d036      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a4b      	ldr	r2, [pc, #300]	@ (80073e8 <HAL_DMA_Init+0x684>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d031      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a4a      	ldr	r2, [pc, #296]	@ (80073ec <HAL_DMA_Init+0x688>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d02c      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a48      	ldr	r2, [pc, #288]	@ (80073f0 <HAL_DMA_Init+0x68c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d027      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a47      	ldr	r2, [pc, #284]	@ (80073f4 <HAL_DMA_Init+0x690>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d022      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a45      	ldr	r2, [pc, #276]	@ (80073f8 <HAL_DMA_Init+0x694>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01d      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a44      	ldr	r2, [pc, #272]	@ (80073fc <HAL_DMA_Init+0x698>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d018      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a42      	ldr	r2, [pc, #264]	@ (8007400 <HAL_DMA_Init+0x69c>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a41      	ldr	r2, [pc, #260]	@ (8007404 <HAL_DMA_Init+0x6a0>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00e      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a3f      	ldr	r2, [pc, #252]	@ (8007408 <HAL_DMA_Init+0x6a4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d009      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a3e      	ldr	r2, [pc, #248]	@ (800740c <HAL_DMA_Init+0x6a8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d004      	beq.n	8007322 <HAL_DMA_Init+0x5be>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a3c      	ldr	r2, [pc, #240]	@ (8007410 <HAL_DMA_Init+0x6ac>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d101      	bne.n	8007326 <HAL_DMA_Init+0x5c2>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <HAL_DMA_Init+0x5c4>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d032      	beq.n	8007392 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f001 ff25 	bl	800917c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	2b80      	cmp	r3, #128	@ 0x80
 8007338:	d102      	bne.n	8007340 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007354:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d010      	beq.n	8007380 <HAL_DMA_Init+0x61c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b08      	cmp	r3, #8
 8007364:	d80c      	bhi.n	8007380 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 ffa2 	bl	80092b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	e008      	b.n	8007392 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	a7fdabf8 	.word	0xa7fdabf8
 80073b0:	cccccccd 	.word	0xcccccccd
 80073b4:	40020010 	.word	0x40020010
 80073b8:	40020028 	.word	0x40020028
 80073bc:	40020040 	.word	0x40020040
 80073c0:	40020058 	.word	0x40020058
 80073c4:	40020070 	.word	0x40020070
 80073c8:	40020088 	.word	0x40020088
 80073cc:	400200a0 	.word	0x400200a0
 80073d0:	400200b8 	.word	0x400200b8
 80073d4:	40020410 	.word	0x40020410
 80073d8:	40020428 	.word	0x40020428
 80073dc:	40020440 	.word	0x40020440
 80073e0:	40020458 	.word	0x40020458
 80073e4:	40020470 	.word	0x40020470
 80073e8:	40020488 	.word	0x40020488
 80073ec:	400204a0 	.word	0x400204a0
 80073f0:	400204b8 	.word	0x400204b8
 80073f4:	58025408 	.word	0x58025408
 80073f8:	5802541c 	.word	0x5802541c
 80073fc:	58025430 	.word	0x58025430
 8007400:	58025444 	.word	0x58025444
 8007404:	58025458 	.word	0x58025458
 8007408:	5802546c 	.word	0x5802546c
 800740c:	58025480 	.word	0x58025480
 8007410:	58025494 	.word	0x58025494

08007414 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e226      	b.n	800787e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_DMA_Start_IT+0x2a>
 800743a:	2302      	movs	r3, #2
 800743c:	e21f      	b.n	800787e <HAL_DMA_Start_IT+0x46a>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b01      	cmp	r3, #1
 8007450:	f040 820a 	bne.w	8007868 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a68      	ldr	r2, [pc, #416]	@ (8007608 <HAL_DMA_Start_IT+0x1f4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d04a      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a66      	ldr	r2, [pc, #408]	@ (800760c <HAL_DMA_Start_IT+0x1f8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d045      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a65      	ldr	r2, [pc, #404]	@ (8007610 <HAL_DMA_Start_IT+0x1fc>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d040      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a63      	ldr	r2, [pc, #396]	@ (8007614 <HAL_DMA_Start_IT+0x200>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d03b      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a62      	ldr	r2, [pc, #392]	@ (8007618 <HAL_DMA_Start_IT+0x204>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d036      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a60      	ldr	r2, [pc, #384]	@ (800761c <HAL_DMA_Start_IT+0x208>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d031      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a5f      	ldr	r2, [pc, #380]	@ (8007620 <HAL_DMA_Start_IT+0x20c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d02c      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a5d      	ldr	r2, [pc, #372]	@ (8007624 <HAL_DMA_Start_IT+0x210>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d027      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a5c      	ldr	r2, [pc, #368]	@ (8007628 <HAL_DMA_Start_IT+0x214>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d022      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a5a      	ldr	r2, [pc, #360]	@ (800762c <HAL_DMA_Start_IT+0x218>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d01d      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a59      	ldr	r2, [pc, #356]	@ (8007630 <HAL_DMA_Start_IT+0x21c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d018      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a57      	ldr	r2, [pc, #348]	@ (8007634 <HAL_DMA_Start_IT+0x220>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d013      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a56      	ldr	r2, [pc, #344]	@ (8007638 <HAL_DMA_Start_IT+0x224>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00e      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a54      	ldr	r2, [pc, #336]	@ (800763c <HAL_DMA_Start_IT+0x228>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d009      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a53      	ldr	r2, [pc, #332]	@ (8007640 <HAL_DMA_Start_IT+0x22c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_DMA_Start_IT+0xee>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a51      	ldr	r2, [pc, #324]	@ (8007644 <HAL_DMA_Start_IT+0x230>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d108      	bne.n	8007514 <HAL_DMA_Start_IT+0x100>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e007      	b.n	8007524 <HAL_DMA_Start_IT+0x110>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0201 	bic.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f001 fb4c 	bl	8008bc8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a34      	ldr	r2, [pc, #208]	@ (8007608 <HAL_DMA_Start_IT+0x1f4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d04a      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a33      	ldr	r2, [pc, #204]	@ (800760c <HAL_DMA_Start_IT+0x1f8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d045      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a31      	ldr	r2, [pc, #196]	@ (8007610 <HAL_DMA_Start_IT+0x1fc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d040      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a30      	ldr	r2, [pc, #192]	@ (8007614 <HAL_DMA_Start_IT+0x200>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d03b      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a2e      	ldr	r2, [pc, #184]	@ (8007618 <HAL_DMA_Start_IT+0x204>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d036      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a2d      	ldr	r2, [pc, #180]	@ (800761c <HAL_DMA_Start_IT+0x208>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d031      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a2b      	ldr	r2, [pc, #172]	@ (8007620 <HAL_DMA_Start_IT+0x20c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d02c      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a2a      	ldr	r2, [pc, #168]	@ (8007624 <HAL_DMA_Start_IT+0x210>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d027      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a28      	ldr	r2, [pc, #160]	@ (8007628 <HAL_DMA_Start_IT+0x214>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d022      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a27      	ldr	r2, [pc, #156]	@ (800762c <HAL_DMA_Start_IT+0x218>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d01d      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a25      	ldr	r2, [pc, #148]	@ (8007630 <HAL_DMA_Start_IT+0x21c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d018      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a24      	ldr	r2, [pc, #144]	@ (8007634 <HAL_DMA_Start_IT+0x220>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d013      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a22      	ldr	r2, [pc, #136]	@ (8007638 <HAL_DMA_Start_IT+0x224>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d00e      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a21      	ldr	r2, [pc, #132]	@ (800763c <HAL_DMA_Start_IT+0x228>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d009      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007640 <HAL_DMA_Start_IT+0x22c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d004      	beq.n	80075d0 <HAL_DMA_Start_IT+0x1bc>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007644 <HAL_DMA_Start_IT+0x230>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d101      	bne.n	80075d4 <HAL_DMA_Start_IT+0x1c0>
 80075d0:	2301      	movs	r3, #1
 80075d2:	e000      	b.n	80075d6 <HAL_DMA_Start_IT+0x1c2>
 80075d4:	2300      	movs	r3, #0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d036      	beq.n	8007648 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f023 021e 	bic.w	r2, r3, #30
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0216 	orr.w	r2, r2, #22
 80075ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d03e      	beq.n	8007674 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f042 0208 	orr.w	r2, r2, #8
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	e035      	b.n	8007674 <HAL_DMA_Start_IT+0x260>
 8007608:	40020010 	.word	0x40020010
 800760c:	40020028 	.word	0x40020028
 8007610:	40020040 	.word	0x40020040
 8007614:	40020058 	.word	0x40020058
 8007618:	40020070 	.word	0x40020070
 800761c:	40020088 	.word	0x40020088
 8007620:	400200a0 	.word	0x400200a0
 8007624:	400200b8 	.word	0x400200b8
 8007628:	40020410 	.word	0x40020410
 800762c:	40020428 	.word	0x40020428
 8007630:	40020440 	.word	0x40020440
 8007634:	40020458 	.word	0x40020458
 8007638:	40020470 	.word	0x40020470
 800763c:	40020488 	.word	0x40020488
 8007640:	400204a0 	.word	0x400204a0
 8007644:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f023 020e 	bic.w	r2, r3, #14
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 020a 	orr.w	r2, r2, #10
 800765a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0204 	orr.w	r2, r2, #4
 8007672:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a83      	ldr	r2, [pc, #524]	@ (8007888 <HAL_DMA_Start_IT+0x474>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d072      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a82      	ldr	r2, [pc, #520]	@ (800788c <HAL_DMA_Start_IT+0x478>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d06d      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a80      	ldr	r2, [pc, #512]	@ (8007890 <HAL_DMA_Start_IT+0x47c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d068      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a7f      	ldr	r2, [pc, #508]	@ (8007894 <HAL_DMA_Start_IT+0x480>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d063      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a7d      	ldr	r2, [pc, #500]	@ (8007898 <HAL_DMA_Start_IT+0x484>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d05e      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a7c      	ldr	r2, [pc, #496]	@ (800789c <HAL_DMA_Start_IT+0x488>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d059      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a7a      	ldr	r2, [pc, #488]	@ (80078a0 <HAL_DMA_Start_IT+0x48c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d054      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a79      	ldr	r2, [pc, #484]	@ (80078a4 <HAL_DMA_Start_IT+0x490>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d04f      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a77      	ldr	r2, [pc, #476]	@ (80078a8 <HAL_DMA_Start_IT+0x494>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d04a      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a76      	ldr	r2, [pc, #472]	@ (80078ac <HAL_DMA_Start_IT+0x498>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d045      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a74      	ldr	r2, [pc, #464]	@ (80078b0 <HAL_DMA_Start_IT+0x49c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d040      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a73      	ldr	r2, [pc, #460]	@ (80078b4 <HAL_DMA_Start_IT+0x4a0>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d03b      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a71      	ldr	r2, [pc, #452]	@ (80078b8 <HAL_DMA_Start_IT+0x4a4>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d036      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a70      	ldr	r2, [pc, #448]	@ (80078bc <HAL_DMA_Start_IT+0x4a8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d031      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a6e      	ldr	r2, [pc, #440]	@ (80078c0 <HAL_DMA_Start_IT+0x4ac>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d02c      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a6d      	ldr	r2, [pc, #436]	@ (80078c4 <HAL_DMA_Start_IT+0x4b0>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d027      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a6b      	ldr	r2, [pc, #428]	@ (80078c8 <HAL_DMA_Start_IT+0x4b4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d022      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a6a      	ldr	r2, [pc, #424]	@ (80078cc <HAL_DMA_Start_IT+0x4b8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d01d      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a68      	ldr	r2, [pc, #416]	@ (80078d0 <HAL_DMA_Start_IT+0x4bc>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d018      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a67      	ldr	r2, [pc, #412]	@ (80078d4 <HAL_DMA_Start_IT+0x4c0>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d013      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a65      	ldr	r2, [pc, #404]	@ (80078d8 <HAL_DMA_Start_IT+0x4c4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00e      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a64      	ldr	r2, [pc, #400]	@ (80078dc <HAL_DMA_Start_IT+0x4c8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d009      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a62      	ldr	r2, [pc, #392]	@ (80078e0 <HAL_DMA_Start_IT+0x4cc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_DMA_Start_IT+0x350>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a61      	ldr	r2, [pc, #388]	@ (80078e4 <HAL_DMA_Start_IT+0x4d0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d101      	bne.n	8007768 <HAL_DMA_Start_IT+0x354>
 8007764:	2301      	movs	r3, #1
 8007766:	e000      	b.n	800776a <HAL_DMA_Start_IT+0x356>
 8007768:	2300      	movs	r3, #0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d01a      	beq.n	80077a4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800778a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800779e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077a2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a37      	ldr	r2, [pc, #220]	@ (8007888 <HAL_DMA_Start_IT+0x474>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d04a      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a36      	ldr	r2, [pc, #216]	@ (800788c <HAL_DMA_Start_IT+0x478>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d045      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a34      	ldr	r2, [pc, #208]	@ (8007890 <HAL_DMA_Start_IT+0x47c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d040      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a33      	ldr	r2, [pc, #204]	@ (8007894 <HAL_DMA_Start_IT+0x480>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d03b      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a31      	ldr	r2, [pc, #196]	@ (8007898 <HAL_DMA_Start_IT+0x484>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d036      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a30      	ldr	r2, [pc, #192]	@ (800789c <HAL_DMA_Start_IT+0x488>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d031      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a2e      	ldr	r2, [pc, #184]	@ (80078a0 <HAL_DMA_Start_IT+0x48c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d02c      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a2d      	ldr	r2, [pc, #180]	@ (80078a4 <HAL_DMA_Start_IT+0x490>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d027      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a2b      	ldr	r2, [pc, #172]	@ (80078a8 <HAL_DMA_Start_IT+0x494>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d022      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a2a      	ldr	r2, [pc, #168]	@ (80078ac <HAL_DMA_Start_IT+0x498>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d01d      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a28      	ldr	r2, [pc, #160]	@ (80078b0 <HAL_DMA_Start_IT+0x49c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d018      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a27      	ldr	r2, [pc, #156]	@ (80078b4 <HAL_DMA_Start_IT+0x4a0>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d013      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a25      	ldr	r2, [pc, #148]	@ (80078b8 <HAL_DMA_Start_IT+0x4a4>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d00e      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a24      	ldr	r2, [pc, #144]	@ (80078bc <HAL_DMA_Start_IT+0x4a8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d009      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a22      	ldr	r2, [pc, #136]	@ (80078c0 <HAL_DMA_Start_IT+0x4ac>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d004      	beq.n	8007844 <HAL_DMA_Start_IT+0x430>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a21      	ldr	r2, [pc, #132]	@ (80078c4 <HAL_DMA_Start_IT+0x4b0>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d108      	bne.n	8007856 <HAL_DMA_Start_IT+0x442>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e012      	b.n	800787c <HAL_DMA_Start_IT+0x468>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f042 0201 	orr.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]
 8007866:	e009      	b.n	800787c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800786e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	40020010 	.word	0x40020010
 800788c:	40020028 	.word	0x40020028
 8007890:	40020040 	.word	0x40020040
 8007894:	40020058 	.word	0x40020058
 8007898:	40020070 	.word	0x40020070
 800789c:	40020088 	.word	0x40020088
 80078a0:	400200a0 	.word	0x400200a0
 80078a4:	400200b8 	.word	0x400200b8
 80078a8:	40020410 	.word	0x40020410
 80078ac:	40020428 	.word	0x40020428
 80078b0:	40020440 	.word	0x40020440
 80078b4:	40020458 	.word	0x40020458
 80078b8:	40020470 	.word	0x40020470
 80078bc:	40020488 	.word	0x40020488
 80078c0:	400204a0 	.word	0x400204a0
 80078c4:	400204b8 	.word	0x400204b8
 80078c8:	58025408 	.word	0x58025408
 80078cc:	5802541c 	.word	0x5802541c
 80078d0:	58025430 	.word	0x58025430
 80078d4:	58025444 	.word	0x58025444
 80078d8:	58025458 	.word	0x58025458
 80078dc:	5802546c 	.word	0x5802546c
 80078e0:	58025480 	.word	0x58025480
 80078e4:	58025494 	.word	0x58025494

080078e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e237      	b.n	8007d6a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d004      	beq.n	8007910 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2280      	movs	r2, #128	@ 0x80
 800790a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e22c      	b.n	8007d6a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a5c      	ldr	r2, [pc, #368]	@ (8007a88 <HAL_DMA_Abort_IT+0x1a0>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d04a      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a5b      	ldr	r2, [pc, #364]	@ (8007a8c <HAL_DMA_Abort_IT+0x1a4>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d045      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a59      	ldr	r2, [pc, #356]	@ (8007a90 <HAL_DMA_Abort_IT+0x1a8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d040      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a58      	ldr	r2, [pc, #352]	@ (8007a94 <HAL_DMA_Abort_IT+0x1ac>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d03b      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a56      	ldr	r2, [pc, #344]	@ (8007a98 <HAL_DMA_Abort_IT+0x1b0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d036      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a55      	ldr	r2, [pc, #340]	@ (8007a9c <HAL_DMA_Abort_IT+0x1b4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d031      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a53      	ldr	r2, [pc, #332]	@ (8007aa0 <HAL_DMA_Abort_IT+0x1b8>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d02c      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a52      	ldr	r2, [pc, #328]	@ (8007aa4 <HAL_DMA_Abort_IT+0x1bc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d027      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a50      	ldr	r2, [pc, #320]	@ (8007aa8 <HAL_DMA_Abort_IT+0x1c0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d022      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a4f      	ldr	r2, [pc, #316]	@ (8007aac <HAL_DMA_Abort_IT+0x1c4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d01d      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a4d      	ldr	r2, [pc, #308]	@ (8007ab0 <HAL_DMA_Abort_IT+0x1c8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d018      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a4c      	ldr	r2, [pc, #304]	@ (8007ab4 <HAL_DMA_Abort_IT+0x1cc>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d013      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a4a      	ldr	r2, [pc, #296]	@ (8007ab8 <HAL_DMA_Abort_IT+0x1d0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d00e      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a49      	ldr	r2, [pc, #292]	@ (8007abc <HAL_DMA_Abort_IT+0x1d4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d009      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a47      	ldr	r2, [pc, #284]	@ (8007ac0 <HAL_DMA_Abort_IT+0x1d8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d004      	beq.n	80079b0 <HAL_DMA_Abort_IT+0xc8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a46      	ldr	r2, [pc, #280]	@ (8007ac4 <HAL_DMA_Abort_IT+0x1dc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d101      	bne.n	80079b4 <HAL_DMA_Abort_IT+0xcc>
 80079b0:	2301      	movs	r3, #1
 80079b2:	e000      	b.n	80079b6 <HAL_DMA_Abort_IT+0xce>
 80079b4:	2300      	movs	r3, #0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 8086 	beq.w	8007ac8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2204      	movs	r2, #4
 80079c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a2f      	ldr	r2, [pc, #188]	@ (8007a88 <HAL_DMA_Abort_IT+0x1a0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d04a      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2e      	ldr	r2, [pc, #184]	@ (8007a8c <HAL_DMA_Abort_IT+0x1a4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d045      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007a90 <HAL_DMA_Abort_IT+0x1a8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d040      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a2b      	ldr	r2, [pc, #172]	@ (8007a94 <HAL_DMA_Abort_IT+0x1ac>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d03b      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a29      	ldr	r2, [pc, #164]	@ (8007a98 <HAL_DMA_Abort_IT+0x1b0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d036      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a28      	ldr	r2, [pc, #160]	@ (8007a9c <HAL_DMA_Abort_IT+0x1b4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d031      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a26      	ldr	r2, [pc, #152]	@ (8007aa0 <HAL_DMA_Abort_IT+0x1b8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d02c      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a25      	ldr	r2, [pc, #148]	@ (8007aa4 <HAL_DMA_Abort_IT+0x1bc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d027      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a23      	ldr	r2, [pc, #140]	@ (8007aa8 <HAL_DMA_Abort_IT+0x1c0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d022      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a22      	ldr	r2, [pc, #136]	@ (8007aac <HAL_DMA_Abort_IT+0x1c4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d01d      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a20      	ldr	r2, [pc, #128]	@ (8007ab0 <HAL_DMA_Abort_IT+0x1c8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d018      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1f      	ldr	r2, [pc, #124]	@ (8007ab4 <HAL_DMA_Abort_IT+0x1cc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab8 <HAL_DMA_Abort_IT+0x1d0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00e      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007abc <HAL_DMA_Abort_IT+0x1d4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d009      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1a      	ldr	r2, [pc, #104]	@ (8007ac0 <HAL_DMA_Abort_IT+0x1d8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <HAL_DMA_Abort_IT+0x17c>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a19      	ldr	r2, [pc, #100]	@ (8007ac4 <HAL_DMA_Abort_IT+0x1dc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d108      	bne.n	8007a76 <HAL_DMA_Abort_IT+0x18e>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0201 	bic.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e178      	b.n	8007d68 <HAL_DMA_Abort_IT+0x480>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0201 	bic.w	r2, r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e16f      	b.n	8007d68 <HAL_DMA_Abort_IT+0x480>
 8007a88:	40020010 	.word	0x40020010
 8007a8c:	40020028 	.word	0x40020028
 8007a90:	40020040 	.word	0x40020040
 8007a94:	40020058 	.word	0x40020058
 8007a98:	40020070 	.word	0x40020070
 8007a9c:	40020088 	.word	0x40020088
 8007aa0:	400200a0 	.word	0x400200a0
 8007aa4:	400200b8 	.word	0x400200b8
 8007aa8:	40020410 	.word	0x40020410
 8007aac:	40020428 	.word	0x40020428
 8007ab0:	40020440 	.word	0x40020440
 8007ab4:	40020458 	.word	0x40020458
 8007ab8:	40020470 	.word	0x40020470
 8007abc:	40020488 	.word	0x40020488
 8007ac0:	400204a0 	.word	0x400204a0
 8007ac4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 020e 	bic.w	r2, r2, #14
 8007ad6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a6c      	ldr	r2, [pc, #432]	@ (8007c90 <HAL_DMA_Abort_IT+0x3a8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d04a      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a6b      	ldr	r2, [pc, #428]	@ (8007c94 <HAL_DMA_Abort_IT+0x3ac>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d045      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a69      	ldr	r2, [pc, #420]	@ (8007c98 <HAL_DMA_Abort_IT+0x3b0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d040      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a68      	ldr	r2, [pc, #416]	@ (8007c9c <HAL_DMA_Abort_IT+0x3b4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d03b      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a66      	ldr	r2, [pc, #408]	@ (8007ca0 <HAL_DMA_Abort_IT+0x3b8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d036      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a65      	ldr	r2, [pc, #404]	@ (8007ca4 <HAL_DMA_Abort_IT+0x3bc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d031      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a63      	ldr	r2, [pc, #396]	@ (8007ca8 <HAL_DMA_Abort_IT+0x3c0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d02c      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a62      	ldr	r2, [pc, #392]	@ (8007cac <HAL_DMA_Abort_IT+0x3c4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d027      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a60      	ldr	r2, [pc, #384]	@ (8007cb0 <HAL_DMA_Abort_IT+0x3c8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d022      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a5f      	ldr	r2, [pc, #380]	@ (8007cb4 <HAL_DMA_Abort_IT+0x3cc>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d01d      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a5d      	ldr	r2, [pc, #372]	@ (8007cb8 <HAL_DMA_Abort_IT+0x3d0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d018      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a5c      	ldr	r2, [pc, #368]	@ (8007cbc <HAL_DMA_Abort_IT+0x3d4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d013      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a5a      	ldr	r2, [pc, #360]	@ (8007cc0 <HAL_DMA_Abort_IT+0x3d8>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d00e      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a59      	ldr	r2, [pc, #356]	@ (8007cc4 <HAL_DMA_Abort_IT+0x3dc>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d009      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a57      	ldr	r2, [pc, #348]	@ (8007cc8 <HAL_DMA_Abort_IT+0x3e0>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d004      	beq.n	8007b78 <HAL_DMA_Abort_IT+0x290>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a56      	ldr	r2, [pc, #344]	@ (8007ccc <HAL_DMA_Abort_IT+0x3e4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d108      	bne.n	8007b8a <HAL_DMA_Abort_IT+0x2a2>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0201 	bic.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e007      	b.n	8007b9a <HAL_DMA_Abort_IT+0x2b2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 0201 	bic.w	r2, r2, #1
 8007b98:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a3c      	ldr	r2, [pc, #240]	@ (8007c90 <HAL_DMA_Abort_IT+0x3a8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d072      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a3a      	ldr	r2, [pc, #232]	@ (8007c94 <HAL_DMA_Abort_IT+0x3ac>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d06d      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a39      	ldr	r2, [pc, #228]	@ (8007c98 <HAL_DMA_Abort_IT+0x3b0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d068      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a37      	ldr	r2, [pc, #220]	@ (8007c9c <HAL_DMA_Abort_IT+0x3b4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d063      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a36      	ldr	r2, [pc, #216]	@ (8007ca0 <HAL_DMA_Abort_IT+0x3b8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d05e      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a34      	ldr	r2, [pc, #208]	@ (8007ca4 <HAL_DMA_Abort_IT+0x3bc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d059      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a33      	ldr	r2, [pc, #204]	@ (8007ca8 <HAL_DMA_Abort_IT+0x3c0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d054      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a31      	ldr	r2, [pc, #196]	@ (8007cac <HAL_DMA_Abort_IT+0x3c4>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d04f      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a30      	ldr	r2, [pc, #192]	@ (8007cb0 <HAL_DMA_Abort_IT+0x3c8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d04a      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8007cb4 <HAL_DMA_Abort_IT+0x3cc>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d045      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a2d      	ldr	r2, [pc, #180]	@ (8007cb8 <HAL_DMA_Abort_IT+0x3d0>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d040      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8007cbc <HAL_DMA_Abort_IT+0x3d4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d03b      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a2a      	ldr	r2, [pc, #168]	@ (8007cc0 <HAL_DMA_Abort_IT+0x3d8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d036      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a28      	ldr	r2, [pc, #160]	@ (8007cc4 <HAL_DMA_Abort_IT+0x3dc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d031      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a27      	ldr	r2, [pc, #156]	@ (8007cc8 <HAL_DMA_Abort_IT+0x3e0>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d02c      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a25      	ldr	r2, [pc, #148]	@ (8007ccc <HAL_DMA_Abort_IT+0x3e4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d027      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a24      	ldr	r2, [pc, #144]	@ (8007cd0 <HAL_DMA_Abort_IT+0x3e8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d022      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a22      	ldr	r2, [pc, #136]	@ (8007cd4 <HAL_DMA_Abort_IT+0x3ec>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d01d      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a21      	ldr	r2, [pc, #132]	@ (8007cd8 <HAL_DMA_Abort_IT+0x3f0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d018      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8007cdc <HAL_DMA_Abort_IT+0x3f4>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a1e      	ldr	r2, [pc, #120]	@ (8007ce0 <HAL_DMA_Abort_IT+0x3f8>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a1c      	ldr	r2, [pc, #112]	@ (8007ce4 <HAL_DMA_Abort_IT+0x3fc>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce8 <HAL_DMA_Abort_IT+0x400>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_DMA_Abort_IT+0x3a2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a19      	ldr	r2, [pc, #100]	@ (8007cec <HAL_DMA_Abort_IT+0x404>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d132      	bne.n	8007cf0 <HAL_DMA_Abort_IT+0x408>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e031      	b.n	8007cf2 <HAL_DMA_Abort_IT+0x40a>
 8007c8e:	bf00      	nop
 8007c90:	40020010 	.word	0x40020010
 8007c94:	40020028 	.word	0x40020028
 8007c98:	40020040 	.word	0x40020040
 8007c9c:	40020058 	.word	0x40020058
 8007ca0:	40020070 	.word	0x40020070
 8007ca4:	40020088 	.word	0x40020088
 8007ca8:	400200a0 	.word	0x400200a0
 8007cac:	400200b8 	.word	0x400200b8
 8007cb0:	40020410 	.word	0x40020410
 8007cb4:	40020428 	.word	0x40020428
 8007cb8:	40020440 	.word	0x40020440
 8007cbc:	40020458 	.word	0x40020458
 8007cc0:	40020470 	.word	0x40020470
 8007cc4:	40020488 	.word	0x40020488
 8007cc8:	400204a0 	.word	0x400204a0
 8007ccc:	400204b8 	.word	0x400204b8
 8007cd0:	58025408 	.word	0x58025408
 8007cd4:	5802541c 	.word	0x5802541c
 8007cd8:	58025430 	.word	0x58025430
 8007cdc:	58025444 	.word	0x58025444
 8007ce0:	58025458 	.word	0x58025458
 8007ce4:	5802546c 	.word	0x5802546c
 8007ce8:	58025480 	.word	0x58025480
 8007cec:	58025494 	.word	0x58025494
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d028      	beq.n	8007d48 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	2201      	movs	r2, #1
 8007d16:	409a      	lsls	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007d24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00c      	beq.n	8007d48 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007d46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop

08007d74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	@ 0x28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007d80:	4b67      	ldr	r3, [pc, #412]	@ (8007f20 <HAL_DMA_IRQHandler+0x1ac>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a67      	ldr	r2, [pc, #412]	@ (8007f24 <HAL_DMA_IRQHandler+0x1b0>)
 8007d86:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8a:	0a9b      	lsrs	r3, r3, #10
 8007d8c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a5f      	ldr	r2, [pc, #380]	@ (8007f28 <HAL_DMA_IRQHandler+0x1b4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d04a      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a5d      	ldr	r2, [pc, #372]	@ (8007f2c <HAL_DMA_IRQHandler+0x1b8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d045      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a5c      	ldr	r2, [pc, #368]	@ (8007f30 <HAL_DMA_IRQHandler+0x1bc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d040      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a5a      	ldr	r2, [pc, #360]	@ (8007f34 <HAL_DMA_IRQHandler+0x1c0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d03b      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a59      	ldr	r2, [pc, #356]	@ (8007f38 <HAL_DMA_IRQHandler+0x1c4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d036      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a57      	ldr	r2, [pc, #348]	@ (8007f3c <HAL_DMA_IRQHandler+0x1c8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d031      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a56      	ldr	r2, [pc, #344]	@ (8007f40 <HAL_DMA_IRQHandler+0x1cc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d02c      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a54      	ldr	r2, [pc, #336]	@ (8007f44 <HAL_DMA_IRQHandler+0x1d0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d027      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a53      	ldr	r2, [pc, #332]	@ (8007f48 <HAL_DMA_IRQHandler+0x1d4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d022      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a51      	ldr	r2, [pc, #324]	@ (8007f4c <HAL_DMA_IRQHandler+0x1d8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01d      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a50      	ldr	r2, [pc, #320]	@ (8007f50 <HAL_DMA_IRQHandler+0x1dc>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d018      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a4e      	ldr	r2, [pc, #312]	@ (8007f54 <HAL_DMA_IRQHandler+0x1e0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d013      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a4d      	ldr	r2, [pc, #308]	@ (8007f58 <HAL_DMA_IRQHandler+0x1e4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00e      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a4b      	ldr	r2, [pc, #300]	@ (8007f5c <HAL_DMA_IRQHandler+0x1e8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d009      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a4a      	ldr	r2, [pc, #296]	@ (8007f60 <HAL_DMA_IRQHandler+0x1ec>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_DMA_IRQHandler+0xd2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a48      	ldr	r2, [pc, #288]	@ (8007f64 <HAL_DMA_IRQHandler+0x1f0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d101      	bne.n	8007e4a <HAL_DMA_IRQHandler+0xd6>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e000      	b.n	8007e4c <HAL_DMA_IRQHandler+0xd8>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 842b 	beq.w	80086a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e56:	f003 031f 	and.w	r3, r3, #31
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	4013      	ands	r3, r2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 80a2 	beq.w	8007fac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2e      	ldr	r2, [pc, #184]	@ (8007f28 <HAL_DMA_IRQHandler+0x1b4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d04a      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a2d      	ldr	r2, [pc, #180]	@ (8007f2c <HAL_DMA_IRQHandler+0x1b8>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d045      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a2b      	ldr	r2, [pc, #172]	@ (8007f30 <HAL_DMA_IRQHandler+0x1bc>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d040      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8007f34 <HAL_DMA_IRQHandler+0x1c0>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d03b      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a28      	ldr	r2, [pc, #160]	@ (8007f38 <HAL_DMA_IRQHandler+0x1c4>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d036      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a27      	ldr	r2, [pc, #156]	@ (8007f3c <HAL_DMA_IRQHandler+0x1c8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d031      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a25      	ldr	r2, [pc, #148]	@ (8007f40 <HAL_DMA_IRQHandler+0x1cc>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d02c      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a24      	ldr	r2, [pc, #144]	@ (8007f44 <HAL_DMA_IRQHandler+0x1d0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d027      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a22      	ldr	r2, [pc, #136]	@ (8007f48 <HAL_DMA_IRQHandler+0x1d4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d022      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a21      	ldr	r2, [pc, #132]	@ (8007f4c <HAL_DMA_IRQHandler+0x1d8>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d01d      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8007f50 <HAL_DMA_IRQHandler+0x1dc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d018      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a1e      	ldr	r2, [pc, #120]	@ (8007f54 <HAL_DMA_IRQHandler+0x1e0>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d013      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f58 <HAL_DMA_IRQHandler+0x1e4>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00e      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a1b      	ldr	r2, [pc, #108]	@ (8007f5c <HAL_DMA_IRQHandler+0x1e8>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d009      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a19      	ldr	r2, [pc, #100]	@ (8007f60 <HAL_DMA_IRQHandler+0x1ec>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d004      	beq.n	8007f08 <HAL_DMA_IRQHandler+0x194>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a18      	ldr	r2, [pc, #96]	@ (8007f64 <HAL_DMA_IRQHandler+0x1f0>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d12f      	bne.n	8007f68 <HAL_DMA_IRQHandler+0x1f4>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	bf14      	ite	ne
 8007f16:	2301      	movne	r3, #1
 8007f18:	2300      	moveq	r3, #0
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	e02e      	b.n	8007f7c <HAL_DMA_IRQHandler+0x208>
 8007f1e:	bf00      	nop
 8007f20:	24000010 	.word	0x24000010
 8007f24:	1b4e81b5 	.word	0x1b4e81b5
 8007f28:	40020010 	.word	0x40020010
 8007f2c:	40020028 	.word	0x40020028
 8007f30:	40020040 	.word	0x40020040
 8007f34:	40020058 	.word	0x40020058
 8007f38:	40020070 	.word	0x40020070
 8007f3c:	40020088 	.word	0x40020088
 8007f40:	400200a0 	.word	0x400200a0
 8007f44:	400200b8 	.word	0x400200b8
 8007f48:	40020410 	.word	0x40020410
 8007f4c:	40020428 	.word	0x40020428
 8007f50:	40020440 	.word	0x40020440
 8007f54:	40020458 	.word	0x40020458
 8007f58:	40020470 	.word	0x40020470
 8007f5c:	40020488 	.word	0x40020488
 8007f60:	400204a0 	.word	0x400204a0
 8007f64:	400204b8 	.word	0x400204b8
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	bf14      	ite	ne
 8007f76:	2301      	movne	r3, #1
 8007f78:	2300      	moveq	r3, #0
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d015      	beq.n	8007fac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0204 	bic.w	r2, r2, #4
 8007f8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	2208      	movs	r2, #8
 8007f9a:	409a      	lsls	r2, r3
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa4:	f043 0201 	orr.w	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d06e      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a69      	ldr	r2, [pc, #420]	@ (800816c <HAL_DMA_IRQHandler+0x3f8>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d04a      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a67      	ldr	r2, [pc, #412]	@ (8008170 <HAL_DMA_IRQHandler+0x3fc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d045      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a66      	ldr	r2, [pc, #408]	@ (8008174 <HAL_DMA_IRQHandler+0x400>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d040      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a64      	ldr	r2, [pc, #400]	@ (8008178 <HAL_DMA_IRQHandler+0x404>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d03b      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a63      	ldr	r2, [pc, #396]	@ (800817c <HAL_DMA_IRQHandler+0x408>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d036      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a61      	ldr	r2, [pc, #388]	@ (8008180 <HAL_DMA_IRQHandler+0x40c>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d031      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a60      	ldr	r2, [pc, #384]	@ (8008184 <HAL_DMA_IRQHandler+0x410>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d02c      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a5e      	ldr	r2, [pc, #376]	@ (8008188 <HAL_DMA_IRQHandler+0x414>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d027      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a5d      	ldr	r2, [pc, #372]	@ (800818c <HAL_DMA_IRQHandler+0x418>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d022      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a5b      	ldr	r2, [pc, #364]	@ (8008190 <HAL_DMA_IRQHandler+0x41c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d01d      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a5a      	ldr	r2, [pc, #360]	@ (8008194 <HAL_DMA_IRQHandler+0x420>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d018      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a58      	ldr	r2, [pc, #352]	@ (8008198 <HAL_DMA_IRQHandler+0x424>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a57      	ldr	r2, [pc, #348]	@ (800819c <HAL_DMA_IRQHandler+0x428>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00e      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a55      	ldr	r2, [pc, #340]	@ (80081a0 <HAL_DMA_IRQHandler+0x42c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d009      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a54      	ldr	r2, [pc, #336]	@ (80081a4 <HAL_DMA_IRQHandler+0x430>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d004      	beq.n	8008062 <HAL_DMA_IRQHandler+0x2ee>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a52      	ldr	r2, [pc, #328]	@ (80081a8 <HAL_DMA_IRQHandler+0x434>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d10a      	bne.n	8008078 <HAL_DMA_IRQHandler+0x304>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800806c:	2b00      	cmp	r3, #0
 800806e:	bf14      	ite	ne
 8008070:	2301      	movne	r3, #1
 8008072:	2300      	moveq	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	e003      	b.n	8008080 <HAL_DMA_IRQHandler+0x30c>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2300      	movs	r3, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00d      	beq.n	80080a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008088:	f003 031f 	and.w	r3, r3, #31
 800808c:	2201      	movs	r2, #1
 800808e:	409a      	lsls	r2, r3
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008098:	f043 0202 	orr.w	r2, r3, #2
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	2204      	movs	r2, #4
 80080aa:	409a      	lsls	r2, r3
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	4013      	ands	r3, r2
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 808f 	beq.w	80081d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a2c      	ldr	r2, [pc, #176]	@ (800816c <HAL_DMA_IRQHandler+0x3f8>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d04a      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008170 <HAL_DMA_IRQHandler+0x3fc>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d045      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a29      	ldr	r2, [pc, #164]	@ (8008174 <HAL_DMA_IRQHandler+0x400>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d040      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a27      	ldr	r2, [pc, #156]	@ (8008178 <HAL_DMA_IRQHandler+0x404>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d03b      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a26      	ldr	r2, [pc, #152]	@ (800817c <HAL_DMA_IRQHandler+0x408>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d036      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a24      	ldr	r2, [pc, #144]	@ (8008180 <HAL_DMA_IRQHandler+0x40c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d031      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a23      	ldr	r2, [pc, #140]	@ (8008184 <HAL_DMA_IRQHandler+0x410>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d02c      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a21      	ldr	r2, [pc, #132]	@ (8008188 <HAL_DMA_IRQHandler+0x414>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d027      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a20      	ldr	r2, [pc, #128]	@ (800818c <HAL_DMA_IRQHandler+0x418>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d022      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a1e      	ldr	r2, [pc, #120]	@ (8008190 <HAL_DMA_IRQHandler+0x41c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01d      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a1d      	ldr	r2, [pc, #116]	@ (8008194 <HAL_DMA_IRQHandler+0x420>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d018      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a1b      	ldr	r2, [pc, #108]	@ (8008198 <HAL_DMA_IRQHandler+0x424>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d013      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a1a      	ldr	r2, [pc, #104]	@ (800819c <HAL_DMA_IRQHandler+0x428>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00e      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a18      	ldr	r2, [pc, #96]	@ (80081a0 <HAL_DMA_IRQHandler+0x42c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d009      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a17      	ldr	r2, [pc, #92]	@ (80081a4 <HAL_DMA_IRQHandler+0x430>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d004      	beq.n	8008156 <HAL_DMA_IRQHandler+0x3e2>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a15      	ldr	r2, [pc, #84]	@ (80081a8 <HAL_DMA_IRQHandler+0x434>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d12a      	bne.n	80081ac <HAL_DMA_IRQHandler+0x438>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	bf14      	ite	ne
 8008164:	2301      	movne	r3, #1
 8008166:	2300      	moveq	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	e023      	b.n	80081b4 <HAL_DMA_IRQHandler+0x440>
 800816c:	40020010 	.word	0x40020010
 8008170:	40020028 	.word	0x40020028
 8008174:	40020040 	.word	0x40020040
 8008178:	40020058 	.word	0x40020058
 800817c:	40020070 	.word	0x40020070
 8008180:	40020088 	.word	0x40020088
 8008184:	400200a0 	.word	0x400200a0
 8008188:	400200b8 	.word	0x400200b8
 800818c:	40020410 	.word	0x40020410
 8008190:	40020428 	.word	0x40020428
 8008194:	40020440 	.word	0x40020440
 8008198:	40020458 	.word	0x40020458
 800819c:	40020470 	.word	0x40020470
 80081a0:	40020488 	.word	0x40020488
 80081a4:	400204a0 	.word	0x400204a0
 80081a8:	400204b8 	.word	0x400204b8
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00d      	beq.n	80081d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081bc:	f003 031f 	and.w	r3, r3, #31
 80081c0:	2204      	movs	r2, #4
 80081c2:	409a      	lsls	r2, r3
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081cc:	f043 0204 	orr.w	r2, r3, #4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	2210      	movs	r2, #16
 80081de:	409a      	lsls	r2, r3
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80a6 	beq.w	8008336 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a85      	ldr	r2, [pc, #532]	@ (8008404 <HAL_DMA_IRQHandler+0x690>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d04a      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a83      	ldr	r2, [pc, #524]	@ (8008408 <HAL_DMA_IRQHandler+0x694>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d045      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a82      	ldr	r2, [pc, #520]	@ (800840c <HAL_DMA_IRQHandler+0x698>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d040      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a80      	ldr	r2, [pc, #512]	@ (8008410 <HAL_DMA_IRQHandler+0x69c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d03b      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a7f      	ldr	r2, [pc, #508]	@ (8008414 <HAL_DMA_IRQHandler+0x6a0>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d036      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a7d      	ldr	r2, [pc, #500]	@ (8008418 <HAL_DMA_IRQHandler+0x6a4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d031      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a7c      	ldr	r2, [pc, #496]	@ (800841c <HAL_DMA_IRQHandler+0x6a8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d02c      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a7a      	ldr	r2, [pc, #488]	@ (8008420 <HAL_DMA_IRQHandler+0x6ac>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d027      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a79      	ldr	r2, [pc, #484]	@ (8008424 <HAL_DMA_IRQHandler+0x6b0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d022      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a77      	ldr	r2, [pc, #476]	@ (8008428 <HAL_DMA_IRQHandler+0x6b4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d01d      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a76      	ldr	r2, [pc, #472]	@ (800842c <HAL_DMA_IRQHandler+0x6b8>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d018      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a74      	ldr	r2, [pc, #464]	@ (8008430 <HAL_DMA_IRQHandler+0x6bc>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d013      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a73      	ldr	r2, [pc, #460]	@ (8008434 <HAL_DMA_IRQHandler+0x6c0>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00e      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a71      	ldr	r2, [pc, #452]	@ (8008438 <HAL_DMA_IRQHandler+0x6c4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d009      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a70      	ldr	r2, [pc, #448]	@ (800843c <HAL_DMA_IRQHandler+0x6c8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d004      	beq.n	800828a <HAL_DMA_IRQHandler+0x516>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a6e      	ldr	r2, [pc, #440]	@ (8008440 <HAL_DMA_IRQHandler+0x6cc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d10a      	bne.n	80082a0 <HAL_DMA_IRQHandler+0x52c>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b00      	cmp	r3, #0
 8008296:	bf14      	ite	ne
 8008298:	2301      	movne	r3, #1
 800829a:	2300      	moveq	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	e009      	b.n	80082b4 <HAL_DMA_IRQHandler+0x540>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bf14      	ite	ne
 80082ae:	2301      	movne	r3, #1
 80082b0:	2300      	moveq	r3, #0
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d03e      	beq.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082bc:	f003 031f 	and.w	r3, r3, #31
 80082c0:	2210      	movs	r2, #16
 80082c2:	409a      	lsls	r2, r3
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d018      	beq.n	8008308 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d108      	bne.n	80082f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d024      	beq.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
 80082f4:	e01f      	b.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d01b      	beq.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
 8008306:	e016      	b.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008312:	2b00      	cmp	r3, #0
 8008314:	d107      	bne.n	8008326 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0208 	bic.w	r2, r2, #8
 8008324:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800833a:	f003 031f 	and.w	r3, r3, #31
 800833e:	2220      	movs	r2, #32
 8008340:	409a      	lsls	r2, r3
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	4013      	ands	r3, r2
 8008346:	2b00      	cmp	r3, #0
 8008348:	f000 8110 	beq.w	800856c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a2c      	ldr	r2, [pc, #176]	@ (8008404 <HAL_DMA_IRQHandler+0x690>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d04a      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a2b      	ldr	r2, [pc, #172]	@ (8008408 <HAL_DMA_IRQHandler+0x694>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d045      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a29      	ldr	r2, [pc, #164]	@ (800840c <HAL_DMA_IRQHandler+0x698>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d040      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a28      	ldr	r2, [pc, #160]	@ (8008410 <HAL_DMA_IRQHandler+0x69c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d03b      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a26      	ldr	r2, [pc, #152]	@ (8008414 <HAL_DMA_IRQHandler+0x6a0>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d036      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a25      	ldr	r2, [pc, #148]	@ (8008418 <HAL_DMA_IRQHandler+0x6a4>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d031      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a23      	ldr	r2, [pc, #140]	@ (800841c <HAL_DMA_IRQHandler+0x6a8>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d02c      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a22      	ldr	r2, [pc, #136]	@ (8008420 <HAL_DMA_IRQHandler+0x6ac>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d027      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a20      	ldr	r2, [pc, #128]	@ (8008424 <HAL_DMA_IRQHandler+0x6b0>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d022      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a1f      	ldr	r2, [pc, #124]	@ (8008428 <HAL_DMA_IRQHandler+0x6b4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d01d      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a1d      	ldr	r2, [pc, #116]	@ (800842c <HAL_DMA_IRQHandler+0x6b8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d018      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a1c      	ldr	r2, [pc, #112]	@ (8008430 <HAL_DMA_IRQHandler+0x6bc>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d013      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008434 <HAL_DMA_IRQHandler+0x6c0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00e      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a19      	ldr	r2, [pc, #100]	@ (8008438 <HAL_DMA_IRQHandler+0x6c4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d009      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a17      	ldr	r2, [pc, #92]	@ (800843c <HAL_DMA_IRQHandler+0x6c8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d004      	beq.n	80083ec <HAL_DMA_IRQHandler+0x678>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a16      	ldr	r2, [pc, #88]	@ (8008440 <HAL_DMA_IRQHandler+0x6cc>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d12b      	bne.n	8008444 <HAL_DMA_IRQHandler+0x6d0>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	bf14      	ite	ne
 80083fa:	2301      	movne	r3, #1
 80083fc:	2300      	moveq	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	e02a      	b.n	8008458 <HAL_DMA_IRQHandler+0x6e4>
 8008402:	bf00      	nop
 8008404:	40020010 	.word	0x40020010
 8008408:	40020028 	.word	0x40020028
 800840c:	40020040 	.word	0x40020040
 8008410:	40020058 	.word	0x40020058
 8008414:	40020070 	.word	0x40020070
 8008418:	40020088 	.word	0x40020088
 800841c:	400200a0 	.word	0x400200a0
 8008420:	400200b8 	.word	0x400200b8
 8008424:	40020410 	.word	0x40020410
 8008428:	40020428 	.word	0x40020428
 800842c:	40020440 	.word	0x40020440
 8008430:	40020458 	.word	0x40020458
 8008434:	40020470 	.word	0x40020470
 8008438:	40020488 	.word	0x40020488
 800843c:	400204a0 	.word	0x400204a0
 8008440:	400204b8 	.word	0x400204b8
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	bf14      	ite	ne
 8008452:	2301      	movne	r3, #1
 8008454:	2300      	moveq	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8087 	beq.w	800856c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008462:	f003 031f 	and.w	r3, r3, #31
 8008466:	2220      	movs	r2, #32
 8008468:	409a      	lsls	r2, r3
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b04      	cmp	r3, #4
 8008478:	d139      	bne.n	80084ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0216 	bic.w	r2, r2, #22
 8008488:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008498:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <HAL_DMA_IRQHandler+0x736>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d007      	beq.n	80084ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0208 	bic.w	r2, r2, #8
 80084b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	223f      	movs	r2, #63	@ 0x3f
 80084c4:	409a      	lsls	r2, r3
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 834a 	beq.w	8008b78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	4798      	blx	r3
          }
          return;
 80084ec:	e344      	b.n	8008b78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d018      	beq.n	800852e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d108      	bne.n	800851c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800850e:	2b00      	cmp	r3, #0
 8008510:	d02c      	beq.n	800856c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	4798      	blx	r3
 800851a:	e027      	b.n	800856c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d023      	beq.n	800856c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
 800852c:	e01e      	b.n	800856c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10f      	bne.n	800855c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0210 	bic.w	r2, r2, #16
 800854a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 8306 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 8088 	beq.w	8008694 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2204      	movs	r2, #4
 8008588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a7a      	ldr	r2, [pc, #488]	@ (800877c <HAL_DMA_IRQHandler+0xa08>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d04a      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a79      	ldr	r2, [pc, #484]	@ (8008780 <HAL_DMA_IRQHandler+0xa0c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d045      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a77      	ldr	r2, [pc, #476]	@ (8008784 <HAL_DMA_IRQHandler+0xa10>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d040      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a76      	ldr	r2, [pc, #472]	@ (8008788 <HAL_DMA_IRQHandler+0xa14>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d03b      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a74      	ldr	r2, [pc, #464]	@ (800878c <HAL_DMA_IRQHandler+0xa18>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d036      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a73      	ldr	r2, [pc, #460]	@ (8008790 <HAL_DMA_IRQHandler+0xa1c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d031      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a71      	ldr	r2, [pc, #452]	@ (8008794 <HAL_DMA_IRQHandler+0xa20>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d02c      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a70      	ldr	r2, [pc, #448]	@ (8008798 <HAL_DMA_IRQHandler+0xa24>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d027      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a6e      	ldr	r2, [pc, #440]	@ (800879c <HAL_DMA_IRQHandler+0xa28>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d022      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a6d      	ldr	r2, [pc, #436]	@ (80087a0 <HAL_DMA_IRQHandler+0xa2c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d01d      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a6b      	ldr	r2, [pc, #428]	@ (80087a4 <HAL_DMA_IRQHandler+0xa30>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d018      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a6a      	ldr	r2, [pc, #424]	@ (80087a8 <HAL_DMA_IRQHandler+0xa34>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d013      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a68      	ldr	r2, [pc, #416]	@ (80087ac <HAL_DMA_IRQHandler+0xa38>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00e      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a67      	ldr	r2, [pc, #412]	@ (80087b0 <HAL_DMA_IRQHandler+0xa3c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d009      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a65      	ldr	r2, [pc, #404]	@ (80087b4 <HAL_DMA_IRQHandler+0xa40>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <HAL_DMA_IRQHandler+0x8b8>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a64      	ldr	r2, [pc, #400]	@ (80087b8 <HAL_DMA_IRQHandler+0xa44>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d108      	bne.n	800863e <HAL_DMA_IRQHandler+0x8ca>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0201 	bic.w	r2, r2, #1
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	e007      	b.n	800864e <HAL_DMA_IRQHandler+0x8da>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f022 0201 	bic.w	r2, r2, #1
 800864c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3301      	adds	r3, #1
 8008652:	60fb      	str	r3, [r7, #12]
 8008654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008656:	429a      	cmp	r2, r3
 8008658:	d307      	bcc.n	800866a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f003 0301 	and.w	r3, r3, #1
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1f2      	bne.n	800864e <HAL_DMA_IRQHandler+0x8da>
 8008668:	e000      	b.n	800866c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800866a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2203      	movs	r2, #3
 800867e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008682:	e003      	b.n	800868c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 8272 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	4798      	blx	r3
 80086a6:	e26c      	b.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a43      	ldr	r2, [pc, #268]	@ (80087bc <HAL_DMA_IRQHandler+0xa48>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d022      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a42      	ldr	r2, [pc, #264]	@ (80087c0 <HAL_DMA_IRQHandler+0xa4c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d01d      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a40      	ldr	r2, [pc, #256]	@ (80087c4 <HAL_DMA_IRQHandler+0xa50>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d018      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a3f      	ldr	r2, [pc, #252]	@ (80087c8 <HAL_DMA_IRQHandler+0xa54>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d013      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a3d      	ldr	r2, [pc, #244]	@ (80087cc <HAL_DMA_IRQHandler+0xa58>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00e      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a3c      	ldr	r2, [pc, #240]	@ (80087d0 <HAL_DMA_IRQHandler+0xa5c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d009      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a3a      	ldr	r2, [pc, #232]	@ (80087d4 <HAL_DMA_IRQHandler+0xa60>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d004      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x984>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a39      	ldr	r2, [pc, #228]	@ (80087d8 <HAL_DMA_IRQHandler+0xa64>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d101      	bne.n	80086fc <HAL_DMA_IRQHandler+0x988>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e000      	b.n	80086fe <HAL_DMA_IRQHandler+0x98a>
 80086fc:	2300      	movs	r3, #0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 823f 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008710:	f003 031f 	and.w	r3, r3, #31
 8008714:	2204      	movs	r2, #4
 8008716:	409a      	lsls	r2, r3
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	4013      	ands	r3, r2
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 80cd 	beq.w	80088bc <HAL_DMA_IRQHandler+0xb48>
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80c7 	beq.w	80088bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008732:	f003 031f 	and.w	r3, r3, #31
 8008736:	2204      	movs	r2, #4
 8008738:	409a      	lsls	r2, r3
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d049      	beq.n	80087dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d109      	bne.n	8008766 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 8210 	beq.w	8008b7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008764:	e20a      	b.n	8008b7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 8206 	beq.w	8008b7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008778:	e200      	b.n	8008b7c <HAL_DMA_IRQHandler+0xe08>
 800877a:	bf00      	nop
 800877c:	40020010 	.word	0x40020010
 8008780:	40020028 	.word	0x40020028
 8008784:	40020040 	.word	0x40020040
 8008788:	40020058 	.word	0x40020058
 800878c:	40020070 	.word	0x40020070
 8008790:	40020088 	.word	0x40020088
 8008794:	400200a0 	.word	0x400200a0
 8008798:	400200b8 	.word	0x400200b8
 800879c:	40020410 	.word	0x40020410
 80087a0:	40020428 	.word	0x40020428
 80087a4:	40020440 	.word	0x40020440
 80087a8:	40020458 	.word	0x40020458
 80087ac:	40020470 	.word	0x40020470
 80087b0:	40020488 	.word	0x40020488
 80087b4:	400204a0 	.word	0x400204a0
 80087b8:	400204b8 	.word	0x400204b8
 80087bc:	58025408 	.word	0x58025408
 80087c0:	5802541c 	.word	0x5802541c
 80087c4:	58025430 	.word	0x58025430
 80087c8:	58025444 	.word	0x58025444
 80087cc:	58025458 	.word	0x58025458
 80087d0:	5802546c 	.word	0x5802546c
 80087d4:	58025480 	.word	0x58025480
 80087d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f003 0320 	and.w	r3, r3, #32
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d160      	bne.n	80088a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a7f      	ldr	r2, [pc, #508]	@ (80089e8 <HAL_DMA_IRQHandler+0xc74>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d04a      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a7d      	ldr	r2, [pc, #500]	@ (80089ec <HAL_DMA_IRQHandler+0xc78>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d045      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a7c      	ldr	r2, [pc, #496]	@ (80089f0 <HAL_DMA_IRQHandler+0xc7c>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d040      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a7a      	ldr	r2, [pc, #488]	@ (80089f4 <HAL_DMA_IRQHandler+0xc80>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d03b      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a79      	ldr	r2, [pc, #484]	@ (80089f8 <HAL_DMA_IRQHandler+0xc84>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d036      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a77      	ldr	r2, [pc, #476]	@ (80089fc <HAL_DMA_IRQHandler+0xc88>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d031      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a76      	ldr	r2, [pc, #472]	@ (8008a00 <HAL_DMA_IRQHandler+0xc8c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d02c      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a74      	ldr	r2, [pc, #464]	@ (8008a04 <HAL_DMA_IRQHandler+0xc90>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d027      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a73      	ldr	r2, [pc, #460]	@ (8008a08 <HAL_DMA_IRQHandler+0xc94>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d022      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a71      	ldr	r2, [pc, #452]	@ (8008a0c <HAL_DMA_IRQHandler+0xc98>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d01d      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a70      	ldr	r2, [pc, #448]	@ (8008a10 <HAL_DMA_IRQHandler+0xc9c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d018      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a6e      	ldr	r2, [pc, #440]	@ (8008a14 <HAL_DMA_IRQHandler+0xca0>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d013      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a6d      	ldr	r2, [pc, #436]	@ (8008a18 <HAL_DMA_IRQHandler+0xca4>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00e      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a6b      	ldr	r2, [pc, #428]	@ (8008a1c <HAL_DMA_IRQHandler+0xca8>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d009      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a6a      	ldr	r2, [pc, #424]	@ (8008a20 <HAL_DMA_IRQHandler+0xcac>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d004      	beq.n	8008886 <HAL_DMA_IRQHandler+0xb12>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a68      	ldr	r2, [pc, #416]	@ (8008a24 <HAL_DMA_IRQHandler+0xcb0>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d108      	bne.n	8008898 <HAL_DMA_IRQHandler+0xb24>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0208 	bic.w	r2, r2, #8
 8008894:	601a      	str	r2, [r3, #0]
 8008896:	e007      	b.n	80088a8 <HAL_DMA_IRQHandler+0xb34>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 0204 	bic.w	r2, r2, #4
 80088a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 8165 	beq.w	8008b7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088ba:	e15f      	b.n	8008b7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	2202      	movs	r2, #2
 80088c6:	409a      	lsls	r2, r3
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 80c5 	beq.w	8008a5c <HAL_DMA_IRQHandler+0xce8>
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f003 0302 	and.w	r3, r3, #2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80bf 	beq.w	8008a5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088e2:	f003 031f 	and.w	r3, r3, #31
 80088e6:	2202      	movs	r2, #2
 80088e8:	409a      	lsls	r2, r3
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d018      	beq.n	800892a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d109      	bne.n	8008916 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 813a 	beq.w	8008b80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008914:	e134      	b.n	8008b80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 8130 	beq.w	8008b80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008928:	e12a      	b.n	8008b80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f003 0320 	and.w	r3, r3, #32
 8008930:	2b00      	cmp	r3, #0
 8008932:	f040 8089 	bne.w	8008a48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a2b      	ldr	r2, [pc, #172]	@ (80089e8 <HAL_DMA_IRQHandler+0xc74>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d04a      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a29      	ldr	r2, [pc, #164]	@ (80089ec <HAL_DMA_IRQHandler+0xc78>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d045      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a28      	ldr	r2, [pc, #160]	@ (80089f0 <HAL_DMA_IRQHandler+0xc7c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d040      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a26      	ldr	r2, [pc, #152]	@ (80089f4 <HAL_DMA_IRQHandler+0xc80>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d03b      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a25      	ldr	r2, [pc, #148]	@ (80089f8 <HAL_DMA_IRQHandler+0xc84>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d036      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a23      	ldr	r2, [pc, #140]	@ (80089fc <HAL_DMA_IRQHandler+0xc88>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d031      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a22      	ldr	r2, [pc, #136]	@ (8008a00 <HAL_DMA_IRQHandler+0xc8c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d02c      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a20      	ldr	r2, [pc, #128]	@ (8008a04 <HAL_DMA_IRQHandler+0xc90>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d027      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1f      	ldr	r2, [pc, #124]	@ (8008a08 <HAL_DMA_IRQHandler+0xc94>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d022      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a1d      	ldr	r2, [pc, #116]	@ (8008a0c <HAL_DMA_IRQHandler+0xc98>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d01d      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a1c      	ldr	r2, [pc, #112]	@ (8008a10 <HAL_DMA_IRQHandler+0xc9c>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d018      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a1a      	ldr	r2, [pc, #104]	@ (8008a14 <HAL_DMA_IRQHandler+0xca0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d013      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a19      	ldr	r2, [pc, #100]	@ (8008a18 <HAL_DMA_IRQHandler+0xca4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d00e      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a17      	ldr	r2, [pc, #92]	@ (8008a1c <HAL_DMA_IRQHandler+0xca8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d009      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a16      	ldr	r2, [pc, #88]	@ (8008a20 <HAL_DMA_IRQHandler+0xcac>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d004      	beq.n	80089d6 <HAL_DMA_IRQHandler+0xc62>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a14      	ldr	r2, [pc, #80]	@ (8008a24 <HAL_DMA_IRQHandler+0xcb0>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d128      	bne.n	8008a28 <HAL_DMA_IRQHandler+0xcb4>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0214 	bic.w	r2, r2, #20
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	e027      	b.n	8008a38 <HAL_DMA_IRQHandler+0xcc4>
 80089e8:	40020010 	.word	0x40020010
 80089ec:	40020028 	.word	0x40020028
 80089f0:	40020040 	.word	0x40020040
 80089f4:	40020058 	.word	0x40020058
 80089f8:	40020070 	.word	0x40020070
 80089fc:	40020088 	.word	0x40020088
 8008a00:	400200a0 	.word	0x400200a0
 8008a04:	400200b8 	.word	0x400200b8
 8008a08:	40020410 	.word	0x40020410
 8008a0c:	40020428 	.word	0x40020428
 8008a10:	40020440 	.word	0x40020440
 8008a14:	40020458 	.word	0x40020458
 8008a18:	40020470 	.word	0x40020470
 8008a1c:	40020488 	.word	0x40020488
 8008a20:	400204a0 	.word	0x400204a0
 8008a24:	400204b8 	.word	0x400204b8
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 020a 	bic.w	r2, r2, #10
 8008a36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8097 	beq.w	8008b80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a5a:	e091      	b.n	8008b80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2208      	movs	r2, #8
 8008a66:	409a      	lsls	r2, r3
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	f000 8088 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f003 0308 	and.w	r3, r3, #8
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 8082 	beq.w	8008b82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a41      	ldr	r2, [pc, #260]	@ (8008b88 <HAL_DMA_IRQHandler+0xe14>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d04a      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b8c <HAL_DMA_IRQHandler+0xe18>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d045      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a3e      	ldr	r2, [pc, #248]	@ (8008b90 <HAL_DMA_IRQHandler+0xe1c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d040      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8008b94 <HAL_DMA_IRQHandler+0xe20>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d03b      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3b      	ldr	r2, [pc, #236]	@ (8008b98 <HAL_DMA_IRQHandler+0xe24>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d036      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a39      	ldr	r2, [pc, #228]	@ (8008b9c <HAL_DMA_IRQHandler+0xe28>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d031      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a38      	ldr	r2, [pc, #224]	@ (8008ba0 <HAL_DMA_IRQHandler+0xe2c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d02c      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a36      	ldr	r2, [pc, #216]	@ (8008ba4 <HAL_DMA_IRQHandler+0xe30>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d027      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a35      	ldr	r2, [pc, #212]	@ (8008ba8 <HAL_DMA_IRQHandler+0xe34>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d022      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a33      	ldr	r2, [pc, #204]	@ (8008bac <HAL_DMA_IRQHandler+0xe38>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d01d      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a32      	ldr	r2, [pc, #200]	@ (8008bb0 <HAL_DMA_IRQHandler+0xe3c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d018      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a30      	ldr	r2, [pc, #192]	@ (8008bb4 <HAL_DMA_IRQHandler+0xe40>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d013      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a2f      	ldr	r2, [pc, #188]	@ (8008bb8 <HAL_DMA_IRQHandler+0xe44>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00e      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a2d      	ldr	r2, [pc, #180]	@ (8008bbc <HAL_DMA_IRQHandler+0xe48>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d009      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8008bc0 <HAL_DMA_IRQHandler+0xe4c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d004      	beq.n	8008b1e <HAL_DMA_IRQHandler+0xdaa>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a2a      	ldr	r2, [pc, #168]	@ (8008bc4 <HAL_DMA_IRQHandler+0xe50>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d108      	bne.n	8008b30 <HAL_DMA_IRQHandler+0xdbc>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 021c 	bic.w	r2, r2, #28
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	e007      	b.n	8008b40 <HAL_DMA_IRQHandler+0xdcc>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f022 020e 	bic.w	r2, r2, #14
 8008b3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b44:	f003 031f 	and.w	r3, r3, #31
 8008b48:	2201      	movs	r2, #1
 8008b4a:	409a      	lsls	r2, r3
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	4798      	blx	r3
 8008b76:	e004      	b.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008b78:	bf00      	nop
 8008b7a:	e002      	b.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b7c:	bf00      	nop
 8008b7e:	e000      	b.n	8008b82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008b82:	3728      	adds	r7, #40	@ 0x28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40020010 	.word	0x40020010
 8008b8c:	40020028 	.word	0x40020028
 8008b90:	40020040 	.word	0x40020040
 8008b94:	40020058 	.word	0x40020058
 8008b98:	40020070 	.word	0x40020070
 8008b9c:	40020088 	.word	0x40020088
 8008ba0:	400200a0 	.word	0x400200a0
 8008ba4:	400200b8 	.word	0x400200b8
 8008ba8:	40020410 	.word	0x40020410
 8008bac:	40020428 	.word	0x40020428
 8008bb0:	40020440 	.word	0x40020440
 8008bb4:	40020458 	.word	0x40020458
 8008bb8:	40020470 	.word	0x40020470
 8008bbc:	40020488 	.word	0x40020488
 8008bc0:	400204a0 	.word	0x400204a0
 8008bc4:	400204b8 	.word	0x400204b8

08008bc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bda:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a7f      	ldr	r2, [pc, #508]	@ (8008de4 <DMA_SetConfig+0x21c>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d072      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a7d      	ldr	r2, [pc, #500]	@ (8008de8 <DMA_SetConfig+0x220>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d06d      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a7c      	ldr	r2, [pc, #496]	@ (8008dec <DMA_SetConfig+0x224>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d068      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a7a      	ldr	r2, [pc, #488]	@ (8008df0 <DMA_SetConfig+0x228>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d063      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a79      	ldr	r2, [pc, #484]	@ (8008df4 <DMA_SetConfig+0x22c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d05e      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a77      	ldr	r2, [pc, #476]	@ (8008df8 <DMA_SetConfig+0x230>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d059      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a76      	ldr	r2, [pc, #472]	@ (8008dfc <DMA_SetConfig+0x234>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d054      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a74      	ldr	r2, [pc, #464]	@ (8008e00 <DMA_SetConfig+0x238>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d04f      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a73      	ldr	r2, [pc, #460]	@ (8008e04 <DMA_SetConfig+0x23c>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d04a      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a71      	ldr	r2, [pc, #452]	@ (8008e08 <DMA_SetConfig+0x240>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d045      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a70      	ldr	r2, [pc, #448]	@ (8008e0c <DMA_SetConfig+0x244>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d040      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a6e      	ldr	r2, [pc, #440]	@ (8008e10 <DMA_SetConfig+0x248>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d03b      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a6d      	ldr	r2, [pc, #436]	@ (8008e14 <DMA_SetConfig+0x24c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d036      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a6b      	ldr	r2, [pc, #428]	@ (8008e18 <DMA_SetConfig+0x250>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d031      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a6a      	ldr	r2, [pc, #424]	@ (8008e1c <DMA_SetConfig+0x254>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d02c      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a68      	ldr	r2, [pc, #416]	@ (8008e20 <DMA_SetConfig+0x258>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d027      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a67      	ldr	r2, [pc, #412]	@ (8008e24 <DMA_SetConfig+0x25c>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d022      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a65      	ldr	r2, [pc, #404]	@ (8008e28 <DMA_SetConfig+0x260>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01d      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a64      	ldr	r2, [pc, #400]	@ (8008e2c <DMA_SetConfig+0x264>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d018      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a62      	ldr	r2, [pc, #392]	@ (8008e30 <DMA_SetConfig+0x268>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d013      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a61      	ldr	r2, [pc, #388]	@ (8008e34 <DMA_SetConfig+0x26c>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00e      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a5f      	ldr	r2, [pc, #380]	@ (8008e38 <DMA_SetConfig+0x270>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d009      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8008e3c <DMA_SetConfig+0x274>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d004      	beq.n	8008cd2 <DMA_SetConfig+0x10a>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a5c      	ldr	r2, [pc, #368]	@ (8008e40 <DMA_SetConfig+0x278>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d101      	bne.n	8008cd6 <DMA_SetConfig+0x10e>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e000      	b.n	8008cd8 <DMA_SetConfig+0x110>
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00d      	beq.n	8008cf8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008ce4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d004      	beq.n	8008cf8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008cf6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a39      	ldr	r2, [pc, #228]	@ (8008de4 <DMA_SetConfig+0x21c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d04a      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a38      	ldr	r2, [pc, #224]	@ (8008de8 <DMA_SetConfig+0x220>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d045      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a36      	ldr	r2, [pc, #216]	@ (8008dec <DMA_SetConfig+0x224>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d040      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a35      	ldr	r2, [pc, #212]	@ (8008df0 <DMA_SetConfig+0x228>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d03b      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a33      	ldr	r2, [pc, #204]	@ (8008df4 <DMA_SetConfig+0x22c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d036      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a32      	ldr	r2, [pc, #200]	@ (8008df8 <DMA_SetConfig+0x230>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d031      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a30      	ldr	r2, [pc, #192]	@ (8008dfc <DMA_SetConfig+0x234>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d02c      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a2f      	ldr	r2, [pc, #188]	@ (8008e00 <DMA_SetConfig+0x238>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d027      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8008e04 <DMA_SetConfig+0x23c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d022      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a2c      	ldr	r2, [pc, #176]	@ (8008e08 <DMA_SetConfig+0x240>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d01d      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a2a      	ldr	r2, [pc, #168]	@ (8008e0c <DMA_SetConfig+0x244>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d018      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a29      	ldr	r2, [pc, #164]	@ (8008e10 <DMA_SetConfig+0x248>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d013      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a27      	ldr	r2, [pc, #156]	@ (8008e14 <DMA_SetConfig+0x24c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d00e      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a26      	ldr	r2, [pc, #152]	@ (8008e18 <DMA_SetConfig+0x250>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d009      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a24      	ldr	r2, [pc, #144]	@ (8008e1c <DMA_SetConfig+0x254>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d004      	beq.n	8008d98 <DMA_SetConfig+0x1d0>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a23      	ldr	r2, [pc, #140]	@ (8008e20 <DMA_SetConfig+0x258>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d101      	bne.n	8008d9c <DMA_SetConfig+0x1d4>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e000      	b.n	8008d9e <DMA_SetConfig+0x1d6>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d059      	beq.n	8008e56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008da6:	f003 031f 	and.w	r3, r3, #31
 8008daa:	223f      	movs	r2, #63	@ 0x3f
 8008dac:	409a      	lsls	r2, r3
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008dc0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	2b40      	cmp	r3, #64	@ 0x40
 8008dd0:	d138      	bne.n	8008e44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008de2:	e086      	b.n	8008ef2 <DMA_SetConfig+0x32a>
 8008de4:	40020010 	.word	0x40020010
 8008de8:	40020028 	.word	0x40020028
 8008dec:	40020040 	.word	0x40020040
 8008df0:	40020058 	.word	0x40020058
 8008df4:	40020070 	.word	0x40020070
 8008df8:	40020088 	.word	0x40020088
 8008dfc:	400200a0 	.word	0x400200a0
 8008e00:	400200b8 	.word	0x400200b8
 8008e04:	40020410 	.word	0x40020410
 8008e08:	40020428 	.word	0x40020428
 8008e0c:	40020440 	.word	0x40020440
 8008e10:	40020458 	.word	0x40020458
 8008e14:	40020470 	.word	0x40020470
 8008e18:	40020488 	.word	0x40020488
 8008e1c:	400204a0 	.word	0x400204a0
 8008e20:	400204b8 	.word	0x400204b8
 8008e24:	58025408 	.word	0x58025408
 8008e28:	5802541c 	.word	0x5802541c
 8008e2c:	58025430 	.word	0x58025430
 8008e30:	58025444 	.word	0x58025444
 8008e34:	58025458 	.word	0x58025458
 8008e38:	5802546c 	.word	0x5802546c
 8008e3c:	58025480 	.word	0x58025480
 8008e40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	60da      	str	r2, [r3, #12]
}
 8008e54:	e04d      	b.n	8008ef2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a29      	ldr	r2, [pc, #164]	@ (8008f00 <DMA_SetConfig+0x338>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d022      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a27      	ldr	r2, [pc, #156]	@ (8008f04 <DMA_SetConfig+0x33c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d01d      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a26      	ldr	r2, [pc, #152]	@ (8008f08 <DMA_SetConfig+0x340>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d018      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a24      	ldr	r2, [pc, #144]	@ (8008f0c <DMA_SetConfig+0x344>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d013      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a23      	ldr	r2, [pc, #140]	@ (8008f10 <DMA_SetConfig+0x348>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00e      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a21      	ldr	r2, [pc, #132]	@ (8008f14 <DMA_SetConfig+0x34c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d009      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a20      	ldr	r2, [pc, #128]	@ (8008f18 <DMA_SetConfig+0x350>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d004      	beq.n	8008ea6 <DMA_SetConfig+0x2de>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8008f1c <DMA_SetConfig+0x354>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d101      	bne.n	8008eaa <DMA_SetConfig+0x2e2>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e000      	b.n	8008eac <DMA_SetConfig+0x2e4>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d020      	beq.n	8008ef2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eb4:	f003 031f 	and.w	r3, r3, #31
 8008eb8:	2201      	movs	r2, #1
 8008eba:	409a      	lsls	r2, r3
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	2b40      	cmp	r3, #64	@ 0x40
 8008ece:	d108      	bne.n	8008ee2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	60da      	str	r2, [r3, #12]
}
 8008ee0:	e007      	b.n	8008ef2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	60da      	str	r2, [r3, #12]
}
 8008ef2:	bf00      	nop
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	58025408 	.word	0x58025408
 8008f04:	5802541c 	.word	0x5802541c
 8008f08:	58025430 	.word	0x58025430
 8008f0c:	58025444 	.word	0x58025444
 8008f10:	58025458 	.word	0x58025458
 8008f14:	5802546c 	.word	0x5802546c
 8008f18:	58025480 	.word	0x58025480
 8008f1c:	58025494 	.word	0x58025494

08008f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a42      	ldr	r2, [pc, #264]	@ (8009038 <DMA_CalcBaseAndBitshift+0x118>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d04a      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a41      	ldr	r2, [pc, #260]	@ (800903c <DMA_CalcBaseAndBitshift+0x11c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d045      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a3f      	ldr	r2, [pc, #252]	@ (8009040 <DMA_CalcBaseAndBitshift+0x120>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d040      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8009044 <DMA_CalcBaseAndBitshift+0x124>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d03b      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a3c      	ldr	r2, [pc, #240]	@ (8009048 <DMA_CalcBaseAndBitshift+0x128>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d036      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800904c <DMA_CalcBaseAndBitshift+0x12c>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d031      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a39      	ldr	r2, [pc, #228]	@ (8009050 <DMA_CalcBaseAndBitshift+0x130>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d02c      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a38      	ldr	r2, [pc, #224]	@ (8009054 <DMA_CalcBaseAndBitshift+0x134>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d027      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a36      	ldr	r2, [pc, #216]	@ (8009058 <DMA_CalcBaseAndBitshift+0x138>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d022      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a35      	ldr	r2, [pc, #212]	@ (800905c <DMA_CalcBaseAndBitshift+0x13c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d01d      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a33      	ldr	r2, [pc, #204]	@ (8009060 <DMA_CalcBaseAndBitshift+0x140>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d018      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a32      	ldr	r2, [pc, #200]	@ (8009064 <DMA_CalcBaseAndBitshift+0x144>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d013      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a30      	ldr	r2, [pc, #192]	@ (8009068 <DMA_CalcBaseAndBitshift+0x148>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00e      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4a2f      	ldr	r2, [pc, #188]	@ (800906c <DMA_CalcBaseAndBitshift+0x14c>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d009      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8009070 <DMA_CalcBaseAndBitshift+0x150>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d004      	beq.n	8008fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8009074 <DMA_CalcBaseAndBitshift+0x154>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d101      	bne.n	8008fcc <DMA_CalcBaseAndBitshift+0xac>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e000      	b.n	8008fce <DMA_CalcBaseAndBitshift+0xae>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d024      	beq.n	800901c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	3b10      	subs	r3, #16
 8008fda:	4a27      	ldr	r2, [pc, #156]	@ (8009078 <DMA_CalcBaseAndBitshift+0x158>)
 8008fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe0:	091b      	lsrs	r3, r3, #4
 8008fe2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	4a24      	ldr	r2, [pc, #144]	@ (800907c <DMA_CalcBaseAndBitshift+0x15c>)
 8008fec:	5cd3      	ldrb	r3, [r2, r3]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d908      	bls.n	800900c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	4b1f      	ldr	r3, [pc, #124]	@ (8009080 <DMA_CalcBaseAndBitshift+0x160>)
 8009002:	4013      	ands	r3, r2
 8009004:	1d1a      	adds	r2, r3, #4
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	659a      	str	r2, [r3, #88]	@ 0x58
 800900a:	e00d      	b.n	8009028 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	4b1b      	ldr	r3, [pc, #108]	@ (8009080 <DMA_CalcBaseAndBitshift+0x160>)
 8009014:	4013      	ands	r3, r2
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6593      	str	r3, [r2, #88]	@ 0x58
 800901a:	e005      	b.n	8009028 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	40020010 	.word	0x40020010
 800903c:	40020028 	.word	0x40020028
 8009040:	40020040 	.word	0x40020040
 8009044:	40020058 	.word	0x40020058
 8009048:	40020070 	.word	0x40020070
 800904c:	40020088 	.word	0x40020088
 8009050:	400200a0 	.word	0x400200a0
 8009054:	400200b8 	.word	0x400200b8
 8009058:	40020410 	.word	0x40020410
 800905c:	40020428 	.word	0x40020428
 8009060:	40020440 	.word	0x40020440
 8009064:	40020458 	.word	0x40020458
 8009068:	40020470 	.word	0x40020470
 800906c:	40020488 	.word	0x40020488
 8009070:	400204a0 	.word	0x400204a0
 8009074:	400204b8 	.word	0x400204b8
 8009078:	aaaaaaab 	.word	0xaaaaaaab
 800907c:	0801636c 	.word	0x0801636c
 8009080:	fffffc00 	.word	0xfffffc00

08009084 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d120      	bne.n	80090da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800909c:	2b03      	cmp	r3, #3
 800909e:	d858      	bhi.n	8009152 <DMA_CheckFifoParam+0xce>
 80090a0:	a201      	add	r2, pc, #4	@ (adr r2, 80090a8 <DMA_CheckFifoParam+0x24>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080090b9 	.word	0x080090b9
 80090ac:	080090cb 	.word	0x080090cb
 80090b0:	080090b9 	.word	0x080090b9
 80090b4:	08009153 	.word	0x08009153
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d048      	beq.n	8009156 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090c8:	e045      	b.n	8009156 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80090d2:	d142      	bne.n	800915a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80090d8:	e03f      	b.n	800915a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090e2:	d123      	bne.n	800912c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d838      	bhi.n	800915e <DMA_CheckFifoParam+0xda>
 80090ec:	a201      	add	r2, pc, #4	@ (adr r2, 80090f4 <DMA_CheckFifoParam+0x70>)
 80090ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f2:	bf00      	nop
 80090f4:	08009105 	.word	0x08009105
 80090f8:	0800910b 	.word	0x0800910b
 80090fc:	08009105 	.word	0x08009105
 8009100:	0800911d 	.word	0x0800911d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	73fb      	strb	r3, [r7, #15]
        break;
 8009108:	e030      	b.n	800916c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d025      	beq.n	8009162 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800911a:	e022      	b.n	8009162 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009120:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009124:	d11f      	bne.n	8009166 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800912a:	e01c      	b.n	8009166 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009130:	2b02      	cmp	r3, #2
 8009132:	d902      	bls.n	800913a <DMA_CheckFifoParam+0xb6>
 8009134:	2b03      	cmp	r3, #3
 8009136:	d003      	beq.n	8009140 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009138:	e018      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	73fb      	strb	r3, [r7, #15]
        break;
 800913e:	e015      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00e      	beq.n	800916a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	73fb      	strb	r3, [r7, #15]
    break;
 8009150:	e00b      	b.n	800916a <DMA_CheckFifoParam+0xe6>
        break;
 8009152:	bf00      	nop
 8009154:	e00a      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 8009156:	bf00      	nop
 8009158:	e008      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 800915a:	bf00      	nop
 800915c:	e006      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 800915e:	bf00      	nop
 8009160:	e004      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 8009162:	bf00      	nop
 8009164:	e002      	b.n	800916c <DMA_CheckFifoParam+0xe8>
        break;
 8009166:	bf00      	nop
 8009168:	e000      	b.n	800916c <DMA_CheckFifoParam+0xe8>
    break;
 800916a:	bf00      	nop
    }
  }

  return status;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop

0800917c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a38      	ldr	r2, [pc, #224]	@ (8009270 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d022      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a36      	ldr	r2, [pc, #216]	@ (8009274 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d01d      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a35      	ldr	r2, [pc, #212]	@ (8009278 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d018      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a33      	ldr	r2, [pc, #204]	@ (800927c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d013      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a32      	ldr	r2, [pc, #200]	@ (8009280 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00e      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a30      	ldr	r2, [pc, #192]	@ (8009284 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d009      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a2f      	ldr	r2, [pc, #188]	@ (8009288 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d004      	beq.n	80091da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a2d      	ldr	r2, [pc, #180]	@ (800928c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d101      	bne.n	80091de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80091da:	2301      	movs	r3, #1
 80091dc:	e000      	b.n	80091e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80091de:	2300      	movs	r3, #0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01a      	beq.n	800921a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	3b08      	subs	r3, #8
 80091ec:	4a28      	ldr	r2, [pc, #160]	@ (8009290 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80091ee:	fba2 2303 	umull	r2, r3, r2, r3
 80091f2:	091b      	lsrs	r3, r3, #4
 80091f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	4b26      	ldr	r3, [pc, #152]	@ (8009294 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a24      	ldr	r2, [pc, #144]	@ (8009298 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009208:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f003 031f 	and.w	r3, r3, #31
 8009210:	2201      	movs	r2, #1
 8009212:	409a      	lsls	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009218:	e024      	b.n	8009264 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	3b10      	subs	r3, #16
 8009222:	4a1e      	ldr	r2, [pc, #120]	@ (800929c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009224:	fba2 2303 	umull	r2, r3, r2, r3
 8009228:	091b      	lsrs	r3, r3, #4
 800922a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4a1c      	ldr	r2, [pc, #112]	@ (80092a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d806      	bhi.n	8009242 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	4a1b      	ldr	r2, [pc, #108]	@ (80092a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d902      	bls.n	8009242 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3308      	adds	r3, #8
 8009240:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4b18      	ldr	r3, [pc, #96]	@ (80092a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	461a      	mov	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a16      	ldr	r2, [pc, #88]	@ (80092ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009254:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f003 031f 	and.w	r3, r3, #31
 800925c:	2201      	movs	r2, #1
 800925e:	409a      	lsls	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009264:	bf00      	nop
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	58025408 	.word	0x58025408
 8009274:	5802541c 	.word	0x5802541c
 8009278:	58025430 	.word	0x58025430
 800927c:	58025444 	.word	0x58025444
 8009280:	58025458 	.word	0x58025458
 8009284:	5802546c 	.word	0x5802546c
 8009288:	58025480 	.word	0x58025480
 800928c:	58025494 	.word	0x58025494
 8009290:	cccccccd 	.word	0xcccccccd
 8009294:	16009600 	.word	0x16009600
 8009298:	58025880 	.word	0x58025880
 800929c:	aaaaaaab 	.word	0xaaaaaaab
 80092a0:	400204b8 	.word	0x400204b8
 80092a4:	4002040f 	.word	0x4002040f
 80092a8:	10008200 	.word	0x10008200
 80092ac:	40020880 	.word	0x40020880

080092b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d04a      	beq.n	800935c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d847      	bhi.n	800935c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a25      	ldr	r2, [pc, #148]	@ (8009368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d022      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a24      	ldr	r2, [pc, #144]	@ (800936c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d01d      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a22      	ldr	r2, [pc, #136]	@ (8009370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d018      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a21      	ldr	r2, [pc, #132]	@ (8009374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d013      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d00e      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1e      	ldr	r2, [pc, #120]	@ (800937c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d009      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a1c      	ldr	r2, [pc, #112]	@ (8009380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d004      	beq.n	800931c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a1b      	ldr	r2, [pc, #108]	@ (8009384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d101      	bne.n	8009320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800931c:	2301      	movs	r3, #1
 800931e:	e000      	b.n	8009322 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009320:	2300      	movs	r3, #0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	4b17      	ldr	r3, [pc, #92]	@ (8009388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a15      	ldr	r2, [pc, #84]	@ (800938c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009338:	671a      	str	r2, [r3, #112]	@ 0x70
 800933a:	e009      	b.n	8009350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4b14      	ldr	r3, [pc, #80]	@ (8009390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	461a      	mov	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a11      	ldr	r2, [pc, #68]	@ (8009394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800934e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3b01      	subs	r3, #1
 8009354:	2201      	movs	r2, #1
 8009356:	409a      	lsls	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800935c:	bf00      	nop
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	58025408 	.word	0x58025408
 800936c:	5802541c 	.word	0x5802541c
 8009370:	58025430 	.word	0x58025430
 8009374:	58025444 	.word	0x58025444
 8009378:	58025458 	.word	0x58025458
 800937c:	5802546c 	.word	0x5802546c
 8009380:	58025480 	.word	0x58025480
 8009384:	58025494 	.word	0x58025494
 8009388:	1600963f 	.word	0x1600963f
 800938c:	58025940 	.word	0x58025940
 8009390:	1000823f 	.word	0x1000823f
 8009394:	40020940 	.word	0x40020940

08009398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8009398:	b480      	push	{r7}
 800939a:	b089      	sub	sp, #36	@ 0x24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80093a6:	4b86      	ldr	r3, [pc, #536]	@ (80095c0 <HAL_GPIO_Init+0x228>)
 80093a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80093aa:	e18c      	b.n	80096c6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	2101      	movs	r1, #1
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	fa01 f303 	lsl.w	r3, r1, r3
 80093b8:	4013      	ands	r3, r2
 80093ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f000 817e 	beq.w	80096c0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f003 0303 	and.w	r3, r3, #3
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d005      	beq.n	80093dc <HAL_GPIO_Init+0x44>
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d130      	bne.n	800943e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	2203      	movs	r2, #3
 80093e8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ec:	43db      	mvns	r3, r3
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	4013      	ands	r3, r2
 80093f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	68da      	ldr	r2, [r3, #12]
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009400:	69ba      	ldr	r2, [r7, #24]
 8009402:	4313      	orrs	r3, r2
 8009404:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009412:	2201      	movs	r2, #1
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	43db      	mvns	r3, r3
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	4013      	ands	r3, r2
 8009420:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	091b      	lsrs	r3, r3, #4
 8009428:	f003 0201 	and.w	r2, r3, #1
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	fa02 f303 	lsl.w	r3, r2, r3
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	4313      	orrs	r3, r2
 8009436:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	f003 0303 	and.w	r3, r3, #3
 8009446:	2b03      	cmp	r3, #3
 8009448:	d017      	beq.n	800947a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	2203      	movs	r2, #3
 8009456:	fa02 f303 	lsl.w	r3, r2, r3
 800945a:	43db      	mvns	r3, r3
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	4013      	ands	r3, r2
 8009460:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	689a      	ldr	r2, [r3, #8]
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	fa02 f303 	lsl.w	r3, r2, r3
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	4313      	orrs	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	69ba      	ldr	r2, [r7, #24]
 8009478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d123      	bne.n	80094ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	08da      	lsrs	r2, r3, #3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3208      	adds	r2, #8
 800948e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	220f      	movs	r2, #15
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	43db      	mvns	r3, r3
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	4013      	ands	r3, r2
 80094a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	691a      	ldr	r2, [r3, #16]
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	4313      	orrs	r3, r2
 80094be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	08da      	lsrs	r2, r3, #3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3208      	adds	r2, #8
 80094c8:	69b9      	ldr	r1, [r7, #24]
 80094ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	005b      	lsls	r3, r3, #1
 80094d8:	2203      	movs	r2, #3
 80094da:	fa02 f303 	lsl.w	r3, r2, r3
 80094de:	43db      	mvns	r3, r3
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	4013      	ands	r3, r2
 80094e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f003 0203 	and.w	r2, r3, #3
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	fa02 f303 	lsl.w	r3, r2, r3
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 80d8 	beq.w	80096c0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009510:	4b2c      	ldr	r3, [pc, #176]	@ (80095c4 <HAL_GPIO_Init+0x22c>)
 8009512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009516:	4a2b      	ldr	r2, [pc, #172]	@ (80095c4 <HAL_GPIO_Init+0x22c>)
 8009518:	f043 0302 	orr.w	r3, r3, #2
 800951c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009520:	4b28      	ldr	r3, [pc, #160]	@ (80095c4 <HAL_GPIO_Init+0x22c>)
 8009522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800952e:	4a26      	ldr	r2, [pc, #152]	@ (80095c8 <HAL_GPIO_Init+0x230>)
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	089b      	lsrs	r3, r3, #2
 8009534:	3302      	adds	r3, #2
 8009536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800953a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f003 0303 	and.w	r3, r3, #3
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	220f      	movs	r2, #15
 8009546:	fa02 f303 	lsl.w	r3, r2, r3
 800954a:	43db      	mvns	r3, r3
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	4013      	ands	r3, r2
 8009550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a1d      	ldr	r2, [pc, #116]	@ (80095cc <HAL_GPIO_Init+0x234>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d04a      	beq.n	80095f0 <HAL_GPIO_Init+0x258>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a1c      	ldr	r2, [pc, #112]	@ (80095d0 <HAL_GPIO_Init+0x238>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d02b      	beq.n	80095ba <HAL_GPIO_Init+0x222>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1b      	ldr	r2, [pc, #108]	@ (80095d4 <HAL_GPIO_Init+0x23c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d025      	beq.n	80095b6 <HAL_GPIO_Init+0x21e>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1a      	ldr	r2, [pc, #104]	@ (80095d8 <HAL_GPIO_Init+0x240>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d01f      	beq.n	80095b2 <HAL_GPIO_Init+0x21a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a19      	ldr	r2, [pc, #100]	@ (80095dc <HAL_GPIO_Init+0x244>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d019      	beq.n	80095ae <HAL_GPIO_Init+0x216>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a18      	ldr	r2, [pc, #96]	@ (80095e0 <HAL_GPIO_Init+0x248>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d013      	beq.n	80095aa <HAL_GPIO_Init+0x212>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a17      	ldr	r2, [pc, #92]	@ (80095e4 <HAL_GPIO_Init+0x24c>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d00d      	beq.n	80095a6 <HAL_GPIO_Init+0x20e>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a16      	ldr	r2, [pc, #88]	@ (80095e8 <HAL_GPIO_Init+0x250>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d007      	beq.n	80095a2 <HAL_GPIO_Init+0x20a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a15      	ldr	r2, [pc, #84]	@ (80095ec <HAL_GPIO_Init+0x254>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d101      	bne.n	800959e <HAL_GPIO_Init+0x206>
 800959a:	2309      	movs	r3, #9
 800959c:	e029      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 800959e:	230a      	movs	r3, #10
 80095a0:	e027      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095a2:	2307      	movs	r3, #7
 80095a4:	e025      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095a6:	2306      	movs	r3, #6
 80095a8:	e023      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095aa:	2305      	movs	r3, #5
 80095ac:	e021      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095ae:	2304      	movs	r3, #4
 80095b0:	e01f      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095b2:	2303      	movs	r3, #3
 80095b4:	e01d      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095b6:	2302      	movs	r3, #2
 80095b8:	e01b      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e019      	b.n	80095f2 <HAL_GPIO_Init+0x25a>
 80095be:	bf00      	nop
 80095c0:	58000080 	.word	0x58000080
 80095c4:	58024400 	.word	0x58024400
 80095c8:	58000400 	.word	0x58000400
 80095cc:	58020000 	.word	0x58020000
 80095d0:	58020400 	.word	0x58020400
 80095d4:	58020800 	.word	0x58020800
 80095d8:	58020c00 	.word	0x58020c00
 80095dc:	58021000 	.word	0x58021000
 80095e0:	58021400 	.word	0x58021400
 80095e4:	58021800 	.word	0x58021800
 80095e8:	58021c00 	.word	0x58021c00
 80095ec:	58022400 	.word	0x58022400
 80095f0:	2300      	movs	r3, #0
 80095f2:	69fa      	ldr	r2, [r7, #28]
 80095f4:	f002 0203 	and.w	r2, r2, #3
 80095f8:	0092      	lsls	r2, r2, #2
 80095fa:	4093      	lsls	r3, r2
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	4313      	orrs	r3, r2
 8009600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009602:	4938      	ldr	r1, [pc, #224]	@ (80096e4 <HAL_GPIO_Init+0x34c>)
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	089b      	lsrs	r3, r3, #2
 8009608:	3302      	adds	r3, #2
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	43db      	mvns	r3, r3
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	4013      	ands	r3, r2
 8009620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800962e:	69ba      	ldr	r2, [r7, #24]
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800963e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	43db      	mvns	r3, r3
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	4013      	ands	r3, r2
 800964e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d003      	beq.n	8009664 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009664:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	43db      	mvns	r3, r3
 8009676:	69ba      	ldr	r2, [r7, #24]
 8009678:	4013      	ands	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009688:	69ba      	ldr	r2, [r7, #24]
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	4313      	orrs	r3, r2
 800968e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	69ba      	ldr	r2, [r7, #24]
 8009694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	43db      	mvns	r3, r3
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	4013      	ands	r3, r2
 80096a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80096b2:	69ba      	ldr	r2, [r7, #24]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	3301      	adds	r3, #1
 80096c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	fa22 f303 	lsr.w	r3, r2, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f47f ae6b 	bne.w	80093ac <HAL_GPIO_Init+0x14>
  }
}
 80096d6:	bf00      	nop
 80096d8:	bf00      	nop
 80096da:	3724      	adds	r7, #36	@ 0x24
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr
 80096e4:	58000400 	.word	0x58000400

080096e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	460b      	mov	r3, r1
 80096f2:	807b      	strh	r3, [r7, #2]
 80096f4:	4613      	mov	r3, r2
 80096f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80096f8:	787b      	ldrb	r3, [r7, #1]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096fe:	887a      	ldrh	r2, [r7, #2]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009704:	e003      	b.n	800970e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009706:	887b      	ldrh	r3, [r7, #2]
 8009708:	041a      	lsls	r2, r3, #16
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	619a      	str	r2, [r3, #24]
}
 800970e:	bf00      	nop
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800971a:	b480      	push	{r7}
 800971c:	b085      	sub	sp, #20
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800972c:	887a      	ldrh	r2, [r7, #2]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	4013      	ands	r3, r2
 8009732:	041a      	lsls	r2, r3, #16
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	43d9      	mvns	r1, r3
 8009738:	887b      	ldrh	r3, [r7, #2]
 800973a:	400b      	ands	r3, r1
 800973c:	431a      	orrs	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	619a      	str	r2, [r3, #24]
}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
	...

08009750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d101      	bne.n	8009762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e08b      	b.n	800987a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d106      	bne.n	800977c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7f9 fed8 	bl	800352c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2224      	movs	r2, #36	@ 0x24
 8009780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 0201 	bic.w	r2, r2, #1
 8009792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80097a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689a      	ldr	r2, [r3, #8]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80097b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d107      	bne.n	80097ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097c6:	609a      	str	r2, [r3, #8]
 80097c8:	e006      	b.n	80097d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689a      	ldr	r2, [r3, #8]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80097d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d108      	bne.n	80097f2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097ee:	605a      	str	r2, [r3, #4]
 80097f0:	e007      	b.n	8009802 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009800:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	6859      	ldr	r1, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	4b1d      	ldr	r3, [pc, #116]	@ (8009884 <HAL_I2C_Init+0x134>)
 800980e:	430b      	orrs	r3, r1
 8009810:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68da      	ldr	r2, [r3, #12]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009820:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691a      	ldr	r2, [r3, #16]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	430a      	orrs	r2, r1
 800983a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	69d9      	ldr	r1, [r3, #28]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a1a      	ldr	r2, [r3, #32]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f042 0201 	orr.w	r2, r2, #1
 800985a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2220      	movs	r2, #32
 8009866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	02008000 	.word	0x02008000

08009888 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b088      	sub	sp, #32
 800988c:	af02      	add	r7, sp, #8
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	461a      	mov	r2, r3
 8009894:	460b      	mov	r3, r1
 8009896:	817b      	strh	r3, [r7, #10]
 8009898:	4613      	mov	r3, r2
 800989a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b20      	cmp	r3, #32
 80098a6:	f040 80fd 	bne.w	8009aa4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d101      	bne.n	80098b8 <HAL_I2C_Master_Transmit+0x30>
 80098b4:	2302      	movs	r3, #2
 80098b6:	e0f6      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x21e>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80098c0:	f7fd f898 	bl	80069f4 <HAL_GetTick>
 80098c4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	2319      	movs	r3, #25
 80098cc:	2201      	movs	r2, #1
 80098ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 fa0a 	bl	8009cec <I2C_WaitOnFlagUntilTimeout>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e0e1      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2221      	movs	r2, #33	@ 0x21
 80098e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	2210      	movs	r2, #16
 80098ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	893a      	ldrh	r2, [r7, #8]
 8009902:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800990e:	b29b      	uxth	r3, r3
 8009910:	2bff      	cmp	r3, #255	@ 0xff
 8009912:	d906      	bls.n	8009922 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	22ff      	movs	r2, #255	@ 0xff
 8009918:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800991a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	e007      	b.n	8009932 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009926:	b29a      	uxth	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800992c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009930:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d024      	beq.n	8009984 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800993e:	781a      	ldrb	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994a:	1c5a      	adds	r2, r3, #1
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009954:	b29b      	uxth	r3, r3
 8009956:	3b01      	subs	r3, #1
 8009958:	b29a      	uxth	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009962:	3b01      	subs	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800996e:	b2db      	uxtb	r3, r3
 8009970:	3301      	adds	r3, #1
 8009972:	b2da      	uxtb	r2, r3
 8009974:	8979      	ldrh	r1, [r7, #10]
 8009976:	4b4e      	ldr	r3, [pc, #312]	@ (8009ab0 <HAL_I2C_Master_Transmit+0x228>)
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f000 fc05 	bl	800a18c <I2C_TransferConfig>
 8009982:	e066      	b.n	8009a52 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009988:	b2da      	uxtb	r2, r3
 800998a:	8979      	ldrh	r1, [r7, #10]
 800998c:	4b48      	ldr	r3, [pc, #288]	@ (8009ab0 <HAL_I2C_Master_Transmit+0x228>)
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 fbfa 	bl	800a18c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009998:	e05b      	b.n	8009a52 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	6a39      	ldr	r1, [r7, #32]
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 f9fd 	bl	8009d9e <I2C_WaitOnTXISFlagUntilTimeout>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e07b      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b2:	781a      	ldrb	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	3b01      	subs	r3, #1
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099d6:	3b01      	subs	r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d034      	beq.n	8009a52 <HAL_I2C_Master_Transmit+0x1ca>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d130      	bne.n	8009a52 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	2200      	movs	r2, #0
 80099f8:	2180      	movs	r1, #128	@ 0x80
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 f976 	bl	8009cec <I2C_WaitOnFlagUntilTimeout>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e04d      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	2bff      	cmp	r3, #255	@ 0xff
 8009a12:	d90e      	bls.n	8009a32 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	22ff      	movs	r2, #255	@ 0xff
 8009a18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	8979      	ldrh	r1, [r7, #10]
 8009a22:	2300      	movs	r3, #0
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f000 fbae 	bl	800a18c <I2C_TransferConfig>
 8009a30:	e00f      	b.n	8009a52 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	8979      	ldrh	r1, [r7, #10]
 8009a44:	2300      	movs	r3, #0
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 fb9d 	bl	800a18c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d19e      	bne.n	800999a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	6a39      	ldr	r1, [r7, #32]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f9e3 	bl	8009e2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e01a      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2220      	movs	r2, #32
 8009a76:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6859      	ldr	r1, [r3, #4]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b0c      	ldr	r3, [pc, #48]	@ (8009ab4 <HAL_I2C_Master_Transmit+0x22c>)
 8009a84:	400b      	ands	r3, r1
 8009a86:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	e000      	b.n	8009aa6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009aa4:	2302      	movs	r3, #2
  }
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	80002000 	.word	0x80002000
 8009ab4:	fe00e800 	.word	0xfe00e800

08009ab8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	607a      	str	r2, [r7, #4]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	817b      	strh	r3, [r7, #10]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	f040 80db 	bne.w	8009c90 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_I2C_Master_Receive+0x30>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e0d4      	b.n	8009c92 <HAL_I2C_Master_Receive+0x1da>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009af0:	f7fc ff80 	bl	80069f4 <HAL_GetTick>
 8009af4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	2319      	movs	r3, #25
 8009afc:	2201      	movs	r2, #1
 8009afe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 f8f2 	bl	8009cec <I2C_WaitOnFlagUntilTimeout>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e0bf      	b.n	8009c92 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2222      	movs	r2, #34	@ 0x22
 8009b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2210      	movs	r2, #16
 8009b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	893a      	ldrh	r2, [r7, #8]
 8009b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	2bff      	cmp	r3, #255	@ 0xff
 8009b42:	d90e      	bls.n	8009b62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	22ff      	movs	r2, #255	@ 0xff
 8009b48:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	8979      	ldrh	r1, [r7, #10]
 8009b52:	4b52      	ldr	r3, [pc, #328]	@ (8009c9c <HAL_I2C_Master_Receive+0x1e4>)
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 fb16 	bl	800a18c <I2C_TransferConfig>
 8009b60:	e06d      	b.n	8009c3e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	8979      	ldrh	r1, [r7, #10]
 8009b74:	4b49      	ldr	r3, [pc, #292]	@ (8009c9c <HAL_I2C_Master_Receive+0x1e4>)
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 fb05 	bl	800a18c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009b82:	e05c      	b.n	8009c3e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	6a39      	ldr	r1, [r7, #32]
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 f993 	bl	8009eb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e07c      	b.n	8009c92 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009baa:	1c5a      	adds	r2, r3, #1
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d034      	beq.n	8009c3e <HAL_I2C_Master_Receive+0x186>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d130      	bne.n	8009c3e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	2200      	movs	r2, #0
 8009be4:	2180      	movs	r1, #128	@ 0x80
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 f880 	bl	8009cec <I2C_WaitOnFlagUntilTimeout>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e04d      	b.n	8009c92 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	2bff      	cmp	r3, #255	@ 0xff
 8009bfe:	d90e      	bls.n	8009c1e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	22ff      	movs	r2, #255	@ 0xff
 8009c04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c0a:	b2da      	uxtb	r2, r3
 8009c0c:	8979      	ldrh	r1, [r7, #10]
 8009c0e:	2300      	movs	r3, #0
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 fab8 	bl	800a18c <I2C_TransferConfig>
 8009c1c:	e00f      	b.n	8009c3e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c22:	b29a      	uxth	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c2c:	b2da      	uxtb	r2, r3
 8009c2e:	8979      	ldrh	r1, [r7, #10]
 8009c30:	2300      	movs	r3, #0
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 faa7 	bl	800a18c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d19d      	bne.n	8009b84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	6a39      	ldr	r1, [r7, #32]
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f8ed 	bl	8009e2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e01a      	b.n	8009c92 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2220      	movs	r2, #32
 8009c62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6859      	ldr	r1, [r3, #4]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca0 <HAL_I2C_Master_Receive+0x1e8>)
 8009c70:	400b      	ands	r3, r1
 8009c72:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2220      	movs	r2, #32
 8009c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e000      	b.n	8009c92 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009c90:	2302      	movs	r3, #2
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	80002400 	.word	0x80002400
 8009ca0:	fe00e800 	.word	0xfe00e800

08009ca4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	699b      	ldr	r3, [r3, #24]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d103      	bne.n	8009cc2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d007      	beq.n	8009ce0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	699a      	ldr	r2, [r3, #24]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f042 0201 	orr.w	r2, r2, #1
 8009cde:	619a      	str	r2, [r3, #24]
  }
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cfc:	e03b      	b.n	8009d76 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cfe:	69ba      	ldr	r2, [r7, #24]
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 f962 	bl	8009fcc <I2C_IsErrorOccurred>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e041      	b.n	8009d96 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d18:	d02d      	beq.n	8009d76 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d1a:	f7fc fe6b 	bl	80069f4 <HAL_GetTick>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d302      	bcc.n	8009d30 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d122      	bne.n	8009d76 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	4013      	ands	r3, r2
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	bf0c      	ite	eq
 8009d40:	2301      	moveq	r3, #1
 8009d42:	2300      	movne	r3, #0
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	461a      	mov	r2, r3
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	d113      	bne.n	8009d76 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d52:	f043 0220 	orr.w	r2, r3, #32
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e00f      	b.n	8009d96 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	699a      	ldr	r2, [r3, #24]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	4013      	ands	r3, r2
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	429a      	cmp	r2, r3
 8009d84:	bf0c      	ite	eq
 8009d86:	2301      	moveq	r3, #1
 8009d88:	2300      	movne	r3, #0
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d0b4      	beq.n	8009cfe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009daa:	e033      	b.n	8009e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	68b9      	ldr	r1, [r7, #8]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 f90b 	bl	8009fcc <I2C_IsErrorOccurred>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e031      	b.n	8009e24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009dc6:	d025      	beq.n	8009e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dc8:	f7fc fe14 	bl	80069f4 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d302      	bcc.n	8009dde <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d11a      	bne.n	8009e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d013      	beq.n	8009e14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df0:	f043 0220 	orr.w	r2, r3, #32
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2220      	movs	r2, #32
 8009dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e007      	b.n	8009e24 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	f003 0302 	and.w	r3, r3, #2
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d1c4      	bne.n	8009dac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e38:	e02f      	b.n	8009e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f000 f8c4 	bl	8009fcc <I2C_IsErrorOccurred>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e02d      	b.n	8009eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4e:	f7fc fdd1 	bl	80069f4 <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d302      	bcc.n	8009e64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d11a      	bne.n	8009e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	f003 0320 	and.w	r3, r3, #32
 8009e6e:	2b20      	cmp	r3, #32
 8009e70:	d013      	beq.n	8009e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e76:	f043 0220 	orr.w	r2, r3, #32
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e007      	b.n	8009eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	f003 0320 	and.w	r3, r3, #32
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	d1c8      	bne.n	8009e3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
	...

08009eb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009ec4:	e071      	b.n	8009faa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	68b9      	ldr	r1, [r7, #8]
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 f87e 	bl	8009fcc <I2C_IsErrorOccurred>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	699b      	ldr	r3, [r3, #24]
 8009ee0:	f003 0320 	and.w	r3, r3, #32
 8009ee4:	2b20      	cmp	r3, #32
 8009ee6:	d13b      	bne.n	8009f60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d138      	bne.n	8009f60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	2b04      	cmp	r3, #4
 8009efa:	d105      	bne.n	8009f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009f04:	2300      	movs	r3, #0
 8009f06:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	f003 0310 	and.w	r3, r3, #16
 8009f12:	2b10      	cmp	r3, #16
 8009f14:	d121      	bne.n	8009f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2210      	movs	r2, #16
 8009f1c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2204      	movs	r2, #4
 8009f22:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6859      	ldr	r1, [r3, #4]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	4b24      	ldr	r3, [pc, #144]	@ (8009fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009f38:	400b      	ands	r3, r1
 8009f3a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	75fb      	strb	r3, [r7, #23]
 8009f58:	e002      	b.n	8009f60 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009f60:	f7fc fd48 	bl	80069f4 <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d302      	bcc.n	8009f76 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d119      	bne.n	8009faa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d116      	bne.n	8009faa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	699b      	ldr	r3, [r3, #24]
 8009f82:	f003 0304 	and.w	r3, r3, #4
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d00f      	beq.n	8009faa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f8e:	f043 0220 	orr.w	r2, r3, #32
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2220      	movs	r2, #32
 8009f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b04      	cmp	r3, #4
 8009fb6:	d002      	beq.n	8009fbe <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009fb8:	7dfb      	ldrb	r3, [r7, #23]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d083      	beq.n	8009ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	fe00e800 	.word	0xfe00e800

08009fcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08a      	sub	sp, #40	@ 0x28
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d068      	beq.n	800a0ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2210      	movs	r2, #16
 8009ffe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a000:	e049      	b.n	800a096 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a008:	d045      	beq.n	800a096 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a00a:	f7fc fcf3 	bl	80069f4 <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	429a      	cmp	r2, r3
 800a018:	d302      	bcc.n	800a020 <I2C_IsErrorOccurred+0x54>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d13a      	bne.n	800a096 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a02a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a032:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a03e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a042:	d121      	bne.n	800a088 <I2C_IsErrorOccurred+0xbc>
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a04a:	d01d      	beq.n	800a088 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a04c:	7cfb      	ldrb	r3, [r7, #19]
 800a04e:	2b20      	cmp	r3, #32
 800a050:	d01a      	beq.n	800a088 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a060:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a062:	f7fc fcc7 	bl	80069f4 <HAL_GetTick>
 800a066:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a068:	e00e      	b.n	800a088 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a06a:	f7fc fcc3 	bl	80069f4 <HAL_GetTick>
 800a06e:	4602      	mov	r2, r0
 800a070:	69fb      	ldr	r3, [r7, #28]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	2b19      	cmp	r3, #25
 800a076:	d907      	bls.n	800a088 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	f043 0320 	orr.w	r3, r3, #32
 800a07e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a086:	e006      	b.n	800a096 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	f003 0320 	and.w	r3, r3, #32
 800a092:	2b20      	cmp	r3, #32
 800a094:	d1e9      	bne.n	800a06a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	f003 0320 	and.w	r3, r3, #32
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d003      	beq.n	800a0ac <I2C_IsErrorOccurred+0xe0>
 800a0a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d0aa      	beq.n	800a002 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a0ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d103      	bne.n	800a0bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	f043 0304 	orr.w	r3, r3, #4
 800a0c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00b      	beq.n	800a0f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a0ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00b      	beq.n	800a116 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a0fe:	6a3b      	ldr	r3, [r7, #32]
 800a100:	f043 0308 	orr.w	r3, r3, #8
 800a104:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a10e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a120:	6a3b      	ldr	r3, [r7, #32]
 800a122:	f043 0302 	orr.w	r3, r3, #2
 800a126:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a130:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01c      	beq.n	800a17a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f7ff fdaf 	bl	8009ca4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	6859      	ldr	r1, [r3, #4]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	4b0d      	ldr	r3, [pc, #52]	@ (800a188 <I2C_IsErrorOccurred+0x1bc>)
 800a152:	400b      	ands	r3, r1
 800a154:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	431a      	orrs	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2220      	movs	r2, #32
 800a166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a17a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3728      	adds	r7, #40	@ 0x28
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	fe00e800 	.word	0xfe00e800

0800a18c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	607b      	str	r3, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	817b      	strh	r3, [r7, #10]
 800a19a:	4613      	mov	r3, r2
 800a19c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a19e:	897b      	ldrh	r3, [r7, #10]
 800a1a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a1a4:	7a7b      	ldrb	r3, [r7, #9]
 800a1a6:	041b      	lsls	r3, r3, #16
 800a1a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1ac:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1ba:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685a      	ldr	r2, [r3, #4]
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	0d5b      	lsrs	r3, r3, #21
 800a1c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a1ca:	4b08      	ldr	r3, [pc, #32]	@ (800a1ec <I2C_TransferConfig+0x60>)
 800a1cc:	430b      	orrs	r3, r1
 800a1ce:	43db      	mvns	r3, r3
 800a1d0:	ea02 0103 	and.w	r1, r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	697a      	ldr	r2, [r7, #20]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a1de:	bf00      	nop
 800a1e0:	371c      	adds	r7, #28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	03ff63ff 	.word	0x03ff63ff

0800a1f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a200:	b2db      	uxtb	r3, r3
 800a202:	2b20      	cmp	r3, #32
 800a204:	d138      	bne.n	800a278 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d101      	bne.n	800a214 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a210:	2302      	movs	r3, #2
 800a212:	e032      	b.n	800a27a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2224      	movs	r2, #36	@ 0x24
 800a220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f022 0201 	bic.w	r2, r2, #1
 800a232:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a242:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6819      	ldr	r1, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	683a      	ldr	r2, [r7, #0]
 800a250:	430a      	orrs	r2, r1
 800a252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0201 	orr.w	r2, r2, #1
 800a262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	e000      	b.n	800a27a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a278:	2302      	movs	r3, #2
  }
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a286:	b480      	push	{r7}
 800a288:	b085      	sub	sp, #20
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b20      	cmp	r3, #32
 800a29a:	d139      	bne.n	800a310 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d101      	bne.n	800a2aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	e033      	b.n	800a312 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2224      	movs	r2, #36	@ 0x24
 800a2b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f022 0201 	bic.w	r2, r2, #1
 800a2c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a2d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0201 	orr.w	r2, r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2220      	movs	r2, #32
 800a300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	e000      	b.n	800a312 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a310:	2302      	movs	r3, #2
  }
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
	...

0800a320 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af02      	add	r7, sp, #8
 800a326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800a32c:	f7fc fb62 	bl	80069f4 <HAL_GetTick>
 800a330:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d102      	bne.n	800a33e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	73fb      	strb	r3, [r7, #15]
 800a33c:	e0a5      	b.n	800a48a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f040 809e 	bne.w	800a48a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7fa faee 	bl	8004930 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800a354:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fa40 	bl	800a7de <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	4b4b      	ldr	r3, [pc, #300]	@ (800a494 <HAL_OSPI_Init+0x174>)
 800a366:	4013      	ands	r3, r2
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	68d1      	ldr	r1, [r2, #12]
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6912      	ldr	r2, [r2, #16]
 800a370:	3a01      	subs	r2, #1
 800a372:	0412      	lsls	r2, r2, #16
 800a374:	4311      	orrs	r1, r2
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	6952      	ldr	r2, [r2, #20]
 800a37a:	3a01      	subs	r2, #1
 800a37c:	0212      	lsls	r2, r2, #8
 800a37e:	4311      	orrs	r1, r2
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a384:	4311      	orrs	r1, r2
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	69d2      	ldr	r2, [r2, #28]
 800a38a:	4311      	orrs	r1, r2
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6812      	ldr	r2, [r2, #0]
 800a390:	430b      	orrs	r3, r1
 800a392:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a1a      	ldr	r2, [r3, #32]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ae:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a3c4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	021a      	lsls	r2, r3, #8
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	2120      	movs	r1, #32
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fef1 	bl	800b1d4 <OSPI_WaitFlagStateUntilTimeout>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800a3f6:	7bfb      	ldrb	r3, [r7, #15]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d146      	bne.n	800a48a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40a:	1e5a      	subs	r2, r3, #1
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689a      	ldr	r2, [r3, #8]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a432:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	430a      	orrs	r2, r1
 800a446:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f042 0201 	orr.w	r2, r2, #1
 800a458:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	2b02      	cmp	r3, #2
 800a460:	d107      	bne.n	800a472 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f042 0202 	orr.w	r2, r2, #2
 800a470:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a47a:	d103      	bne.n	800a484 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	651a      	str	r2, [r3, #80]	@ 0x50
 800a482:	e002      	b.n	800a48a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800a48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	f8e0f8f4 	.word	0xf8e0f8f4

0800a498 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b08a      	sub	sp, #40	@ 0x28
 800a49c:	af02      	add	r7, sp, #8
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800a4a4:	f7fc faa6 	bl	80069f4 <HAL_GetTick>
 800a4a8:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ae:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4b4:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d104      	bne.n	800a4c6 <HAL_OSPI_Command+0x2e>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4c4:	d115      	bne.n	800a4f2 <HAL_OSPI_Command+0x5a>
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2b14      	cmp	r3, #20
 800a4ca:	d107      	bne.n	800a4dc <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b02      	cmp	r3, #2
 800a4d2:	d00e      	beq.n	800a4f2 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d00a      	beq.n	800a4f2 <HAL_OSPI_Command+0x5a>
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	2b24      	cmp	r3, #36	@ 0x24
 800a4e0:	d15b      	bne.n	800a59a <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d003      	beq.n	800a4f2 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d153      	bne.n	800a59a <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	9300      	str	r3, [sp, #0]
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	2120      	movs	r1, #32
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f000 fe69 	bl	800b1d4 <OSPI_WaitFlagStateUntilTimeout>
 800a502:	4603      	mov	r3, r0
 800a504:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800a506:	7ffb      	ldrb	r3, [r7, #31]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d14c      	bne.n	800a5a6 <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 fe95 	bl	800b244 <OSPI_ConfigCmd>
 800a51a:	4603      	mov	r3, r0
 800a51c:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800a51e:	7ffb      	ldrb	r3, [r7, #31]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d140      	bne.n	800a5a6 <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d10e      	bne.n	800a54a <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	2201      	movs	r2, #1
 800a534:	2102      	movs	r1, #2
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 fe4c 	bl	800b1d4 <OSPI_WaitFlagStateUntilTimeout>
 800a53c:	4603      	mov	r3, r0
 800a53e:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2202      	movs	r2, #2
 800a546:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 800a548:	e02d      	b.n	800a5a6 <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d103      	bne.n	800a55a <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2204      	movs	r2, #4
 800a556:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a558:	e025      	b.n	800a5a6 <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d10b      	bne.n	800a57a <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a566:	2b24      	cmp	r3, #36	@ 0x24
 800a568:	d103      	bne.n	800a572 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2204      	movs	r2, #4
 800a56e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a570:	e019      	b.n	800a5a6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2214      	movs	r2, #20
 800a576:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a578:	e015      	b.n	800a5a6 <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d111      	bne.n	800a5a6 <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a586:	2b14      	cmp	r3, #20
 800a588:	d103      	bne.n	800a592 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2204      	movs	r2, #4
 800a58e:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a590:	e009      	b.n	800a5a6 <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2224      	movs	r2, #36	@ 0x24
 800a596:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 800a598:	e005      	b.n	800a5a6 <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2210      	movs	r2, #16
 800a5a2:	655a      	str	r2, [r3, #84]	@ 0x54
 800a5a4:	e000      	b.n	800a5a8 <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800a5a6:	bf00      	nop
  }

  /* Return function status */
  return status;
 800a5a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3720      	adds	r7, #32
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b08a      	sub	sp, #40	@ 0x28
 800a5b6:	af02      	add	r7, sp, #8
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a5be:	f7fc fa19 	bl	80069f4 <HAL_GetTick>
 800a5c2:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3350      	adds	r3, #80	@ 0x50
 800a5ca:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d105      	bne.n	800a5de <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2208      	movs	r2, #8
 800a5da:	655a      	str	r2, [r3, #84]	@ 0x54
 800a5dc:	e057      	b.n	800a68e <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5e2:	2b04      	cmp	r3, #4
 800a5e4:	d14e      	bne.n	800a684 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ec:	1c5a      	adds	r2, r3, #1
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a60e:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	2201      	movs	r2, #1
 800a618:	2104      	movs	r1, #4
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 fdda 	bl	800b1d4 <OSPI_WaitFlagStateUntilTimeout>
 800a620:	4603      	mov	r3, r0
 800a622:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800a624:	7ffb      	ldrb	r3, [r7, #31]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d113      	bne.n	800a652 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62e:	781a      	ldrb	r2, [r3, #0]
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a638:	1c5a      	adds	r2, r3, #1
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a642:	1e5a      	subs	r2, r3, #1
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1df      	bne.n	800a610 <HAL_OSPI_Transmit+0x5e>
 800a650:	e000      	b.n	800a654 <HAL_OSPI_Transmit+0xa2>
          break;
 800a652:	bf00      	nop

      if (status == HAL_OK)
 800a654:	7ffb      	ldrb	r3, [r7, #31]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d119      	bne.n	800a68e <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2201      	movs	r2, #1
 800a662:	2102      	movs	r1, #2
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 fdb5 	bl	800b1d4 <OSPI_WaitFlagStateUntilTimeout>
 800a66a:	4603      	mov	r3, r0
 800a66c:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800a66e:	7ffb      	ldrb	r3, [r7, #31]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10c      	bne.n	800a68e <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2202      	movs	r2, #2
 800a67a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2202      	movs	r2, #2
 800a680:	651a      	str	r2, [r3, #80]	@ 0x50
 800a682:	e004      	b.n	800a68e <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2210      	movs	r2, #16
 800a68c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800a68e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3720      	adds	r7, #32
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08c      	sub	sp, #48	@ 0x30
 800a69c:	af02      	add	r7, sp, #8
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a6a4:	f7fc f9a6 	bl	80069f4 <HAL_GetTick>
 800a6a8:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3350      	adds	r3, #80	@ 0x50
 800a6b0:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6b8:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800a6c2:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2208      	movs	r2, #8
 800a6d4:	655a      	str	r2, [r3, #84]	@ 0x54
 800a6d6:	e07c      	b.n	800a7d2 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6dc:	2b04      	cmp	r3, #4
 800a6de:	d172      	bne.n	800a7c6 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e6:	1c5a      	adds	r2, r3, #1
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a70c:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a716:	d104      	bne.n	800a722 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	649a      	str	r2, [r3, #72]	@ 0x48
 800a720:	e011      	b.n	800a746 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800a72a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d004      	beq.n	800a73c <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	69ba      	ldr	r2, [r7, #24]
 800a738:	649a      	str	r2, [r3, #72]	@ 0x48
 800a73a:	e004      	b.n	800a746 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	9300      	str	r3, [sp, #0]
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	2201      	movs	r2, #1
 800a74e:	2106      	movs	r1, #6
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f000 fd3f 	bl	800b1d4 <OSPI_WaitFlagStateUntilTimeout>
 800a756:	4603      	mov	r3, r0
 800a758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 800a75c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a760:	2b00      	cmp	r3, #0
 800a762:	d114      	bne.n	800a78e <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a768:	69fa      	ldr	r2, [r7, #28]
 800a76a:	7812      	ldrb	r2, [r2, #0]
 800a76c:	b2d2      	uxtb	r2, r2
 800a76e:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a77e:	1e5a      	subs	r2, r3, #1
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1dc      	bne.n	800a746 <HAL_OSPI_Receive+0xae>
 800a78c:	e000      	b.n	800a790 <HAL_OSPI_Receive+0xf8>
          break;
 800a78e:	bf00      	nop

      if (status == HAL_OK)
 800a790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a794:	2b00      	cmp	r3, #0
 800a796:	d11c      	bne.n	800a7d2 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	2102      	movs	r1, #2
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 fd16 	bl	800b1d4 <OSPI_WaitFlagStateUntilTimeout>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 800a7ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10d      	bne.n	800a7d2 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2202      	movs	r2, #2
 800a7bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	651a      	str	r2, [r3, #80]	@ 0x50
 800a7c4:	e005      	b.n	800a7d2 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2210      	movs	r2, #16
 800a7d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800a7d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3728      	adds	r7, #40	@ 0x28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b083      	sub	sp, #12
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b094      	sub	sp, #80	@ 0x50
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800a80e:	2300      	movs	r3, #0
 800a810:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a9d      	ldr	r2, [pc, #628]	@ (800aa90 <HAL_OSPIM_Config+0x294>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d105      	bne.n	800a82a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 800a822:	2301      	movs	r3, #1
 800a824:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800a828:	e004      	b.n	800a834 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800a82a:	2301      	movs	r3, #1
 800a82c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800a82e:	2300      	movs	r3, #0
 800a830:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a834:	2300      	movs	r3, #0
 800a836:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a83a:	e01d      	b.n	800a878 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800a83c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a840:	3301      	adds	r3, #1
 800a842:	b2d8      	uxtb	r0, r3
 800a844:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a848:	f107 0114 	add.w	r1, r7, #20
 800a84c:	4613      	mov	r3, r2
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	4413      	add	r3, r2
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	440b      	add	r3, r1
 800a856:	4619      	mov	r1, r3
 800a858:	f000 fe6e 	bl	800b538 <OSPIM_GetConfig>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d005      	beq.n	800a86e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2208      	movs	r2, #8
 800a86c:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800a86e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a872:	3301      	adds	r3, #1
 800a874:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a878:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d9dd      	bls.n	800a83c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800a880:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a884:	2b00      	cmp	r3, #0
 800a886:	f040 8499 	bne.w	800b1bc <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800a88a:	4b81      	ldr	r3, [pc, #516]	@ (800aa90 <HAL_OSPIM_Config+0x294>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0301 	and.w	r3, r3, #1
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00b      	beq.n	800a8ae <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800a896:	4b7e      	ldr	r3, [pc, #504]	@ (800aa90 <HAL_OSPIM_Config+0x294>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a7d      	ldr	r2, [pc, #500]	@ (800aa90 <HAL_OSPIM_Config+0x294>)
 800a89c:	f023 0301 	bic.w	r3, r3, #1
 800a8a0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800a8a2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a8a6:	f043 0301 	orr.w	r3, r3, #1
 800a8aa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800a8ae:	4b79      	ldr	r3, [pc, #484]	@ (800aa94 <HAL_OSPIM_Config+0x298>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00b      	beq.n	800a8d2 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800a8ba:	4b76      	ldr	r3, [pc, #472]	@ (800aa94 <HAL_OSPIM_Config+0x298>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a75      	ldr	r2, [pc, #468]	@ (800aa94 <HAL_OSPIM_Config+0x298>)
 800a8c0:	f023 0301 	bic.w	r3, r3, #1
 800a8c4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800a8c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a8ca:	f043 0302 	orr.w	r3, r3, #2
 800a8ce:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800a8d2:	4971      	ldr	r1, [pc, #452]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a8d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	4413      	add	r3, r2
 800a8dc:	00db      	lsls	r3, r3, #3
 800a8de:	3350      	adds	r3, #80	@ 0x50
 800a8e0:	443b      	add	r3, r7
 800a8e2:	3b34      	subs	r3, #52	@ 0x34
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	440b      	add	r3, r1
 800a8ec:	6859      	ldr	r1, [r3, #4]
 800a8ee:	486a      	ldr	r0, [pc, #424]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a8f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8f2:	4613      	mov	r3, r2
 800a8f4:	005b      	lsls	r3, r3, #1
 800a8f6:	4413      	add	r3, r2
 800a8f8:	00db      	lsls	r3, r3, #3
 800a8fa:	3350      	adds	r3, #80	@ 0x50
 800a8fc:	443b      	add	r3, r7
 800a8fe:	3b34      	subs	r3, #52	@ 0x34
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	3b01      	subs	r3, #1
 800a904:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4403      	add	r3, r0
 800a90c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800a90e:	4b62      	ldr	r3, [pc, #392]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0301 	and.w	r3, r3, #1
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 80c0 	beq.w	800aa9c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800a91c:	4b5e      	ldr	r3, [pc, #376]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a5d      	ldr	r2, [pc, #372]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a922:	f023 0301 	bic.w	r3, r3, #1
 800a926:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 800a928:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	f040 8162 	bne.w	800abf6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800a932:	4959      	ldr	r1, [pc, #356]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a934:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a938:	4613      	mov	r3, r2
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	4413      	add	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	3350      	adds	r3, #80	@ 0x50
 800a942:	443b      	add	r3, r7
 800a944:	3b3c      	subs	r3, #60	@ 0x3c
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3b01      	subs	r3, #1
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	440b      	add	r3, r1
 800a94e:	6859      	ldr	r1, [r3, #4]
 800a950:	4851      	ldr	r0, [pc, #324]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a952:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a956:	4613      	mov	r3, r2
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	4413      	add	r3, r2
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	3350      	adds	r3, #80	@ 0x50
 800a960:	443b      	add	r3, r7
 800a962:	3b3c      	subs	r3, #60	@ 0x3c
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	f041 0202 	orr.w	r2, r1, #2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4403      	add	r3, r0
 800a970:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800a972:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a976:	4613      	mov	r3, r2
 800a978:	005b      	lsls	r3, r3, #1
 800a97a:	4413      	add	r3, r2
 800a97c:	00db      	lsls	r3, r3, #3
 800a97e:	3350      	adds	r3, #80	@ 0x50
 800a980:	443b      	add	r3, r7
 800a982:	3b38      	subs	r3, #56	@ 0x38
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d01f      	beq.n	800a9ca <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800a98a:	4943      	ldr	r1, [pc, #268]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a98c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a990:	4613      	mov	r3, r2
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	4413      	add	r3, r2
 800a996:	00db      	lsls	r3, r3, #3
 800a998:	3350      	adds	r3, #80	@ 0x50
 800a99a:	443b      	add	r3, r7
 800a99c:	3b38      	subs	r3, #56	@ 0x38
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	440b      	add	r3, r1
 800a9a6:	6859      	ldr	r1, [r3, #4]
 800a9a8:	483b      	ldr	r0, [pc, #236]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a9aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	005b      	lsls	r3, r3, #1
 800a9b2:	4413      	add	r3, r2
 800a9b4:	00db      	lsls	r3, r3, #3
 800a9b6:	3350      	adds	r3, #80	@ 0x50
 800a9b8:	443b      	add	r3, r7
 800a9ba:	3b38      	subs	r3, #56	@ 0x38
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	f041 0220 	orr.w	r2, r1, #32
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4403      	add	r3, r0
 800a9c8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800a9ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	4413      	add	r3, r2
 800a9d4:	00db      	lsls	r3, r3, #3
 800a9d6:	3350      	adds	r3, #80	@ 0x50
 800a9d8:	443b      	add	r3, r7
 800a9da:	3b30      	subs	r3, #48	@ 0x30
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d023      	beq.n	800aa2a <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800a9e2:	492d      	ldr	r1, [pc, #180]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800a9e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	4413      	add	r3, r2
 800a9ee:	00db      	lsls	r3, r3, #3
 800a9f0:	3350      	adds	r3, #80	@ 0x50
 800a9f2:	443b      	add	r3, r7
 800a9f4:	3b30      	subs	r3, #48	@ 0x30
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	f003 0301 	and.w	r3, r3, #1
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	440b      	add	r3, r1
 800aa02:	6859      	ldr	r1, [r3, #4]
 800aa04:	4824      	ldr	r0, [pc, #144]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800aa06:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	4413      	add	r3, r2
 800aa10:	00db      	lsls	r3, r3, #3
 800aa12:	3350      	adds	r3, #80	@ 0x50
 800aa14:	443b      	add	r3, r7
 800aa16:	3b30      	subs	r3, #48	@ 0x30
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4403      	add	r3, r0
 800aa28:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800aa2a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa2e:	4613      	mov	r3, r2
 800aa30:	005b      	lsls	r3, r3, #1
 800aa32:	4413      	add	r3, r2
 800aa34:	00db      	lsls	r3, r3, #3
 800aa36:	3350      	adds	r3, #80	@ 0x50
 800aa38:	443b      	add	r3, r7
 800aa3a:	3b2c      	subs	r3, #44	@ 0x2c
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 80d9 	beq.w	800abf6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800aa44:	4914      	ldr	r1, [pc, #80]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800aa46:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	005b      	lsls	r3, r3, #1
 800aa4e:	4413      	add	r3, r2
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	3350      	adds	r3, #80	@ 0x50
 800aa54:	443b      	add	r3, r7
 800aa56:	3b2c      	subs	r3, #44	@ 0x2c
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	440b      	add	r3, r1
 800aa64:	6859      	ldr	r1, [r3, #4]
 800aa66:	480c      	ldr	r0, [pc, #48]	@ (800aa98 <HAL_OSPIM_Config+0x29c>)
 800aa68:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800aa6c:	4613      	mov	r3, r2
 800aa6e:	005b      	lsls	r3, r3, #1
 800aa70:	4413      	add	r3, r2
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	3350      	adds	r3, #80	@ 0x50
 800aa76:	443b      	add	r3, r7
 800aa78:	3b2c      	subs	r3, #44	@ 0x2c
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	f003 0301 	and.w	r3, r3, #1
 800aa82:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	4403      	add	r3, r0
 800aa8a:	605a      	str	r2, [r3, #4]
 800aa8c:	e0b3      	b.n	800abf6 <HAL_OSPIM_Config+0x3fa>
 800aa8e:	bf00      	nop
 800aa90:	52005000 	.word	0x52005000
 800aa94:	5200a000 	.word	0x5200a000
 800aa98:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800aa9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	005b      	lsls	r3, r3, #1
 800aaa2:	4413      	add	r3, r2
 800aaa4:	00db      	lsls	r3, r3, #3
 800aaa6:	3350      	adds	r3, #80	@ 0x50
 800aaa8:	443b      	add	r3, r7
 800aaaa:	3b3c      	subs	r3, #60	@ 0x3c
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f000 80a1 	beq.w	800abf6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800aab4:	4995      	ldr	r1, [pc, #596]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800aab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aab8:	4613      	mov	r3, r2
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	4413      	add	r3, r2
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	3350      	adds	r3, #80	@ 0x50
 800aac2:	443b      	add	r3, r7
 800aac4:	3b3c      	subs	r3, #60	@ 0x3c
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3b01      	subs	r3, #1
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	6859      	ldr	r1, [r3, #4]
 800aad0:	488e      	ldr	r0, [pc, #568]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800aad2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aad4:	4613      	mov	r3, r2
 800aad6:	005b      	lsls	r3, r3, #1
 800aad8:	4413      	add	r3, r2
 800aada:	00db      	lsls	r3, r3, #3
 800aadc:	3350      	adds	r3, #80	@ 0x50
 800aade:	443b      	add	r3, r7
 800aae0:	3b3c      	subs	r3, #60	@ 0x3c
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	f021 0201 	bic.w	r2, r1, #1
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4403      	add	r3, r0
 800aaee:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800aaf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	4413      	add	r3, r2
 800aaf8:	00db      	lsls	r3, r3, #3
 800aafa:	3350      	adds	r3, #80	@ 0x50
 800aafc:	443b      	add	r3, r7
 800aafe:	3b38      	subs	r3, #56	@ 0x38
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d01d      	beq.n	800ab42 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800ab06:	4981      	ldr	r1, [pc, #516]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800ab08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab0a:	4613      	mov	r3, r2
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	4413      	add	r3, r2
 800ab10:	00db      	lsls	r3, r3, #3
 800ab12:	3350      	adds	r3, #80	@ 0x50
 800ab14:	443b      	add	r3, r7
 800ab16:	3b38      	subs	r3, #56	@ 0x38
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	440b      	add	r3, r1
 800ab20:	6859      	ldr	r1, [r3, #4]
 800ab22:	487a      	ldr	r0, [pc, #488]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800ab24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab26:	4613      	mov	r3, r2
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	4413      	add	r3, r2
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	3350      	adds	r3, #80	@ 0x50
 800ab30:	443b      	add	r3, r7
 800ab32:	3b38      	subs	r3, #56	@ 0x38
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3b01      	subs	r3, #1
 800ab38:	f021 0210 	bic.w	r2, r1, #16
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4403      	add	r3, r0
 800ab40:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800ab42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab44:	4613      	mov	r3, r2
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	4413      	add	r3, r2
 800ab4a:	00db      	lsls	r3, r3, #3
 800ab4c:	3350      	adds	r3, #80	@ 0x50
 800ab4e:	443b      	add	r3, r7
 800ab50:	3b30      	subs	r3, #48	@ 0x30
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d021      	beq.n	800ab9c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800ab58:	496c      	ldr	r1, [pc, #432]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800ab5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	005b      	lsls	r3, r3, #1
 800ab60:	4413      	add	r3, r2
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	3350      	adds	r3, #80	@ 0x50
 800ab66:	443b      	add	r3, r7
 800ab68:	3b30      	subs	r3, #48	@ 0x30
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	440b      	add	r3, r1
 800ab76:	6859      	ldr	r1, [r3, #4]
 800ab78:	4864      	ldr	r0, [pc, #400]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800ab7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	4413      	add	r3, r2
 800ab82:	00db      	lsls	r3, r3, #3
 800ab84:	3350      	adds	r3, #80	@ 0x50
 800ab86:	443b      	add	r3, r7
 800ab88:	3b30      	subs	r3, #48	@ 0x30
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4403      	add	r3, r0
 800ab9a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800ab9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab9e:	4613      	mov	r3, r2
 800aba0:	005b      	lsls	r3, r3, #1
 800aba2:	4413      	add	r3, r2
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	3350      	adds	r3, #80	@ 0x50
 800aba8:	443b      	add	r3, r7
 800abaa:	3b2c      	subs	r3, #44	@ 0x2c
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d021      	beq.n	800abf6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800abb2:	4956      	ldr	r1, [pc, #344]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800abb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abb6:	4613      	mov	r3, r2
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4413      	add	r3, r2
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	3350      	adds	r3, #80	@ 0x50
 800abc0:	443b      	add	r3, r7
 800abc2:	3b2c      	subs	r3, #44	@ 0x2c
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	440b      	add	r3, r1
 800abd0:	6859      	ldr	r1, [r3, #4]
 800abd2:	484e      	ldr	r0, [pc, #312]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800abd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abd6:	4613      	mov	r3, r2
 800abd8:	005b      	lsls	r3, r3, #1
 800abda:	4413      	add	r3, r2
 800abdc:	00db      	lsls	r3, r3, #3
 800abde:	3350      	adds	r3, #80	@ 0x50
 800abe0:	443b      	add	r3, r7
 800abe2:	3b2c      	subs	r3, #44	@ 0x2c
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	f003 0301 	and.w	r3, r3, #1
 800abec:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4403      	add	r3, r0
 800abf4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	6819      	ldr	r1, [r3, #0]
 800abfa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800abfe:	4613      	mov	r3, r2
 800ac00:	005b      	lsls	r3, r3, #1
 800ac02:	4413      	add	r3, r2
 800ac04:	00db      	lsls	r3, r3, #3
 800ac06:	3350      	adds	r3, #80	@ 0x50
 800ac08:	443b      	add	r3, r7
 800ac0a:	3b3c      	subs	r3, #60	@ 0x3c
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4299      	cmp	r1, r3
 800ac10:	d03c      	beq.n	800ac8c <HAL_OSPIM_Config+0x490>
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	6899      	ldr	r1, [r3, #8]
 800ac16:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	4413      	add	r3, r2
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	3350      	adds	r3, #80	@ 0x50
 800ac24:	443b      	add	r3, r7
 800ac26:	3b34      	subs	r3, #52	@ 0x34
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4299      	cmp	r1, r3
 800ac2c:	d02e      	beq.n	800ac8c <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	6859      	ldr	r1, [r3, #4]
 800ac32:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ac36:	4613      	mov	r3, r2
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	4413      	add	r3, r2
 800ac3c:	00db      	lsls	r3, r3, #3
 800ac3e:	3350      	adds	r3, #80	@ 0x50
 800ac40:	443b      	add	r3, r7
 800ac42:	3b38      	subs	r3, #56	@ 0x38
 800ac44:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800ac46:	4299      	cmp	r1, r3
 800ac48:	d103      	bne.n	800ac52 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d11c      	bne.n	800ac8c <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	68d9      	ldr	r1, [r3, #12]
 800ac56:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	005b      	lsls	r3, r3, #1
 800ac5e:	4413      	add	r3, r2
 800ac60:	00db      	lsls	r3, r3, #3
 800ac62:	3350      	adds	r3, #80	@ 0x50
 800ac64:	443b      	add	r3, r7
 800ac66:	3b30      	subs	r3, #48	@ 0x30
 800ac68:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800ac6a:	4299      	cmp	r1, r3
 800ac6c:	d00e      	beq.n	800ac8c <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	6919      	ldr	r1, [r3, #16]
 800ac72:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ac76:	4613      	mov	r3, r2
 800ac78:	005b      	lsls	r3, r3, #1
 800ac7a:	4413      	add	r3, r2
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	3350      	adds	r3, #80	@ 0x50
 800ac80:	443b      	add	r3, r7
 800ac82:	3b2c      	subs	r3, #44	@ 0x2c
 800ac84:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800ac86:	4299      	cmp	r1, r3
 800ac88:	f040 810e 	bne.w	800aea8 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	6819      	ldr	r1, [r3, #0]
 800ac90:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ac94:	4613      	mov	r3, r2
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	4413      	add	r3, r2
 800ac9a:	00db      	lsls	r3, r3, #3
 800ac9c:	3350      	adds	r3, #80	@ 0x50
 800ac9e:	443b      	add	r3, r7
 800aca0:	3b3c      	subs	r3, #60	@ 0x3c
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4299      	cmp	r1, r3
 800aca6:	d133      	bne.n	800ad10 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	6859      	ldr	r1, [r3, #4]
 800acac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800acb0:	4613      	mov	r3, r2
 800acb2:	005b      	lsls	r3, r3, #1
 800acb4:	4413      	add	r3, r2
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	3350      	adds	r3, #80	@ 0x50
 800acba:	443b      	add	r3, r7
 800acbc:	3b38      	subs	r3, #56	@ 0x38
 800acbe:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800acc0:	4299      	cmp	r1, r3
 800acc2:	d125      	bne.n	800ad10 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	68d9      	ldr	r1, [r3, #12]
 800acc8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800accc:	4613      	mov	r3, r2
 800acce:	005b      	lsls	r3, r3, #1
 800acd0:	4413      	add	r3, r2
 800acd2:	00db      	lsls	r3, r3, #3
 800acd4:	3350      	adds	r3, #80	@ 0x50
 800acd6:	443b      	add	r3, r7
 800acd8:	3b30      	subs	r3, #48	@ 0x30
 800acda:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800acdc:	4299      	cmp	r1, r3
 800acde:	d117      	bne.n	800ad10 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	6919      	ldr	r1, [r3, #16]
 800ace4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ace8:	4613      	mov	r3, r2
 800acea:	005b      	lsls	r3, r3, #1
 800acec:	4413      	add	r3, r2
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	3350      	adds	r3, #80	@ 0x50
 800acf2:	443b      	add	r3, r7
 800acf4:	3b2c      	subs	r3, #44	@ 0x2c
 800acf6:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800acf8:	4299      	cmp	r1, r3
 800acfa:	d109      	bne.n	800ad10 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800acfc:	4b03      	ldr	r3, [pc, #12]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a02      	ldr	r2, [pc, #8]	@ (800ad0c <HAL_OSPIM_Config+0x510>)
 800ad02:	f043 0301 	orr.w	r3, r3, #1
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	e0ce      	b.n	800aea8 <HAL_OSPIM_Config+0x6ac>
 800ad0a:	bf00      	nop
 800ad0c:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800ad10:	49bb      	ldr	r1, [pc, #748]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800ad12:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ad16:	4613      	mov	r3, r2
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	4413      	add	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	3350      	adds	r3, #80	@ 0x50
 800ad20:	443b      	add	r3, r7
 800ad22:	3b3c      	subs	r3, #60	@ 0x3c
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3b01      	subs	r3, #1
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	440b      	add	r3, r1
 800ad2c:	6859      	ldr	r1, [r3, #4]
 800ad2e:	48b4      	ldr	r0, [pc, #720]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800ad30:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ad34:	4613      	mov	r3, r2
 800ad36:	005b      	lsls	r3, r3, #1
 800ad38:	4413      	add	r3, r2
 800ad3a:	00db      	lsls	r3, r3, #3
 800ad3c:	3350      	adds	r3, #80	@ 0x50
 800ad3e:	443b      	add	r3, r7
 800ad40:	3b3c      	subs	r3, #60	@ 0x3c
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	f021 0201 	bic.w	r2, r1, #1
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4403      	add	r3, r0
 800ad4e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800ad50:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ad54:	4613      	mov	r3, r2
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	4413      	add	r3, r2
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	3350      	adds	r3, #80	@ 0x50
 800ad5e:	443b      	add	r3, r7
 800ad60:	3b38      	subs	r3, #56	@ 0x38
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d01f      	beq.n	800ada8 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800ad68:	49a5      	ldr	r1, [pc, #660]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800ad6a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ad6e:	4613      	mov	r3, r2
 800ad70:	005b      	lsls	r3, r3, #1
 800ad72:	4413      	add	r3, r2
 800ad74:	00db      	lsls	r3, r3, #3
 800ad76:	3350      	adds	r3, #80	@ 0x50
 800ad78:	443b      	add	r3, r7
 800ad7a:	3b38      	subs	r3, #56	@ 0x38
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	440b      	add	r3, r1
 800ad84:	6859      	ldr	r1, [r3, #4]
 800ad86:	489e      	ldr	r0, [pc, #632]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800ad88:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	005b      	lsls	r3, r3, #1
 800ad90:	4413      	add	r3, r2
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	3350      	adds	r3, #80	@ 0x50
 800ad96:	443b      	add	r3, r7
 800ad98:	3b38      	subs	r3, #56	@ 0x38
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	f021 0210 	bic.w	r2, r1, #16
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	4403      	add	r3, r0
 800ada6:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800ada8:	4995      	ldr	r1, [pc, #596]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800adaa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800adae:	4613      	mov	r3, r2
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	4413      	add	r3, r2
 800adb4:	00db      	lsls	r3, r3, #3
 800adb6:	3350      	adds	r3, #80	@ 0x50
 800adb8:	443b      	add	r3, r7
 800adba:	3b34      	subs	r3, #52	@ 0x34
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	440b      	add	r3, r1
 800adc4:	6859      	ldr	r1, [r3, #4]
 800adc6:	488e      	ldr	r0, [pc, #568]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800adc8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800adcc:	4613      	mov	r3, r2
 800adce:	005b      	lsls	r3, r3, #1
 800add0:	4413      	add	r3, r2
 800add2:	00db      	lsls	r3, r3, #3
 800add4:	3350      	adds	r3, #80	@ 0x50
 800add6:	443b      	add	r3, r7
 800add8:	3b34      	subs	r3, #52	@ 0x34
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3b01      	subs	r3, #1
 800adde:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4403      	add	r3, r0
 800ade6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800ade8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800adec:	4613      	mov	r3, r2
 800adee:	005b      	lsls	r3, r3, #1
 800adf0:	4413      	add	r3, r2
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	3350      	adds	r3, #80	@ 0x50
 800adf6:	443b      	add	r3, r7
 800adf8:	3b30      	subs	r3, #48	@ 0x30
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d023      	beq.n	800ae48 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ae00:	497f      	ldr	r1, [pc, #508]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800ae02:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ae06:	4613      	mov	r3, r2
 800ae08:	005b      	lsls	r3, r3, #1
 800ae0a:	4413      	add	r3, r2
 800ae0c:	00db      	lsls	r3, r3, #3
 800ae0e:	3350      	adds	r3, #80	@ 0x50
 800ae10:	443b      	add	r3, r7
 800ae12:	3b30      	subs	r3, #48	@ 0x30
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	440b      	add	r3, r1
 800ae20:	6859      	ldr	r1, [r3, #4]
 800ae22:	4877      	ldr	r0, [pc, #476]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800ae24:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ae28:	4613      	mov	r3, r2
 800ae2a:	005b      	lsls	r3, r3, #1
 800ae2c:	4413      	add	r3, r2
 800ae2e:	00db      	lsls	r3, r3, #3
 800ae30:	3350      	adds	r3, #80	@ 0x50
 800ae32:	443b      	add	r3, r7
 800ae34:	3b30      	subs	r3, #48	@ 0x30
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4403      	add	r3, r0
 800ae46:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800ae48:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	4413      	add	r3, r2
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	3350      	adds	r3, #80	@ 0x50
 800ae56:	443b      	add	r3, r7
 800ae58:	3b2c      	subs	r3, #44	@ 0x2c
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d023      	beq.n	800aea8 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800ae60:	4967      	ldr	r1, [pc, #412]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800ae62:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ae66:	4613      	mov	r3, r2
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	4413      	add	r3, r2
 800ae6c:	00db      	lsls	r3, r3, #3
 800ae6e:	3350      	adds	r3, #80	@ 0x50
 800ae70:	443b      	add	r3, r7
 800ae72:	3b2c      	subs	r3, #44	@ 0x2c
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3b01      	subs	r3, #1
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	440b      	add	r3, r1
 800ae80:	6859      	ldr	r1, [r3, #4]
 800ae82:	485f      	ldr	r0, [pc, #380]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800ae84:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800ae88:	4613      	mov	r3, r2
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	4413      	add	r3, r2
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	3350      	adds	r3, #80	@ 0x50
 800ae92:	443b      	add	r3, r7
 800ae94:	3b2c      	subs	r3, #44	@ 0x2c
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	f003 0301 	and.w	r3, r3, #1
 800ae9e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4403      	add	r3, r0
 800aea6:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800aea8:	4a55      	ldr	r2, [pc, #340]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aeba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aebc:	025b      	lsls	r3, r3, #9
 800aebe:	431a      	orrs	r2, r3
 800aec0:	494f      	ldr	r1, [pc, #316]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	440b      	add	r3, r1
 800aed0:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	1e5a      	subs	r2, r3, #1
 800aed8:	4b49      	ldr	r3, [pc, #292]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	0c1b      	lsrs	r3, r3, #16
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d90a      	bls.n	800aefa <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800aee4:	4b46      	ldr	r3, [pc, #280]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	041b      	lsls	r3, r3, #16
 800aef4:	4942      	ldr	r1, [pc, #264]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800aefa:	4b41      	ldr	r3, [pc, #260]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 0301 	and.w	r3, r3, #1
 800af02:	2b00      	cmp	r3, #0
 800af04:	f000 809a 	beq.w	800b03c <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800af08:	4a3d      	ldr	r2, [pc, #244]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3b01      	subs	r3, #1
 800af10:	009b      	lsls	r3, r3, #2
 800af12:	4413      	add	r3, r2
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	f023 0203 	bic.w	r2, r3, #3
 800af1a:	4939      	ldr	r1, [pc, #228]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3b01      	subs	r3, #1
 800af22:	f042 0201 	orr.w	r2, r2, #1
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	440b      	add	r3, r1
 800af2a:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d011      	beq.n	800af58 <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 800af34:	4a32      	ldr	r2, [pc, #200]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800af46:	492e      	ldr	r1, [pc, #184]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	f042 0210 	orr.w	r2, r2, #16
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	440b      	add	r3, r1
 800af56:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d016      	beq.n	800af92 <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800af64:	4a26      	ldr	r2, [pc, #152]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800af7a:	4921      	ldr	r1, [pc, #132]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	3b01      	subs	r3, #1
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	440b      	add	r3, r1
 800af8e:	605a      	str	r2, [r3, #4]
 800af90:	e019      	b.n	800afc6 <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d015      	beq.n	800afc6 <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800af9a:	4a19      	ldr	r2, [pc, #100]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	3b01      	subs	r3, #1
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800afb0:	4913      	ldr	r1, [pc, #76]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	3b01      	subs	r3, #1
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	440b      	add	r3, r1
 800afc4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d018      	beq.n	800b004 <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800afd2:	4a0b      	ldr	r2, [pc, #44]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	3b01      	subs	r3, #1
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800afe8:	4905      	ldr	r1, [pc, #20]	@ (800b000 <HAL_OSPIM_Config+0x804>)
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	3b01      	subs	r3, #1
 800aff0:	f003 0301 	and.w	r3, r3, #1
 800aff4:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	605a      	str	r2, [r3, #4]
 800affe:	e0c5      	b.n	800b18c <HAL_OSPIM_Config+0x990>
 800b000:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 80bf 	beq.w	800b18c <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800b00e:	4a6e      	ldr	r2, [pc, #440]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	3b01      	subs	r3, #1
 800b016:	f003 0301 	and.w	r3, r3, #1
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800b024:	4968      	ldr	r1, [pc, #416]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	691b      	ldr	r3, [r3, #16]
 800b02a:	3b01      	subs	r3, #1
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	440b      	add	r3, r1
 800b038:	605a      	str	r2, [r3, #4]
 800b03a:	e0a7      	b.n	800b18c <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800b03c:	4a62      	ldr	r2, [pc, #392]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3b01      	subs	r3, #1
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f023 0203 	bic.w	r2, r3, #3
 800b04e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b050:	005b      	lsls	r3, r3, #1
 800b052:	431a      	orrs	r2, r3
 800b054:	495c      	ldr	r1, [pc, #368]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	f042 0201 	orr.w	r2, r2, #1
 800b060:	009b      	lsls	r3, r3, #2
 800b062:	440b      	add	r3, r1
 800b064:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d014      	beq.n	800b098 <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800b06e:	4a56      	ldr	r2, [pc, #344]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	3b01      	subs	r3, #1
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b082:	015b      	lsls	r3, r3, #5
 800b084:	431a      	orrs	r2, r3
 800b086:	4950      	ldr	r1, [pc, #320]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	3b01      	subs	r3, #1
 800b08e:	f042 0210 	orr.w	r2, r2, #16
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	440b      	add	r3, r1
 800b096:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d019      	beq.n	800b0d8 <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800b0a4:	4a48      	ldr	r2, [pc, #288]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	f003 0301 	and.w	r3, r3, #1
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800b0ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0bc:	049b      	lsls	r3, r3, #18
 800b0be:	431a      	orrs	r2, r3
 800b0c0:	4941      	ldr	r1, [pc, #260]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	f003 0301 	and.w	r3, r3, #1
 800b0cc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	440b      	add	r3, r1
 800b0d4:	605a      	str	r2, [r3, #4]
 800b0d6:	e01c      	b.n	800b112 <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d018      	beq.n	800b112 <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800b0e0:	4a39      	ldr	r2, [pc, #228]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	f003 0301 	and.w	r3, r3, #1
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	4413      	add	r3, r2
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800b0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0f8:	069b      	lsls	r3, r3, #26
 800b0fa:	431a      	orrs	r2, r3
 800b0fc:	4932      	ldr	r1, [pc, #200]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	3b01      	subs	r3, #1
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	440b      	add	r3, r1
 800b110:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d019      	beq.n	800b152 <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800b11e:	4a2a      	ldr	r2, [pc, #168]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	3b01      	subs	r3, #1
 800b126:	f003 0301 	and.w	r3, r3, #1
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4413      	add	r3, r2
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800b134:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b136:	049b      	lsls	r3, r3, #18
 800b138:	431a      	orrs	r2, r3
 800b13a:	4923      	ldr	r1, [pc, #140]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	3b01      	subs	r3, #1
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	605a      	str	r2, [r3, #4]
 800b150:	e01c      	b.n	800b18c <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d018      	beq.n	800b18c <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800b15a:	4a1b      	ldr	r2, [pc, #108]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	3b01      	subs	r3, #1
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800b170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b172:	069b      	lsls	r3, r3, #26
 800b174:	431a      	orrs	r2, r3
 800b176:	4914      	ldr	r1, [pc, #80]	@ (800b1c8 <HAL_OSPIM_Config+0x9cc>)
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	440b      	add	r3, r1
 800b18a:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800b18c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800b190:	f003 0301 	and.w	r3, r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	d005      	beq.n	800b1a4 <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800b198:	4b0c      	ldr	r3, [pc, #48]	@ (800b1cc <HAL_OSPIM_Config+0x9d0>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a0b      	ldr	r2, [pc, #44]	@ (800b1cc <HAL_OSPIM_Config+0x9d0>)
 800b19e:	f043 0301 	orr.w	r3, r3, #1
 800b1a2:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800b1a4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800b1b0:	4b07      	ldr	r3, [pc, #28]	@ (800b1d0 <HAL_OSPIM_Config+0x9d4>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a06      	ldr	r2, [pc, #24]	@ (800b1d0 <HAL_OSPIM_Config+0x9d4>)
 800b1b6:	f043 0301 	orr.w	r3, r3, #1
 800b1ba:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800b1bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3750      	adds	r7, #80	@ 0x50
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	5200b400 	.word	0x5200b400
 800b1cc:	52005000 	.word	0x52005000
 800b1d0:	5200a000 	.word	0x5200a000

0800b1d4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	603b      	str	r3, [r7, #0]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b1e4:	e01a      	b.n	800b21c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1ec:	d016      	beq.n	800b21c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ee:	f7fb fc01 	bl	80069f4 <HAL_GetTick>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	69ba      	ldr	r2, [r7, #24]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d302      	bcc.n	800b204 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10b      	bne.n	800b21c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b20a:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b210:	f043 0201 	orr.w	r2, r3, #1
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	e00e      	b.n	800b23a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6a1a      	ldr	r2, [r3, #32]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	4013      	ands	r3, r2
 800b226:	2b00      	cmp	r3, #0
 800b228:	bf14      	ite	ne
 800b22a:	2301      	movne	r3, #1
 800b22c:	2300      	moveq	r3, #0
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	461a      	mov	r2, r3
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	429a      	cmp	r2, r3
 800b236:	d1d6      	bne.n	800b1e6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
	...

0800b244 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 800b244:	b480      	push	{r7}
 800b246:	b089      	sub	sp, #36	@ 0x24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b260:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10a      	bne.n	800b280 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	685a      	ldr	r2, [r3, #4]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	430a      	orrs	r2, r1
 800b27e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b02      	cmp	r3, #2
 800b286:	d114      	bne.n	800b2b2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800b290:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800b29a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800b2a4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	e02c      	b.n	800b30c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2b03      	cmp	r3, #3
 800b2b8:	d114      	bne.n	800b2e4 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800b2c2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800b2cc:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b2d6:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	e013      	b.n	800b30c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800b2ec:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800b2f6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800b300:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800b30a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b314:	431a      	orrs	r2, r3
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d012      	beq.n	800b348 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b33a:	4319      	orrs	r1, r3
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b340:	430b      	orrs	r3, r1
 800b342:	431a      	orrs	r2, r3
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f023 021f 	bic.w	r2, r3, #31
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b354:	431a      	orrs	r2, r3
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d009      	beq.n	800b376 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d105      	bne.n	800b376 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	3a01      	subs	r2, #1
 800b374:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f000 8095 	beq.w	800b4aa <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	69db      	ldr	r3, [r3, #28]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d053      	beq.n	800b430 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d01e      	beq.n	800b3ce <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	4b64      	ldr	r3, [pc, #400]	@ (800b528 <OSPI_ConfigCmd+0x2e4>)
 800b396:	4013      	ands	r3, r2
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	68d1      	ldr	r1, [r2, #12]
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	6952      	ldr	r2, [r2, #20]
 800b3a0:	4311      	orrs	r1, r2
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	6912      	ldr	r2, [r2, #16]
 800b3a6:	4311      	orrs	r1, r2
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	69d2      	ldr	r2, [r2, #28]
 800b3ac:	4311      	orrs	r1, r2
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b3b2:	4311      	orrs	r1, r2
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	6a12      	ldr	r2, [r2, #32]
 800b3b8:	4311      	orrs	r1, r2
 800b3ba:	683a      	ldr	r2, [r7, #0]
 800b3bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b3be:	4311      	orrs	r1, r2
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b3c4:	430a      	orrs	r2, r1
 800b3c6:	431a      	orrs	r2, r3
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	e026      	b.n	800b41c <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	4b56      	ldr	r3, [pc, #344]	@ (800b52c <OSPI_ConfigCmd+0x2e8>)
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	68d1      	ldr	r1, [r2, #12]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	6952      	ldr	r2, [r2, #20]
 800b3de:	4311      	orrs	r1, r2
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	6912      	ldr	r2, [r2, #16]
 800b3e4:	4311      	orrs	r1, r2
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	69d2      	ldr	r2, [r2, #28]
 800b3ea:	4311      	orrs	r1, r2
 800b3ec:	683a      	ldr	r2, [r7, #0]
 800b3ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b3f0:	4311      	orrs	r1, r2
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	6a12      	ldr	r2, [r2, #32]
 800b3f6:	430a      	orrs	r2, r1
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b402:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b406:	d109      	bne.n	800b41c <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b40c:	2b08      	cmp	r3, #8
 800b40e:	d105      	bne.n	800b41c <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	689a      	ldr	r2, [r3, #8]
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	6992      	ldr	r2, [r2, #24]
 800b42c:	649a      	str	r2, [r3, #72]	@ 0x48
 800b42e:	e074      	b.n	800b51a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b434:	2b00      	cmp	r3, #0
 800b436:	d015      	beq.n	800b464 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	4b3c      	ldr	r3, [pc, #240]	@ (800b530 <OSPI_ConfigCmd+0x2ec>)
 800b43e:	4013      	ands	r3, r2
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	68d1      	ldr	r1, [r2, #12]
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	6952      	ldr	r2, [r2, #20]
 800b448:	4311      	orrs	r1, r2
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	6912      	ldr	r2, [r2, #16]
 800b44e:	4311      	orrs	r1, r2
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b454:	4311      	orrs	r1, r2
 800b456:	683a      	ldr	r2, [r7, #0]
 800b458:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b45a:	430a      	orrs	r2, r1
 800b45c:	431a      	orrs	r2, r3
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	601a      	str	r2, [r3, #0]
 800b462:	e01d      	b.n	800b4a0 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	68d9      	ldr	r1, [r3, #12]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	4319      	orrs	r1, r3
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	430b      	orrs	r3, r1
 800b47c:	431a      	orrs	r2, r3
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b48a:	d109      	bne.n	800b4a0 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800b490:	2b08      	cmp	r3, #8
 800b492:	d105      	bne.n	800b4a0 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	689a      	ldr	r2, [r3, #8]
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	601a      	str	r2, [r3, #0]
 800b4a8:	e037      	b.n	800b51a <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	69db      	ldr	r3, [r3, #28]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d02e      	beq.n	800b510 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d015      	beq.n	800b4e6 <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	4b1d      	ldr	r3, [pc, #116]	@ (800b534 <OSPI_ConfigCmd+0x2f0>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	69d1      	ldr	r1, [r2, #28]
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b4ca:	4311      	orrs	r1, r2
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	6a12      	ldr	r2, [r2, #32]
 800b4d0:	4311      	orrs	r1, r2
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b4d6:	4311      	orrs	r1, r2
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	e00e      	b.n	800b504 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	69d9      	ldr	r1, [r3, #28]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f6:	4319      	orrs	r1, r3
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	6a1b      	ldr	r3, [r3, #32]
 800b4fc:	430b      	orrs	r3, r1
 800b4fe:	431a      	orrs	r2, r3
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	6992      	ldr	r2, [r2, #24]
 800b50c:	649a      	str	r2, [r3, #72]	@ 0x48
 800b50e:	e004      	b.n	800b51a <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800b510:	2301      	movs	r3, #1
 800b512:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2208      	movs	r2, #8
 800b518:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 800b51a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3724      	adds	r7, #36	@ 0x24
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	f0ffc0c0 	.word	0xf0ffc0c0
 800b52c:	ffffc0c0 	.word	0xffffc0c0
 800b530:	f0ffffc0 	.word	0xf0ffffc0
 800b534:	f0ffc0ff 	.word	0xf0ffc0ff

0800b538 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800b538:	b480      	push	{r7}
 800b53a:	b087      	sub	sp, #28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	6039      	str	r1, [r7, #0]
 800b542:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800b548:	2300      	movs	r3, #0
 800b54a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d005      	beq.n	800b55e <OSPIM_GetConfig+0x26>
 800b552:	79fb      	ldrb	r3, [r7, #7]
 800b554:	2b02      	cmp	r3, #2
 800b556:	d802      	bhi.n	800b55e <OSPIM_GetConfig+0x26>
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d102      	bne.n	800b564 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	75fb      	strb	r3, [r7, #23]
 800b562:	e098      	b.n	800b696 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	2200      	movs	r2, #0
 800b568:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2200      	movs	r2, #0
 800b56e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2200      	movs	r2, #0
 800b574:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	2200      	movs	r2, #0
 800b57a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2200      	movs	r2, #0
 800b580:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	2b02      	cmp	r3, #2
 800b586:	d10b      	bne.n	800b5a0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800b588:	4b46      	ldr	r3, [pc, #280]	@ (800b6a4 <OSPIM_GetConfig+0x16c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	2b00      	cmp	r3, #0
 800b592:	d102      	bne.n	800b59a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800b594:	4b44      	ldr	r3, [pc, #272]	@ (800b6a8 <OSPIM_GetConfig+0x170>)
 800b596:	613b      	str	r3, [r7, #16]
 800b598:	e002      	b.n	800b5a0 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800b59a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b59e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	e074      	b.n	800b690 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800b5a6:	4a3f      	ldr	r2, [pc, #252]	@ (800b6a4 <OSPIM_GetConfig+0x16c>)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f003 0301 	and.w	r3, r3, #1
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00a      	beq.n	800b5d2 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	4053      	eors	r3, r2
 800b5c2:	f003 0302 	and.w	r3, r3, #2
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d103      	bne.n	800b5d2 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	1c5a      	adds	r2, r3, #1
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f003 0310 	and.w	r3, r3, #16
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00a      	beq.n	800b5f2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	4053      	eors	r3, r2
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d103      	bne.n	800b5f2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	1c5a      	adds	r2, r3, #1
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00a      	beq.n	800b612 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	4053      	eors	r3, r2
 800b602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b606:	2b00      	cmp	r3, #0
 800b608:	d103      	bne.n	800b612 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	1c5a      	adds	r2, r3, #1
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d018      	beq.n	800b64e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	4053      	eors	r3, r2
 800b622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d111      	bne.n	800b64e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d106      	bne.n	800b642 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	3301      	adds	r3, #1
 800b638:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	60da      	str	r2, [r3, #12]
 800b640:	e005      	b.n	800b64e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3301      	adds	r3, #1
 800b646:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d018      	beq.n	800b68a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	4053      	eors	r3, r2
 800b65e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d111      	bne.n	800b68a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3301      	adds	r3, #1
 800b674:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	611a      	str	r2, [r3, #16]
 800b67c:	e005      	b.n	800b68a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3301      	adds	r3, #1
 800b682:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3301      	adds	r3, #1
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d987      	bls.n	800b5a6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800b696:	7dfb      	ldrb	r3, [r7, #23]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	371c      	adds	r7, #28
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr
 800b6a4:	5200b400 	.word	0x5200b400
 800b6a8:	04040222 	.word	0x04040222

0800b6ac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b6b4:	4b19      	ldr	r3, [pc, #100]	@ (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b6b6:	68db      	ldr	r3, [r3, #12]
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	d00a      	beq.n	800b6d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b6c0:	4b16      	ldr	r3, [pc, #88]	@ (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	f003 0307 	and.w	r3, r3, #7
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d001      	beq.n	800b6d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e01f      	b.n	800b712 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e01d      	b.n	800b712 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b6d6:	4b11      	ldr	r3, [pc, #68]	@ (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f023 0207 	bic.w	r2, r3, #7
 800b6de:	490f      	ldr	r1, [pc, #60]	@ (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b6e6:	f7fb f985 	bl	80069f4 <HAL_GetTick>
 800b6ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b6ec:	e009      	b.n	800b702 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b6ee:	f7fb f981 	bl	80069f4 <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b6fc:	d901      	bls.n	800b702 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e007      	b.n	800b712 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b702:	4b06      	ldr	r3, [pc, #24]	@ (800b71c <HAL_PWREx_ConfigSupply+0x70>)
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b70a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b70e:	d1ee      	bne.n	800b6ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	58024800 	.word	0x58024800

0800b720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b08c      	sub	sp, #48	@ 0x30
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e3c8      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 8087 	beq.w	800b84e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b740:	4b88      	ldr	r3, [pc, #544]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b742:	691b      	ldr	r3, [r3, #16]
 800b744:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b748:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b74a:	4b86      	ldr	r3, [pc, #536]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b74c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b752:	2b10      	cmp	r3, #16
 800b754:	d007      	beq.n	800b766 <HAL_RCC_OscConfig+0x46>
 800b756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b758:	2b18      	cmp	r3, #24
 800b75a:	d110      	bne.n	800b77e <HAL_RCC_OscConfig+0x5e>
 800b75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75e:	f003 0303 	and.w	r3, r3, #3
 800b762:	2b02      	cmp	r3, #2
 800b764:	d10b      	bne.n	800b77e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b766:	4b7f      	ldr	r3, [pc, #508]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d06c      	beq.n	800b84c <HAL_RCC_OscConfig+0x12c>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d168      	bne.n	800b84c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e3a2      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b786:	d106      	bne.n	800b796 <HAL_RCC_OscConfig+0x76>
 800b788:	4b76      	ldr	r3, [pc, #472]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a75      	ldr	r2, [pc, #468]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b78e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	e02e      	b.n	800b7f4 <HAL_RCC_OscConfig+0xd4>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d10c      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x98>
 800b79e:	4b71      	ldr	r3, [pc, #452]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a70      	ldr	r2, [pc, #448]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7a8:	6013      	str	r3, [r2, #0]
 800b7aa:	4b6e      	ldr	r3, [pc, #440]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a6d      	ldr	r2, [pc, #436]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b7b4:	6013      	str	r3, [r2, #0]
 800b7b6:	e01d      	b.n	800b7f4 <HAL_RCC_OscConfig+0xd4>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b7c0:	d10c      	bne.n	800b7dc <HAL_RCC_OscConfig+0xbc>
 800b7c2:	4b68      	ldr	r3, [pc, #416]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a67      	ldr	r2, [pc, #412]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	4b65      	ldr	r3, [pc, #404]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a64      	ldr	r2, [pc, #400]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	e00b      	b.n	800b7f4 <HAL_RCC_OscConfig+0xd4>
 800b7dc:	4b61      	ldr	r3, [pc, #388]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a60      	ldr	r2, [pc, #384]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	4b5e      	ldr	r3, [pc, #376]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a5d      	ldr	r2, [pc, #372]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b7ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b7f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d013      	beq.n	800b824 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7fc:	f7fb f8fa 	bl	80069f4 <HAL_GetTick>
 800b800:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b802:	e008      	b.n	800b816 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b804:	f7fb f8f6 	bl	80069f4 <HAL_GetTick>
 800b808:	4602      	mov	r2, r0
 800b80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	2b64      	cmp	r3, #100	@ 0x64
 800b810:	d901      	bls.n	800b816 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b812:	2303      	movs	r3, #3
 800b814:	e356      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b816:	4b53      	ldr	r3, [pc, #332]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d0f0      	beq.n	800b804 <HAL_RCC_OscConfig+0xe4>
 800b822:	e014      	b.n	800b84e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b824:	f7fb f8e6 	bl	80069f4 <HAL_GetTick>
 800b828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b82a:	e008      	b.n	800b83e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b82c:	f7fb f8e2 	bl	80069f4 <HAL_GetTick>
 800b830:	4602      	mov	r2, r0
 800b832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b834:	1ad3      	subs	r3, r2, r3
 800b836:	2b64      	cmp	r3, #100	@ 0x64
 800b838:	d901      	bls.n	800b83e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e342      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b83e:	4b49      	ldr	r3, [pc, #292]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1f0      	bne.n	800b82c <HAL_RCC_OscConfig+0x10c>
 800b84a:	e000      	b.n	800b84e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b84c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0302 	and.w	r3, r3, #2
 800b856:	2b00      	cmp	r3, #0
 800b858:	f000 808c 	beq.w	800b974 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b85c:	4b41      	ldr	r3, [pc, #260]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b864:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b866:	4b3f      	ldr	r3, [pc, #252]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b86a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d007      	beq.n	800b882 <HAL_RCC_OscConfig+0x162>
 800b872:	6a3b      	ldr	r3, [r7, #32]
 800b874:	2b18      	cmp	r3, #24
 800b876:	d137      	bne.n	800b8e8 <HAL_RCC_OscConfig+0x1c8>
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	f003 0303 	and.w	r3, r3, #3
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d132      	bne.n	800b8e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b882:	4b38      	ldr	r3, [pc, #224]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f003 0304 	and.w	r3, r3, #4
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d005      	beq.n	800b89a <HAL_RCC_OscConfig+0x17a>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d101      	bne.n	800b89a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e314      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b89a:	4b32      	ldr	r3, [pc, #200]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f023 0219 	bic.w	r2, r3, #25
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	492f      	ldr	r1, [pc, #188]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8ac:	f7fb f8a2 	bl	80069f4 <HAL_GetTick>
 800b8b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8b2:	e008      	b.n	800b8c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b8b4:	f7fb f89e 	bl	80069f4 <HAL_GetTick>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8bc:	1ad3      	subs	r3, r2, r3
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	d901      	bls.n	800b8c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	e2fe      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b8c6:	4b27      	ldr	r3, [pc, #156]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f003 0304 	and.w	r3, r3, #4
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d0f0      	beq.n	800b8b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8d2:	4b24      	ldr	r3, [pc, #144]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	061b      	lsls	r3, r3, #24
 800b8e0:	4920      	ldr	r1, [pc, #128]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b8e6:	e045      	b.n	800b974 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d026      	beq.n	800b93e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b8f0:	4b1c      	ldr	r3, [pc, #112]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f023 0219 	bic.w	r2, r3, #25
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	4919      	ldr	r1, [pc, #100]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b902:	f7fb f877 	bl	80069f4 <HAL_GetTick>
 800b906:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b908:	e008      	b.n	800b91c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b90a:	f7fb f873 	bl	80069f4 <HAL_GetTick>
 800b90e:	4602      	mov	r2, r0
 800b910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	2b02      	cmp	r3, #2
 800b916:	d901      	bls.n	800b91c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b918:	2303      	movs	r3, #3
 800b91a:	e2d3      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b91c:	4b11      	ldr	r3, [pc, #68]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0304 	and.w	r3, r3, #4
 800b924:	2b00      	cmp	r3, #0
 800b926:	d0f0      	beq.n	800b90a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b928:	4b0e      	ldr	r3, [pc, #56]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	061b      	lsls	r3, r3, #24
 800b936:	490b      	ldr	r1, [pc, #44]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b938:	4313      	orrs	r3, r2
 800b93a:	604b      	str	r3, [r1, #4]
 800b93c:	e01a      	b.n	800b974 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b93e:	4b09      	ldr	r3, [pc, #36]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a08      	ldr	r2, [pc, #32]	@ (800b964 <HAL_RCC_OscConfig+0x244>)
 800b944:	f023 0301 	bic.w	r3, r3, #1
 800b948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b94a:	f7fb f853 	bl	80069f4 <HAL_GetTick>
 800b94e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b950:	e00a      	b.n	800b968 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b952:	f7fb f84f 	bl	80069f4 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d903      	bls.n	800b968 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	e2af      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
 800b964:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b968:	4b96      	ldr	r3, [pc, #600]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 0304 	and.w	r3, r3, #4
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1ee      	bne.n	800b952 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0310 	and.w	r3, r3, #16
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d06a      	beq.n	800ba56 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b980:	4b90      	ldr	r3, [pc, #576]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b988:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b98a:	4b8e      	ldr	r3, [pc, #568]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800b98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b98e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	2b08      	cmp	r3, #8
 800b994:	d007      	beq.n	800b9a6 <HAL_RCC_OscConfig+0x286>
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	2b18      	cmp	r3, #24
 800b99a:	d11b      	bne.n	800b9d4 <HAL_RCC_OscConfig+0x2b4>
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	f003 0303 	and.w	r3, r3, #3
 800b9a2:	2b01      	cmp	r3, #1
 800b9a4:	d116      	bne.n	800b9d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b9a6:	4b87      	ldr	r3, [pc, #540]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d005      	beq.n	800b9be <HAL_RCC_OscConfig+0x29e>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	69db      	ldr	r3, [r3, #28]
 800b9b6:	2b80      	cmp	r3, #128	@ 0x80
 800b9b8:	d001      	beq.n	800b9be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e282      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b9be:	4b81      	ldr	r3, [pc, #516]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	061b      	lsls	r3, r3, #24
 800b9cc:	497d      	ldr	r1, [pc, #500]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b9d2:	e040      	b.n	800ba56 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	69db      	ldr	r3, [r3, #28]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d023      	beq.n	800ba24 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b9dc:	4b79      	ldr	r3, [pc, #484]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a78      	ldr	r2, [pc, #480]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800b9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9e8:	f7fb f804 	bl	80069f4 <HAL_GetTick>
 800b9ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b9ee:	e008      	b.n	800ba02 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b9f0:	f7fb f800 	bl	80069f4 <HAL_GetTick>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d901      	bls.n	800ba02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	e260      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ba02:	4b70      	ldr	r3, [pc, #448]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0f0      	beq.n	800b9f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ba0e:	4b6d      	ldr	r3, [pc, #436]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	061b      	lsls	r3, r3, #24
 800ba1c:	4969      	ldr	r1, [pc, #420]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	60cb      	str	r3, [r1, #12]
 800ba22:	e018      	b.n	800ba56 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ba24:	4b67      	ldr	r3, [pc, #412]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a66      	ldr	r2, [pc, #408]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800ba2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba30:	f7fa ffe0 	bl	80069f4 <HAL_GetTick>
 800ba34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba36:	e008      	b.n	800ba4a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ba38:	f7fa ffdc 	bl	80069f4 <HAL_GetTick>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d901      	bls.n	800ba4a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e23c      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ba4a:	4b5e      	ldr	r3, [pc, #376]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d1f0      	bne.n	800ba38 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 0308 	and.w	r3, r3, #8
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d036      	beq.n	800bad0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d019      	beq.n	800ba9e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba6a:	4b56      	ldr	r3, [pc, #344]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800ba6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba6e:	4a55      	ldr	r2, [pc, #340]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800ba70:	f043 0301 	orr.w	r3, r3, #1
 800ba74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba76:	f7fa ffbd 	bl	80069f4 <HAL_GetTick>
 800ba7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ba7c:	e008      	b.n	800ba90 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba7e:	f7fa ffb9 	bl	80069f4 <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d901      	bls.n	800ba90 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e219      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ba90:	4b4c      	ldr	r3, [pc, #304]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800ba92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba94:	f003 0302 	and.w	r3, r3, #2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0f0      	beq.n	800ba7e <HAL_RCC_OscConfig+0x35e>
 800ba9c:	e018      	b.n	800bad0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba9e:	4b49      	ldr	r3, [pc, #292]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800baa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baa2:	4a48      	ldr	r2, [pc, #288]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800baa4:	f023 0301 	bic.w	r3, r3, #1
 800baa8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baaa:	f7fa ffa3 	bl	80069f4 <HAL_GetTick>
 800baae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bab0:	e008      	b.n	800bac4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bab2:	f7fa ff9f 	bl	80069f4 <HAL_GetTick>
 800bab6:	4602      	mov	r2, r0
 800bab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baba:	1ad3      	subs	r3, r2, r3
 800babc:	2b02      	cmp	r3, #2
 800babe:	d901      	bls.n	800bac4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800bac0:	2303      	movs	r3, #3
 800bac2:	e1ff      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bac4:	4b3f      	ldr	r3, [pc, #252]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bac8:	f003 0302 	and.w	r3, r3, #2
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d1f0      	bne.n	800bab2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 0320 	and.w	r3, r3, #32
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d036      	beq.n	800bb4a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	699b      	ldr	r3, [r3, #24]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d019      	beq.n	800bb18 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bae4:	4b37      	ldr	r3, [pc, #220]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a36      	ldr	r2, [pc, #216]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800baea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800baee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800baf0:	f7fa ff80 	bl	80069f4 <HAL_GetTick>
 800baf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800baf6:	e008      	b.n	800bb0a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800baf8:	f7fa ff7c 	bl	80069f4 <HAL_GetTick>
 800bafc:	4602      	mov	r2, r0
 800bafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d901      	bls.n	800bb0a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800bb06:	2303      	movs	r3, #3
 800bb08:	e1dc      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bb0a:	4b2e      	ldr	r3, [pc, #184]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0f0      	beq.n	800baf8 <HAL_RCC_OscConfig+0x3d8>
 800bb16:	e018      	b.n	800bb4a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bb18:	4b2a      	ldr	r3, [pc, #168]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a29      	ldr	r2, [pc, #164]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bb1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bb24:	f7fa ff66 	bl	80069f4 <HAL_GetTick>
 800bb28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bb2a:	e008      	b.n	800bb3e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb2c:	f7fa ff62 	bl	80069f4 <HAL_GetTick>
 800bb30:	4602      	mov	r2, r0
 800bb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	d901      	bls.n	800bb3e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	e1c2      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bb3e:	4b21      	ldr	r3, [pc, #132]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1f0      	bne.n	800bb2c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 0304 	and.w	r3, r3, #4
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 8086 	beq.w	800bc64 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bb58:	4b1b      	ldr	r3, [pc, #108]	@ (800bbc8 <HAL_RCC_OscConfig+0x4a8>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a1a      	ldr	r2, [pc, #104]	@ (800bbc8 <HAL_RCC_OscConfig+0x4a8>)
 800bb5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb64:	f7fa ff46 	bl	80069f4 <HAL_GetTick>
 800bb68:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb6a:	e008      	b.n	800bb7e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bb6c:	f7fa ff42 	bl	80069f4 <HAL_GetTick>
 800bb70:	4602      	mov	r2, r0
 800bb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	2b64      	cmp	r3, #100	@ 0x64
 800bb78:	d901      	bls.n	800bb7e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e1a2      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bb7e:	4b12      	ldr	r3, [pc, #72]	@ (800bbc8 <HAL_RCC_OscConfig+0x4a8>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d0f0      	beq.n	800bb6c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d106      	bne.n	800bba0 <HAL_RCC_OscConfig+0x480>
 800bb92:	4b0c      	ldr	r3, [pc, #48]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bb94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb96:	4a0b      	ldr	r2, [pc, #44]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bb98:	f043 0301 	orr.w	r3, r3, #1
 800bb9c:	6713      	str	r3, [r2, #112]	@ 0x70
 800bb9e:	e032      	b.n	800bc06 <HAL_RCC_OscConfig+0x4e6>
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d111      	bne.n	800bbcc <HAL_RCC_OscConfig+0x4ac>
 800bba8:	4b06      	ldr	r3, [pc, #24]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bbaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbac:	4a05      	ldr	r2, [pc, #20]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bbae:	f023 0301 	bic.w	r3, r3, #1
 800bbb2:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbb4:	4b03      	ldr	r3, [pc, #12]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bbb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbb8:	4a02      	ldr	r2, [pc, #8]	@ (800bbc4 <HAL_RCC_OscConfig+0x4a4>)
 800bbba:	f023 0304 	bic.w	r3, r3, #4
 800bbbe:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbc0:	e021      	b.n	800bc06 <HAL_RCC_OscConfig+0x4e6>
 800bbc2:	bf00      	nop
 800bbc4:	58024400 	.word	0x58024400
 800bbc8:	58024800 	.word	0x58024800
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	2b05      	cmp	r3, #5
 800bbd2:	d10c      	bne.n	800bbee <HAL_RCC_OscConfig+0x4ce>
 800bbd4:	4b83      	ldr	r3, [pc, #524]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bbd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbd8:	4a82      	ldr	r2, [pc, #520]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bbda:	f043 0304 	orr.w	r3, r3, #4
 800bbde:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbe0:	4b80      	ldr	r3, [pc, #512]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bbe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbe4:	4a7f      	ldr	r2, [pc, #508]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bbe6:	f043 0301 	orr.w	r3, r3, #1
 800bbea:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbec:	e00b      	b.n	800bc06 <HAL_RCC_OscConfig+0x4e6>
 800bbee:	4b7d      	ldr	r3, [pc, #500]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bbf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbf2:	4a7c      	ldr	r2, [pc, #496]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bbf4:	f023 0301 	bic.w	r3, r3, #1
 800bbf8:	6713      	str	r3, [r2, #112]	@ 0x70
 800bbfa:	4b7a      	ldr	r3, [pc, #488]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bbfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbfe:	4a79      	ldr	r2, [pc, #484]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bc00:	f023 0304 	bic.w	r3, r3, #4
 800bc04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d015      	beq.n	800bc3a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc0e:	f7fa fef1 	bl	80069f4 <HAL_GetTick>
 800bc12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc14:	e00a      	b.n	800bc2c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc16:	f7fa feed 	bl	80069f4 <HAL_GetTick>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d901      	bls.n	800bc2c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800bc28:	2303      	movs	r3, #3
 800bc2a:	e14b      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc2c:	4b6d      	ldr	r3, [pc, #436]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bc2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc30:	f003 0302 	and.w	r3, r3, #2
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d0ee      	beq.n	800bc16 <HAL_RCC_OscConfig+0x4f6>
 800bc38:	e014      	b.n	800bc64 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc3a:	f7fa fedb 	bl	80069f4 <HAL_GetTick>
 800bc3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc40:	e00a      	b.n	800bc58 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc42:	f7fa fed7 	bl	80069f4 <HAL_GetTick>
 800bc46:	4602      	mov	r2, r0
 800bc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d901      	bls.n	800bc58 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e135      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bc58:	4b62      	ldr	r3, [pc, #392]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bc5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc5c:	f003 0302 	and.w	r3, r3, #2
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1ee      	bne.n	800bc42 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 812a 	beq.w	800bec2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bc6e:	4b5d      	ldr	r3, [pc, #372]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc76:	2b18      	cmp	r3, #24
 800bc78:	f000 80ba 	beq.w	800bdf0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	f040 8095 	bne.w	800bdb0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc86:	4b57      	ldr	r3, [pc, #348]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a56      	ldr	r2, [pc, #344]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bc8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc92:	f7fa feaf 	bl	80069f4 <HAL_GetTick>
 800bc96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc98:	e008      	b.n	800bcac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc9a:	f7fa feab 	bl	80069f4 <HAL_GetTick>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	d901      	bls.n	800bcac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	e10b      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bcac:	4b4d      	ldr	r3, [pc, #308]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1f0      	bne.n	800bc9a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bcb8:	4b4a      	ldr	r3, [pc, #296]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bcba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcbc:	4b4a      	ldr	r3, [pc, #296]	@ (800bde8 <HAL_RCC_OscConfig+0x6c8>)
 800bcbe:	4013      	ands	r3, r2
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800bcc8:	0112      	lsls	r2, r2, #4
 800bcca:	430a      	orrs	r2, r1
 800bccc:	4945      	ldr	r1, [pc, #276]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	628b      	str	r3, [r1, #40]	@ 0x28
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcd6:	3b01      	subs	r3, #1
 800bcd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bce0:	3b01      	subs	r3, #1
 800bce2:	025b      	lsls	r3, r3, #9
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	431a      	orrs	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcec:	3b01      	subs	r3, #1
 800bcee:	041b      	lsls	r3, r3, #16
 800bcf0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bcf4:	431a      	orrs	r2, r3
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcfa:	3b01      	subs	r3, #1
 800bcfc:	061b      	lsls	r3, r3, #24
 800bcfe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bd02:	4938      	ldr	r1, [pc, #224]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd04:	4313      	orrs	r3, r2
 800bd06:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800bd08:	4b36      	ldr	r3, [pc, #216]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd0c:	4a35      	ldr	r2, [pc, #212]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd0e:	f023 0301 	bic.w	r3, r3, #1
 800bd12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bd14:	4b33      	ldr	r3, [pc, #204]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bd18:	4b34      	ldr	r3, [pc, #208]	@ (800bdec <HAL_RCC_OscConfig+0x6cc>)
 800bd1a:	4013      	ands	r3, r2
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bd20:	00d2      	lsls	r2, r2, #3
 800bd22:	4930      	ldr	r1, [pc, #192]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd24:	4313      	orrs	r3, r2
 800bd26:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bd28:	4b2e      	ldr	r3, [pc, #184]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2c:	f023 020c 	bic.w	r2, r3, #12
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd34:	492b      	ldr	r1, [pc, #172]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd36:	4313      	orrs	r3, r2
 800bd38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bd3a:	4b2a      	ldr	r3, [pc, #168]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3e:	f023 0202 	bic.w	r2, r3, #2
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd46:	4927      	ldr	r1, [pc, #156]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bd4c:	4b25      	ldr	r3, [pc, #148]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd50:	4a24      	ldr	r2, [pc, #144]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd58:	4b22      	ldr	r3, [pc, #136]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5c:	4a21      	ldr	r2, [pc, #132]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bd64:	4b1f      	ldr	r3, [pc, #124]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd68:	4a1e      	ldr	r2, [pc, #120]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bd6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800bd70:	4b1c      	ldr	r3, [pc, #112]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd74:	4a1b      	ldr	r2, [pc, #108]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd76:	f043 0301 	orr.w	r3, r3, #1
 800bd7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd7c:	4b19      	ldr	r3, [pc, #100]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a18      	ldr	r2, [pc, #96]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bd82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd88:	f7fa fe34 	bl	80069f4 <HAL_GetTick>
 800bd8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bd8e:	e008      	b.n	800bda2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd90:	f7fa fe30 	bl	80069f4 <HAL_GetTick>
 800bd94:	4602      	mov	r2, r0
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d901      	bls.n	800bda2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	e090      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bda2:	4b10      	ldr	r3, [pc, #64]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0f0      	beq.n	800bd90 <HAL_RCC_OscConfig+0x670>
 800bdae:	e088      	b.n	800bec2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a0b      	ldr	r2, [pc, #44]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bdb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bdba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdbc:	f7fa fe1a 	bl	80069f4 <HAL_GetTick>
 800bdc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bdc2:	e008      	b.n	800bdd6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bdc4:	f7fa fe16 	bl	80069f4 <HAL_GetTick>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdcc:	1ad3      	subs	r3, r2, r3
 800bdce:	2b02      	cmp	r3, #2
 800bdd0:	d901      	bls.n	800bdd6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	e076      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bdd6:	4b03      	ldr	r3, [pc, #12]	@ (800bde4 <HAL_RCC_OscConfig+0x6c4>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1f0      	bne.n	800bdc4 <HAL_RCC_OscConfig+0x6a4>
 800bde2:	e06e      	b.n	800bec2 <HAL_RCC_OscConfig+0x7a2>
 800bde4:	58024400 	.word	0x58024400
 800bde8:	fffffc0c 	.word	0xfffffc0c
 800bdec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bdf0:	4b36      	ldr	r3, [pc, #216]	@ (800becc <HAL_RCC_OscConfig+0x7ac>)
 800bdf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bdf6:	4b35      	ldr	r3, [pc, #212]	@ (800becc <HAL_RCC_OscConfig+0x7ac>)
 800bdf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdfa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be00:	2b01      	cmp	r3, #1
 800be02:	d031      	beq.n	800be68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	f003 0203 	and.w	r2, r3, #3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be0e:	429a      	cmp	r2, r3
 800be10:	d12a      	bne.n	800be68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	091b      	lsrs	r3, r3, #4
 800be16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be1e:	429a      	cmp	r2, r3
 800be20:	d122      	bne.n	800be68 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800be2e:	429a      	cmp	r2, r3
 800be30:	d11a      	bne.n	800be68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	0a5b      	lsrs	r3, r3, #9
 800be36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800be40:	429a      	cmp	r2, r3
 800be42:	d111      	bne.n	800be68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	0c1b      	lsrs	r3, r3, #16
 800be48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800be52:	429a      	cmp	r2, r3
 800be54:	d108      	bne.n	800be68 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	0e1b      	lsrs	r3, r3, #24
 800be5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800be64:	429a      	cmp	r2, r3
 800be66:	d001      	beq.n	800be6c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e02b      	b.n	800bec4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800be6c:	4b17      	ldr	r3, [pc, #92]	@ (800becc <HAL_RCC_OscConfig+0x7ac>)
 800be6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be70:	08db      	lsrs	r3, r3, #3
 800be72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be7c:	693a      	ldr	r2, [r7, #16]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d01f      	beq.n	800bec2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800be82:	4b12      	ldr	r3, [pc, #72]	@ (800becc <HAL_RCC_OscConfig+0x7ac>)
 800be84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be86:	4a11      	ldr	r2, [pc, #68]	@ (800becc <HAL_RCC_OscConfig+0x7ac>)
 800be88:	f023 0301 	bic.w	r3, r3, #1
 800be8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800be8e:	f7fa fdb1 	bl	80069f4 <HAL_GetTick>
 800be92:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800be94:	bf00      	nop
 800be96:	f7fa fdad 	bl	80069f4 <HAL_GetTick>
 800be9a:	4602      	mov	r2, r0
 800be9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d0f9      	beq.n	800be96 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bea2:	4b0a      	ldr	r3, [pc, #40]	@ (800becc <HAL_RCC_OscConfig+0x7ac>)
 800bea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bea6:	4b0a      	ldr	r3, [pc, #40]	@ (800bed0 <HAL_RCC_OscConfig+0x7b0>)
 800bea8:	4013      	ands	r3, r2
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800beae:	00d2      	lsls	r2, r2, #3
 800beb0:	4906      	ldr	r1, [pc, #24]	@ (800becc <HAL_RCC_OscConfig+0x7ac>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800beb6:	4b05      	ldr	r3, [pc, #20]	@ (800becc <HAL_RCC_OscConfig+0x7ac>)
 800beb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beba:	4a04      	ldr	r2, [pc, #16]	@ (800becc <HAL_RCC_OscConfig+0x7ac>)
 800bebc:	f043 0301 	orr.w	r3, r3, #1
 800bec0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3730      	adds	r7, #48	@ 0x30
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	58024400 	.word	0x58024400
 800bed0:	ffff0007 	.word	0xffff0007

0800bed4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e19c      	b.n	800c222 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bee8:	4b8a      	ldr	r3, [pc, #552]	@ (800c114 <HAL_RCC_ClockConfig+0x240>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 030f 	and.w	r3, r3, #15
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d910      	bls.n	800bf18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bef6:	4b87      	ldr	r3, [pc, #540]	@ (800c114 <HAL_RCC_ClockConfig+0x240>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f023 020f 	bic.w	r2, r3, #15
 800befe:	4985      	ldr	r1, [pc, #532]	@ (800c114 <HAL_RCC_ClockConfig+0x240>)
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf06:	4b83      	ldr	r3, [pc, #524]	@ (800c114 <HAL_RCC_ClockConfig+0x240>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 030f 	and.w	r3, r3, #15
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d001      	beq.n	800bf18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e184      	b.n	800c222 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f003 0304 	and.w	r3, r3, #4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d010      	beq.n	800bf46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	691a      	ldr	r2, [r3, #16]
 800bf28:	4b7b      	ldr	r3, [pc, #492]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d908      	bls.n	800bf46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf34:	4b78      	ldr	r3, [pc, #480]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	4975      	ldr	r1, [pc, #468]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bf42:	4313      	orrs	r3, r2
 800bf44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f003 0308 	and.w	r3, r3, #8
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d010      	beq.n	800bf74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	695a      	ldr	r2, [r3, #20]
 800bf56:	4b70      	ldr	r3, [pc, #448]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bf58:	69db      	ldr	r3, [r3, #28]
 800bf5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d908      	bls.n	800bf74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf62:	4b6d      	ldr	r3, [pc, #436]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bf64:	69db      	ldr	r3, [r3, #28]
 800bf66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	496a      	ldr	r1, [pc, #424]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f003 0310 	and.w	r3, r3, #16
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d010      	beq.n	800bfa2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	699a      	ldr	r2, [r3, #24]
 800bf84:	4b64      	ldr	r3, [pc, #400]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bf86:	69db      	ldr	r3, [r3, #28]
 800bf88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d908      	bls.n	800bfa2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bf90:	4b61      	ldr	r3, [pc, #388]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bf92:	69db      	ldr	r3, [r3, #28]
 800bf94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	495e      	ldr	r1, [pc, #376]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bf9e:	4313      	orrs	r3, r2
 800bfa0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d010      	beq.n	800bfd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	69da      	ldr	r2, [r3, #28]
 800bfb2:	4b59      	ldr	r3, [pc, #356]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d908      	bls.n	800bfd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bfbe:	4b56      	ldr	r3, [pc, #344]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	69db      	ldr	r3, [r3, #28]
 800bfca:	4953      	ldr	r1, [pc, #332]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f003 0302 	and.w	r3, r3, #2
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d010      	beq.n	800bffe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	68da      	ldr	r2, [r3, #12]
 800bfe0:	4b4d      	ldr	r3, [pc, #308]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	f003 030f 	and.w	r3, r3, #15
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d908      	bls.n	800bffe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfec:	4b4a      	ldr	r3, [pc, #296]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bfee:	699b      	ldr	r3, [r3, #24]
 800bff0:	f023 020f 	bic.w	r2, r3, #15
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	4947      	ldr	r1, [pc, #284]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800bffa:	4313      	orrs	r3, r2
 800bffc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d055      	beq.n	800c0b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c00a:	4b43      	ldr	r3, [pc, #268]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	4940      	ldr	r1, [pc, #256]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c018:	4313      	orrs	r3, r2
 800c01a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	2b02      	cmp	r3, #2
 800c022:	d107      	bne.n	800c034 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c024:	4b3c      	ldr	r3, [pc, #240]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d121      	bne.n	800c074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	e0f6      	b.n	800c222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	2b03      	cmp	r3, #3
 800c03a:	d107      	bne.n	800c04c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c03c:	4b36      	ldr	r3, [pc, #216]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d115      	bne.n	800c074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	e0ea      	b.n	800c222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d107      	bne.n	800c064 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c054:	4b30      	ldr	r3, [pc, #192]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d109      	bne.n	800c074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e0de      	b.n	800c222 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c064:	4b2c      	ldr	r3, [pc, #176]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f003 0304 	and.w	r3, r3, #4
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	e0d6      	b.n	800c222 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c074:	4b28      	ldr	r3, [pc, #160]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	f023 0207 	bic.w	r2, r3, #7
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	4925      	ldr	r1, [pc, #148]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c082:	4313      	orrs	r3, r2
 800c084:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c086:	f7fa fcb5 	bl	80069f4 <HAL_GetTick>
 800c08a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c08c:	e00a      	b.n	800c0a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c08e:	f7fa fcb1 	bl	80069f4 <HAL_GetTick>
 800c092:	4602      	mov	r2, r0
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d901      	bls.n	800c0a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	e0be      	b.n	800c222 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0a4:	4b1c      	ldr	r3, [pc, #112]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d1eb      	bne.n	800c08e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0302 	and.w	r3, r3, #2
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d010      	beq.n	800c0e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68da      	ldr	r2, [r3, #12]
 800c0c6:	4b14      	ldr	r3, [pc, #80]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c0c8:	699b      	ldr	r3, [r3, #24]
 800c0ca:	f003 030f 	and.w	r3, r3, #15
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d208      	bcs.n	800c0e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0d2:	4b11      	ldr	r3, [pc, #68]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	f023 020f 	bic.w	r2, r3, #15
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	490e      	ldr	r1, [pc, #56]	@ (800c118 <HAL_RCC_ClockConfig+0x244>)
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c0e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c114 <HAL_RCC_ClockConfig+0x240>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 030f 	and.w	r3, r3, #15
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	d214      	bcs.n	800c11c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0f2:	4b08      	ldr	r3, [pc, #32]	@ (800c114 <HAL_RCC_ClockConfig+0x240>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f023 020f 	bic.w	r2, r3, #15
 800c0fa:	4906      	ldr	r1, [pc, #24]	@ (800c114 <HAL_RCC_ClockConfig+0x240>)
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c102:	4b04      	ldr	r3, [pc, #16]	@ (800c114 <HAL_RCC_ClockConfig+0x240>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 030f 	and.w	r3, r3, #15
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d005      	beq.n	800c11c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	e086      	b.n	800c222 <HAL_RCC_ClockConfig+0x34e>
 800c114:	52002000 	.word	0x52002000
 800c118:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0304 	and.w	r3, r3, #4
 800c124:	2b00      	cmp	r3, #0
 800c126:	d010      	beq.n	800c14a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	691a      	ldr	r2, [r3, #16]
 800c12c:	4b3f      	ldr	r3, [pc, #252]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c12e:	699b      	ldr	r3, [r3, #24]
 800c130:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c134:	429a      	cmp	r2, r3
 800c136:	d208      	bcs.n	800c14a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c138:	4b3c      	ldr	r3, [pc, #240]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	4939      	ldr	r1, [pc, #228]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c146:	4313      	orrs	r3, r2
 800c148:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 0308 	and.w	r3, r3, #8
 800c152:	2b00      	cmp	r3, #0
 800c154:	d010      	beq.n	800c178 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	695a      	ldr	r2, [r3, #20]
 800c15a:	4b34      	ldr	r3, [pc, #208]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c162:	429a      	cmp	r2, r3
 800c164:	d208      	bcs.n	800c178 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c166:	4b31      	ldr	r3, [pc, #196]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	695b      	ldr	r3, [r3, #20]
 800c172:	492e      	ldr	r1, [pc, #184]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c174:	4313      	orrs	r3, r2
 800c176:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 0310 	and.w	r3, r3, #16
 800c180:	2b00      	cmp	r3, #0
 800c182:	d010      	beq.n	800c1a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	699a      	ldr	r2, [r3, #24]
 800c188:	4b28      	ldr	r3, [pc, #160]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c18a:	69db      	ldr	r3, [r3, #28]
 800c18c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c190:	429a      	cmp	r2, r3
 800c192:	d208      	bcs.n	800c1a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c194:	4b25      	ldr	r3, [pc, #148]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c196:	69db      	ldr	r3, [r3, #28]
 800c198:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	4922      	ldr	r1, [pc, #136]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f003 0320 	and.w	r3, r3, #32
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d010      	beq.n	800c1d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	69da      	ldr	r2, [r3, #28]
 800c1b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d208      	bcs.n	800c1d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c1c2:	4b1a      	ldr	r3, [pc, #104]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	69db      	ldr	r3, [r3, #28]
 800c1ce:	4917      	ldr	r1, [pc, #92]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c1d4:	f000 f834 	bl	800c240 <HAL_RCC_GetSysClockFreq>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	4b14      	ldr	r3, [pc, #80]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	0a1b      	lsrs	r3, r3, #8
 800c1e0:	f003 030f 	and.w	r3, r3, #15
 800c1e4:	4912      	ldr	r1, [pc, #72]	@ (800c230 <HAL_RCC_ClockConfig+0x35c>)
 800c1e6:	5ccb      	ldrb	r3, [r1, r3]
 800c1e8:	f003 031f 	and.w	r3, r3, #31
 800c1ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c1f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800c22c <HAL_RCC_ClockConfig+0x358>)
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	f003 030f 	and.w	r3, r3, #15
 800c1fa:	4a0d      	ldr	r2, [pc, #52]	@ (800c230 <HAL_RCC_ClockConfig+0x35c>)
 800c1fc:	5cd3      	ldrb	r3, [r2, r3]
 800c1fe:	f003 031f 	and.w	r3, r3, #31
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	fa22 f303 	lsr.w	r3, r2, r3
 800c208:	4a0a      	ldr	r2, [pc, #40]	@ (800c234 <HAL_RCC_ClockConfig+0x360>)
 800c20a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c20c:	4a0a      	ldr	r2, [pc, #40]	@ (800c238 <HAL_RCC_ClockConfig+0x364>)
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c212:	4b0a      	ldr	r3, [pc, #40]	@ (800c23c <HAL_RCC_ClockConfig+0x368>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4618      	mov	r0, r3
 800c218:	f7fa fba2 	bl	8006960 <HAL_InitTick>
 800c21c:	4603      	mov	r3, r0
 800c21e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c220:	7bfb      	ldrb	r3, [r7, #15]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	58024400 	.word	0x58024400
 800c230:	0801635c 	.word	0x0801635c
 800c234:	24000014 	.word	0x24000014
 800c238:	24000010 	.word	0x24000010
 800c23c:	24000018 	.word	0x24000018

0800c240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c240:	b480      	push	{r7}
 800c242:	b089      	sub	sp, #36	@ 0x24
 800c244:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c246:	4bb3      	ldr	r3, [pc, #716]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c24e:	2b18      	cmp	r3, #24
 800c250:	f200 8155 	bhi.w	800c4fe <HAL_RCC_GetSysClockFreq+0x2be>
 800c254:	a201      	add	r2, pc, #4	@ (adr r2, 800c25c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c25a:	bf00      	nop
 800c25c:	0800c2c1 	.word	0x0800c2c1
 800c260:	0800c4ff 	.word	0x0800c4ff
 800c264:	0800c4ff 	.word	0x0800c4ff
 800c268:	0800c4ff 	.word	0x0800c4ff
 800c26c:	0800c4ff 	.word	0x0800c4ff
 800c270:	0800c4ff 	.word	0x0800c4ff
 800c274:	0800c4ff 	.word	0x0800c4ff
 800c278:	0800c4ff 	.word	0x0800c4ff
 800c27c:	0800c2e7 	.word	0x0800c2e7
 800c280:	0800c4ff 	.word	0x0800c4ff
 800c284:	0800c4ff 	.word	0x0800c4ff
 800c288:	0800c4ff 	.word	0x0800c4ff
 800c28c:	0800c4ff 	.word	0x0800c4ff
 800c290:	0800c4ff 	.word	0x0800c4ff
 800c294:	0800c4ff 	.word	0x0800c4ff
 800c298:	0800c4ff 	.word	0x0800c4ff
 800c29c:	0800c2ed 	.word	0x0800c2ed
 800c2a0:	0800c4ff 	.word	0x0800c4ff
 800c2a4:	0800c4ff 	.word	0x0800c4ff
 800c2a8:	0800c4ff 	.word	0x0800c4ff
 800c2ac:	0800c4ff 	.word	0x0800c4ff
 800c2b0:	0800c4ff 	.word	0x0800c4ff
 800c2b4:	0800c4ff 	.word	0x0800c4ff
 800c2b8:	0800c4ff 	.word	0x0800c4ff
 800c2bc:	0800c2f3 	.word	0x0800c2f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2c0:	4b94      	ldr	r3, [pc, #592]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f003 0320 	and.w	r3, r3, #32
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d009      	beq.n	800c2e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2cc:	4b91      	ldr	r3, [pc, #580]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	08db      	lsrs	r3, r3, #3
 800c2d2:	f003 0303 	and.w	r3, r3, #3
 800c2d6:	4a90      	ldr	r2, [pc, #576]	@ (800c518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c2d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c2dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c2de:	e111      	b.n	800c504 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c2e0:	4b8d      	ldr	r3, [pc, #564]	@ (800c518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c2e2:	61bb      	str	r3, [r7, #24]
      break;
 800c2e4:	e10e      	b.n	800c504 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c2e6:	4b8d      	ldr	r3, [pc, #564]	@ (800c51c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c2e8:	61bb      	str	r3, [r7, #24]
      break;
 800c2ea:	e10b      	b.n	800c504 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c2ec:	4b8c      	ldr	r3, [pc, #560]	@ (800c520 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c2ee:	61bb      	str	r3, [r7, #24]
      break;
 800c2f0:	e108      	b.n	800c504 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2f2:	4b88      	ldr	r3, [pc, #544]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2f6:	f003 0303 	and.w	r3, r3, #3
 800c2fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c2fc:	4b85      	ldr	r3, [pc, #532]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c300:	091b      	lsrs	r3, r3, #4
 800c302:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c306:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c308:	4b82      	ldr	r3, [pc, #520]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c30a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c30c:	f003 0301 	and.w	r3, r3, #1
 800c310:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c312:	4b80      	ldr	r3, [pc, #512]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c316:	08db      	lsrs	r3, r3, #3
 800c318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c31c:	68fa      	ldr	r2, [r7, #12]
 800c31e:	fb02 f303 	mul.w	r3, r2, r3
 800c322:	ee07 3a90 	vmov	s15, r3
 800c326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 80e1 	beq.w	800c4f8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	f000 8083 	beq.w	800c444 <HAL_RCC_GetSysClockFreq+0x204>
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2b02      	cmp	r3, #2
 800c342:	f200 80a1 	bhi.w	800c488 <HAL_RCC_GetSysClockFreq+0x248>
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d003      	beq.n	800c354 <HAL_RCC_GetSysClockFreq+0x114>
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d056      	beq.n	800c400 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c352:	e099      	b.n	800c488 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c354:	4b6f      	ldr	r3, [pc, #444]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 0320 	and.w	r3, r3, #32
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d02d      	beq.n	800c3bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c360:	4b6c      	ldr	r3, [pc, #432]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	08db      	lsrs	r3, r3, #3
 800c366:	f003 0303 	and.w	r3, r3, #3
 800c36a:	4a6b      	ldr	r2, [pc, #428]	@ (800c518 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c36c:	fa22 f303 	lsr.w	r3, r2, r3
 800c370:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	ee07 3a90 	vmov	s15, r3
 800c378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	ee07 3a90 	vmov	s15, r3
 800c382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c38a:	4b62      	ldr	r3, [pc, #392]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c38c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c392:	ee07 3a90 	vmov	s15, r3
 800c396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c39a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c39e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c3ba:	e087      	b.n	800c4cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	ee07 3a90 	vmov	s15, r3
 800c3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c528 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ce:	4b51      	ldr	r3, [pc, #324]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c3d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d6:	ee07 3a90 	vmov	s15, r3
 800c3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3de:	ed97 6a02 	vldr	s12, [r7, #8]
 800c3e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c3fe:	e065      	b.n	800c4cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	ee07 3a90 	vmov	s15, r3
 800c406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c40a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c52c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c412:	4b40      	ldr	r3, [pc, #256]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c41a:	ee07 3a90 	vmov	s15, r3
 800c41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c422:	ed97 6a02 	vldr	s12, [r7, #8]
 800c426:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c43e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c442:	e043      	b.n	800c4cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	ee07 3a90 	vmov	s15, r3
 800c44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c44e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c530 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c456:	4b2f      	ldr	r3, [pc, #188]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c45e:	ee07 3a90 	vmov	s15, r3
 800c462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c466:	ed97 6a02 	vldr	s12, [r7, #8]
 800c46a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c46e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c47a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c482:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c486:	e021      	b.n	800c4cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	ee07 3a90 	vmov	s15, r3
 800c48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c492:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c52c <HAL_RCC_GetSysClockFreq+0x2ec>
 800c496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c49a:	4b1e      	ldr	r3, [pc, #120]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c49c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c49e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4a2:	ee07 3a90 	vmov	s15, r3
 800c4a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800c4ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c524 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c4b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c4be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c4ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c4cc:	4b11      	ldr	r3, [pc, #68]	@ (800c514 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c4ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4d0:	0a5b      	lsrs	r3, r3, #9
 800c4d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	ee07 3a90 	vmov	s15, r3
 800c4e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c4e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f0:	ee17 3a90 	vmov	r3, s15
 800c4f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c4f6:	e005      	b.n	800c504 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	61bb      	str	r3, [r7, #24]
      break;
 800c4fc:	e002      	b.n	800c504 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c4fe:	4b07      	ldr	r3, [pc, #28]	@ (800c51c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c500:	61bb      	str	r3, [r7, #24]
      break;
 800c502:	bf00      	nop
  }

  return sysclockfreq;
 800c504:	69bb      	ldr	r3, [r7, #24]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3724      	adds	r7, #36	@ 0x24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	58024400 	.word	0x58024400
 800c518:	03d09000 	.word	0x03d09000
 800c51c:	003d0900 	.word	0x003d0900
 800c520:	017d7840 	.word	0x017d7840
 800c524:	46000000 	.word	0x46000000
 800c528:	4c742400 	.word	0x4c742400
 800c52c:	4a742400 	.word	0x4a742400
 800c530:	4bbebc20 	.word	0x4bbebc20

0800c534 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c538:	b0c6      	sub	sp, #280	@ 0x118
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c540:	2300      	movs	r3, #0
 800c542:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c546:	2300      	movs	r3, #0
 800c548:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c558:	2500      	movs	r5, #0
 800c55a:	ea54 0305 	orrs.w	r3, r4, r5
 800c55e:	d049      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c564:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c566:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c56a:	d02f      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c56c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c570:	d828      	bhi.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c572:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c576:	d01a      	beq.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c578:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c57c:	d822      	bhi.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c586:	d007      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c588:	e01c      	b.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c58a:	4bab      	ldr	r3, [pc, #684]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58e:	4aaa      	ldr	r2, [pc, #680]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c596:	e01a      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c59c:	3308      	adds	r3, #8
 800c59e:	2102      	movs	r1, #2
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f001 f967 	bl	800d874 <RCCEx_PLL2_Config>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c5ac:	e00f      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b2:	3328      	adds	r3, #40	@ 0x28
 800c5b4:	2102      	movs	r1, #2
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f001 fa0e 	bl	800d9d8 <RCCEx_PLL3_Config>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c5c2:	e004      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c5ca:	e000      	b.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c5cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10a      	bne.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c5d6:	4b98      	ldr	r3, [pc, #608]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5e4:	4a94      	ldr	r2, [pc, #592]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c5e6:	430b      	orrs	r3, r1
 800c5e8:	6513      	str	r3, [r2, #80]	@ 0x50
 800c5ea:	e003      	b.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c600:	f04f 0900 	mov.w	r9, #0
 800c604:	ea58 0309 	orrs.w	r3, r8, r9
 800c608:	d047      	beq.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c60e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c610:	2b04      	cmp	r3, #4
 800c612:	d82a      	bhi.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c614:	a201      	add	r2, pc, #4	@ (adr r2, 800c61c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c61a:	bf00      	nop
 800c61c:	0800c631 	.word	0x0800c631
 800c620:	0800c63f 	.word	0x0800c63f
 800c624:	0800c655 	.word	0x0800c655
 800c628:	0800c673 	.word	0x0800c673
 800c62c:	0800c673 	.word	0x0800c673
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c630:	4b81      	ldr	r3, [pc, #516]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c634:	4a80      	ldr	r2, [pc, #512]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c636:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c63a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c63c:	e01a      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c642:	3308      	adds	r3, #8
 800c644:	2100      	movs	r1, #0
 800c646:	4618      	mov	r0, r3
 800c648:	f001 f914 	bl	800d874 <RCCEx_PLL2_Config>
 800c64c:	4603      	mov	r3, r0
 800c64e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c652:	e00f      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c658:	3328      	adds	r3, #40	@ 0x28
 800c65a:	2100      	movs	r1, #0
 800c65c:	4618      	mov	r0, r3
 800c65e:	f001 f9bb 	bl	800d9d8 <RCCEx_PLL3_Config>
 800c662:	4603      	mov	r3, r0
 800c664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c668:	e004      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c66a:	2301      	movs	r3, #1
 800c66c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c670:	e000      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d10a      	bne.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c67c:	4b6e      	ldr	r3, [pc, #440]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c67e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c680:	f023 0107 	bic.w	r1, r3, #7
 800c684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c68a:	4a6b      	ldr	r2, [pc, #428]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c68c:	430b      	orrs	r3, r1
 800c68e:	6513      	str	r3, [r2, #80]	@ 0x50
 800c690:	e003      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c692:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c696:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c6a6:	f04f 0b00 	mov.w	fp, #0
 800c6aa:	ea5a 030b 	orrs.w	r3, sl, fp
 800c6ae:	d05b      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c6b8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c6bc:	d03b      	beq.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c6be:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c6c2:	d834      	bhi.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c6c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c6c8:	d037      	beq.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c6ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c6ce:	d82e      	bhi.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c6d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c6d4:	d033      	beq.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c6d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c6da:	d828      	bhi.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c6dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6e0:	d01a      	beq.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c6e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c6e6:	d822      	bhi.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c6ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6f0:	d007      	beq.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c6f2:	e01c      	b.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6f4:	4b50      	ldr	r3, [pc, #320]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f8:	4a4f      	ldr	r2, [pc, #316]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c6fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c700:	e01e      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c706:	3308      	adds	r3, #8
 800c708:	2100      	movs	r1, #0
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 f8b2 	bl	800d874 <RCCEx_PLL2_Config>
 800c710:	4603      	mov	r3, r0
 800c712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c716:	e013      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c71c:	3328      	adds	r3, #40	@ 0x28
 800c71e:	2100      	movs	r1, #0
 800c720:	4618      	mov	r0, r3
 800c722:	f001 f959 	bl	800d9d8 <RCCEx_PLL3_Config>
 800c726:	4603      	mov	r3, r0
 800c728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c72c:	e008      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c734:	e004      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c736:	bf00      	nop
 800c738:	e002      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c73a:	bf00      	nop
 800c73c:	e000      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c73e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c740:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10b      	bne.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c748:	4b3b      	ldr	r3, [pc, #236]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c74a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c74c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c754:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c758:	4a37      	ldr	r2, [pc, #220]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c75a:	430b      	orrs	r3, r1
 800c75c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c75e:	e003      	b.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c774:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c778:	2300      	movs	r3, #0
 800c77a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c77e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c782:	460b      	mov	r3, r1
 800c784:	4313      	orrs	r3, r2
 800c786:	d05d      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c78c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c790:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c794:	d03b      	beq.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c796:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c79a:	d834      	bhi.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c79c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7a0:	d037      	beq.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c7a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c7a6:	d82e      	bhi.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c7a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c7ac:	d033      	beq.n	800c816 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c7ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c7b2:	d828      	bhi.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c7b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7b8:	d01a      	beq.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c7ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7be:	d822      	bhi.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d003      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c7c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7c8:	d007      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c7ca:	e01c      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d0:	4a19      	ldr	r2, [pc, #100]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c7d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c7d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c7d8:	e01e      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7de:	3308      	adds	r3, #8
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f001 f846 	bl	800d874 <RCCEx_PLL2_Config>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c7ee:	e013      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f4:	3328      	adds	r3, #40	@ 0x28
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f001 f8ed 	bl	800d9d8 <RCCEx_PLL3_Config>
 800c7fe:	4603      	mov	r3, r0
 800c800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c804:	e008      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c806:	2301      	movs	r3, #1
 800c808:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c80c:	e004      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c80e:	bf00      	nop
 800c810:	e002      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c812:	bf00      	nop
 800c814:	e000      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c816:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10d      	bne.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c820:	4b05      	ldr	r3, [pc, #20]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c824:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c82c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c830:	4a01      	ldr	r2, [pc, #4]	@ (800c838 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c832:	430b      	orrs	r3, r1
 800c834:	6593      	str	r3, [r2, #88]	@ 0x58
 800c836:	e005      	b.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c83c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c850:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c854:	2300      	movs	r3, #0
 800c856:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c85a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c85e:	460b      	mov	r3, r1
 800c860:	4313      	orrs	r3, r2
 800c862:	d03a      	beq.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c86a:	2b30      	cmp	r3, #48	@ 0x30
 800c86c:	d01f      	beq.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c86e:	2b30      	cmp	r3, #48	@ 0x30
 800c870:	d819      	bhi.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c872:	2b20      	cmp	r3, #32
 800c874:	d00c      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c876:	2b20      	cmp	r3, #32
 800c878:	d815      	bhi.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d019      	beq.n	800c8b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c87e:	2b10      	cmp	r3, #16
 800c880:	d111      	bne.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c882:	4baa      	ldr	r3, [pc, #680]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c886:	4aa9      	ldr	r2, [pc, #676]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c88c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c88e:	e011      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c894:	3308      	adds	r3, #8
 800c896:	2102      	movs	r1, #2
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 ffeb 	bl	800d874 <RCCEx_PLL2_Config>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c8a4:	e006      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c8ac:	e002      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c8ae:	bf00      	nop
 800c8b0:	e000      	b.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c8b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10a      	bne.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c8bc:	4b9b      	ldr	r3, [pc, #620]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c8be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8ca:	4a98      	ldr	r2, [pc, #608]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c8cc:	430b      	orrs	r3, r1
 800c8ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c8d0:	e003      	b.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c8e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c8f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	d051      	beq.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c900:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c904:	d035      	beq.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c906:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c90a:	d82e      	bhi.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c90c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c910:	d031      	beq.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c912:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c916:	d828      	bhi.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c91c:	d01a      	beq.n	800c954 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c91e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c922:	d822      	bhi.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c924:	2b00      	cmp	r3, #0
 800c926:	d003      	beq.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c92c:	d007      	beq.n	800c93e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c92e:	e01c      	b.n	800c96a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c930:	4b7e      	ldr	r3, [pc, #504]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c934:	4a7d      	ldr	r2, [pc, #500]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c936:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c93a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c93c:	e01c      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c942:	3308      	adds	r3, #8
 800c944:	2100      	movs	r1, #0
 800c946:	4618      	mov	r0, r3
 800c948:	f000 ff94 	bl	800d874 <RCCEx_PLL2_Config>
 800c94c:	4603      	mov	r3, r0
 800c94e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c952:	e011      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c958:	3328      	adds	r3, #40	@ 0x28
 800c95a:	2100      	movs	r1, #0
 800c95c:	4618      	mov	r0, r3
 800c95e:	f001 f83b 	bl	800d9d8 <RCCEx_PLL3_Config>
 800c962:	4603      	mov	r3, r0
 800c964:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c968:	e006      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c96a:	2301      	movs	r3, #1
 800c96c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c970:	e002      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c972:	bf00      	nop
 800c974:	e000      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c976:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10a      	bne.n	800c996 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c980:	4b6a      	ldr	r3, [pc, #424]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c984:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c98c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c98e:	4a67      	ldr	r2, [pc, #412]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c990:	430b      	orrs	r3, r1
 800c992:	6513      	str	r3, [r2, #80]	@ 0x50
 800c994:	e003      	b.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c996:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c99a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c9aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c9b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	d053      	beq.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c9c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c9c8:	d033      	beq.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c9ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c9ce:	d82c      	bhi.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c9d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c9d4:	d02f      	beq.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c9d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c9da:	d826      	bhi.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c9dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c9e0:	d02b      	beq.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c9e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c9e6:	d820      	bhi.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c9e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9ec:	d012      	beq.n	800ca14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c9ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9f2:	d81a      	bhi.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d022      	beq.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c9f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9fc:	d115      	bne.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca02:	3308      	adds	r3, #8
 800ca04:	2101      	movs	r1, #1
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 ff34 	bl	800d874 <RCCEx_PLL2_Config>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ca12:	e015      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca18:	3328      	adds	r3, #40	@ 0x28
 800ca1a:	2101      	movs	r1, #1
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f000 ffdb 	bl	800d9d8 <RCCEx_PLL3_Config>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ca28:	e00a      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca30:	e006      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ca32:	bf00      	nop
 800ca34:	e004      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ca36:	bf00      	nop
 800ca38:	e002      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ca3a:	bf00      	nop
 800ca3c:	e000      	b.n	800ca40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ca3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d10a      	bne.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ca48:	4b38      	ldr	r3, [pc, #224]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ca50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca56:	4a35      	ldr	r2, [pc, #212]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ca5c:	e003      	b.n	800ca66 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ca66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ca72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ca76:	2300      	movs	r3, #0
 800ca78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ca7c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ca80:	460b      	mov	r3, r1
 800ca82:	4313      	orrs	r3, r2
 800ca84:	d058      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ca86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ca8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca92:	d033      	beq.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ca94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca98:	d82c      	bhi.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ca9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca9e:	d02f      	beq.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800caa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caa4:	d826      	bhi.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800caa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800caaa:	d02b      	beq.n	800cb04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800caac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cab0:	d820      	bhi.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cab6:	d012      	beq.n	800cade <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800cab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cabc:	d81a      	bhi.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d022      	beq.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800cac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cac6:	d115      	bne.n	800caf4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cacc:	3308      	adds	r3, #8
 800cace:	2101      	movs	r1, #1
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 fecf 	bl	800d874 <RCCEx_PLL2_Config>
 800cad6:	4603      	mov	r3, r0
 800cad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800cadc:	e015      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae2:	3328      	adds	r3, #40	@ 0x28
 800cae4:	2101      	movs	r1, #1
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 ff76 	bl	800d9d8 <RCCEx_PLL3_Config>
 800caec:	4603      	mov	r3, r0
 800caee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800caf2:	e00a      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cafa:	e006      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cafc:	bf00      	nop
 800cafe:	e004      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb00:	bf00      	nop
 800cb02:	e002      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb04:	bf00      	nop
 800cb06:	e000      	b.n	800cb0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800cb08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10e      	bne.n	800cb30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cb12:	4b06      	ldr	r3, [pc, #24]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800cb22:	4a02      	ldr	r2, [pc, #8]	@ (800cb2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800cb24:	430b      	orrs	r3, r1
 800cb26:	6593      	str	r3, [r2, #88]	@ 0x58
 800cb28:	e006      	b.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800cb2a:	bf00      	nop
 800cb2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb40:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800cb44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cb4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4313      	orrs	r3, r2
 800cb56:	d037      	beq.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800cb58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb62:	d00e      	beq.n	800cb82 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800cb64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb68:	d816      	bhi.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d018      	beq.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800cb6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb72:	d111      	bne.n	800cb98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb74:	4bc4      	ldr	r3, [pc, #784]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb78:	4ac3      	ldr	r2, [pc, #780]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cb80:	e00f      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb86:	3308      	adds	r3, #8
 800cb88:	2101      	movs	r1, #1
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f000 fe72 	bl	800d874 <RCCEx_PLL2_Config>
 800cb90:	4603      	mov	r3, r0
 800cb92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800cb96:	e004      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb9e:	e000      	b.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800cba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cba2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10a      	bne.n	800cbc0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cbaa:	4bb7      	ldr	r3, [pc, #732]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cbac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cbb8:	4ab3      	ldr	r2, [pc, #716]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cbba:	430b      	orrs	r3, r1
 800cbbc:	6513      	str	r3, [r2, #80]	@ 0x50
 800cbbe:	e003      	b.n	800cbc8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800cbd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cbd8:	2300      	movs	r3, #0
 800cbda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cbde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	d039      	beq.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800cbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbee:	2b03      	cmp	r3, #3
 800cbf0:	d81c      	bhi.n	800cc2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800cbf2:	a201      	add	r2, pc, #4	@ (adr r2, 800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800cbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf8:	0800cc35 	.word	0x0800cc35
 800cbfc:	0800cc09 	.word	0x0800cc09
 800cc00:	0800cc17 	.word	0x0800cc17
 800cc04:	0800cc35 	.word	0x0800cc35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc08:	4b9f      	ldr	r3, [pc, #636]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc0c:	4a9e      	ldr	r2, [pc, #632]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cc14:	e00f      	b.n	800cc36 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc1a:	3308      	adds	r3, #8
 800cc1c:	2102      	movs	r1, #2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 fe28 	bl	800d874 <RCCEx_PLL2_Config>
 800cc24:	4603      	mov	r3, r0
 800cc26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800cc2a:	e004      	b.n	800cc36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc32:	e000      	b.n	800cc36 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800cc34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10a      	bne.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800cc3e:	4b92      	ldr	r3, [pc, #584]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc42:	f023 0103 	bic.w	r1, r3, #3
 800cc46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cc4c:	4a8e      	ldr	r2, [pc, #568]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cc4e:	430b      	orrs	r3, r1
 800cc50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800cc52:	e003      	b.n	800cc5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800cc68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cc72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cc76:	460b      	mov	r3, r1
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	f000 8099 	beq.w	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cc7e:	4b83      	ldr	r3, [pc, #524]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a82      	ldr	r2, [pc, #520]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800cc84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cc8a:	f7f9 feb3 	bl	80069f4 <HAL_GetTick>
 800cc8e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc92:	e00b      	b.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc94:	f7f9 feae 	bl	80069f4 <HAL_GetTick>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cc9e:	1ad3      	subs	r3, r2, r3
 800cca0:	2b64      	cmp	r3, #100	@ 0x64
 800cca2:	d903      	bls.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800cca4:	2303      	movs	r3, #3
 800cca6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ccaa:	e005      	b.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ccac:	4b77      	ldr	r3, [pc, #476]	@ (800ce8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d0ed      	beq.n	800cc94 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ccb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d173      	bne.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ccc0:	4b71      	ldr	r3, [pc, #452]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ccc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cccc:	4053      	eors	r3, r2
 800ccce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d015      	beq.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ccd6:	4b6c      	ldr	r3, [pc, #432]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ccde:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cce2:	4b69      	ldr	r3, [pc, #420]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cce6:	4a68      	ldr	r2, [pc, #416]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ccec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ccee:	4b66      	ldr	r3, [pc, #408]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccf2:	4a65      	ldr	r2, [pc, #404]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ccf8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ccfa:	4a63      	ldr	r2, [pc, #396]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ccfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cd00:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd0e:	d118      	bne.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd10:	f7f9 fe70 	bl	80069f4 <HAL_GetTick>
 800cd14:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd18:	e00d      	b.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd1a:	f7f9 fe6b 	bl	80069f4 <HAL_GetTick>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cd24:	1ad2      	subs	r2, r2, r3
 800cd26:	f241 3388 	movw	r3, #5000	@ 0x1388
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d903      	bls.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800cd34:	e005      	b.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd36:	4b54      	ldr	r3, [pc, #336]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd3a:	f003 0302 	and.w	r3, r3, #2
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0eb      	beq.n	800cd1a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800cd42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d129      	bne.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd5a:	d10e      	bne.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800cd5c:	4b4a      	ldr	r3, [pc, #296]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800cd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd6c:	091a      	lsrs	r2, r3, #4
 800cd6e:	4b48      	ldr	r3, [pc, #288]	@ (800ce90 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800cd70:	4013      	ands	r3, r2
 800cd72:	4a45      	ldr	r2, [pc, #276]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd74:	430b      	orrs	r3, r1
 800cd76:	6113      	str	r3, [r2, #16]
 800cd78:	e005      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cd7a:	4b43      	ldr	r3, [pc, #268]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	4a42      	ldr	r2, [pc, #264]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cd84:	6113      	str	r3, [r2, #16]
 800cd86:	4b40      	ldr	r3, [pc, #256]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd88:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cd8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cd92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd96:	4a3c      	ldr	r2, [pc, #240]	@ (800ce88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cd98:	430b      	orrs	r3, r1
 800cd9a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd9c:	e008      	b.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cd9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cda2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800cda6:	e003      	b.n	800cdb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cda8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb8:	f002 0301 	and.w	r3, r2, #1
 800cdbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cdc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800cdca:	460b      	mov	r3, r1
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	f000 808f 	beq.w	800cef0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cdd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdd8:	2b28      	cmp	r3, #40	@ 0x28
 800cdda:	d871      	bhi.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800cddc:	a201      	add	r2, pc, #4	@ (adr r2, 800cde4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800cdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde2:	bf00      	nop
 800cde4:	0800cec9 	.word	0x0800cec9
 800cde8:	0800cec1 	.word	0x0800cec1
 800cdec:	0800cec1 	.word	0x0800cec1
 800cdf0:	0800cec1 	.word	0x0800cec1
 800cdf4:	0800cec1 	.word	0x0800cec1
 800cdf8:	0800cec1 	.word	0x0800cec1
 800cdfc:	0800cec1 	.word	0x0800cec1
 800ce00:	0800cec1 	.word	0x0800cec1
 800ce04:	0800ce95 	.word	0x0800ce95
 800ce08:	0800cec1 	.word	0x0800cec1
 800ce0c:	0800cec1 	.word	0x0800cec1
 800ce10:	0800cec1 	.word	0x0800cec1
 800ce14:	0800cec1 	.word	0x0800cec1
 800ce18:	0800cec1 	.word	0x0800cec1
 800ce1c:	0800cec1 	.word	0x0800cec1
 800ce20:	0800cec1 	.word	0x0800cec1
 800ce24:	0800ceab 	.word	0x0800ceab
 800ce28:	0800cec1 	.word	0x0800cec1
 800ce2c:	0800cec1 	.word	0x0800cec1
 800ce30:	0800cec1 	.word	0x0800cec1
 800ce34:	0800cec1 	.word	0x0800cec1
 800ce38:	0800cec1 	.word	0x0800cec1
 800ce3c:	0800cec1 	.word	0x0800cec1
 800ce40:	0800cec1 	.word	0x0800cec1
 800ce44:	0800cec9 	.word	0x0800cec9
 800ce48:	0800cec1 	.word	0x0800cec1
 800ce4c:	0800cec1 	.word	0x0800cec1
 800ce50:	0800cec1 	.word	0x0800cec1
 800ce54:	0800cec1 	.word	0x0800cec1
 800ce58:	0800cec1 	.word	0x0800cec1
 800ce5c:	0800cec1 	.word	0x0800cec1
 800ce60:	0800cec1 	.word	0x0800cec1
 800ce64:	0800cec9 	.word	0x0800cec9
 800ce68:	0800cec1 	.word	0x0800cec1
 800ce6c:	0800cec1 	.word	0x0800cec1
 800ce70:	0800cec1 	.word	0x0800cec1
 800ce74:	0800cec1 	.word	0x0800cec1
 800ce78:	0800cec1 	.word	0x0800cec1
 800ce7c:	0800cec1 	.word	0x0800cec1
 800ce80:	0800cec1 	.word	0x0800cec1
 800ce84:	0800cec9 	.word	0x0800cec9
 800ce88:	58024400 	.word	0x58024400
 800ce8c:	58024800 	.word	0x58024800
 800ce90:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ce94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce98:	3308      	adds	r3, #8
 800ce9a:	2101      	movs	r1, #1
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 fce9 	bl	800d874 <RCCEx_PLL2_Config>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cea8:	e00f      	b.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ceaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceae:	3328      	adds	r3, #40	@ 0x28
 800ceb0:	2101      	movs	r1, #1
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 fd90 	bl	800d9d8 <RCCEx_PLL3_Config>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cebe:	e004      	b.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cec6:	e000      	b.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800cec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ceca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d10a      	bne.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ced2:	4bbf      	ldr	r3, [pc, #764]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ced4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ced6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800ceda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cede:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cee0:	4abb      	ldr	r2, [pc, #748]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cee2:	430b      	orrs	r3, r1
 800cee4:	6553      	str	r3, [r2, #84]	@ 0x54
 800cee6:	e003      	b.n	800cef0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cee8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ceec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef8:	f002 0302 	and.w	r3, r2, #2
 800cefc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf00:	2300      	movs	r3, #0
 800cf02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	d041      	beq.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf16:	2b05      	cmp	r3, #5
 800cf18:	d824      	bhi.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800cf1a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf20 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800cf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf20:	0800cf6d 	.word	0x0800cf6d
 800cf24:	0800cf39 	.word	0x0800cf39
 800cf28:	0800cf4f 	.word	0x0800cf4f
 800cf2c:	0800cf6d 	.word	0x0800cf6d
 800cf30:	0800cf6d 	.word	0x0800cf6d
 800cf34:	0800cf6d 	.word	0x0800cf6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cf38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf3c:	3308      	adds	r3, #8
 800cf3e:	2101      	movs	r1, #1
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 fc97 	bl	800d874 <RCCEx_PLL2_Config>
 800cf46:	4603      	mov	r3, r0
 800cf48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cf4c:	e00f      	b.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cf4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf52:	3328      	adds	r3, #40	@ 0x28
 800cf54:	2101      	movs	r1, #1
 800cf56:	4618      	mov	r0, r3
 800cf58:	f000 fd3e 	bl	800d9d8 <RCCEx_PLL3_Config>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cf62:	e004      	b.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf6a:	e000      	b.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800cf6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10a      	bne.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cf76:	4b96      	ldr	r3, [pc, #600]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cf78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf7a:	f023 0107 	bic.w	r1, r3, #7
 800cf7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf84:	4a92      	ldr	r2, [pc, #584]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cf86:	430b      	orrs	r3, r1
 800cf88:	6553      	str	r3, [r2, #84]	@ 0x54
 800cf8a:	e003      	b.n	800cf94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f002 0304 	and.w	r3, r2, #4
 800cfa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cfaa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cfae:	460b      	mov	r3, r1
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	d044      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cfb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfbc:	2b05      	cmp	r3, #5
 800cfbe:	d825      	bhi.n	800d00c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800cfc0:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800cfc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc6:	bf00      	nop
 800cfc8:	0800d015 	.word	0x0800d015
 800cfcc:	0800cfe1 	.word	0x0800cfe1
 800cfd0:	0800cff7 	.word	0x0800cff7
 800cfd4:	0800d015 	.word	0x0800d015
 800cfd8:	0800d015 	.word	0x0800d015
 800cfdc:	0800d015 	.word	0x0800d015
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfe4:	3308      	adds	r3, #8
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 fc43 	bl	800d874 <RCCEx_PLL2_Config>
 800cfee:	4603      	mov	r3, r0
 800cff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cff4:	e00f      	b.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cffa:	3328      	adds	r3, #40	@ 0x28
 800cffc:	2101      	movs	r1, #1
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 fcea 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d004:	4603      	mov	r3, r0
 800d006:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d00a:	e004      	b.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d00c:	2301      	movs	r3, #1
 800d00e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d012:	e000      	b.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800d014:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d10b      	bne.n	800d036 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d01e:	4b6c      	ldr	r3, [pc, #432]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d022:	f023 0107 	bic.w	r1, r3, #7
 800d026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d02e:	4a68      	ldr	r2, [pc, #416]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d030:	430b      	orrs	r3, r1
 800d032:	6593      	str	r3, [r2, #88]	@ 0x58
 800d034:	e003      	b.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d03a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	f002 0320 	and.w	r3, r2, #32
 800d04a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d04e:	2300      	movs	r3, #0
 800d050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d054:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d058:	460b      	mov	r3, r1
 800d05a:	4313      	orrs	r3, r2
 800d05c:	d055      	beq.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d066:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d06a:	d033      	beq.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800d06c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d070:	d82c      	bhi.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d076:	d02f      	beq.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800d078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d07c:	d826      	bhi.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d07e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d082:	d02b      	beq.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800d084:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d088:	d820      	bhi.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d08a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d08e:	d012      	beq.n	800d0b6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800d090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d094:	d81a      	bhi.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d096:	2b00      	cmp	r3, #0
 800d098:	d022      	beq.n	800d0e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800d09a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d09e:	d115      	bne.n	800d0cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	2100      	movs	r1, #0
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 fbe3 	bl	800d874 <RCCEx_PLL2_Config>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d0b4:	e015      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ba:	3328      	adds	r3, #40	@ 0x28
 800d0bc:	2102      	movs	r1, #2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 fc8a 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d0ca:	e00a      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d0d2:	e006      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d0d4:	bf00      	nop
 800d0d6:	e004      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d0d8:	bf00      	nop
 800d0da:	e002      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d0dc:	bf00      	nop
 800d0de:	e000      	b.n	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800d0e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d10b      	bne.n	800d102 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d0ea:	4b39      	ldr	r3, [pc, #228]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0fa:	4a35      	ldr	r2, [pc, #212]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d0fc:	430b      	orrs	r3, r1
 800d0fe:	6553      	str	r3, [r2, #84]	@ 0x54
 800d100:	e003      	b.n	800d10a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d102:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d106:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d116:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d11a:	2300      	movs	r3, #0
 800d11c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d120:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d124:	460b      	mov	r3, r1
 800d126:	4313      	orrs	r3, r2
 800d128:	d058      	beq.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d12e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d132:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d136:	d033      	beq.n	800d1a0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800d138:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d13c:	d82c      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d13e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d142:	d02f      	beq.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800d144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d148:	d826      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d14a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d14e:	d02b      	beq.n	800d1a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800d150:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d154:	d820      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d156:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d15a:	d012      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800d15c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d160:	d81a      	bhi.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800d162:	2b00      	cmp	r3, #0
 800d164:	d022      	beq.n	800d1ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800d166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d16a:	d115      	bne.n	800d198 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d170:	3308      	adds	r3, #8
 800d172:	2100      	movs	r1, #0
 800d174:	4618      	mov	r0, r3
 800d176:	f000 fb7d 	bl	800d874 <RCCEx_PLL2_Config>
 800d17a:	4603      	mov	r3, r0
 800d17c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d180:	e015      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d186:	3328      	adds	r3, #40	@ 0x28
 800d188:	2102      	movs	r1, #2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f000 fc24 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d190:	4603      	mov	r3, r0
 800d192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d196:	e00a      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d19e:	e006      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d1a0:	bf00      	nop
 800d1a2:	e004      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d1a4:	bf00      	nop
 800d1a6:	e002      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d1a8:	bf00      	nop
 800d1aa:	e000      	b.n	800d1ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800d1ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10e      	bne.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d1b6:	4b06      	ldr	r3, [pc, #24]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d1b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d1ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d1c6:	4a02      	ldr	r2, [pc, #8]	@ (800d1d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800d1c8:	430b      	orrs	r3, r1
 800d1ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800d1cc:	e006      	b.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800d1ce:	bf00      	nop
 800d1d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d1e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d1f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	d055      	beq.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800d1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d200:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d204:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d208:	d033      	beq.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800d20a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800d20e:	d82c      	bhi.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d214:	d02f      	beq.n	800d276 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800d216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d21a:	d826      	bhi.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d21c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d220:	d02b      	beq.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800d222:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800d226:	d820      	bhi.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d228:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d22c:	d012      	beq.n	800d254 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800d22e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d232:	d81a      	bhi.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800d234:	2b00      	cmp	r3, #0
 800d236:	d022      	beq.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800d238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d23c:	d115      	bne.n	800d26a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d242:	3308      	adds	r3, #8
 800d244:	2100      	movs	r1, #0
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fb14 	bl	800d874 <RCCEx_PLL2_Config>
 800d24c:	4603      	mov	r3, r0
 800d24e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d252:	e015      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d258:	3328      	adds	r3, #40	@ 0x28
 800d25a:	2102      	movs	r1, #2
 800d25c:	4618      	mov	r0, r3
 800d25e:	f000 fbbb 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d262:	4603      	mov	r3, r0
 800d264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d268:	e00a      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d270:	e006      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d272:	bf00      	nop
 800d274:	e004      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d276:	bf00      	nop
 800d278:	e002      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d27a:	bf00      	nop
 800d27c:	e000      	b.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d27e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d284:	2b00      	cmp	r3, #0
 800d286:	d10b      	bne.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d288:	4ba0      	ldr	r3, [pc, #640]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d28a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d28c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d294:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d298:	4a9c      	ldr	r2, [pc, #624]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d29a:	430b      	orrs	r3, r1
 800d29c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d29e:	e003      	b.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2b0:	f002 0308 	and.w	r3, r2, #8
 800d2b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d2be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	d01e      	beq.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800d2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d2d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2d4:	d10c      	bne.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2da:	3328      	adds	r3, #40	@ 0x28
 800d2dc:	2102      	movs	r1, #2
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 fb7a 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d2f0:	4b86      	ldr	r3, [pc, #536]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d2f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d300:	4a82      	ldr	r2, [pc, #520]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d302:	430b      	orrs	r3, r1
 800d304:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30e:	f002 0310 	and.w	r3, r2, #16
 800d312:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d316:	2300      	movs	r3, #0
 800d318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d31c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d320:	460b      	mov	r3, r1
 800d322:	4313      	orrs	r3, r2
 800d324:	d01e      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d32a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d32e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d332:	d10c      	bne.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d338:	3328      	adds	r3, #40	@ 0x28
 800d33a:	2102      	movs	r1, #2
 800d33c:	4618      	mov	r0, r3
 800d33e:	f000 fb4b 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d002      	beq.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d34e:	4b6f      	ldr	r3, [pc, #444]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d352:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d35a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d35e:	4a6b      	ldr	r2, [pc, #428]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d360:	430b      	orrs	r3, r1
 800d362:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d370:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d372:	2300      	movs	r3, #0
 800d374:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d376:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d37a:	460b      	mov	r3, r1
 800d37c:	4313      	orrs	r3, r2
 800d37e:	d03e      	beq.n	800d3fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d38c:	d022      	beq.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d38e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d392:	d81b      	bhi.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800d394:	2b00      	cmp	r3, #0
 800d396:	d003      	beq.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800d398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d39c:	d00b      	beq.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800d39e:	e015      	b.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3a4:	3308      	adds	r3, #8
 800d3a6:	2100      	movs	r1, #0
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 fa63 	bl	800d874 <RCCEx_PLL2_Config>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d3b4:	e00f      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ba:	3328      	adds	r3, #40	@ 0x28
 800d3bc:	2102      	movs	r1, #2
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f000 fb0a 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d3ca:	e004      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d3d2:	e000      	b.n	800d3d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800d3d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10b      	bne.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d3de:	4b4b      	ldr	r3, [pc, #300]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d3e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d3ee:	4a47      	ldr	r2, [pc, #284]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d3f0:	430b      	orrs	r3, r1
 800d3f2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d3f4:	e003      	b.n	800d3fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d40a:	673b      	str	r3, [r7, #112]	@ 0x70
 800d40c:	2300      	movs	r3, #0
 800d40e:	677b      	str	r3, [r7, #116]	@ 0x74
 800d410:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d414:	460b      	mov	r3, r1
 800d416:	4313      	orrs	r3, r2
 800d418:	d03b      	beq.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d41e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d422:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d426:	d01f      	beq.n	800d468 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d428:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d42c:	d818      	bhi.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d42e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d432:	d003      	beq.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d434:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d438:	d007      	beq.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d43a:	e011      	b.n	800d460 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d43c:	4b33      	ldr	r3, [pc, #204]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d440:	4a32      	ldr	r2, [pc, #200]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d448:	e00f      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d44e:	3328      	adds	r3, #40	@ 0x28
 800d450:	2101      	movs	r1, #1
 800d452:	4618      	mov	r0, r3
 800d454:	f000 fac0 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d458:	4603      	mov	r3, r0
 800d45a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d45e:	e004      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d466:	e000      	b.n	800d46a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d46a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d10b      	bne.n	800d48a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d472:	4b26      	ldr	r3, [pc, #152]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d476:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d47e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d482:	4a22      	ldr	r2, [pc, #136]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d484:	430b      	orrs	r3, r1
 800d486:	6553      	str	r3, [r2, #84]	@ 0x54
 800d488:	e003      	b.n	800d492 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d48a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d48e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d49e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d4a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	d034      	beq.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d003      	beq.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d4b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4bc:	d007      	beq.n	800d4ce <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d4be:	e011      	b.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4c0:	4b12      	ldr	r3, [pc, #72]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c4:	4a11      	ldr	r2, [pc, #68]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d4c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d4ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d4cc:	e00e      	b.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4d2:	3308      	adds	r3, #8
 800d4d4:	2102      	movs	r1, #2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 f9cc 	bl	800d874 <RCCEx_PLL2_Config>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d4e2:	e003      	b.n	800d4ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d4ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d10d      	bne.n	800d510 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d4f4:	4b05      	ldr	r3, [pc, #20]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d4f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d502:	4a02      	ldr	r2, [pc, #8]	@ (800d50c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d504:	430b      	orrs	r3, r1
 800d506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d508:	e006      	b.n	800d518 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d50a:	bf00      	nop
 800d50c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d514:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d520:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d524:	663b      	str	r3, [r7, #96]	@ 0x60
 800d526:	2300      	movs	r3, #0
 800d528:	667b      	str	r3, [r7, #100]	@ 0x64
 800d52a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d52e:	460b      	mov	r3, r1
 800d530:	4313      	orrs	r3, r2
 800d532:	d00c      	beq.n	800d54e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d538:	3328      	adds	r3, #40	@ 0x28
 800d53a:	2102      	movs	r1, #2
 800d53c:	4618      	mov	r0, r3
 800d53e:	f000 fa4b 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d54e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d556:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d55a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d55c:	2300      	movs	r3, #0
 800d55e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d560:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d564:	460b      	mov	r3, r1
 800d566:	4313      	orrs	r3, r2
 800d568:	d036      	beq.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d56e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d570:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d574:	d018      	beq.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d57a:	d811      	bhi.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d57c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d580:	d014      	beq.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d582:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d586:	d80b      	bhi.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d011      	beq.n	800d5b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d58c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d590:	d106      	bne.n	800d5a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d592:	4bb7      	ldr	r3, [pc, #732]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d596:	4ab6      	ldr	r2, [pc, #728]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d59c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d59e:	e008      	b.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d5a6:	e004      	b.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d5a8:	bf00      	nop
 800d5aa:	e002      	b.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d5ac:	bf00      	nop
 800d5ae:	e000      	b.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d5b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d10a      	bne.n	800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d5ba:	4bad      	ldr	r3, [pc, #692]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d5bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d5c8:	4aa9      	ldr	r2, [pc, #676]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d5ca:	430b      	orrs	r3, r1
 800d5cc:	6553      	str	r3, [r2, #84]	@ 0x54
 800d5ce:	e003      	b.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d5e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d5ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	d009      	beq.n	800d608 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d5f4:	4b9e      	ldr	r3, [pc, #632]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d5f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d602:	4a9b      	ldr	r2, [pc, #620]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d604:	430b      	orrs	r3, r1
 800d606:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d610:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d614:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d616:	2300      	movs	r3, #0
 800d618:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d61a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d61e:	460b      	mov	r3, r1
 800d620:	4313      	orrs	r3, r2
 800d622:	d009      	beq.n	800d638 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d624:	4b92      	ldr	r3, [pc, #584]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d628:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d632:	4a8f      	ldr	r2, [pc, #572]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d634:	430b      	orrs	r3, r1
 800d636:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d640:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d644:	643b      	str	r3, [r7, #64]	@ 0x40
 800d646:	2300      	movs	r3, #0
 800d648:	647b      	str	r3, [r7, #68]	@ 0x44
 800d64a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d64e:	460b      	mov	r3, r1
 800d650:	4313      	orrs	r3, r2
 800d652:	d00e      	beq.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d654:	4b86      	ldr	r3, [pc, #536]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	4a85      	ldr	r2, [pc, #532]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d65a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d65e:	6113      	str	r3, [r2, #16]
 800d660:	4b83      	ldr	r3, [pc, #524]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d662:	6919      	ldr	r1, [r3, #16]
 800d664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d668:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d66c:	4a80      	ldr	r2, [pc, #512]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d66e:	430b      	orrs	r3, r1
 800d670:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d67e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d680:	2300      	movs	r3, #0
 800d682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d684:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d688:	460b      	mov	r3, r1
 800d68a:	4313      	orrs	r3, r2
 800d68c:	d009      	beq.n	800d6a2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d68e:	4b78      	ldr	r3, [pc, #480]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d692:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d69a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d69c:	4a74      	ldr	r2, [pc, #464]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d69e:	430b      	orrs	r3, r1
 800d6a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6aa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d6ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	d00a      	beq.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d6be:	4b6c      	ldr	r3, [pc, #432]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6c2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6ce:	4a68      	ldr	r2, [pc, #416]	@ (800d870 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d6d0:	430b      	orrs	r3, r1
 800d6d2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6dc:	2100      	movs	r1, #0
 800d6de:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d6e0:	f003 0301 	and.w	r3, r3, #1
 800d6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	d011      	beq.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f000 f8bb 	bl	800d874 <RCCEx_PLL2_Config>
 800d6fe:	4603      	mov	r3, r0
 800d700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d003      	beq.n	800d714 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d70c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71c:	2100      	movs	r1, #0
 800d71e:	6239      	str	r1, [r7, #32]
 800d720:	f003 0302 	and.w	r3, r3, #2
 800d724:	627b      	str	r3, [r7, #36]	@ 0x24
 800d726:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d72a:	460b      	mov	r3, r1
 800d72c:	4313      	orrs	r3, r2
 800d72e:	d011      	beq.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d734:	3308      	adds	r3, #8
 800d736:	2101      	movs	r1, #1
 800d738:	4618      	mov	r0, r3
 800d73a:	f000 f89b 	bl	800d874 <RCCEx_PLL2_Config>
 800d73e:	4603      	mov	r3, r0
 800d740:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d003      	beq.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d74c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d750:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	2100      	movs	r1, #0
 800d75e:	61b9      	str	r1, [r7, #24]
 800d760:	f003 0304 	and.w	r3, r3, #4
 800d764:	61fb      	str	r3, [r7, #28]
 800d766:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d76a:	460b      	mov	r3, r1
 800d76c:	4313      	orrs	r3, r2
 800d76e:	d011      	beq.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d774:	3308      	adds	r3, #8
 800d776:	2102      	movs	r1, #2
 800d778:	4618      	mov	r0, r3
 800d77a:	f000 f87b 	bl	800d874 <RCCEx_PLL2_Config>
 800d77e:	4603      	mov	r3, r0
 800d780:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d784:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d003      	beq.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d78c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d790:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79c:	2100      	movs	r1, #0
 800d79e:	6139      	str	r1, [r7, #16]
 800d7a0:	f003 0308 	and.w	r3, r3, #8
 800d7a4:	617b      	str	r3, [r7, #20]
 800d7a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	d011      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7b4:	3328      	adds	r3, #40	@ 0x28
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 f90d 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d7c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d003      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d7d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	2100      	movs	r1, #0
 800d7de:	60b9      	str	r1, [r7, #8]
 800d7e0:	f003 0310 	and.w	r3, r3, #16
 800d7e4:	60fb      	str	r3, [r7, #12]
 800d7e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	d011      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7f4:	3328      	adds	r3, #40	@ 0x28
 800d7f6:	2101      	movs	r1, #1
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f000 f8ed 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d7fe:	4603      	mov	r3, r0
 800d800:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d804:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d003      	beq.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d80c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	2100      	movs	r1, #0
 800d81e:	6039      	str	r1, [r7, #0]
 800d820:	f003 0320 	and.w	r3, r3, #32
 800d824:	607b      	str	r3, [r7, #4]
 800d826:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d82a:	460b      	mov	r3, r1
 800d82c:	4313      	orrs	r3, r2
 800d82e:	d011      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d834:	3328      	adds	r3, #40	@ 0x28
 800d836:	2102      	movs	r1, #2
 800d838:	4618      	mov	r0, r3
 800d83a:	f000 f8cd 	bl	800d9d8 <RCCEx_PLL3_Config>
 800d83e:	4603      	mov	r3, r0
 800d840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d844:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d003      	beq.n	800d854 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d84c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d850:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d854:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d101      	bne.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d85c:	2300      	movs	r3, #0
 800d85e:	e000      	b.n	800d862 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d860:	2301      	movs	r3, #1
}
 800d862:	4618      	mov	r0, r3
 800d864:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d868:	46bd      	mov	sp, r7
 800d86a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d86e:	bf00      	nop
 800d870:	58024400 	.word	0x58024400

0800d874 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d882:	4b53      	ldr	r3, [pc, #332]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d886:	f003 0303 	and.w	r3, r3, #3
 800d88a:	2b03      	cmp	r3, #3
 800d88c:	d101      	bne.n	800d892 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d88e:	2301      	movs	r3, #1
 800d890:	e099      	b.n	800d9c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d892:	4b4f      	ldr	r3, [pc, #316]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a4e      	ldr	r2, [pc, #312]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d898:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d89c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d89e:	f7f9 f8a9 	bl	80069f4 <HAL_GetTick>
 800d8a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8a4:	e008      	b.n	800d8b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d8a6:	f7f9 f8a5 	bl	80069f4 <HAL_GetTick>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d901      	bls.n	800d8b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	e086      	b.n	800d9c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d8b8:	4b45      	ldr	r3, [pc, #276]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1f0      	bne.n	800d8a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d8c4:	4b42      	ldr	r3, [pc, #264]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	031b      	lsls	r3, r3, #12
 800d8d2:	493f      	ldr	r1, [pc, #252]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	628b      	str	r3, [r1, #40]	@ 0x28
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	025b      	lsls	r3, r3, #9
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	431a      	orrs	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	3b01      	subs	r3, #1
 800d8f4:	041b      	lsls	r3, r3, #16
 800d8f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d8fa:	431a      	orrs	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	3b01      	subs	r3, #1
 800d902:	061b      	lsls	r3, r3, #24
 800d904:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d908:	4931      	ldr	r1, [pc, #196]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d90a:	4313      	orrs	r3, r2
 800d90c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d90e:	4b30      	ldr	r3, [pc, #192]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d912:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	695b      	ldr	r3, [r3, #20]
 800d91a:	492d      	ldr	r1, [pc, #180]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d91c:	4313      	orrs	r3, r2
 800d91e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d920:	4b2b      	ldr	r3, [pc, #172]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d924:	f023 0220 	bic.w	r2, r3, #32
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	699b      	ldr	r3, [r3, #24]
 800d92c:	4928      	ldr	r1, [pc, #160]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d92e:	4313      	orrs	r3, r2
 800d930:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d932:	4b27      	ldr	r3, [pc, #156]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d936:	4a26      	ldr	r2, [pc, #152]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d938:	f023 0310 	bic.w	r3, r3, #16
 800d93c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d93e:	4b24      	ldr	r3, [pc, #144]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d942:	4b24      	ldr	r3, [pc, #144]	@ (800d9d4 <RCCEx_PLL2_Config+0x160>)
 800d944:	4013      	ands	r3, r2
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	69d2      	ldr	r2, [r2, #28]
 800d94a:	00d2      	lsls	r2, r2, #3
 800d94c:	4920      	ldr	r1, [pc, #128]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d94e:	4313      	orrs	r3, r2
 800d950:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d952:	4b1f      	ldr	r3, [pc, #124]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d956:	4a1e      	ldr	r2, [pc, #120]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d958:	f043 0310 	orr.w	r3, r3, #16
 800d95c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d106      	bne.n	800d972 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d964:	4b1a      	ldr	r3, [pc, #104]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d968:	4a19      	ldr	r2, [pc, #100]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d96a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d96e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d970:	e00f      	b.n	800d992 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d106      	bne.n	800d986 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d978:	4b15      	ldr	r3, [pc, #84]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d97c:	4a14      	ldr	r2, [pc, #80]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d97e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d982:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d984:	e005      	b.n	800d992 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d986:	4b12      	ldr	r3, [pc, #72]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d98a:	4a11      	ldr	r2, [pc, #68]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d98c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d990:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d992:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a0e      	ldr	r2, [pc, #56]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d998:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d99c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d99e:	f7f9 f829 	bl	80069f4 <HAL_GetTick>
 800d9a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9a4:	e008      	b.n	800d9b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d9a6:	f7f9 f825 	bl	80069f4 <HAL_GetTick>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	1ad3      	subs	r3, r2, r3
 800d9b0:	2b02      	cmp	r3, #2
 800d9b2:	d901      	bls.n	800d9b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9b4:	2303      	movs	r3, #3
 800d9b6:	e006      	b.n	800d9c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d9b8:	4b05      	ldr	r3, [pc, #20]	@ (800d9d0 <RCCEx_PLL2_Config+0x15c>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d0f0      	beq.n	800d9a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3710      	adds	r7, #16
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	58024400 	.word	0x58024400
 800d9d4:	ffff0007 	.word	0xffff0007

0800d9d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d9e6:	4b53      	ldr	r3, [pc, #332]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800d9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ea:	f003 0303 	and.w	r3, r3, #3
 800d9ee:	2b03      	cmp	r3, #3
 800d9f0:	d101      	bne.n	800d9f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e099      	b.n	800db2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d9f6:	4b4f      	ldr	r3, [pc, #316]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a4e      	ldr	r2, [pc, #312]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800d9fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da02:	f7f8 fff7 	bl	80069f4 <HAL_GetTick>
 800da06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da08:	e008      	b.n	800da1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da0a:	f7f8 fff3 	bl	80069f4 <HAL_GetTick>
 800da0e:	4602      	mov	r2, r0
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	2b02      	cmp	r3, #2
 800da16:	d901      	bls.n	800da1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800da18:	2303      	movs	r3, #3
 800da1a:	e086      	b.n	800db2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800da1c:	4b45      	ldr	r3, [pc, #276]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1f0      	bne.n	800da0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800da28:	4b42      	ldr	r3, [pc, #264]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	051b      	lsls	r3, r3, #20
 800da36:	493f      	ldr	r1, [pc, #252]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da38:	4313      	orrs	r3, r2
 800da3a:	628b      	str	r3, [r1, #40]	@ 0x28
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	3b01      	subs	r3, #1
 800da42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	3b01      	subs	r3, #1
 800da4c:	025b      	lsls	r3, r3, #9
 800da4e:	b29b      	uxth	r3, r3
 800da50:	431a      	orrs	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	3b01      	subs	r3, #1
 800da58:	041b      	lsls	r3, r3, #16
 800da5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800da5e:	431a      	orrs	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	3b01      	subs	r3, #1
 800da66:	061b      	lsls	r3, r3, #24
 800da68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800da6c:	4931      	ldr	r1, [pc, #196]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da6e:	4313      	orrs	r3, r2
 800da70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800da72:	4b30      	ldr	r3, [pc, #192]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	695b      	ldr	r3, [r3, #20]
 800da7e:	492d      	ldr	r1, [pc, #180]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da80:	4313      	orrs	r3, r2
 800da82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800da84:	4b2b      	ldr	r3, [pc, #172]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	699b      	ldr	r3, [r3, #24]
 800da90:	4928      	ldr	r1, [pc, #160]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da92:	4313      	orrs	r3, r2
 800da94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800da96:	4b27      	ldr	r3, [pc, #156]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da9a:	4a26      	ldr	r2, [pc, #152]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800da9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800daa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800daa2:	4b24      	ldr	r3, [pc, #144]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800daa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800daa6:	4b24      	ldr	r3, [pc, #144]	@ (800db38 <RCCEx_PLL3_Config+0x160>)
 800daa8:	4013      	ands	r3, r2
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	69d2      	ldr	r2, [r2, #28]
 800daae:	00d2      	lsls	r2, r2, #3
 800dab0:	4920      	ldr	r1, [pc, #128]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800dab2:	4313      	orrs	r3, r2
 800dab4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dab6:	4b1f      	ldr	r3, [pc, #124]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800dab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daba:	4a1e      	ldr	r2, [pc, #120]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800dabc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d106      	bne.n	800dad6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dac8:	4b1a      	ldr	r3, [pc, #104]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800daca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dacc:	4a19      	ldr	r2, [pc, #100]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800dace:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dad2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dad4:	e00f      	b.n	800daf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d106      	bne.n	800daea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dadc:	4b15      	ldr	r3, [pc, #84]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800dade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae0:	4a14      	ldr	r2, [pc, #80]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800dae2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dae8:	e005      	b.n	800daf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800daea:	4b12      	ldr	r3, [pc, #72]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800daec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daee:	4a11      	ldr	r2, [pc, #68]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800daf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800daf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800daf6:	4b0f      	ldr	r3, [pc, #60]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a0e      	ldr	r2, [pc, #56]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800dafc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800db00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db02:	f7f8 ff77 	bl	80069f4 <HAL_GetTick>
 800db06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db08:	e008      	b.n	800db1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800db0a:	f7f8 ff73 	bl	80069f4 <HAL_GetTick>
 800db0e:	4602      	mov	r2, r0
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	2b02      	cmp	r3, #2
 800db16:	d901      	bls.n	800db1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800db18:	2303      	movs	r3, #3
 800db1a:	e006      	b.n	800db2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800db1c:	4b05      	ldr	r3, [pc, #20]	@ (800db34 <RCCEx_PLL3_Config+0x15c>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800db24:	2b00      	cmp	r3, #0
 800db26:	d0f0      	beq.n	800db0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800db28:	7bfb      	ldrb	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	58024400 	.word	0x58024400
 800db38:	ffff0007 	.word	0xffff0007

0800db3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d101      	bne.n	800db4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800db4a:	2301      	movs	r3, #1
 800db4c:	e049      	b.n	800dbe2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db54:	b2db      	uxtb	r3, r3
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7f8 f9cc 	bl	8005f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2202      	movs	r2, #2
 800db6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	3304      	adds	r3, #4
 800db78:	4619      	mov	r1, r3
 800db7a:	4610      	mov	r0, r2
 800db7c:	f001 f9a6 	bl	800eecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2201      	movs	r2, #1
 800db84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2201      	movs	r2, #1
 800db9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2201      	movs	r2, #1
 800dba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2201      	movs	r2, #1
 800dbac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2201      	movs	r2, #1
 800dbc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
	...

0800dbec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b085      	sub	sp, #20
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d001      	beq.n	800dc04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800dc00:	2301      	movs	r3, #1
 800dc02:	e056      	b.n	800dcb2 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2202      	movs	r2, #2
 800dc08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4a2b      	ldr	r2, [pc, #172]	@ (800dcc0 <HAL_TIM_Base_Start+0xd4>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d02c      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc1e:	d027      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a27      	ldr	r2, [pc, #156]	@ (800dcc4 <HAL_TIM_Base_Start+0xd8>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d022      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4a26      	ldr	r2, [pc, #152]	@ (800dcc8 <HAL_TIM_Base_Start+0xdc>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d01d      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a24      	ldr	r2, [pc, #144]	@ (800dccc <HAL_TIM_Base_Start+0xe0>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d018      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	4a23      	ldr	r2, [pc, #140]	@ (800dcd0 <HAL_TIM_Base_Start+0xe4>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d013      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a21      	ldr	r2, [pc, #132]	@ (800dcd4 <HAL_TIM_Base_Start+0xe8>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d00e      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a20      	ldr	r2, [pc, #128]	@ (800dcd8 <HAL_TIM_Base_Start+0xec>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d009      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4a1e      	ldr	r2, [pc, #120]	@ (800dcdc <HAL_TIM_Base_Start+0xf0>)
 800dc62:	4293      	cmp	r3, r2
 800dc64:	d004      	beq.n	800dc70 <HAL_TIM_Base_Start+0x84>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4a1d      	ldr	r2, [pc, #116]	@ (800dce0 <HAL_TIM_Base_Start+0xf4>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d115      	bne.n	800dc9c <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	689a      	ldr	r2, [r3, #8]
 800dc76:	4b1b      	ldr	r3, [pc, #108]	@ (800dce4 <HAL_TIM_Base_Start+0xf8>)
 800dc78:	4013      	ands	r3, r2
 800dc7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2b06      	cmp	r3, #6
 800dc80:	d015      	beq.n	800dcae <HAL_TIM_Base_Start+0xc2>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc88:	d011      	beq.n	800dcae <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f042 0201 	orr.w	r2, r2, #1
 800dc98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc9a:	e008      	b.n	800dcae <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f042 0201 	orr.w	r2, r2, #1
 800dcaa:	601a      	str	r2, [r3, #0]
 800dcac:	e000      	b.n	800dcb0 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3714      	adds	r7, #20
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	40010000 	.word	0x40010000
 800dcc4:	40000400 	.word	0x40000400
 800dcc8:	40000800 	.word	0x40000800
 800dccc:	40000c00 	.word	0x40000c00
 800dcd0:	40010400 	.word	0x40010400
 800dcd4:	40001800 	.word	0x40001800
 800dcd8:	40014000 	.word	0x40014000
 800dcdc:	4000e000 	.word	0x4000e000
 800dce0:	4000e400 	.word	0x4000e400
 800dce4:	00010007 	.word	0x00010007

0800dce8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6a1a      	ldr	r2, [r3, #32]
 800dcf6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10f      	bne.n	800dd20 <HAL_TIM_Base_Stop+0x38>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	6a1a      	ldr	r2, [r3, #32]
 800dd06:	f240 4344 	movw	r3, #1092	@ 0x444
 800dd0a:	4013      	ands	r3, r2
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d107      	bne.n	800dd20 <HAL_TIM_Base_Stop+0x38>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f022 0201 	bic.w	r2, r2, #1
 800dd1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2201      	movs	r2, #1
 800dd24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	370c      	adds	r7, #12
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd34:	4770      	bx	lr

0800dd36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dd44:	2301      	movs	r3, #1
 800dd46:	e049      	b.n	800dddc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d106      	bne.n	800dd62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f000 f841 	bl	800dde4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2202      	movs	r2, #2
 800dd66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	3304      	adds	r3, #4
 800dd72:	4619      	mov	r1, r3
 800dd74:	4610      	mov	r0, r2
 800dd76:	f001 f8a9 	bl	800eecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2201      	movs	r2, #1
 800dd86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2201      	movs	r2, #1
 800dd96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2201      	movs	r2, #1
 800ddae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d109      	bne.n	800de1c <HAL_TIM_PWM_Start+0x24>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	2b01      	cmp	r3, #1
 800de12:	bf14      	ite	ne
 800de14:	2301      	movne	r3, #1
 800de16:	2300      	moveq	r3, #0
 800de18:	b2db      	uxtb	r3, r3
 800de1a:	e03c      	b.n	800de96 <HAL_TIM_PWM_Start+0x9e>
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	2b04      	cmp	r3, #4
 800de20:	d109      	bne.n	800de36 <HAL_TIM_PWM_Start+0x3e>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	bf14      	ite	ne
 800de2e:	2301      	movne	r3, #1
 800de30:	2300      	moveq	r3, #0
 800de32:	b2db      	uxtb	r3, r3
 800de34:	e02f      	b.n	800de96 <HAL_TIM_PWM_Start+0x9e>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	2b08      	cmp	r3, #8
 800de3a:	d109      	bne.n	800de50 <HAL_TIM_PWM_Start+0x58>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de42:	b2db      	uxtb	r3, r3
 800de44:	2b01      	cmp	r3, #1
 800de46:	bf14      	ite	ne
 800de48:	2301      	movne	r3, #1
 800de4a:	2300      	moveq	r3, #0
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	e022      	b.n	800de96 <HAL_TIM_PWM_Start+0x9e>
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	2b0c      	cmp	r3, #12
 800de54:	d109      	bne.n	800de6a <HAL_TIM_PWM_Start+0x72>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b01      	cmp	r3, #1
 800de60:	bf14      	ite	ne
 800de62:	2301      	movne	r3, #1
 800de64:	2300      	moveq	r3, #0
 800de66:	b2db      	uxtb	r3, r3
 800de68:	e015      	b.n	800de96 <HAL_TIM_PWM_Start+0x9e>
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	2b10      	cmp	r3, #16
 800de6e:	d109      	bne.n	800de84 <HAL_TIM_PWM_Start+0x8c>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de76:	b2db      	uxtb	r3, r3
 800de78:	2b01      	cmp	r3, #1
 800de7a:	bf14      	ite	ne
 800de7c:	2301      	movne	r3, #1
 800de7e:	2300      	moveq	r3, #0
 800de80:	b2db      	uxtb	r3, r3
 800de82:	e008      	b.n	800de96 <HAL_TIM_PWM_Start+0x9e>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	bf14      	ite	ne
 800de90:	2301      	movne	r3, #1
 800de92:	2300      	moveq	r3, #0
 800de94:	b2db      	uxtb	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	d001      	beq.n	800de9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	e0ab      	b.n	800dff6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d104      	bne.n	800deae <HAL_TIM_PWM_Start+0xb6>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2202      	movs	r2, #2
 800dea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800deac:	e023      	b.n	800def6 <HAL_TIM_PWM_Start+0xfe>
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	2b04      	cmp	r3, #4
 800deb2:	d104      	bne.n	800debe <HAL_TIM_PWM_Start+0xc6>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2202      	movs	r2, #2
 800deb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800debc:	e01b      	b.n	800def6 <HAL_TIM_PWM_Start+0xfe>
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	2b08      	cmp	r3, #8
 800dec2:	d104      	bne.n	800dece <HAL_TIM_PWM_Start+0xd6>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2202      	movs	r2, #2
 800dec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800decc:	e013      	b.n	800def6 <HAL_TIM_PWM_Start+0xfe>
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	2b0c      	cmp	r3, #12
 800ded2:	d104      	bne.n	800dede <HAL_TIM_PWM_Start+0xe6>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2202      	movs	r2, #2
 800ded8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dedc:	e00b      	b.n	800def6 <HAL_TIM_PWM_Start+0xfe>
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	2b10      	cmp	r3, #16
 800dee2:	d104      	bne.n	800deee <HAL_TIM_PWM_Start+0xf6>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2202      	movs	r2, #2
 800dee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800deec:	e003      	b.n	800def6 <HAL_TIM_PWM_Start+0xfe>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2202      	movs	r2, #2
 800def2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2201      	movs	r2, #1
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	4618      	mov	r0, r3
 800df00:	f001 fc04 	bl	800f70c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a3d      	ldr	r2, [pc, #244]	@ (800e000 <HAL_TIM_PWM_Start+0x208>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d013      	beq.n	800df36 <HAL_TIM_PWM_Start+0x13e>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a3c      	ldr	r2, [pc, #240]	@ (800e004 <HAL_TIM_PWM_Start+0x20c>)
 800df14:	4293      	cmp	r3, r2
 800df16:	d00e      	beq.n	800df36 <HAL_TIM_PWM_Start+0x13e>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a3a      	ldr	r2, [pc, #232]	@ (800e008 <HAL_TIM_PWM_Start+0x210>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d009      	beq.n	800df36 <HAL_TIM_PWM_Start+0x13e>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a39      	ldr	r2, [pc, #228]	@ (800e00c <HAL_TIM_PWM_Start+0x214>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d004      	beq.n	800df36 <HAL_TIM_PWM_Start+0x13e>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a37      	ldr	r2, [pc, #220]	@ (800e010 <HAL_TIM_PWM_Start+0x218>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d101      	bne.n	800df3a <HAL_TIM_PWM_Start+0x142>
 800df36:	2301      	movs	r3, #1
 800df38:	e000      	b.n	800df3c <HAL_TIM_PWM_Start+0x144>
 800df3a:	2300      	movs	r3, #0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d007      	beq.n	800df50 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800df4e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a2a      	ldr	r2, [pc, #168]	@ (800e000 <HAL_TIM_PWM_Start+0x208>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d02c      	beq.n	800dfb4 <HAL_TIM_PWM_Start+0x1bc>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df62:	d027      	beq.n	800dfb4 <HAL_TIM_PWM_Start+0x1bc>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	4a2a      	ldr	r2, [pc, #168]	@ (800e014 <HAL_TIM_PWM_Start+0x21c>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d022      	beq.n	800dfb4 <HAL_TIM_PWM_Start+0x1bc>
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a29      	ldr	r2, [pc, #164]	@ (800e018 <HAL_TIM_PWM_Start+0x220>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d01d      	beq.n	800dfb4 <HAL_TIM_PWM_Start+0x1bc>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a27      	ldr	r2, [pc, #156]	@ (800e01c <HAL_TIM_PWM_Start+0x224>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d018      	beq.n	800dfb4 <HAL_TIM_PWM_Start+0x1bc>
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a1f      	ldr	r2, [pc, #124]	@ (800e004 <HAL_TIM_PWM_Start+0x20c>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d013      	beq.n	800dfb4 <HAL_TIM_PWM_Start+0x1bc>
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a23      	ldr	r2, [pc, #140]	@ (800e020 <HAL_TIM_PWM_Start+0x228>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d00e      	beq.n	800dfb4 <HAL_TIM_PWM_Start+0x1bc>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a1b      	ldr	r2, [pc, #108]	@ (800e008 <HAL_TIM_PWM_Start+0x210>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d009      	beq.n	800dfb4 <HAL_TIM_PWM_Start+0x1bc>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a1f      	ldr	r2, [pc, #124]	@ (800e024 <HAL_TIM_PWM_Start+0x22c>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d004      	beq.n	800dfb4 <HAL_TIM_PWM_Start+0x1bc>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	4a1e      	ldr	r2, [pc, #120]	@ (800e028 <HAL_TIM_PWM_Start+0x230>)
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d115      	bne.n	800dfe0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	689a      	ldr	r2, [r3, #8]
 800dfba:	4b1c      	ldr	r3, [pc, #112]	@ (800e02c <HAL_TIM_PWM_Start+0x234>)
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2b06      	cmp	r3, #6
 800dfc4:	d015      	beq.n	800dff2 <HAL_TIM_PWM_Start+0x1fa>
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfcc:	d011      	beq.n	800dff2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f042 0201 	orr.w	r2, r2, #1
 800dfdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfde:	e008      	b.n	800dff2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f042 0201 	orr.w	r2, r2, #1
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	e000      	b.n	800dff4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dff4:	2300      	movs	r3, #0
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3710      	adds	r7, #16
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	40010000 	.word	0x40010000
 800e004:	40010400 	.word	0x40010400
 800e008:	40014000 	.word	0x40014000
 800e00c:	40014400 	.word	0x40014400
 800e010:	40014800 	.word	0x40014800
 800e014:	40000400 	.word	0x40000400
 800e018:	40000800 	.word	0x40000800
 800e01c:	40000c00 	.word	0x40000c00
 800e020:	40001800 	.word	0x40001800
 800e024:	4000e000 	.word	0x4000e000
 800e028:	4000e400 	.word	0x4000e400
 800e02c:	00010007 	.word	0x00010007

0800e030 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
 800e03c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800e03e:	2300      	movs	r3, #0
 800e040:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d109      	bne.n	800e05c <HAL_TIM_PWM_Start_DMA+0x2c>
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	2b02      	cmp	r3, #2
 800e052:	bf0c      	ite	eq
 800e054:	2301      	moveq	r3, #1
 800e056:	2300      	movne	r3, #0
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	e03c      	b.n	800e0d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2b04      	cmp	r3, #4
 800e060:	d109      	bne.n	800e076 <HAL_TIM_PWM_Start_DMA+0x46>
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	2b02      	cmp	r3, #2
 800e06c:	bf0c      	ite	eq
 800e06e:	2301      	moveq	r3, #1
 800e070:	2300      	movne	r3, #0
 800e072:	b2db      	uxtb	r3, r3
 800e074:	e02f      	b.n	800e0d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	2b08      	cmp	r3, #8
 800e07a:	d109      	bne.n	800e090 <HAL_TIM_PWM_Start_DMA+0x60>
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e082:	b2db      	uxtb	r3, r3
 800e084:	2b02      	cmp	r3, #2
 800e086:	bf0c      	ite	eq
 800e088:	2301      	moveq	r3, #1
 800e08a:	2300      	movne	r3, #0
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	e022      	b.n	800e0d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	2b0c      	cmp	r3, #12
 800e094:	d109      	bne.n	800e0aa <HAL_TIM_PWM_Start_DMA+0x7a>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	2b02      	cmp	r3, #2
 800e0a0:	bf0c      	ite	eq
 800e0a2:	2301      	moveq	r3, #1
 800e0a4:	2300      	movne	r3, #0
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	e015      	b.n	800e0d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	2b10      	cmp	r3, #16
 800e0ae:	d109      	bne.n	800e0c4 <HAL_TIM_PWM_Start_DMA+0x94>
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	2b02      	cmp	r3, #2
 800e0ba:	bf0c      	ite	eq
 800e0bc:	2301      	moveq	r3, #1
 800e0be:	2300      	movne	r3, #0
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	e008      	b.n	800e0d6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	bf0c      	ite	eq
 800e0d0:	2301      	moveq	r3, #1
 800e0d2:	2300      	movne	r3, #0
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d001      	beq.n	800e0de <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800e0da:	2302      	movs	r3, #2
 800e0dc:	e1ba      	b.n	800e454 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d109      	bne.n	800e0f8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	bf0c      	ite	eq
 800e0f0:	2301      	moveq	r3, #1
 800e0f2:	2300      	movne	r3, #0
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	e03c      	b.n	800e172 <HAL_TIM_PWM_Start_DMA+0x142>
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	2b04      	cmp	r3, #4
 800e0fc:	d109      	bne.n	800e112 <HAL_TIM_PWM_Start_DMA+0xe2>
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e104:	b2db      	uxtb	r3, r3
 800e106:	2b01      	cmp	r3, #1
 800e108:	bf0c      	ite	eq
 800e10a:	2301      	moveq	r3, #1
 800e10c:	2300      	movne	r3, #0
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	e02f      	b.n	800e172 <HAL_TIM_PWM_Start_DMA+0x142>
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	2b08      	cmp	r3, #8
 800e116:	d109      	bne.n	800e12c <HAL_TIM_PWM_Start_DMA+0xfc>
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	2b01      	cmp	r3, #1
 800e122:	bf0c      	ite	eq
 800e124:	2301      	moveq	r3, #1
 800e126:	2300      	movne	r3, #0
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	e022      	b.n	800e172 <HAL_TIM_PWM_Start_DMA+0x142>
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	2b0c      	cmp	r3, #12
 800e130:	d109      	bne.n	800e146 <HAL_TIM_PWM_Start_DMA+0x116>
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	bf0c      	ite	eq
 800e13e:	2301      	moveq	r3, #1
 800e140:	2300      	movne	r3, #0
 800e142:	b2db      	uxtb	r3, r3
 800e144:	e015      	b.n	800e172 <HAL_TIM_PWM_Start_DMA+0x142>
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	2b10      	cmp	r3, #16
 800e14a:	d109      	bne.n	800e160 <HAL_TIM_PWM_Start_DMA+0x130>
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b01      	cmp	r3, #1
 800e156:	bf0c      	ite	eq
 800e158:	2301      	moveq	r3, #1
 800e15a:	2300      	movne	r3, #0
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	e008      	b.n	800e172 <HAL_TIM_PWM_Start_DMA+0x142>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b01      	cmp	r3, #1
 800e16a:	bf0c      	ite	eq
 800e16c:	2301      	moveq	r3, #1
 800e16e:	2300      	movne	r3, #0
 800e170:	b2db      	uxtb	r3, r3
 800e172:	2b00      	cmp	r3, #0
 800e174:	d034      	beq.n	800e1e0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <HAL_TIM_PWM_Start_DMA+0x152>
 800e17c:	887b      	ldrh	r3, [r7, #2]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d101      	bne.n	800e186 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800e182:	2301      	movs	r3, #1
 800e184:	e166      	b.n	800e454 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d104      	bne.n	800e196 <HAL_TIM_PWM_Start_DMA+0x166>
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2202      	movs	r2, #2
 800e190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e194:	e026      	b.n	800e1e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b04      	cmp	r3, #4
 800e19a:	d104      	bne.n	800e1a6 <HAL_TIM_PWM_Start_DMA+0x176>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2202      	movs	r2, #2
 800e1a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e1a4:	e01e      	b.n	800e1e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	2b08      	cmp	r3, #8
 800e1aa:	d104      	bne.n	800e1b6 <HAL_TIM_PWM_Start_DMA+0x186>
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2202      	movs	r2, #2
 800e1b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e1b4:	e016      	b.n	800e1e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	2b0c      	cmp	r3, #12
 800e1ba:	d104      	bne.n	800e1c6 <HAL_TIM_PWM_Start_DMA+0x196>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e1c4:	e00e      	b.n	800e1e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	2b10      	cmp	r3, #16
 800e1ca:	d104      	bne.n	800e1d6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2202      	movs	r2, #2
 800e1d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e1d4:	e006      	b.n	800e1e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2202      	movs	r2, #2
 800e1da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e1de:	e001      	b.n	800e1e4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e137      	b.n	800e454 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	2b0c      	cmp	r3, #12
 800e1e8:	f200 80ae 	bhi.w	800e348 <HAL_TIM_PWM_Start_DMA+0x318>
 800e1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800e1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f2:	bf00      	nop
 800e1f4:	0800e229 	.word	0x0800e229
 800e1f8:	0800e349 	.word	0x0800e349
 800e1fc:	0800e349 	.word	0x0800e349
 800e200:	0800e349 	.word	0x0800e349
 800e204:	0800e271 	.word	0x0800e271
 800e208:	0800e349 	.word	0x0800e349
 800e20c:	0800e349 	.word	0x0800e349
 800e210:	0800e349 	.word	0x0800e349
 800e214:	0800e2b9 	.word	0x0800e2b9
 800e218:	0800e349 	.word	0x0800e349
 800e21c:	0800e349 	.word	0x0800e349
 800e220:	0800e349 	.word	0x0800e349
 800e224:	0800e301 	.word	0x0800e301
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e22c:	4a8b      	ldr	r2, [pc, #556]	@ (800e45c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e22e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e234:	4a8a      	ldr	r2, [pc, #552]	@ (800e460 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e236:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e23c:	4a89      	ldr	r2, [pc, #548]	@ (800e464 <HAL_TIM_PWM_Start_DMA+0x434>)
 800e23e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e244:	6879      	ldr	r1, [r7, #4]
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	3334      	adds	r3, #52	@ 0x34
 800e24c:	461a      	mov	r2, r3
 800e24e:	887b      	ldrh	r3, [r7, #2]
 800e250:	f7f9 f8e0 	bl	8007414 <HAL_DMA_Start_IT>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d001      	beq.n	800e25e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e25a:	2301      	movs	r3, #1
 800e25c:	e0fa      	b.n	800e454 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	68da      	ldr	r2, [r3, #12]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e26c:	60da      	str	r2, [r3, #12]
      break;
 800e26e:	e06e      	b.n	800e34e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e274:	4a79      	ldr	r2, [pc, #484]	@ (800e45c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e276:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e27c:	4a78      	ldr	r2, [pc, #480]	@ (800e460 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e27e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e284:	4a77      	ldr	r2, [pc, #476]	@ (800e464 <HAL_TIM_PWM_Start_DMA+0x434>)
 800e286:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800e28c:	6879      	ldr	r1, [r7, #4]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3338      	adds	r3, #56	@ 0x38
 800e294:	461a      	mov	r2, r3
 800e296:	887b      	ldrh	r3, [r7, #2]
 800e298:	f7f9 f8bc 	bl	8007414 <HAL_DMA_Start_IT>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d001      	beq.n	800e2a6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	e0d6      	b.n	800e454 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68da      	ldr	r2, [r3, #12]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e2b4:	60da      	str	r2, [r3, #12]
      break;
 800e2b6:	e04a      	b.n	800e34e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2bc:	4a67      	ldr	r2, [pc, #412]	@ (800e45c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e2be:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2c4:	4a66      	ldr	r2, [pc, #408]	@ (800e460 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e2c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2cc:	4a65      	ldr	r2, [pc, #404]	@ (800e464 <HAL_TIM_PWM_Start_DMA+0x434>)
 800e2ce:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800e2d4:	6879      	ldr	r1, [r7, #4]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	333c      	adds	r3, #60	@ 0x3c
 800e2dc:	461a      	mov	r2, r3
 800e2de:	887b      	ldrh	r3, [r7, #2]
 800e2e0:	f7f9 f898 	bl	8007414 <HAL_DMA_Start_IT>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e0b2      	b.n	800e454 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	68da      	ldr	r2, [r3, #12]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e2fc:	60da      	str	r2, [r3, #12]
      break;
 800e2fe:	e026      	b.n	800e34e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e304:	4a55      	ldr	r2, [pc, #340]	@ (800e45c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800e306:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e30c:	4a54      	ldr	r2, [pc, #336]	@ (800e460 <HAL_TIM_PWM_Start_DMA+0x430>)
 800e30e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e314:	4a53      	ldr	r2, [pc, #332]	@ (800e464 <HAL_TIM_PWM_Start_DMA+0x434>)
 800e316:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e31c:	6879      	ldr	r1, [r7, #4]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3340      	adds	r3, #64	@ 0x40
 800e324:	461a      	mov	r2, r3
 800e326:	887b      	ldrh	r3, [r7, #2]
 800e328:	f7f9 f874 	bl	8007414 <HAL_DMA_Start_IT>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d001      	beq.n	800e336 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800e332:	2301      	movs	r3, #1
 800e334:	e08e      	b.n	800e454 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68da      	ldr	r2, [r3, #12]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e344:	60da      	str	r2, [r3, #12]
      break;
 800e346:	e002      	b.n	800e34e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	75fb      	strb	r3, [r7, #23]
      break;
 800e34c:	bf00      	nop
  }

  if (status == HAL_OK)
 800e34e:	7dfb      	ldrb	r3, [r7, #23]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d17e      	bne.n	800e452 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2201      	movs	r2, #1
 800e35a:	68b9      	ldr	r1, [r7, #8]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f001 f9d5 	bl	800f70c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	4a40      	ldr	r2, [pc, #256]	@ (800e468 <HAL_TIM_PWM_Start_DMA+0x438>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d013      	beq.n	800e394 <HAL_TIM_PWM_Start_DMA+0x364>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a3e      	ldr	r2, [pc, #248]	@ (800e46c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d00e      	beq.n	800e394 <HAL_TIM_PWM_Start_DMA+0x364>
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a3d      	ldr	r2, [pc, #244]	@ (800e470 <HAL_TIM_PWM_Start_DMA+0x440>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d009      	beq.n	800e394 <HAL_TIM_PWM_Start_DMA+0x364>
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a3b      	ldr	r2, [pc, #236]	@ (800e474 <HAL_TIM_PWM_Start_DMA+0x444>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d004      	beq.n	800e394 <HAL_TIM_PWM_Start_DMA+0x364>
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a3a      	ldr	r2, [pc, #232]	@ (800e478 <HAL_TIM_PWM_Start_DMA+0x448>)
 800e390:	4293      	cmp	r3, r2
 800e392:	d101      	bne.n	800e398 <HAL_TIM_PWM_Start_DMA+0x368>
 800e394:	2301      	movs	r3, #1
 800e396:	e000      	b.n	800e39a <HAL_TIM_PWM_Start_DMA+0x36a>
 800e398:	2300      	movs	r3, #0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d007      	beq.n	800e3ae <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e3ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4a2d      	ldr	r2, [pc, #180]	@ (800e468 <HAL_TIM_PWM_Start_DMA+0x438>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d02c      	beq.n	800e412 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3c0:	d027      	beq.n	800e412 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a2d      	ldr	r2, [pc, #180]	@ (800e47c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d022      	beq.n	800e412 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a2b      	ldr	r2, [pc, #172]	@ (800e480 <HAL_TIM_PWM_Start_DMA+0x450>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d01d      	beq.n	800e412 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a2a      	ldr	r2, [pc, #168]	@ (800e484 <HAL_TIM_PWM_Start_DMA+0x454>)
 800e3dc:	4293      	cmp	r3, r2
 800e3de:	d018      	beq.n	800e412 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4a21      	ldr	r2, [pc, #132]	@ (800e46c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d013      	beq.n	800e412 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	4a26      	ldr	r2, [pc, #152]	@ (800e488 <HAL_TIM_PWM_Start_DMA+0x458>)
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d00e      	beq.n	800e412 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a1d      	ldr	r2, [pc, #116]	@ (800e470 <HAL_TIM_PWM_Start_DMA+0x440>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d009      	beq.n	800e412 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4a22      	ldr	r2, [pc, #136]	@ (800e48c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800e404:	4293      	cmp	r3, r2
 800e406:	d004      	beq.n	800e412 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4a20      	ldr	r2, [pc, #128]	@ (800e490 <HAL_TIM_PWM_Start_DMA+0x460>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d115      	bne.n	800e43e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	689a      	ldr	r2, [r3, #8]
 800e418:	4b1e      	ldr	r3, [pc, #120]	@ (800e494 <HAL_TIM_PWM_Start_DMA+0x464>)
 800e41a:	4013      	ands	r3, r2
 800e41c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	2b06      	cmp	r3, #6
 800e422:	d015      	beq.n	800e450 <HAL_TIM_PWM_Start_DMA+0x420>
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e42a:	d011      	beq.n	800e450 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f042 0201 	orr.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e43c:	e008      	b.n	800e450 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f042 0201 	orr.w	r2, r2, #1
 800e44c:	601a      	str	r2, [r3, #0]
 800e44e:	e000      	b.n	800e452 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e450:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e452:	7dfb      	ldrb	r3, [r7, #23]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3718      	adds	r7, #24
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	0800edbb 	.word	0x0800edbb
 800e460:	0800ee63 	.word	0x0800ee63
 800e464:	0800ed29 	.word	0x0800ed29
 800e468:	40010000 	.word	0x40010000
 800e46c:	40010400 	.word	0x40010400
 800e470:	40014000 	.word	0x40014000
 800e474:	40014400 	.word	0x40014400
 800e478:	40014800 	.word	0x40014800
 800e47c:	40000400 	.word	0x40000400
 800e480:	40000800 	.word	0x40000800
 800e484:	40000c00 	.word	0x40000c00
 800e488:	40001800 	.word	0x40001800
 800e48c:	4000e000 	.word	0x4000e000
 800e490:	4000e400 	.word	0x4000e400
 800e494:	00010007 	.word	0x00010007

0800e498 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	2b0c      	cmp	r3, #12
 800e4aa:	d855      	bhi.n	800e558 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800e4ac:	a201      	add	r2, pc, #4	@ (adr r2, 800e4b4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800e4ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4b2:	bf00      	nop
 800e4b4:	0800e4e9 	.word	0x0800e4e9
 800e4b8:	0800e559 	.word	0x0800e559
 800e4bc:	0800e559 	.word	0x0800e559
 800e4c0:	0800e559 	.word	0x0800e559
 800e4c4:	0800e505 	.word	0x0800e505
 800e4c8:	0800e559 	.word	0x0800e559
 800e4cc:	0800e559 	.word	0x0800e559
 800e4d0:	0800e559 	.word	0x0800e559
 800e4d4:	0800e521 	.word	0x0800e521
 800e4d8:	0800e559 	.word	0x0800e559
 800e4dc:	0800e559 	.word	0x0800e559
 800e4e0:	0800e559 	.word	0x0800e559
 800e4e4:	0800e53d 	.word	0x0800e53d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68da      	ldr	r2, [r3, #12]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800e4f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7f9 f9f3 	bl	80078e8 <HAL_DMA_Abort_IT>
      break;
 800e502:	e02c      	b.n	800e55e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	68da      	ldr	r2, [r3, #12]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e512:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e518:	4618      	mov	r0, r3
 800e51a:	f7f9 f9e5 	bl	80078e8 <HAL_DMA_Abort_IT>
      break;
 800e51e:	e01e      	b.n	800e55e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	68da      	ldr	r2, [r3, #12]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e52e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e534:	4618      	mov	r0, r3
 800e536:	f7f9 f9d7 	bl	80078e8 <HAL_DMA_Abort_IT>
      break;
 800e53a:	e010      	b.n	800e55e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	68da      	ldr	r2, [r3, #12]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e54a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e550:	4618      	mov	r0, r3
 800e552:	f7f9 f9c9 	bl	80078e8 <HAL_DMA_Abort_IT>
      break;
 800e556:	e002      	b.n	800e55e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800e558:	2301      	movs	r3, #1
 800e55a:	73fb      	strb	r3, [r7, #15]
      break;
 800e55c:	bf00      	nop
  }

  if (status == HAL_OK)
 800e55e:	7bfb      	ldrb	r3, [r7, #15]
 800e560:	2b00      	cmp	r3, #0
 800e562:	f040 8081 	bne.w	800e668 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2200      	movs	r2, #0
 800e56c:	6839      	ldr	r1, [r7, #0]
 800e56e:	4618      	mov	r0, r3
 800e570:	f001 f8cc 	bl	800f70c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a3e      	ldr	r2, [pc, #248]	@ (800e674 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d013      	beq.n	800e5a6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	4a3d      	ldr	r2, [pc, #244]	@ (800e678 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d00e      	beq.n	800e5a6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a3b      	ldr	r2, [pc, #236]	@ (800e67c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d009      	beq.n	800e5a6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4a3a      	ldr	r2, [pc, #232]	@ (800e680 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800e598:	4293      	cmp	r3, r2
 800e59a:	d004      	beq.n	800e5a6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a38      	ldr	r2, [pc, #224]	@ (800e684 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d101      	bne.n	800e5aa <HAL_TIM_PWM_Stop_DMA+0x112>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e000      	b.n	800e5ac <HAL_TIM_PWM_Stop_DMA+0x114>
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d017      	beq.n	800e5e0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	6a1a      	ldr	r2, [r3, #32]
 800e5b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d10f      	bne.n	800e5e0 <HAL_TIM_PWM_Stop_DMA+0x148>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	6a1a      	ldr	r2, [r3, #32]
 800e5c6:	f240 4344 	movw	r3, #1092	@ 0x444
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d107      	bne.n	800e5e0 <HAL_TIM_PWM_Stop_DMA+0x148>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e5de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6a1a      	ldr	r2, [r3, #32]
 800e5e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e5ea:	4013      	ands	r3, r2
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d10f      	bne.n	800e610 <HAL_TIM_PWM_Stop_DMA+0x178>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6a1a      	ldr	r2, [r3, #32]
 800e5f6:	f240 4344 	movw	r3, #1092	@ 0x444
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d107      	bne.n	800e610 <HAL_TIM_PWM_Stop_DMA+0x178>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f022 0201 	bic.w	r2, r2, #1
 800e60e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d104      	bne.n	800e620 <HAL_TIM_PWM_Stop_DMA+0x188>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e61e:	e023      	b.n	800e668 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	2b04      	cmp	r3, #4
 800e624:	d104      	bne.n	800e630 <HAL_TIM_PWM_Stop_DMA+0x198>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e62e:	e01b      	b.n	800e668 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	2b08      	cmp	r3, #8
 800e634:	d104      	bne.n	800e640 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e63e:	e013      	b.n	800e668 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2b0c      	cmp	r3, #12
 800e644:	d104      	bne.n	800e650 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e64e:	e00b      	b.n	800e668 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	2b10      	cmp	r3, #16
 800e654:	d104      	bne.n	800e660 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e65e:	e003      	b.n	800e668 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2201      	movs	r2, #1
 800e664:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800e668:	7bfb      	ldrb	r3, [r7, #15]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	40010000 	.word	0x40010000
 800e678:	40010400 	.word	0x40010400
 800e67c:	40014000 	.word	0x40014000
 800e680:	40014400 	.word	0x40014400
 800e684:	40014800 	.word	0x40014800

0800e688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	68db      	ldr	r3, [r3, #12]
 800e696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	f003 0302 	and.w	r3, r3, #2
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d020      	beq.n	800e6ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f003 0302 	and.w	r3, r3, #2
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d01b      	beq.n	800e6ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f06f 0202 	mvn.w	r2, #2
 800e6bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	f003 0303 	and.w	r3, r3, #3
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fb00 	bl	800ecd8 <HAL_TIM_IC_CaptureCallback>
 800e6d8:	e005      	b.n	800e6e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 faf2 	bl	800ecc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f7f4 fc09 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	f003 0304 	and.w	r3, r3, #4
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d020      	beq.n	800e738 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f003 0304 	and.w	r3, r3, #4
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d01b      	beq.n	800e738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f06f 0204 	mvn.w	r2, #4
 800e708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2202      	movs	r2, #2
 800e70e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	699b      	ldr	r3, [r3, #24]
 800e716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d003      	beq.n	800e726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 fada 	bl	800ecd8 <HAL_TIM_IC_CaptureCallback>
 800e724:	e005      	b.n	800e732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 facc 	bl	800ecc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7f4 fbe3 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	f003 0308 	and.w	r3, r3, #8
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d020      	beq.n	800e784 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f003 0308 	and.w	r3, r3, #8
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d01b      	beq.n	800e784 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f06f 0208 	mvn.w	r2, #8
 800e754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2204      	movs	r2, #4
 800e75a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	69db      	ldr	r3, [r3, #28]
 800e762:	f003 0303 	and.w	r3, r3, #3
 800e766:	2b00      	cmp	r3, #0
 800e768:	d003      	beq.n	800e772 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 fab4 	bl	800ecd8 <HAL_TIM_IC_CaptureCallback>
 800e770:	e005      	b.n	800e77e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 faa6 	bl	800ecc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7f4 fbbd 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	f003 0310 	and.w	r3, r3, #16
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d020      	beq.n	800e7d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f003 0310 	and.w	r3, r3, #16
 800e794:	2b00      	cmp	r3, #0
 800e796:	d01b      	beq.n	800e7d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f06f 0210 	mvn.w	r2, #16
 800e7a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2208      	movs	r2, #8
 800e7a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	69db      	ldr	r3, [r3, #28]
 800e7ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d003      	beq.n	800e7be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 fa8e 	bl	800ecd8 <HAL_TIM_IC_CaptureCallback>
 800e7bc:	e005      	b.n	800e7ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fa80 	bl	800ecc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f7f4 fb97 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	f003 0301 	and.w	r3, r3, #1
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00c      	beq.n	800e7f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f003 0301 	and.w	r3, r3, #1
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d007      	beq.n	800e7f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f06f 0201 	mvn.w	r2, #1
 800e7ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f000 fa5e 	bl	800ecb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d104      	bne.n	800e808 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00c      	beq.n	800e822 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d007      	beq.n	800e822 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e81a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f001 f841 	bl	800f8a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d00c      	beq.n	800e846 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e832:	2b00      	cmp	r3, #0
 800e834:	d007      	beq.n	800e846 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e83e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f001 f839 	bl	800f8b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00c      	beq.n	800e86a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e856:	2b00      	cmp	r3, #0
 800e858:	d007      	beq.n	800e86a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 fa4b 	bl	800ed00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	f003 0320 	and.w	r3, r3, #32
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00c      	beq.n	800e88e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f003 0320 	and.w	r3, r3, #32
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d007      	beq.n	800e88e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f06f 0220 	mvn.w	r2, #32
 800e886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f001 f801 	bl	800f890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e88e:	bf00      	nop
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
	...

0800e898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d101      	bne.n	800e8b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e8b2:	2302      	movs	r3, #2
 800e8b4:	e0ff      	b.n	800eab6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2b14      	cmp	r3, #20
 800e8c2:	f200 80f0 	bhi.w	800eaa6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800e8cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8cc:	0800e921 	.word	0x0800e921
 800e8d0:	0800eaa7 	.word	0x0800eaa7
 800e8d4:	0800eaa7 	.word	0x0800eaa7
 800e8d8:	0800eaa7 	.word	0x0800eaa7
 800e8dc:	0800e961 	.word	0x0800e961
 800e8e0:	0800eaa7 	.word	0x0800eaa7
 800e8e4:	0800eaa7 	.word	0x0800eaa7
 800e8e8:	0800eaa7 	.word	0x0800eaa7
 800e8ec:	0800e9a3 	.word	0x0800e9a3
 800e8f0:	0800eaa7 	.word	0x0800eaa7
 800e8f4:	0800eaa7 	.word	0x0800eaa7
 800e8f8:	0800eaa7 	.word	0x0800eaa7
 800e8fc:	0800e9e3 	.word	0x0800e9e3
 800e900:	0800eaa7 	.word	0x0800eaa7
 800e904:	0800eaa7 	.word	0x0800eaa7
 800e908:	0800eaa7 	.word	0x0800eaa7
 800e90c:	0800ea25 	.word	0x0800ea25
 800e910:	0800eaa7 	.word	0x0800eaa7
 800e914:	0800eaa7 	.word	0x0800eaa7
 800e918:	0800eaa7 	.word	0x0800eaa7
 800e91c:	0800ea65 	.word	0x0800ea65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	68b9      	ldr	r1, [r7, #8]
 800e926:	4618      	mov	r0, r3
 800e928:	f000 fb7c 	bl	800f024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	699a      	ldr	r2, [r3, #24]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f042 0208 	orr.w	r2, r2, #8
 800e93a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	699a      	ldr	r2, [r3, #24]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f022 0204 	bic.w	r2, r2, #4
 800e94a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	6999      	ldr	r1, [r3, #24]
 800e952:	68bb      	ldr	r3, [r7, #8]
 800e954:	691a      	ldr	r2, [r3, #16]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	430a      	orrs	r2, r1
 800e95c:	619a      	str	r2, [r3, #24]
      break;
 800e95e:	e0a5      	b.n	800eaac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	68b9      	ldr	r1, [r7, #8]
 800e966:	4618      	mov	r0, r3
 800e968:	f000 fbec 	bl	800f144 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	699a      	ldr	r2, [r3, #24]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e97a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	699a      	ldr	r2, [r3, #24]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e98a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	6999      	ldr	r1, [r3, #24]
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	691b      	ldr	r3, [r3, #16]
 800e996:	021a      	lsls	r2, r3, #8
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	430a      	orrs	r2, r1
 800e99e:	619a      	str	r2, [r3, #24]
      break;
 800e9a0:	e084      	b.n	800eaac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68b9      	ldr	r1, [r7, #8]
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f000 fc55 	bl	800f258 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	69da      	ldr	r2, [r3, #28]
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f042 0208 	orr.w	r2, r2, #8
 800e9bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69da      	ldr	r2, [r3, #28]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f022 0204 	bic.w	r2, r2, #4
 800e9cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	69d9      	ldr	r1, [r3, #28]
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	691a      	ldr	r2, [r3, #16]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	61da      	str	r2, [r3, #28]
      break;
 800e9e0:	e064      	b.n	800eaac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	68b9      	ldr	r1, [r7, #8]
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f000 fcbd 	bl	800f368 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	69da      	ldr	r2, [r3, #28]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e9fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	69da      	ldr	r2, [r3, #28]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	69d9      	ldr	r1, [r3, #28]
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	691b      	ldr	r3, [r3, #16]
 800ea18:	021a      	lsls	r2, r3, #8
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	430a      	orrs	r2, r1
 800ea20:	61da      	str	r2, [r3, #28]
      break;
 800ea22:	e043      	b.n	800eaac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	68b9      	ldr	r1, [r7, #8]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f000 fd06 	bl	800f43c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f042 0208 	orr.w	r2, r2, #8
 800ea3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f022 0204 	bic.w	r2, r2, #4
 800ea4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	691a      	ldr	r2, [r3, #16]
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	430a      	orrs	r2, r1
 800ea60:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ea62:	e023      	b.n	800eaac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	68b9      	ldr	r1, [r7, #8]
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f000 fd4a 	bl	800f504 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	021a      	lsls	r2, r3, #8
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	430a      	orrs	r2, r1
 800eaa2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eaa4:	e002      	b.n	800eaac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	75fb      	strb	r3, [r7, #23]
      break;
 800eaaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop

0800eac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b084      	sub	sp, #16
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eaca:	2300      	movs	r3, #0
 800eacc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d101      	bne.n	800eadc <HAL_TIM_ConfigClockSource+0x1c>
 800ead8:	2302      	movs	r3, #2
 800eada:	e0dc      	b.n	800ec96 <HAL_TIM_ConfigClockSource+0x1d6>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2201      	movs	r2, #1
 800eae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2202      	movs	r2, #2
 800eae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	4b6a      	ldr	r3, [pc, #424]	@ (800eca0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eaf8:	4013      	ands	r3, r2
 800eafa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eb02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68ba      	ldr	r2, [r7, #8]
 800eb0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4a64      	ldr	r2, [pc, #400]	@ (800eca4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	f000 80a9 	beq.w	800ec6a <HAL_TIM_ConfigClockSource+0x1aa>
 800eb18:	4a62      	ldr	r2, [pc, #392]	@ (800eca4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	f200 80ae 	bhi.w	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb20:	4a61      	ldr	r2, [pc, #388]	@ (800eca8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	f000 80a1 	beq.w	800ec6a <HAL_TIM_ConfigClockSource+0x1aa>
 800eb28:	4a5f      	ldr	r2, [pc, #380]	@ (800eca8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	f200 80a6 	bhi.w	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb30:	4a5e      	ldr	r2, [pc, #376]	@ (800ecac <HAL_TIM_ConfigClockSource+0x1ec>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	f000 8099 	beq.w	800ec6a <HAL_TIM_ConfigClockSource+0x1aa>
 800eb38:	4a5c      	ldr	r2, [pc, #368]	@ (800ecac <HAL_TIM_ConfigClockSource+0x1ec>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	f200 809e 	bhi.w	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb40:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800eb44:	f000 8091 	beq.w	800ec6a <HAL_TIM_ConfigClockSource+0x1aa>
 800eb48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800eb4c:	f200 8096 	bhi.w	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb54:	f000 8089 	beq.w	800ec6a <HAL_TIM_ConfigClockSource+0x1aa>
 800eb58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb5c:	f200 808e 	bhi.w	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb64:	d03e      	beq.n	800ebe4 <HAL_TIM_ConfigClockSource+0x124>
 800eb66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb6a:	f200 8087 	bhi.w	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb72:	f000 8086 	beq.w	800ec82 <HAL_TIM_ConfigClockSource+0x1c2>
 800eb76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb7a:	d87f      	bhi.n	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb7c:	2b70      	cmp	r3, #112	@ 0x70
 800eb7e:	d01a      	beq.n	800ebb6 <HAL_TIM_ConfigClockSource+0xf6>
 800eb80:	2b70      	cmp	r3, #112	@ 0x70
 800eb82:	d87b      	bhi.n	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb84:	2b60      	cmp	r3, #96	@ 0x60
 800eb86:	d050      	beq.n	800ec2a <HAL_TIM_ConfigClockSource+0x16a>
 800eb88:	2b60      	cmp	r3, #96	@ 0x60
 800eb8a:	d877      	bhi.n	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb8c:	2b50      	cmp	r3, #80	@ 0x50
 800eb8e:	d03c      	beq.n	800ec0a <HAL_TIM_ConfigClockSource+0x14a>
 800eb90:	2b50      	cmp	r3, #80	@ 0x50
 800eb92:	d873      	bhi.n	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb94:	2b40      	cmp	r3, #64	@ 0x40
 800eb96:	d058      	beq.n	800ec4a <HAL_TIM_ConfigClockSource+0x18a>
 800eb98:	2b40      	cmp	r3, #64	@ 0x40
 800eb9a:	d86f      	bhi.n	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb9c:	2b30      	cmp	r3, #48	@ 0x30
 800eb9e:	d064      	beq.n	800ec6a <HAL_TIM_ConfigClockSource+0x1aa>
 800eba0:	2b30      	cmp	r3, #48	@ 0x30
 800eba2:	d86b      	bhi.n	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800eba4:	2b20      	cmp	r3, #32
 800eba6:	d060      	beq.n	800ec6a <HAL_TIM_ConfigClockSource+0x1aa>
 800eba8:	2b20      	cmp	r3, #32
 800ebaa:	d867      	bhi.n	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d05c      	beq.n	800ec6a <HAL_TIM_ConfigClockSource+0x1aa>
 800ebb0:	2b10      	cmp	r3, #16
 800ebb2:	d05a      	beq.n	800ec6a <HAL_TIM_ConfigClockSource+0x1aa>
 800ebb4:	e062      	b.n	800ec7c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ebc6:	f000 fd81 	bl	800f6cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	689b      	ldr	r3, [r3, #8]
 800ebd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ebd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	68ba      	ldr	r2, [r7, #8]
 800ebe0:	609a      	str	r2, [r3, #8]
      break;
 800ebe2:	e04f      	b.n	800ec84 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ebf4:	f000 fd6a 	bl	800f6cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	689a      	ldr	r2, [r3, #8]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ec06:	609a      	str	r2, [r3, #8]
      break;
 800ec08:	e03c      	b.n	800ec84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec16:	461a      	mov	r2, r3
 800ec18:	f000 fcda 	bl	800f5d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2150      	movs	r1, #80	@ 0x50
 800ec22:	4618      	mov	r0, r3
 800ec24:	f000 fd34 	bl	800f690 <TIM_ITRx_SetConfig>
      break;
 800ec28:	e02c      	b.n	800ec84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec36:	461a      	mov	r2, r3
 800ec38:	f000 fcf9 	bl	800f62e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2160      	movs	r1, #96	@ 0x60
 800ec42:	4618      	mov	r0, r3
 800ec44:	f000 fd24 	bl	800f690 <TIM_ITRx_SetConfig>
      break;
 800ec48:	e01c      	b.n	800ec84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec56:	461a      	mov	r2, r3
 800ec58:	f000 fcba 	bl	800f5d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2140      	movs	r1, #64	@ 0x40
 800ec62:	4618      	mov	r0, r3
 800ec64:	f000 fd14 	bl	800f690 <TIM_ITRx_SetConfig>
      break;
 800ec68:	e00c      	b.n	800ec84 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681a      	ldr	r2, [r3, #0]
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4619      	mov	r1, r3
 800ec74:	4610      	mov	r0, r2
 800ec76:	f000 fd0b 	bl	800f690 <TIM_ITRx_SetConfig>
      break;
 800ec7a:	e003      	b.n	800ec84 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec80:	e000      	b.n	800ec84 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ec82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2201      	movs	r2, #1
 800ec88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ec94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3710      	adds	r7, #16
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	ffceff88 	.word	0xffceff88
 800eca4:	00100040 	.word	0x00100040
 800eca8:	00100030 	.word	0x00100030
 800ecac:	00100020 	.word	0x00100020

0800ecb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ecb0:	b480      	push	{r7}
 800ecb2:	b083      	sub	sp, #12
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b083      	sub	sp, #12
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eccc:	bf00      	nop
 800ecce:	370c      	adds	r7, #12
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ece0:	bf00      	nop
 800ece2:	370c      	adds	r7, #12
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr

0800ecec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ecf4:	bf00      	nop
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr

0800ed00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b083      	sub	sp, #12
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ed08:	bf00      	nop
 800ed0a:	370c      	adds	r7, #12
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b083      	sub	sp, #12
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ed1c:	bf00      	nop
 800ed1e:	370c      	adds	r7, #12
 800ed20:	46bd      	mov	sp, r7
 800ed22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed26:	4770      	bx	lr

0800ed28 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d107      	bne.n	800ed50 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2201      	movs	r2, #1
 800ed44:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ed4e:	e02a      	b.n	800eda6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d107      	bne.n	800ed6a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2201      	movs	r2, #1
 800ed64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ed68:	e01d      	b.n	800eda6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed6e:	687a      	ldr	r2, [r7, #4]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d107      	bne.n	800ed84 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2204      	movs	r2, #4
 800ed78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ed82:	e010      	b.n	800eda6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d107      	bne.n	800ed9e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2208      	movs	r2, #8
 800ed92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2201      	movs	r2, #1
 800ed98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ed9c:	e003      	b.n	800eda6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2201      	movs	r2, #1
 800eda2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7ff ffb4 	bl	800ed14 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2200      	movs	r2, #0
 800edb0:	771a      	strb	r2, [r3, #28]
}
 800edb2:	bf00      	nop
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b084      	sub	sp, #16
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edc6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d10b      	bne.n	800edea <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2201      	movs	r2, #1
 800edd6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	69db      	ldr	r3, [r3, #28]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d136      	bne.n	800ee4e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ede8:	e031      	b.n	800ee4e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d10b      	bne.n	800ee0c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2202      	movs	r2, #2
 800edf8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	69db      	ldr	r3, [r3, #28]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d125      	bne.n	800ee4e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2201      	movs	r2, #1
 800ee06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ee0a:	e020      	b.n	800ee4e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d10b      	bne.n	800ee2e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2204      	movs	r2, #4
 800ee1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	69db      	ldr	r3, [r3, #28]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d114      	bne.n	800ee4e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2201      	movs	r2, #1
 800ee28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ee2c:	e00f      	b.n	800ee4e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d10a      	bne.n	800ee4e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2208      	movs	r2, #8
 800ee3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	69db      	ldr	r3, [r3, #28]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d103      	bne.n	800ee4e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2201      	movs	r2, #1
 800ee4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee4e:	68f8      	ldr	r0, [r7, #12]
 800ee50:	f7f4 f852 	bl	8002ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2200      	movs	r2, #0
 800ee58:	771a      	strb	r2, [r3, #28]
}
 800ee5a:	bf00      	nop
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b084      	sub	sp, #16
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee6e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d103      	bne.n	800ee82 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	771a      	strb	r2, [r3, #28]
 800ee80:	e019      	b.n	800eeb6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d103      	bne.n	800ee94 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2202      	movs	r2, #2
 800ee90:	771a      	strb	r2, [r3, #28]
 800ee92:	e010      	b.n	800eeb6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d103      	bne.n	800eea6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	2204      	movs	r2, #4
 800eea2:	771a      	strb	r2, [r3, #28]
 800eea4:	e007      	b.n	800eeb6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d102      	bne.n	800eeb6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2208      	movs	r2, #8
 800eeb4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f7ff ff18 	bl	800ecec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2200      	movs	r2, #0
 800eec0:	771a      	strb	r2, [r3, #28]
}
 800eec2:	bf00      	nop
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
	...

0800eecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eecc:	b480      	push	{r7}
 800eece:	b085      	sub	sp, #20
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4a47      	ldr	r2, [pc, #284]	@ (800effc <TIM_Base_SetConfig+0x130>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d013      	beq.n	800ef0c <TIM_Base_SetConfig+0x40>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eeea:	d00f      	beq.n	800ef0c <TIM_Base_SetConfig+0x40>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4a44      	ldr	r2, [pc, #272]	@ (800f000 <TIM_Base_SetConfig+0x134>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d00b      	beq.n	800ef0c <TIM_Base_SetConfig+0x40>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	4a43      	ldr	r2, [pc, #268]	@ (800f004 <TIM_Base_SetConfig+0x138>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d007      	beq.n	800ef0c <TIM_Base_SetConfig+0x40>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4a42      	ldr	r2, [pc, #264]	@ (800f008 <TIM_Base_SetConfig+0x13c>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d003      	beq.n	800ef0c <TIM_Base_SetConfig+0x40>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a41      	ldr	r2, [pc, #260]	@ (800f00c <TIM_Base_SetConfig+0x140>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d108      	bne.n	800ef1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	68fa      	ldr	r2, [r7, #12]
 800ef1a:	4313      	orrs	r3, r2
 800ef1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a36      	ldr	r2, [pc, #216]	@ (800effc <TIM_Base_SetConfig+0x130>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d027      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef2c:	d023      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a33      	ldr	r2, [pc, #204]	@ (800f000 <TIM_Base_SetConfig+0x134>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d01f      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	4a32      	ldr	r2, [pc, #200]	@ (800f004 <TIM_Base_SetConfig+0x138>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d01b      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a31      	ldr	r2, [pc, #196]	@ (800f008 <TIM_Base_SetConfig+0x13c>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d017      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a30      	ldr	r2, [pc, #192]	@ (800f00c <TIM_Base_SetConfig+0x140>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d013      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a2f      	ldr	r2, [pc, #188]	@ (800f010 <TIM_Base_SetConfig+0x144>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d00f      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a2e      	ldr	r2, [pc, #184]	@ (800f014 <TIM_Base_SetConfig+0x148>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d00b      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a2d      	ldr	r2, [pc, #180]	@ (800f018 <TIM_Base_SetConfig+0x14c>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d007      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a2c      	ldr	r2, [pc, #176]	@ (800f01c <TIM_Base_SetConfig+0x150>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d003      	beq.n	800ef76 <TIM_Base_SetConfig+0xaa>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4a2b      	ldr	r2, [pc, #172]	@ (800f020 <TIM_Base_SetConfig+0x154>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d108      	bne.n	800ef88 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	4313      	orrs	r3, r2
 800ef86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	695b      	ldr	r3, [r3, #20]
 800ef92:	4313      	orrs	r3, r2
 800ef94:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	689a      	ldr	r2, [r3, #8]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	4a14      	ldr	r2, [pc, #80]	@ (800effc <TIM_Base_SetConfig+0x130>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d00f      	beq.n	800efce <TIM_Base_SetConfig+0x102>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4a16      	ldr	r2, [pc, #88]	@ (800f00c <TIM_Base_SetConfig+0x140>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d00b      	beq.n	800efce <TIM_Base_SetConfig+0x102>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4a15      	ldr	r2, [pc, #84]	@ (800f010 <TIM_Base_SetConfig+0x144>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d007      	beq.n	800efce <TIM_Base_SetConfig+0x102>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4a14      	ldr	r2, [pc, #80]	@ (800f014 <TIM_Base_SetConfig+0x148>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d003      	beq.n	800efce <TIM_Base_SetConfig+0x102>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4a13      	ldr	r2, [pc, #76]	@ (800f018 <TIM_Base_SetConfig+0x14c>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d103      	bne.n	800efd6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	691a      	ldr	r2, [r3, #16]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f043 0204 	orr.w	r2, r3, #4
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2201      	movs	r2, #1
 800efe6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	68fa      	ldr	r2, [r7, #12]
 800efec:	601a      	str	r2, [r3, #0]
}
 800efee:	bf00      	nop
 800eff0:	3714      	adds	r7, #20
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	40010000 	.word	0x40010000
 800f000:	40000400 	.word	0x40000400
 800f004:	40000800 	.word	0x40000800
 800f008:	40000c00 	.word	0x40000c00
 800f00c:	40010400 	.word	0x40010400
 800f010:	40014000 	.word	0x40014000
 800f014:	40014400 	.word	0x40014400
 800f018:	40014800 	.word	0x40014800
 800f01c:	4000e000 	.word	0x4000e000
 800f020:	4000e400 	.word	0x4000e400

0800f024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f024:	b480      	push	{r7}
 800f026:	b087      	sub	sp, #28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a1b      	ldr	r3, [r3, #32]
 800f032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6a1b      	ldr	r3, [r3, #32]
 800f038:	f023 0201 	bic.w	r2, r3, #1
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	699b      	ldr	r3, [r3, #24]
 800f04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f04c:	68fa      	ldr	r2, [r7, #12]
 800f04e:	4b37      	ldr	r3, [pc, #220]	@ (800f12c <TIM_OC1_SetConfig+0x108>)
 800f050:	4013      	ands	r3, r2
 800f052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f023 0303 	bic.w	r3, r3, #3
 800f05a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	4313      	orrs	r3, r2
 800f064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	f023 0302 	bic.w	r3, r3, #2
 800f06c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	4313      	orrs	r3, r2
 800f076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	4a2d      	ldr	r2, [pc, #180]	@ (800f130 <TIM_OC1_SetConfig+0x10c>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d00f      	beq.n	800f0a0 <TIM_OC1_SetConfig+0x7c>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4a2c      	ldr	r2, [pc, #176]	@ (800f134 <TIM_OC1_SetConfig+0x110>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d00b      	beq.n	800f0a0 <TIM_OC1_SetConfig+0x7c>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	4a2b      	ldr	r2, [pc, #172]	@ (800f138 <TIM_OC1_SetConfig+0x114>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d007      	beq.n	800f0a0 <TIM_OC1_SetConfig+0x7c>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	4a2a      	ldr	r2, [pc, #168]	@ (800f13c <TIM_OC1_SetConfig+0x118>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d003      	beq.n	800f0a0 <TIM_OC1_SetConfig+0x7c>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	4a29      	ldr	r2, [pc, #164]	@ (800f140 <TIM_OC1_SetConfig+0x11c>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d10c      	bne.n	800f0ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	f023 0308 	bic.w	r3, r3, #8
 800f0a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	f023 0304 	bic.w	r3, r3, #4
 800f0b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4a1c      	ldr	r2, [pc, #112]	@ (800f130 <TIM_OC1_SetConfig+0x10c>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d00f      	beq.n	800f0e2 <TIM_OC1_SetConfig+0xbe>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4a1b      	ldr	r2, [pc, #108]	@ (800f134 <TIM_OC1_SetConfig+0x110>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d00b      	beq.n	800f0e2 <TIM_OC1_SetConfig+0xbe>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4a1a      	ldr	r2, [pc, #104]	@ (800f138 <TIM_OC1_SetConfig+0x114>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d007      	beq.n	800f0e2 <TIM_OC1_SetConfig+0xbe>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4a19      	ldr	r2, [pc, #100]	@ (800f13c <TIM_OC1_SetConfig+0x118>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d003      	beq.n	800f0e2 <TIM_OC1_SetConfig+0xbe>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4a18      	ldr	r2, [pc, #96]	@ (800f140 <TIM_OC1_SetConfig+0x11c>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d111      	bne.n	800f106 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f0f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	695b      	ldr	r3, [r3, #20]
 800f0f6:	693a      	ldr	r2, [r7, #16]
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	699b      	ldr	r3, [r3, #24]
 800f100:	693a      	ldr	r2, [r7, #16]
 800f102:	4313      	orrs	r3, r2
 800f104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	693a      	ldr	r2, [r7, #16]
 800f10a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	685a      	ldr	r2, [r3, #4]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	697a      	ldr	r2, [r7, #20]
 800f11e:	621a      	str	r2, [r3, #32]
}
 800f120:	bf00      	nop
 800f122:	371c      	adds	r7, #28
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr
 800f12c:	fffeff8f 	.word	0xfffeff8f
 800f130:	40010000 	.word	0x40010000
 800f134:	40010400 	.word	0x40010400
 800f138:	40014000 	.word	0x40014000
 800f13c:	40014400 	.word	0x40014400
 800f140:	40014800 	.word	0x40014800

0800f144 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f144:	b480      	push	{r7}
 800f146:	b087      	sub	sp, #28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6a1b      	ldr	r3, [r3, #32]
 800f152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6a1b      	ldr	r3, [r3, #32]
 800f158:	f023 0210 	bic.w	r2, r3, #16
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	699b      	ldr	r3, [r3, #24]
 800f16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f16c:	68fa      	ldr	r2, [r7, #12]
 800f16e:	4b34      	ldr	r3, [pc, #208]	@ (800f240 <TIM_OC2_SetConfig+0xfc>)
 800f170:	4013      	ands	r3, r2
 800f172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f17a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	021b      	lsls	r3, r3, #8
 800f182:	68fa      	ldr	r2, [r7, #12]
 800f184:	4313      	orrs	r3, r2
 800f186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	f023 0320 	bic.w	r3, r3, #32
 800f18e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	011b      	lsls	r3, r3, #4
 800f196:	697a      	ldr	r2, [r7, #20]
 800f198:	4313      	orrs	r3, r2
 800f19a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a29      	ldr	r2, [pc, #164]	@ (800f244 <TIM_OC2_SetConfig+0x100>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d003      	beq.n	800f1ac <TIM_OC2_SetConfig+0x68>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a28      	ldr	r2, [pc, #160]	@ (800f248 <TIM_OC2_SetConfig+0x104>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d10d      	bne.n	800f1c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f1b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	011b      	lsls	r3, r3, #4
 800f1ba:	697a      	ldr	r2, [r7, #20]
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f1c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a1e      	ldr	r2, [pc, #120]	@ (800f244 <TIM_OC2_SetConfig+0x100>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d00f      	beq.n	800f1f0 <TIM_OC2_SetConfig+0xac>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a1d      	ldr	r2, [pc, #116]	@ (800f248 <TIM_OC2_SetConfig+0x104>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d00b      	beq.n	800f1f0 <TIM_OC2_SetConfig+0xac>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a1c      	ldr	r2, [pc, #112]	@ (800f24c <TIM_OC2_SetConfig+0x108>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d007      	beq.n	800f1f0 <TIM_OC2_SetConfig+0xac>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	4a1b      	ldr	r2, [pc, #108]	@ (800f250 <TIM_OC2_SetConfig+0x10c>)
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	d003      	beq.n	800f1f0 <TIM_OC2_SetConfig+0xac>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4a1a      	ldr	r2, [pc, #104]	@ (800f254 <TIM_OC2_SetConfig+0x110>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d113      	bne.n	800f218 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f1f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1f8:	693b      	ldr	r3, [r7, #16]
 800f1fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	695b      	ldr	r3, [r3, #20]
 800f204:	009b      	lsls	r3, r3, #2
 800f206:	693a      	ldr	r2, [r7, #16]
 800f208:	4313      	orrs	r3, r2
 800f20a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	699b      	ldr	r3, [r3, #24]
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	693a      	ldr	r2, [r7, #16]
 800f214:	4313      	orrs	r3, r2
 800f216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	693a      	ldr	r2, [r7, #16]
 800f21c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	685a      	ldr	r2, [r3, #4]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	621a      	str	r2, [r3, #32]
}
 800f232:	bf00      	nop
 800f234:	371c      	adds	r7, #28
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop
 800f240:	feff8fff 	.word	0xfeff8fff
 800f244:	40010000 	.word	0x40010000
 800f248:	40010400 	.word	0x40010400
 800f24c:	40014000 	.word	0x40014000
 800f250:	40014400 	.word	0x40014400
 800f254:	40014800 	.word	0x40014800

0800f258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f258:	b480      	push	{r7}
 800f25a:	b087      	sub	sp, #28
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
 800f260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6a1b      	ldr	r3, [r3, #32]
 800f266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6a1b      	ldr	r3, [r3, #32]
 800f26c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	69db      	ldr	r3, [r3, #28]
 800f27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f280:	68fa      	ldr	r2, [r7, #12]
 800f282:	4b33      	ldr	r3, [pc, #204]	@ (800f350 <TIM_OC3_SetConfig+0xf8>)
 800f284:	4013      	ands	r3, r2
 800f286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f023 0303 	bic.w	r3, r3, #3
 800f28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	68fa      	ldr	r2, [r7, #12]
 800f296:	4313      	orrs	r3, r2
 800f298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f2a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	021b      	lsls	r3, r3, #8
 800f2a8:	697a      	ldr	r2, [r7, #20]
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a28      	ldr	r2, [pc, #160]	@ (800f354 <TIM_OC3_SetConfig+0xfc>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d003      	beq.n	800f2be <TIM_OC3_SetConfig+0x66>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4a27      	ldr	r2, [pc, #156]	@ (800f358 <TIM_OC3_SetConfig+0x100>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d10d      	bne.n	800f2da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f2c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	021b      	lsls	r3, r3, #8
 800f2cc:	697a      	ldr	r2, [r7, #20]
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f2d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a1d      	ldr	r2, [pc, #116]	@ (800f354 <TIM_OC3_SetConfig+0xfc>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d00f      	beq.n	800f302 <TIM_OC3_SetConfig+0xaa>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800f358 <TIM_OC3_SetConfig+0x100>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d00b      	beq.n	800f302 <TIM_OC3_SetConfig+0xaa>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4a1b      	ldr	r2, [pc, #108]	@ (800f35c <TIM_OC3_SetConfig+0x104>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d007      	beq.n	800f302 <TIM_OC3_SetConfig+0xaa>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	4a1a      	ldr	r2, [pc, #104]	@ (800f360 <TIM_OC3_SetConfig+0x108>)
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d003      	beq.n	800f302 <TIM_OC3_SetConfig+0xaa>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	4a19      	ldr	r2, [pc, #100]	@ (800f364 <TIM_OC3_SetConfig+0x10c>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d113      	bne.n	800f32a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	695b      	ldr	r3, [r3, #20]
 800f316:	011b      	lsls	r3, r3, #4
 800f318:	693a      	ldr	r2, [r7, #16]
 800f31a:	4313      	orrs	r3, r2
 800f31c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	699b      	ldr	r3, [r3, #24]
 800f322:	011b      	lsls	r3, r3, #4
 800f324:	693a      	ldr	r2, [r7, #16]
 800f326:	4313      	orrs	r3, r2
 800f328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	693a      	ldr	r2, [r7, #16]
 800f32e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	685a      	ldr	r2, [r3, #4]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	697a      	ldr	r2, [r7, #20]
 800f342:	621a      	str	r2, [r3, #32]
}
 800f344:	bf00      	nop
 800f346:	371c      	adds	r7, #28
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	fffeff8f 	.word	0xfffeff8f
 800f354:	40010000 	.word	0x40010000
 800f358:	40010400 	.word	0x40010400
 800f35c:	40014000 	.word	0x40014000
 800f360:	40014400 	.word	0x40014400
 800f364:	40014800 	.word	0x40014800

0800f368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f368:	b480      	push	{r7}
 800f36a:	b087      	sub	sp, #28
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6a1b      	ldr	r3, [r3, #32]
 800f376:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a1b      	ldr	r3, [r3, #32]
 800f37c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	69db      	ldr	r3, [r3, #28]
 800f38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f390:	68fa      	ldr	r2, [r7, #12]
 800f392:	4b24      	ldr	r3, [pc, #144]	@ (800f424 <TIM_OC4_SetConfig+0xbc>)
 800f394:	4013      	ands	r3, r2
 800f396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f39e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	021b      	lsls	r3, r3, #8
 800f3a6:	68fa      	ldr	r2, [r7, #12]
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f3b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	689b      	ldr	r3, [r3, #8]
 800f3b8:	031b      	lsls	r3, r3, #12
 800f3ba:	693a      	ldr	r2, [r7, #16]
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	4a19      	ldr	r2, [pc, #100]	@ (800f428 <TIM_OC4_SetConfig+0xc0>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d00f      	beq.n	800f3e8 <TIM_OC4_SetConfig+0x80>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a18      	ldr	r2, [pc, #96]	@ (800f42c <TIM_OC4_SetConfig+0xc4>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d00b      	beq.n	800f3e8 <TIM_OC4_SetConfig+0x80>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4a17      	ldr	r2, [pc, #92]	@ (800f430 <TIM_OC4_SetConfig+0xc8>)
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d007      	beq.n	800f3e8 <TIM_OC4_SetConfig+0x80>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a16      	ldr	r2, [pc, #88]	@ (800f434 <TIM_OC4_SetConfig+0xcc>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d003      	beq.n	800f3e8 <TIM_OC4_SetConfig+0x80>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4a15      	ldr	r2, [pc, #84]	@ (800f438 <TIM_OC4_SetConfig+0xd0>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d109      	bne.n	800f3fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f3ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	695b      	ldr	r3, [r3, #20]
 800f3f4:	019b      	lsls	r3, r3, #6
 800f3f6:	697a      	ldr	r2, [r7, #20]
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	697a      	ldr	r2, [r7, #20]
 800f400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	685a      	ldr	r2, [r3, #4]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	693a      	ldr	r2, [r7, #16]
 800f414:	621a      	str	r2, [r3, #32]
}
 800f416:	bf00      	nop
 800f418:	371c      	adds	r7, #28
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr
 800f422:	bf00      	nop
 800f424:	feff8fff 	.word	0xfeff8fff
 800f428:	40010000 	.word	0x40010000
 800f42c:	40010400 	.word	0x40010400
 800f430:	40014000 	.word	0x40014000
 800f434:	40014400 	.word	0x40014400
 800f438:	40014800 	.word	0x40014800

0800f43c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b087      	sub	sp, #28
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a1b      	ldr	r3, [r3, #32]
 800f44a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a1b      	ldr	r3, [r3, #32]
 800f450:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	4b21      	ldr	r3, [pc, #132]	@ (800f4ec <TIM_OC5_SetConfig+0xb0>)
 800f468:	4013      	ands	r3, r2
 800f46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	68fa      	ldr	r2, [r7, #12]
 800f472:	4313      	orrs	r3, r2
 800f474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f47c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	689b      	ldr	r3, [r3, #8]
 800f482:	041b      	lsls	r3, r3, #16
 800f484:	693a      	ldr	r2, [r7, #16]
 800f486:	4313      	orrs	r3, r2
 800f488:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	4a18      	ldr	r2, [pc, #96]	@ (800f4f0 <TIM_OC5_SetConfig+0xb4>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d00f      	beq.n	800f4b2 <TIM_OC5_SetConfig+0x76>
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	4a17      	ldr	r2, [pc, #92]	@ (800f4f4 <TIM_OC5_SetConfig+0xb8>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d00b      	beq.n	800f4b2 <TIM_OC5_SetConfig+0x76>
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	4a16      	ldr	r2, [pc, #88]	@ (800f4f8 <TIM_OC5_SetConfig+0xbc>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d007      	beq.n	800f4b2 <TIM_OC5_SetConfig+0x76>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	4a15      	ldr	r2, [pc, #84]	@ (800f4fc <TIM_OC5_SetConfig+0xc0>)
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d003      	beq.n	800f4b2 <TIM_OC5_SetConfig+0x76>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4a14      	ldr	r2, [pc, #80]	@ (800f500 <TIM_OC5_SetConfig+0xc4>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d109      	bne.n	800f4c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f4b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	695b      	ldr	r3, [r3, #20]
 800f4be:	021b      	lsls	r3, r3, #8
 800f4c0:	697a      	ldr	r2, [r7, #20]
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	697a      	ldr	r2, [r7, #20]
 800f4ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	68fa      	ldr	r2, [r7, #12]
 800f4d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	685a      	ldr	r2, [r3, #4]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	693a      	ldr	r2, [r7, #16]
 800f4de:	621a      	str	r2, [r3, #32]
}
 800f4e0:	bf00      	nop
 800f4e2:	371c      	adds	r7, #28
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	fffeff8f 	.word	0xfffeff8f
 800f4f0:	40010000 	.word	0x40010000
 800f4f4:	40010400 	.word	0x40010400
 800f4f8:	40014000 	.word	0x40014000
 800f4fc:	40014400 	.word	0x40014400
 800f500:	40014800 	.word	0x40014800

0800f504 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f504:	b480      	push	{r7}
 800f506:	b087      	sub	sp, #28
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6a1b      	ldr	r3, [r3, #32]
 800f512:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6a1b      	ldr	r3, [r3, #32]
 800f518:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	4b22      	ldr	r3, [pc, #136]	@ (800f5b8 <TIM_OC6_SetConfig+0xb4>)
 800f530:	4013      	ands	r3, r2
 800f532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	021b      	lsls	r3, r3, #8
 800f53a:	68fa      	ldr	r2, [r7, #12]
 800f53c:	4313      	orrs	r3, r2
 800f53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	051b      	lsls	r3, r3, #20
 800f54e:	693a      	ldr	r2, [r7, #16]
 800f550:	4313      	orrs	r3, r2
 800f552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	4a19      	ldr	r2, [pc, #100]	@ (800f5bc <TIM_OC6_SetConfig+0xb8>)
 800f558:	4293      	cmp	r3, r2
 800f55a:	d00f      	beq.n	800f57c <TIM_OC6_SetConfig+0x78>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	4a18      	ldr	r2, [pc, #96]	@ (800f5c0 <TIM_OC6_SetConfig+0xbc>)
 800f560:	4293      	cmp	r3, r2
 800f562:	d00b      	beq.n	800f57c <TIM_OC6_SetConfig+0x78>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a17      	ldr	r2, [pc, #92]	@ (800f5c4 <TIM_OC6_SetConfig+0xc0>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d007      	beq.n	800f57c <TIM_OC6_SetConfig+0x78>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4a16      	ldr	r2, [pc, #88]	@ (800f5c8 <TIM_OC6_SetConfig+0xc4>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d003      	beq.n	800f57c <TIM_OC6_SetConfig+0x78>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4a15      	ldr	r2, [pc, #84]	@ (800f5cc <TIM_OC6_SetConfig+0xc8>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d109      	bne.n	800f590 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	695b      	ldr	r3, [r3, #20]
 800f588:	029b      	lsls	r3, r3, #10
 800f58a:	697a      	ldr	r2, [r7, #20]
 800f58c:	4313      	orrs	r3, r2
 800f58e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	685a      	ldr	r2, [r3, #4]
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	693a      	ldr	r2, [r7, #16]
 800f5a8:	621a      	str	r2, [r3, #32]
}
 800f5aa:	bf00      	nop
 800f5ac:	371c      	adds	r7, #28
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr
 800f5b6:	bf00      	nop
 800f5b8:	feff8fff 	.word	0xfeff8fff
 800f5bc:	40010000 	.word	0x40010000
 800f5c0:	40010400 	.word	0x40010400
 800f5c4:	40014000 	.word	0x40014000
 800f5c8:	40014400 	.word	0x40014400
 800f5cc:	40014800 	.word	0x40014800

0800f5d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b087      	sub	sp, #28
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	60f8      	str	r0, [r7, #12]
 800f5d8:	60b9      	str	r1, [r7, #8]
 800f5da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6a1b      	ldr	r3, [r3, #32]
 800f5e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	6a1b      	ldr	r3, [r3, #32]
 800f5e6:	f023 0201 	bic.w	r2, r3, #1
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	699b      	ldr	r3, [r3, #24]
 800f5f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f5fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	011b      	lsls	r3, r3, #4
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	4313      	orrs	r3, r2
 800f604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	f023 030a 	bic.w	r3, r3, #10
 800f60c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f60e:	697a      	ldr	r2, [r7, #20]
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	4313      	orrs	r3, r2
 800f614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	693a      	ldr	r2, [r7, #16]
 800f61a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	697a      	ldr	r2, [r7, #20]
 800f620:	621a      	str	r2, [r3, #32]
}
 800f622:	bf00      	nop
 800f624:	371c      	adds	r7, #28
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f62e:	b480      	push	{r7}
 800f630:	b087      	sub	sp, #28
 800f632:	af00      	add	r7, sp, #0
 800f634:	60f8      	str	r0, [r7, #12]
 800f636:	60b9      	str	r1, [r7, #8]
 800f638:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6a1b      	ldr	r3, [r3, #32]
 800f63e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	6a1b      	ldr	r3, [r3, #32]
 800f644:	f023 0210 	bic.w	r2, r3, #16
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	699b      	ldr	r3, [r3, #24]
 800f650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	031b      	lsls	r3, r3, #12
 800f65e:	693a      	ldr	r2, [r7, #16]
 800f660:	4313      	orrs	r3, r2
 800f662:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f66a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	011b      	lsls	r3, r3, #4
 800f670:	697a      	ldr	r2, [r7, #20]
 800f672:	4313      	orrs	r3, r2
 800f674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	693a      	ldr	r2, [r7, #16]
 800f67a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	697a      	ldr	r2, [r7, #20]
 800f680:	621a      	str	r2, [r3, #32]
}
 800f682:	bf00      	nop
 800f684:	371c      	adds	r7, #28
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
	...

0800f690 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f690:	b480      	push	{r7}
 800f692:	b085      	sub	sp, #20
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
 800f698:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	4b09      	ldr	r3, [pc, #36]	@ (800f6c8 <TIM_ITRx_SetConfig+0x38>)
 800f6a4:	4013      	ands	r3, r2
 800f6a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f6a8:	683a      	ldr	r2, [r7, #0]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	f043 0307 	orr.w	r3, r3, #7
 800f6b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	609a      	str	r2, [r3, #8]
}
 800f6ba:	bf00      	nop
 800f6bc:	3714      	adds	r7, #20
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop
 800f6c8:	ffcfff8f 	.word	0xffcfff8f

0800f6cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b087      	sub	sp, #28
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f6e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	021a      	lsls	r2, r3, #8
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	431a      	orrs	r2, r3
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	4313      	orrs	r3, r2
 800f6f4:	697a      	ldr	r2, [r7, #20]
 800f6f6:	4313      	orrs	r3, r2
 800f6f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	697a      	ldr	r2, [r7, #20]
 800f6fe:	609a      	str	r2, [r3, #8]
}
 800f700:	bf00      	nop
 800f702:	371c      	adds	r7, #28
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b087      	sub	sp, #28
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	f003 031f 	and.w	r3, r3, #31
 800f71e:	2201      	movs	r2, #1
 800f720:	fa02 f303 	lsl.w	r3, r2, r3
 800f724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6a1a      	ldr	r2, [r3, #32]
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	43db      	mvns	r3, r3
 800f72e:	401a      	ands	r2, r3
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6a1a      	ldr	r2, [r3, #32]
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	f003 031f 	and.w	r3, r3, #31
 800f73e:	6879      	ldr	r1, [r7, #4]
 800f740:	fa01 f303 	lsl.w	r3, r1, r3
 800f744:	431a      	orrs	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	621a      	str	r2, [r3, #32]
}
 800f74a:	bf00      	nop
 800f74c:	371c      	adds	r7, #28
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
	...

0800f758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f758:	b480      	push	{r7}
 800f75a:	b085      	sub	sp, #20
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f768:	2b01      	cmp	r3, #1
 800f76a:	d101      	bne.n	800f770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f76c:	2302      	movs	r3, #2
 800f76e:	e077      	b.n	800f860 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2201      	movs	r2, #1
 800f774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2202      	movs	r2, #2
 800f77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a35      	ldr	r2, [pc, #212]	@ (800f86c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d004      	beq.n	800f7a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	4a34      	ldr	r2, [pc, #208]	@ (800f870 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d108      	bne.n	800f7b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f7aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	68fa      	ldr	r2, [r7, #12]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f7bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	68fa      	ldr	r2, [r7, #12]
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4a25      	ldr	r2, [pc, #148]	@ (800f86c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d02c      	beq.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f7e2:	d027      	beq.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a22      	ldr	r2, [pc, #136]	@ (800f874 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d022      	beq.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	4a21      	ldr	r2, [pc, #132]	@ (800f878 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f7f4:	4293      	cmp	r3, r2
 800f7f6:	d01d      	beq.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a1f      	ldr	r2, [pc, #124]	@ (800f87c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d018      	beq.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	4a1a      	ldr	r2, [pc, #104]	@ (800f870 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	d013      	beq.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a1b      	ldr	r2, [pc, #108]	@ (800f880 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d00e      	beq.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4a1a      	ldr	r2, [pc, #104]	@ (800f884 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d009      	beq.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	4a18      	ldr	r2, [pc, #96]	@ (800f888 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d004      	beq.n	800f834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4a17      	ldr	r2, [pc, #92]	@ (800f88c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f830:	4293      	cmp	r3, r2
 800f832:	d10c      	bne.n	800f84e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f83a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	689b      	ldr	r3, [r3, #8]
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	4313      	orrs	r3, r2
 800f844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	68ba      	ldr	r2, [r7, #8]
 800f84c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2201      	movs	r2, #1
 800f852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f85e:	2300      	movs	r3, #0
}
 800f860:	4618      	mov	r0, r3
 800f862:	3714      	adds	r7, #20
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr
 800f86c:	40010000 	.word	0x40010000
 800f870:	40010400 	.word	0x40010400
 800f874:	40000400 	.word	0x40000400
 800f878:	40000800 	.word	0x40000800
 800f87c:	40000c00 	.word	0x40000c00
 800f880:	40001800 	.word	0x40001800
 800f884:	40014000 	.word	0x40014000
 800f888:	4000e000 	.word	0x4000e000
 800f88c:	4000e400 	.word	0x4000e400

0800f890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f898:	bf00      	nop
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f8ac:	bf00      	nop
 800f8ae:	370c      	adds	r7, #12
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b6:	4770      	bx	lr

0800f8b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b083      	sub	sp, #12
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f8c0:	bf00      	nop
 800f8c2:	370c      	adds	r7, #12
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ca:	4770      	bx	lr

0800f8cc <LL_GPIO_SetPinMode>:
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	6819      	ldr	r1, [r3, #0]
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	fb03 f203 	mul.w	r2, r3, r3
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	005b      	lsls	r3, r3, #1
 800f8e6:	4413      	add	r3, r2
 800f8e8:	43db      	mvns	r3, r3
 800f8ea:	ea01 0203 	and.w	r2, r1, r3
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	fb03 f303 	mul.w	r3, r3, r3
 800f8f4:	6879      	ldr	r1, [r7, #4]
 800f8f6:	fb01 f303 	mul.w	r3, r1, r3
 800f8fa:	431a      	orrs	r2, r3
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	601a      	str	r2, [r3, #0]
}
 800f900:	bf00      	nop
 800f902:	3714      	adds	r7, #20
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <LL_GPIO_SetPinOutputType>:
{
 800f90c:	b480      	push	{r7}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	685a      	ldr	r2, [r3, #4]
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	43db      	mvns	r3, r3
 800f920:	401a      	ands	r2, r3
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	6879      	ldr	r1, [r7, #4]
 800f926:	fb01 f303 	mul.w	r3, r1, r3
 800f92a:	431a      	orrs	r2, r3
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	605a      	str	r2, [r3, #4]
}
 800f930:	bf00      	nop
 800f932:	3714      	adds	r7, #20
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <LL_GPIO_SetPinSpeed>:
{
 800f93c:	b480      	push	{r7}
 800f93e:	b085      	sub	sp, #20
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	60b9      	str	r1, [r7, #8]
 800f946:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6899      	ldr	r1, [r3, #8]
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	fb03 f203 	mul.w	r2, r3, r3
 800f952:	4613      	mov	r3, r2
 800f954:	005b      	lsls	r3, r3, #1
 800f956:	4413      	add	r3, r2
 800f958:	43db      	mvns	r3, r3
 800f95a:	ea01 0203 	and.w	r2, r1, r3
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	fb03 f303 	mul.w	r3, r3, r3
 800f964:	6879      	ldr	r1, [r7, #4]
 800f966:	fb01 f303 	mul.w	r3, r1, r3
 800f96a:	431a      	orrs	r2, r3
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	609a      	str	r2, [r3, #8]
}
 800f970:	bf00      	nop
 800f972:	3714      	adds	r7, #20
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <LL_GPIO_SetPinPull>:
{
 800f97c:	b480      	push	{r7}
 800f97e:	b085      	sub	sp, #20
 800f980:	af00      	add	r7, sp, #0
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	68d9      	ldr	r1, [r3, #12]
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	fb03 f203 	mul.w	r2, r3, r3
 800f992:	4613      	mov	r3, r2
 800f994:	005b      	lsls	r3, r3, #1
 800f996:	4413      	add	r3, r2
 800f998:	43db      	mvns	r3, r3
 800f99a:	ea01 0203 	and.w	r2, r1, r3
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	fb03 f303 	mul.w	r3, r3, r3
 800f9a4:	6879      	ldr	r1, [r7, #4]
 800f9a6:	fb01 f303 	mul.w	r3, r1, r3
 800f9aa:	431a      	orrs	r2, r3
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	60da      	str	r2, [r3, #12]
}
 800f9b0:	bf00      	nop
 800f9b2:	3714      	adds	r7, #20
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <LL_GPIO_SetAFPin_0_7>:
{
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6a19      	ldr	r1, [r3, #32]
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	fb03 f303 	mul.w	r3, r3, r3
 800f9d2:	68ba      	ldr	r2, [r7, #8]
 800f9d4:	fb02 f303 	mul.w	r3, r2, r3
 800f9d8:	68ba      	ldr	r2, [r7, #8]
 800f9da:	fb03 f202 	mul.w	r2, r3, r2
 800f9de:	4613      	mov	r3, r2
 800f9e0:	011b      	lsls	r3, r3, #4
 800f9e2:	1a9b      	subs	r3, r3, r2
 800f9e4:	43db      	mvns	r3, r3
 800f9e6:	ea01 0203 	and.w	r2, r1, r3
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	fb03 f303 	mul.w	r3, r3, r3
 800f9f0:	68b9      	ldr	r1, [r7, #8]
 800f9f2:	fb01 f303 	mul.w	r3, r1, r3
 800f9f6:	68b9      	ldr	r1, [r7, #8]
 800f9f8:	fb01 f303 	mul.w	r3, r1, r3
 800f9fc:	6879      	ldr	r1, [r7, #4]
 800f9fe:	fb01 f303 	mul.w	r3, r1, r3
 800fa02:	431a      	orrs	r2, r3
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	621a      	str	r2, [r3, #32]
}
 800fa08:	bf00      	nop
 800fa0a:	3714      	adds	r7, #20
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <LL_GPIO_SetAFPin_8_15>:
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	0a1b      	lsrs	r3, r3, #8
 800fa28:	68ba      	ldr	r2, [r7, #8]
 800fa2a:	0a12      	lsrs	r2, r2, #8
 800fa2c:	fb02 f303 	mul.w	r3, r2, r3
 800fa30:	68ba      	ldr	r2, [r7, #8]
 800fa32:	0a12      	lsrs	r2, r2, #8
 800fa34:	fb02 f303 	mul.w	r3, r2, r3
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	0a12      	lsrs	r2, r2, #8
 800fa3c:	fb03 f202 	mul.w	r2, r3, r2
 800fa40:	4613      	mov	r3, r2
 800fa42:	011b      	lsls	r3, r3, #4
 800fa44:	1a9b      	subs	r3, r3, r2
 800fa46:	43db      	mvns	r3, r3
 800fa48:	ea01 0203 	and.w	r2, r1, r3
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	0a1b      	lsrs	r3, r3, #8
 800fa50:	68b9      	ldr	r1, [r7, #8]
 800fa52:	0a09      	lsrs	r1, r1, #8
 800fa54:	fb01 f303 	mul.w	r3, r1, r3
 800fa58:	68b9      	ldr	r1, [r7, #8]
 800fa5a:	0a09      	lsrs	r1, r1, #8
 800fa5c:	fb01 f303 	mul.w	r3, r1, r3
 800fa60:	68b9      	ldr	r1, [r7, #8]
 800fa62:	0a09      	lsrs	r1, r1, #8
 800fa64:	fb01 f303 	mul.w	r3, r1, r3
 800fa68:	6879      	ldr	r1, [r7, #4]
 800fa6a:	fb01 f303 	mul.w	r3, r1, r3
 800fa6e:	431a      	orrs	r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800fa74:	bf00      	nop
 800fa76:	3714      	adds	r7, #20
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7e:	4770      	bx	lr

0800fa80 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b088      	sub	sp, #32
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	fa93 f3a3 	rbit	r3, r3
 800fa96:	60fb      	str	r3, [r7, #12]
  return result;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d101      	bne.n	800faa6 <LL_GPIO_Init+0x26>
    return 32U;
 800faa2:	2320      	movs	r3, #32
 800faa4:	e003      	b.n	800faae <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	fab3 f383 	clz	r3, r3
 800faac:	b2db      	uxtb	r3, r3
 800faae:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800fab0:	e048      	b.n	800fb44 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	681a      	ldr	r2, [r3, #0]
 800fab6:	2101      	movs	r1, #1
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	fa01 f303 	lsl.w	r3, r1, r3
 800fabe:	4013      	ands	r3, r2
 800fac0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800fac2:	69bb      	ldr	r3, [r7, #24]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d03a      	beq.n	800fb3e <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	2b01      	cmp	r3, #1
 800face:	d003      	beq.n	800fad8 <LL_GPIO_Init+0x58>
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	2b02      	cmp	r3, #2
 800fad6:	d10e      	bne.n	800faf6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	461a      	mov	r2, r3
 800fade:	69b9      	ldr	r1, [r7, #24]
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7ff ff2b 	bl	800f93c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	6819      	ldr	r1, [r3, #0]
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	461a      	mov	r2, r3
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f7ff ff0b 	bl	800f90c <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	691b      	ldr	r3, [r3, #16]
 800fafa:	461a      	mov	r2, r3
 800fafc:	69b9      	ldr	r1, [r7, #24]
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f7ff ff3c 	bl	800f97c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	2b02      	cmp	r3, #2
 800fb0a:	d111      	bne.n	800fb30 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	2bff      	cmp	r3, #255	@ 0xff
 800fb10:	d807      	bhi.n	800fb22 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	695b      	ldr	r3, [r3, #20]
 800fb16:	461a      	mov	r2, r3
 800fb18:	69b9      	ldr	r1, [r7, #24]
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7ff ff4e 	bl	800f9bc <LL_GPIO_SetAFPin_0_7>
 800fb20:	e006      	b.n	800fb30 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	695b      	ldr	r3, [r3, #20]
 800fb26:	461a      	mov	r2, r3
 800fb28:	69b9      	ldr	r1, [r7, #24]
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f7ff ff72 	bl	800fa14 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	461a      	mov	r2, r3
 800fb36:	69b9      	ldr	r1, [r7, #24]
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f7ff fec7 	bl	800f8cc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	3301      	adds	r3, #1
 800fb42:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	fa22 f303 	lsr.w	r3, r2, r3
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1af      	bne.n	800fab2 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3720      	adds	r7, #32
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800fb60:	4b07      	ldr	r3, [pc, #28]	@ (800fb80 <LL_RCC_HSE_IsReady+0x24>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fb6c:	d101      	bne.n	800fb72 <LL_RCC_HSE_IsReady+0x16>
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e000      	b.n	800fb74 <LL_RCC_HSE_IsReady+0x18>
 800fb72:	2300      	movs	r3, #0
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	58024400 	.word	0x58024400

0800fb84 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800fb84:	b480      	push	{r7}
 800fb86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800fb88:	4b06      	ldr	r3, [pc, #24]	@ (800fba4 <LL_RCC_HSI_IsReady+0x20>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f003 0304 	and.w	r3, r3, #4
 800fb90:	2b04      	cmp	r3, #4
 800fb92:	d101      	bne.n	800fb98 <LL_RCC_HSI_IsReady+0x14>
 800fb94:	2301      	movs	r3, #1
 800fb96:	e000      	b.n	800fb9a <LL_RCC_HSI_IsReady+0x16>
 800fb98:	2300      	movs	r3, #0
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr
 800fba4:	58024400 	.word	0x58024400

0800fba8 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 800fbac:	4b04      	ldr	r3, [pc, #16]	@ (800fbc0 <LL_RCC_HSI_GetDivider+0x18>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f003 0318 	and.w	r3, r3, #24
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr
 800fbbe:	bf00      	nop
 800fbc0:	58024400 	.word	0x58024400

0800fbc4 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800fbc8:	4b07      	ldr	r3, [pc, #28]	@ (800fbe8 <LL_RCC_CSI_IsReady+0x24>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbd4:	d101      	bne.n	800fbda <LL_RCC_CSI_IsReady+0x16>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e000      	b.n	800fbdc <LL_RCC_CSI_IsReady+0x18>
 800fbda:	2300      	movs	r3, #0
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe4:	4770      	bx	lr
 800fbe6:	bf00      	nop
 800fbe8:	58024400 	.word	0x58024400

0800fbec <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800fbec:	b480      	push	{r7}
 800fbee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800fbf0:	4b06      	ldr	r3, [pc, #24]	@ (800fc0c <LL_RCC_LSE_IsReady+0x20>)
 800fbf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbf4:	f003 0302 	and.w	r3, r3, #2
 800fbf8:	2b02      	cmp	r3, #2
 800fbfa:	d101      	bne.n	800fc00 <LL_RCC_LSE_IsReady+0x14>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	e000      	b.n	800fc02 <LL_RCC_LSE_IsReady+0x16>
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	46bd      	mov	sp, r7
 800fc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0a:	4770      	bx	lr
 800fc0c:	58024400 	.word	0x58024400

0800fc10 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800fc10:	b480      	push	{r7}
 800fc12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800fc14:	4b04      	ldr	r3, [pc, #16]	@ (800fc28 <LL_RCC_GetSysClkSource+0x18>)
 800fc16:	691b      	ldr	r3, [r3, #16]
 800fc18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	58024400 	.word	0x58024400

0800fc2c <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 800fc30:	4b04      	ldr	r3, [pc, #16]	@ (800fc44 <LL_RCC_GetSysPrescaler+0x18>)
 800fc32:	699b      	ldr	r3, [r3, #24]
 800fc34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	58024400 	.word	0x58024400

0800fc48 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 800fc4c:	4b04      	ldr	r3, [pc, #16]	@ (800fc60 <LL_RCC_GetAHBPrescaler+0x18>)
 800fc4e:	699b      	ldr	r3, [r3, #24]
 800fc50:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	58024400 	.word	0x58024400

0800fc64 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800fc64:	b480      	push	{r7}
 800fc66:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800fc68:	4b04      	ldr	r3, [pc, #16]	@ (800fc7c <LL_RCC_GetAPB1Prescaler+0x18>)
 800fc6a:	69db      	ldr	r3, [r3, #28]
 800fc6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop
 800fc7c:	58024400 	.word	0x58024400

0800fc80 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800fc80:	b480      	push	{r7}
 800fc82:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 800fc84:	4b04      	ldr	r3, [pc, #16]	@ (800fc98 <LL_RCC_GetAPB2Prescaler+0x18>)
 800fc86:	69db      	ldr	r3, [r3, #28]
 800fc88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr
 800fc96:	bf00      	nop
 800fc98:	58024400 	.word	0x58024400

0800fc9c <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b085      	sub	sp, #20
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	b2da      	uxtb	r2, r3
 800fca8:	4b0e      	ldr	r3, [pc, #56]	@ (800fce4 <LL_RCC_GetClockSource+0x48>)
 800fcaa:	4413      	add	r3, r2
 800fcac:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	0e19      	lsrs	r1, r3, #24
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	0a1b      	lsrs	r3, r3, #8
 800fcba:	f003 031f 	and.w	r3, r3, #31
 800fcbe:	fa01 f303 	lsl.w	r3, r1, r3
 800fcc2:	401a      	ands	r2, r3
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	0a1b      	lsrs	r3, r3, #8
 800fcc8:	f003 031f 	and.w	r3, r3, #31
 800fccc:	fa22 f303 	lsr.w	r3, r2, r3
 800fcd0:	041a      	lsls	r2, r3, #16
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4313      	orrs	r3, r2
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3714      	adds	r7, #20
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	5802444c 	.word	0x5802444c

0800fce8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff ffd3 	bl	800fc9c <LL_RCC_GetClockSource>
 800fcf6:	4603      	mov	r3, r0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 800fd00:	b480      	push	{r7}
 800fd02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 800fd04:	4b04      	ldr	r3, [pc, #16]	@ (800fd18 <LL_RCC_PLL_GetSource+0x18>)
 800fd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd08:	f003 0303 	and.w	r3, r3, #3
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd14:	4770      	bx	lr
 800fd16:	bf00      	nop
 800fd18:	58024400 	.word	0x58024400

0800fd1c <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 800fd20:	4b07      	ldr	r3, [pc, #28]	@ (800fd40 <LL_RCC_PLL1P_IsEnabled+0x24>)
 800fd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fd28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fd2c:	d101      	bne.n	800fd32 <LL_RCC_PLL1P_IsEnabled+0x16>
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e000      	b.n	800fd34 <LL_RCC_PLL1P_IsEnabled+0x18>
 800fd32:	2300      	movs	r3, #0
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr
 800fd3e:	bf00      	nop
 800fd40:	58024400 	.word	0x58024400

0800fd44 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 800fd44:	b480      	push	{r7}
 800fd46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 800fd48:	4b07      	ldr	r3, [pc, #28]	@ (800fd68 <LL_RCC_PLL1Q_IsEnabled+0x24>)
 800fd4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fd50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fd54:	d101      	bne.n	800fd5a <LL_RCC_PLL1Q_IsEnabled+0x16>
 800fd56:	2301      	movs	r3, #1
 800fd58:	e000      	b.n	800fd5c <LL_RCC_PLL1Q_IsEnabled+0x18>
 800fd5a:	2300      	movs	r3, #0
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	58024400 	.word	0x58024400

0800fd6c <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 800fd70:	4b07      	ldr	r3, [pc, #28]	@ (800fd90 <LL_RCC_PLL1R_IsEnabled+0x24>)
 800fd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fd78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fd7c:	d101      	bne.n	800fd82 <LL_RCC_PLL1R_IsEnabled+0x16>
 800fd7e:	2301      	movs	r3, #1
 800fd80:	e000      	b.n	800fd84 <LL_RCC_PLL1R_IsEnabled+0x18>
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	46bd      	mov	sp, r7
 800fd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8c:	4770      	bx	lr
 800fd8e:	bf00      	nop
 800fd90:	58024400 	.word	0x58024400

0800fd94 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 800fd94:	b480      	push	{r7}
 800fd96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 800fd98:	4b06      	ldr	r3, [pc, #24]	@ (800fdb4 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800fd9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd9c:	f003 0301 	and.w	r3, r3, #1
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d101      	bne.n	800fda8 <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 800fda4:	2301      	movs	r3, #1
 800fda6:	e000      	b.n	800fdaa <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr
 800fdb4:	58024400 	.word	0x58024400

0800fdb8 <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 800fdbc:	4b04      	ldr	r3, [pc, #16]	@ (800fdd0 <LL_RCC_PLL1_GetN+0x18>)
 800fdbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdc4:	3301      	adds	r3, #1
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdce:	4770      	bx	lr
 800fdd0:	58024400 	.word	0x58024400

0800fdd4 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800fdd8:	4b04      	ldr	r3, [pc, #16]	@ (800fdec <LL_RCC_PLL1_GetM+0x18>)
 800fdda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fddc:	091b      	lsrs	r3, r3, #4
 800fdde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr
 800fdec:	58024400 	.word	0x58024400

0800fdf0 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 800fdf4:	4b05      	ldr	r3, [pc, #20]	@ (800fe0c <LL_RCC_PLL1_GetP+0x1c>)
 800fdf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdf8:	0a5b      	lsrs	r3, r3, #9
 800fdfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdfe:	3301      	adds	r3, #1
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	58024400 	.word	0x58024400

0800fe10 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 800fe10:	b480      	push	{r7}
 800fe12:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 800fe14:	4b05      	ldr	r3, [pc, #20]	@ (800fe2c <LL_RCC_PLL1_GetQ+0x1c>)
 800fe16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe18:	0c1b      	lsrs	r3, r3, #16
 800fe1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe1e:	3301      	adds	r3, #1
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop
 800fe2c:	58024400 	.word	0x58024400

0800fe30 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 800fe30:	b480      	push	{r7}
 800fe32:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 800fe34:	4b05      	ldr	r3, [pc, #20]	@ (800fe4c <LL_RCC_PLL1_GetR+0x1c>)
 800fe36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe38:	0e1b      	lsrs	r3, r3, #24
 800fe3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe3e:	3301      	adds	r3, #1
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
 800fe4a:	bf00      	nop
 800fe4c:	58024400 	.word	0x58024400

0800fe50 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 800fe50:	b480      	push	{r7}
 800fe52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 800fe54:	4b04      	ldr	r3, [pc, #16]	@ (800fe68 <LL_RCC_PLL1_GetFRACN+0x18>)
 800fe56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe58:	08db      	lsrs	r3, r3, #3
 800fe5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr
 800fe68:	58024400 	.word	0x58024400

0800fe6c <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 800fe70:	4b07      	ldr	r3, [pc, #28]	@ (800fe90 <LL_RCC_PLL2_IsReady+0x24>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fe78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fe7c:	d101      	bne.n	800fe82 <LL_RCC_PLL2_IsReady+0x16>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	e000      	b.n	800fe84 <LL_RCC_PLL2_IsReady+0x18>
 800fe82:	2300      	movs	r3, #0
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	58024400 	.word	0x58024400

0800fe94 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 800fe94:	b480      	push	{r7}
 800fe96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 800fe98:	4b07      	ldr	r3, [pc, #28]	@ (800feb8 <LL_RCC_PLL2P_IsEnabled+0x24>)
 800fe9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fea0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800fea4:	d101      	bne.n	800feaa <LL_RCC_PLL2P_IsEnabled+0x16>
 800fea6:	2301      	movs	r3, #1
 800fea8:	e000      	b.n	800feac <LL_RCC_PLL2P_IsEnabled+0x18>
 800feaa:	2300      	movs	r3, #0
}
 800feac:	4618      	mov	r0, r3
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	58024400 	.word	0x58024400

0800febc <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 800febc:	b480      	push	{r7}
 800febe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 800fec0:	4b07      	ldr	r3, [pc, #28]	@ (800fee0 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 800fec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fecc:	d101      	bne.n	800fed2 <LL_RCC_PLL2Q_IsEnabled+0x16>
 800fece:	2301      	movs	r3, #1
 800fed0:	e000      	b.n	800fed4 <LL_RCC_PLL2Q_IsEnabled+0x18>
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop
 800fee0:	58024400 	.word	0x58024400

0800fee4 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 800fee4:	b480      	push	{r7}
 800fee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 800fee8:	4b07      	ldr	r3, [pc, #28]	@ (800ff08 <LL_RCC_PLL2R_IsEnabled+0x24>)
 800feea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800feec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fef0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fef4:	d101      	bne.n	800fefa <LL_RCC_PLL2R_IsEnabled+0x16>
 800fef6:	2301      	movs	r3, #1
 800fef8:	e000      	b.n	800fefc <LL_RCC_PLL2R_IsEnabled+0x18>
 800fefa:	2300      	movs	r3, #0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	58024400 	.word	0x58024400

0800ff0c <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 800ff10:	4b06      	ldr	r3, [pc, #24]	@ (800ff2c <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 800ff12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff14:	f003 0310 	and.w	r3, r3, #16
 800ff18:	2b10      	cmp	r3, #16
 800ff1a:	d101      	bne.n	800ff20 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e000      	b.n	800ff22 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 800ff20:	2300      	movs	r3, #0
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	58024400 	.word	0x58024400

0800ff30 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 800ff30:	b480      	push	{r7}
 800ff32:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 800ff34:	4b04      	ldr	r3, [pc, #16]	@ (800ff48 <LL_RCC_PLL2_GetN+0x18>)
 800ff36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff3c:	3301      	adds	r3, #1
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr
 800ff48:	58024400 	.word	0x58024400

0800ff4c <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 800ff50:	4b04      	ldr	r3, [pc, #16]	@ (800ff64 <LL_RCC_PLL2_GetM+0x18>)
 800ff52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff54:	0b1b      	lsrs	r3, r3, #12
 800ff56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr
 800ff64:	58024400 	.word	0x58024400

0800ff68 <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 800ff6c:	4b05      	ldr	r3, [pc, #20]	@ (800ff84 <LL_RCC_PLL2_GetP+0x1c>)
 800ff6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff70:	0a5b      	lsrs	r3, r3, #9
 800ff72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff76:	3301      	adds	r3, #1
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	58024400 	.word	0x58024400

0800ff88 <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 800ff8c:	4b05      	ldr	r3, [pc, #20]	@ (800ffa4 <LL_RCC_PLL2_GetQ+0x1c>)
 800ff8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff90:	0c1b      	lsrs	r3, r3, #16
 800ff92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff96:	3301      	adds	r3, #1
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr
 800ffa2:	bf00      	nop
 800ffa4:	58024400 	.word	0x58024400

0800ffa8 <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800ffa8:	b480      	push	{r7}
 800ffaa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 800ffac:	4b05      	ldr	r3, [pc, #20]	@ (800ffc4 <LL_RCC_PLL2_GetR+0x1c>)
 800ffae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffb0:	0e1b      	lsrs	r3, r3, #24
 800ffb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffb6:	3301      	adds	r3, #1
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	58024400 	.word	0x58024400

0800ffc8 <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 800ffcc:	4b04      	ldr	r3, [pc, #16]	@ (800ffe0 <LL_RCC_PLL2_GetFRACN+0x18>)
 800ffce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ffd0:	08db      	lsrs	r3, r3, #3
 800ffd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr
 800ffe0:	58024400 	.word	0x58024400

0800ffe4 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800ffe8:	4b07      	ldr	r3, [pc, #28]	@ (8010008 <LL_RCC_PLL3_IsReady+0x24>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fff4:	d101      	bne.n	800fffa <LL_RCC_PLL3_IsReady+0x16>
 800fff6:	2301      	movs	r3, #1
 800fff8:	e000      	b.n	800fffc <LL_RCC_PLL3_IsReady+0x18>
 800fffa:	2300      	movs	r3, #0
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	58024400 	.word	0x58024400

0801000c <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 801000c:	b480      	push	{r7}
 801000e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8010010:	4b07      	ldr	r3, [pc, #28]	@ (8010030 <LL_RCC_PLL3P_IsEnabled+0x24>)
 8010012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010018:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801001c:	d101      	bne.n	8010022 <LL_RCC_PLL3P_IsEnabled+0x16>
 801001e:	2301      	movs	r3, #1
 8010020:	e000      	b.n	8010024 <LL_RCC_PLL3P_IsEnabled+0x18>
 8010022:	2300      	movs	r3, #0
}
 8010024:	4618      	mov	r0, r3
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop
 8010030:	58024400 	.word	0x58024400

08010034 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8010034:	b480      	push	{r7}
 8010036:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 8010038:	4b07      	ldr	r3, [pc, #28]	@ (8010058 <LL_RCC_PLL3Q_IsEnabled+0x24>)
 801003a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801003c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010040:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010044:	d101      	bne.n	801004a <LL_RCC_PLL3Q_IsEnabled+0x16>
 8010046:	2301      	movs	r3, #1
 8010048:	e000      	b.n	801004c <LL_RCC_PLL3Q_IsEnabled+0x18>
 801004a:	2300      	movs	r3, #0
}
 801004c:	4618      	mov	r0, r3
 801004e:	46bd      	mov	sp, r7
 8010050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010054:	4770      	bx	lr
 8010056:	bf00      	nop
 8010058:	58024400 	.word	0x58024400

0801005c <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 801005c:	b480      	push	{r7}
 801005e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8010060:	4b07      	ldr	r3, [pc, #28]	@ (8010080 <LL_RCC_PLL3R_IsEnabled+0x24>)
 8010062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010068:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801006c:	d101      	bne.n	8010072 <LL_RCC_PLL3R_IsEnabled+0x16>
 801006e:	2301      	movs	r3, #1
 8010070:	e000      	b.n	8010074 <LL_RCC_PLL3R_IsEnabled+0x18>
 8010072:	2300      	movs	r3, #0
}
 8010074:	4618      	mov	r0, r3
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	58024400 	.word	0x58024400

08010084 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8010084:	b480      	push	{r7}
 8010086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 8010088:	4b07      	ldr	r3, [pc, #28]	@ (80100a8 <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 801008a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801008c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010090:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010094:	d101      	bne.n	801009a <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 8010096:	2301      	movs	r3, #1
 8010098:	e000      	b.n	801009c <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 801009a:	2300      	movs	r3, #0
}
 801009c:	4618      	mov	r0, r3
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	58024400 	.word	0x58024400

080100ac <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 80100ac:	b480      	push	{r7}
 80100ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 80100b0:	4b04      	ldr	r3, [pc, #16]	@ (80100c4 <LL_RCC_PLL3_GetN+0x18>)
 80100b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100b8:	3301      	adds	r3, #1
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr
 80100c4:	58024400 	.word	0x58024400

080100c8 <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 80100c8:	b480      	push	{r7}
 80100ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 80100cc:	4b04      	ldr	r3, [pc, #16]	@ (80100e0 <LL_RCC_PLL3_GetM+0x18>)
 80100ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100d0:	0d1b      	lsrs	r3, r3, #20
 80100d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr
 80100e0:	58024400 	.word	0x58024400

080100e4 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 80100e4:	b480      	push	{r7}
 80100e6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 80100e8:	4b05      	ldr	r3, [pc, #20]	@ (8010100 <LL_RCC_PLL3_GetP+0x1c>)
 80100ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80100ec:	0a5b      	lsrs	r3, r3, #9
 80100ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100f2:	3301      	adds	r3, #1
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	46bd      	mov	sp, r7
 80100f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fc:	4770      	bx	lr
 80100fe:	bf00      	nop
 8010100:	58024400 	.word	0x58024400

08010104 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8010104:	b480      	push	{r7}
 8010106:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 8010108:	4b05      	ldr	r3, [pc, #20]	@ (8010120 <LL_RCC_PLL3_GetQ+0x1c>)
 801010a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801010c:	0c1b      	lsrs	r3, r3, #16
 801010e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010112:	3301      	adds	r3, #1
}
 8010114:	4618      	mov	r0, r3
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr
 801011e:	bf00      	nop
 8010120:	58024400 	.word	0x58024400

08010124 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8010124:	b480      	push	{r7}
 8010126:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 8010128:	4b05      	ldr	r3, [pc, #20]	@ (8010140 <LL_RCC_PLL3_GetR+0x1c>)
 801012a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801012c:	0e1b      	lsrs	r3, r3, #24
 801012e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010132:	3301      	adds	r3, #1
}
 8010134:	4618      	mov	r0, r3
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop
 8010140:	58024400 	.word	0x58024400

08010144 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8010144:	b480      	push	{r7}
 8010146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 8010148:	4b04      	ldr	r3, [pc, #16]	@ (801015c <LL_RCC_PLL3_GetFRACN+0x18>)
 801014a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801014c:	08db      	lsrs	r3, r3, #3
 801014e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8010152:	4618      	mov	r0, r3
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr
 801015c:	58024400 	.word	0x58024400

08010160 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b08a      	sub	sp, #40	@ 0x28
 8010164:	af02      	add	r7, sp, #8
 8010166:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8010168:	2300      	movs	r3, #0
 801016a:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 801016c:	2300      	movs	r3, #0
 801016e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8010170:	f7ff fdc6 	bl	800fd00 <LL_RCC_PLL_GetSource>
 8010174:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	2b02      	cmp	r3, #2
 801017a:	d01f      	beq.n	80101bc <LL_RCC_GetPLL1ClockFreq+0x5c>
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	2b02      	cmp	r3, #2
 8010180:	d824      	bhi.n	80101cc <LL_RCC_GetPLL1ClockFreq+0x6c>
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d003      	beq.n	8010190 <LL_RCC_GetPLL1ClockFreq+0x30>
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	2b01      	cmp	r3, #1
 801018c:	d00e      	beq.n	80101ac <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 801018e:	e01d      	b.n	80101cc <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8010190:	f7ff fcf8 	bl	800fb84 <LL_RCC_HSI_IsReady>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d01a      	beq.n	80101d0 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 801019a:	f7ff fd05 	bl	800fba8 <LL_RCC_HSI_GetDivider>
 801019e:	4603      	mov	r3, r0
 80101a0:	08db      	lsrs	r3, r3, #3
 80101a2:	4a38      	ldr	r2, [pc, #224]	@ (8010284 <LL_RCC_GetPLL1ClockFreq+0x124>)
 80101a4:	fa22 f303 	lsr.w	r3, r2, r3
 80101a8:	61fb      	str	r3, [r7, #28]
      break;
 80101aa:	e011      	b.n	80101d0 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 80101ac:	f7ff fd0a 	bl	800fbc4 <LL_RCC_CSI_IsReady>
 80101b0:	4603      	mov	r3, r0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d00e      	beq.n	80101d4 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 80101b6:	4b34      	ldr	r3, [pc, #208]	@ (8010288 <LL_RCC_GetPLL1ClockFreq+0x128>)
 80101b8:	61fb      	str	r3, [r7, #28]
      break;
 80101ba:	e00b      	b.n	80101d4 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 80101bc:	f7ff fcce 	bl	800fb5c <LL_RCC_HSE_IsReady>
 80101c0:	4603      	mov	r3, r0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d008      	beq.n	80101d8 <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80101c6:	4b31      	ldr	r3, [pc, #196]	@ (801028c <LL_RCC_GetPLL1ClockFreq+0x12c>)
 80101c8:	61fb      	str	r3, [r7, #28]
      break;
 80101ca:	e005      	b.n	80101d8 <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 80101cc:	bf00      	nop
 80101ce:	e004      	b.n	80101da <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 80101d0:	bf00      	nop
 80101d2:	e002      	b.n	80101da <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 80101d4:	bf00      	nop
 80101d6:	e000      	b.n	80101da <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 80101d8:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2200      	movs	r2, #0
 80101de:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 80101ec:	f7ff fdf2 	bl	800fdd4 <LL_RCC_PLL1_GetM>
 80101f0:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 80101f2:	f7ff fde1 	bl	800fdb8 <LL_RCC_PLL1_GetN>
 80101f6:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 80101f8:	f7ff fdcc 	bl	800fd94 <LL_RCC_PLL1FRACN_IsEnabled>
 80101fc:	4603      	mov	r3, r0
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d002      	beq.n	8010208 <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8010202:	f7ff fe25 	bl	800fe50 <LL_RCC_PLL1_GetFRACN>
 8010206:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d035      	beq.n	801027a <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 801020e:	f7ff fd85 	bl	800fd1c <LL_RCC_PLL1P_IsEnabled>
 8010212:	4603      	mov	r3, r0
 8010214:	2b00      	cmp	r3, #0
 8010216:	d00c      	beq.n	8010232 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 8010218:	f7ff fdea 	bl	800fdf0 <LL_RCC_PLL1_GetP>
 801021c:	4603      	mov	r3, r0
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	68fa      	ldr	r2, [r7, #12]
 8010224:	6939      	ldr	r1, [r7, #16]
 8010226:	69f8      	ldr	r0, [r7, #28]
 8010228:	f000 f964 	bl	80104f4 <LL_RCC_CalcPLLClockFreq>
 801022c:	4602      	mov	r2, r0
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8010232:	f7ff fd87 	bl	800fd44 <LL_RCC_PLL1Q_IsEnabled>
 8010236:	4603      	mov	r3, r0
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00c      	beq.n	8010256 <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 801023c:	f7ff fde8 	bl	800fe10 <LL_RCC_PLL1_GetQ>
 8010240:	4603      	mov	r3, r0
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	68fa      	ldr	r2, [r7, #12]
 8010248:	6939      	ldr	r1, [r7, #16]
 801024a:	69f8      	ldr	r0, [r7, #28]
 801024c:	f000 f952 	bl	80104f4 <LL_RCC_CalcPLLClockFreq>
 8010250:	4602      	mov	r2, r0
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 8010256:	f7ff fd89 	bl	800fd6c <LL_RCC_PLL1R_IsEnabled>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00c      	beq.n	801027a <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8010260:	f7ff fde6 	bl	800fe30 <LL_RCC_PLL1_GetR>
 8010264:	4603      	mov	r3, r0
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	68fa      	ldr	r2, [r7, #12]
 801026c:	6939      	ldr	r1, [r7, #16]
 801026e:	69f8      	ldr	r0, [r7, #28]
 8010270:	f000 f940 	bl	80104f4 <LL_RCC_CalcPLLClockFreq>
 8010274:	4602      	mov	r2, r0
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	609a      	str	r2, [r3, #8]
    }
  }
}
 801027a:	bf00      	nop
 801027c:	3720      	adds	r7, #32
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	03d09000 	.word	0x03d09000
 8010288:	003d0900 	.word	0x003d0900
 801028c:	017d7840 	.word	0x017d7840

08010290 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b08a      	sub	sp, #40	@ 0x28
 8010294:	af02      	add	r7, sp, #8
 8010296:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8010298:	2300      	movs	r3, #0
 801029a:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 801029c:	2300      	movs	r3, #0
 801029e:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 80102a0:	f7ff fd2e 	bl	800fd00 <LL_RCC_PLL_GetSource>
 80102a4:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	2b02      	cmp	r3, #2
 80102aa:	d01f      	beq.n	80102ec <LL_RCC_GetPLL2ClockFreq+0x5c>
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	2b02      	cmp	r3, #2
 80102b0:	d824      	bhi.n	80102fc <LL_RCC_GetPLL2ClockFreq+0x6c>
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d003      	beq.n	80102c0 <LL_RCC_GetPLL2ClockFreq+0x30>
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	d00e      	beq.n	80102dc <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 80102be:	e01d      	b.n	80102fc <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80102c0:	f7ff fc60 	bl	800fb84 <LL_RCC_HSI_IsReady>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d01a      	beq.n	8010300 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80102ca:	f7ff fc6d 	bl	800fba8 <LL_RCC_HSI_GetDivider>
 80102ce:	4603      	mov	r3, r0
 80102d0:	08db      	lsrs	r3, r3, #3
 80102d2:	4a38      	ldr	r2, [pc, #224]	@ (80103b4 <LL_RCC_GetPLL2ClockFreq+0x124>)
 80102d4:	fa22 f303 	lsr.w	r3, r2, r3
 80102d8:	61fb      	str	r3, [r7, #28]
      break;
 80102da:	e011      	b.n	8010300 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 80102dc:	f7ff fc72 	bl	800fbc4 <LL_RCC_CSI_IsReady>
 80102e0:	4603      	mov	r3, r0
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00e      	beq.n	8010304 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 80102e6:	4b34      	ldr	r3, [pc, #208]	@ (80103b8 <LL_RCC_GetPLL2ClockFreq+0x128>)
 80102e8:	61fb      	str	r3, [r7, #28]
      break;
 80102ea:	e00b      	b.n	8010304 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 80102ec:	f7ff fc36 	bl	800fb5c <LL_RCC_HSE_IsReady>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d008      	beq.n	8010308 <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 80102f6:	4b31      	ldr	r3, [pc, #196]	@ (80103bc <LL_RCC_GetPLL2ClockFreq+0x12c>)
 80102f8:	61fb      	str	r3, [r7, #28]
      break;
 80102fa:	e005      	b.n	8010308 <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 80102fc:	bf00      	nop
 80102fe:	e004      	b.n	801030a <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8010300:	bf00      	nop
 8010302:	e002      	b.n	801030a <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8010304:	bf00      	nop
 8010306:	e000      	b.n	801030a <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8010308:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 801031c:	f7ff fe16 	bl	800ff4c <LL_RCC_PLL2_GetM>
 8010320:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8010322:	f7ff fe05 	bl	800ff30 <LL_RCC_PLL2_GetN>
 8010326:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8010328:	f7ff fdf0 	bl	800ff0c <LL_RCC_PLL2FRACN_IsEnabled>
 801032c:	4603      	mov	r3, r0
 801032e:	2b00      	cmp	r3, #0
 8010330:	d002      	beq.n	8010338 <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8010332:	f7ff fe49 	bl	800ffc8 <LL_RCC_PLL2_GetFRACN>
 8010336:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d035      	beq.n	80103aa <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 801033e:	f7ff fda9 	bl	800fe94 <LL_RCC_PLL2P_IsEnabled>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00c      	beq.n	8010362 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8010348:	f7ff fe0e 	bl	800ff68 <LL_RCC_PLL2_GetP>
 801034c:	4603      	mov	r3, r0
 801034e:	9300      	str	r3, [sp, #0]
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	6939      	ldr	r1, [r7, #16]
 8010356:	69f8      	ldr	r0, [r7, #28]
 8010358:	f000 f8cc 	bl	80104f4 <LL_RCC_CalcPLLClockFreq>
 801035c:	4602      	mov	r2, r0
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8010362:	f7ff fdab 	bl	800febc <LL_RCC_PLL2Q_IsEnabled>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	d00c      	beq.n	8010386 <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 801036c:	f7ff fe0c 	bl	800ff88 <LL_RCC_PLL2_GetQ>
 8010370:	4603      	mov	r3, r0
 8010372:	9300      	str	r3, [sp, #0]
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	6939      	ldr	r1, [r7, #16]
 801037a:	69f8      	ldr	r0, [r7, #28]
 801037c:	f000 f8ba 	bl	80104f4 <LL_RCC_CalcPLLClockFreq>
 8010380:	4602      	mov	r2, r0
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8010386:	f7ff fdad 	bl	800fee4 <LL_RCC_PLL2R_IsEnabled>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d00c      	beq.n	80103aa <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8010390:	f7ff fe0a 	bl	800ffa8 <LL_RCC_PLL2_GetR>
 8010394:	4603      	mov	r3, r0
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	6939      	ldr	r1, [r7, #16]
 801039e:	69f8      	ldr	r0, [r7, #28]
 80103a0:	f000 f8a8 	bl	80104f4 <LL_RCC_CalcPLLClockFreq>
 80103a4:	4602      	mov	r2, r0
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	609a      	str	r2, [r3, #8]
    }
  }
}
 80103aa:	bf00      	nop
 80103ac:	3720      	adds	r7, #32
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	03d09000 	.word	0x03d09000
 80103b8:	003d0900 	.word	0x003d0900
 80103bc:	017d7840 	.word	0x017d7840

080103c0 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b08a      	sub	sp, #40	@ 0x28
 80103c4:	af02      	add	r7, sp, #8
 80103c6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 80103c8:	2300      	movs	r3, #0
 80103ca:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 80103cc:	2300      	movs	r3, #0
 80103ce:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 80103d0:	f7ff fc96 	bl	800fd00 <LL_RCC_PLL_GetSource>
 80103d4:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	2b02      	cmp	r3, #2
 80103da:	d01f      	beq.n	801041c <LL_RCC_GetPLL3ClockFreq+0x5c>
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	2b02      	cmp	r3, #2
 80103e0:	d824      	bhi.n	801042c <LL_RCC_GetPLL3ClockFreq+0x6c>
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d003      	beq.n	80103f0 <LL_RCC_GetPLL3ClockFreq+0x30>
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d00e      	beq.n	801040c <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 80103ee:	e01d      	b.n	801042c <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 80103f0:	f7ff fbc8 	bl	800fb84 <LL_RCC_HSI_IsReady>
 80103f4:	4603      	mov	r3, r0
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d01a      	beq.n	8010430 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80103fa:	f7ff fbd5 	bl	800fba8 <LL_RCC_HSI_GetDivider>
 80103fe:	4603      	mov	r3, r0
 8010400:	08db      	lsrs	r3, r3, #3
 8010402:	4a39      	ldr	r2, [pc, #228]	@ (80104e8 <LL_RCC_GetPLL3ClockFreq+0x128>)
 8010404:	fa22 f303 	lsr.w	r3, r2, r3
 8010408:	61fb      	str	r3, [r7, #28]
      break;
 801040a:	e011      	b.n	8010430 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 801040c:	f7ff fbda 	bl	800fbc4 <LL_RCC_CSI_IsReady>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d00e      	beq.n	8010434 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8010416:	4b35      	ldr	r3, [pc, #212]	@ (80104ec <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8010418:	61fb      	str	r3, [r7, #28]
      break;
 801041a:	e00b      	b.n	8010434 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 801041c:	f7ff fb9e 	bl	800fb5c <LL_RCC_HSE_IsReady>
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d008      	beq.n	8010438 <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8010426:	4b32      	ldr	r3, [pc, #200]	@ (80104f0 <LL_RCC_GetPLL3ClockFreq+0x130>)
 8010428:	61fb      	str	r3, [r7, #28]
      break;
 801042a:	e005      	b.n	8010438 <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 801042c:	bf00      	nop
 801042e:	e004      	b.n	801043a <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8010430:	bf00      	nop
 8010432:	e002      	b.n	801043a <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8010434:	bf00      	nop
 8010436:	e000      	b.n	801043a <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8010438:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2200      	movs	r2, #0
 801043e:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2200      	movs	r2, #0
 8010444:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2200      	movs	r2, #0
 801044a:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 801044c:	f7ff fe3c 	bl	80100c8 <LL_RCC_PLL3_GetM>
 8010450:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8010452:	f7ff fe2b 	bl	80100ac <LL_RCC_PLL3_GetN>
 8010456:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8010458:	f7ff fe14 	bl	8010084 <LL_RCC_PLL3FRACN_IsEnabled>
 801045c:	4603      	mov	r3, r0
 801045e:	2b00      	cmp	r3, #0
 8010460:	d002      	beq.n	8010468 <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8010462:	f7ff fe6f 	bl	8010144 <LL_RCC_PLL3_GetFRACN>
 8010466:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d038      	beq.n	80104e0 <LL_RCC_GetPLL3ClockFreq+0x120>
 801046e:	69fb      	ldr	r3, [r7, #28]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d035      	beq.n	80104e0 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8010474:	f7ff fdca 	bl	801000c <LL_RCC_PLL3P_IsEnabled>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00c      	beq.n	8010498 <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 801047e:	f7ff fe31 	bl	80100e4 <LL_RCC_PLL3_GetP>
 8010482:	4603      	mov	r3, r0
 8010484:	9300      	str	r3, [sp, #0]
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	68fa      	ldr	r2, [r7, #12]
 801048a:	6939      	ldr	r1, [r7, #16]
 801048c:	69f8      	ldr	r0, [r7, #28]
 801048e:	f000 f831 	bl	80104f4 <LL_RCC_CalcPLLClockFreq>
 8010492:	4602      	mov	r2, r0
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8010498:	f7ff fdcc 	bl	8010034 <LL_RCC_PLL3Q_IsEnabled>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00c      	beq.n	80104bc <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 80104a2:	f7ff fe2f 	bl	8010104 <LL_RCC_PLL3_GetQ>
 80104a6:	4603      	mov	r3, r0
 80104a8:	9300      	str	r3, [sp, #0]
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	68fa      	ldr	r2, [r7, #12]
 80104ae:	6939      	ldr	r1, [r7, #16]
 80104b0:	69f8      	ldr	r0, [r7, #28]
 80104b2:	f000 f81f 	bl	80104f4 <LL_RCC_CalcPLLClockFreq>
 80104b6:	4602      	mov	r2, r0
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 80104bc:	f7ff fdce 	bl	801005c <LL_RCC_PLL3R_IsEnabled>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00c      	beq.n	80104e0 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 80104c6:	f7ff fe2d 	bl	8010124 <LL_RCC_PLL3_GetR>
 80104ca:	4603      	mov	r3, r0
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	68fa      	ldr	r2, [r7, #12]
 80104d2:	6939      	ldr	r1, [r7, #16]
 80104d4:	69f8      	ldr	r0, [r7, #28]
 80104d6:	f000 f80d 	bl	80104f4 <LL_RCC_CalcPLLClockFreq>
 80104da:	4602      	mov	r2, r0
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	609a      	str	r2, [r3, #8]
    }
  }
}
 80104e0:	bf00      	nop
 80104e2:	3720      	adds	r7, #32
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	03d09000 	.word	0x03d09000
 80104ec:	003d0900 	.word	0x003d0900
 80104f0:	017d7840 	.word	0x017d7840

080104f4 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b087      	sub	sp, #28
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	607a      	str	r2, [r7, #4]
 8010500:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	ee07 3a90 	vmov	s15, r3
 8010508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	ee07 3a90 	vmov	s15, r3
 8010512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	ee07 3a90 	vmov	s15, r3
 8010520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	ee07 3a90 	vmov	s15, r3
 801052a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 801052e:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8010570 <LL_RCC_CalcPLLClockFreq+0x7c>
 8010532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801053a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801053e:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8010542:	6a3b      	ldr	r3, [r7, #32]
 8010544:	ee07 3a90 	vmov	s15, r3
 8010548:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801054c:	edd7 6a05 	vldr	s13, [r7, #20]
 8010550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010554:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8010558:	edd7 7a05 	vldr	s15, [r7, #20]
 801055c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010560:	ee17 3a90 	vmov	r3, s15
}
 8010564:	4618      	mov	r0, r3
 8010566:	371c      	adds	r7, #28
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr
 8010570:	46000000 	.word	0x46000000

08010574 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8010574:	b590      	push	{r4, r7, lr}
 8010576:	b087      	sub	sp, #28
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 801057c:	2300      	movs	r3, #0
 801057e:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7ff fbb1 	bl	800fce8 <LL_RCC_GetUSARTClockSource>
 8010586:	4603      	mov	r3, r0
 8010588:	4a62      	ldr	r2, [pc, #392]	@ (8010714 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 801058a:	4293      	cmp	r3, r2
 801058c:	f000 80a9 	beq.w	80106e2 <LL_RCC_GetUSARTClockFreq+0x16e>
 8010590:	4a60      	ldr	r2, [pc, #384]	@ (8010714 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8010592:	4293      	cmp	r3, r2
 8010594:	f200 80ae 	bhi.w	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 8010598:	4a5f      	ldr	r2, [pc, #380]	@ (8010718 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 801059a:	4293      	cmp	r3, r2
 801059c:	f000 80a1 	beq.w	80106e2 <LL_RCC_GetUSARTClockFreq+0x16e>
 80105a0:	4a5d      	ldr	r2, [pc, #372]	@ (8010718 <LL_RCC_GetUSARTClockFreq+0x1a4>)
 80105a2:	4293      	cmp	r3, r2
 80105a4:	f200 80a6 	bhi.w	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 80105a8:	4a5c      	ldr	r2, [pc, #368]	@ (801071c <LL_RCC_GetUSARTClockFreq+0x1a8>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	f000 8091 	beq.w	80106d2 <LL_RCC_GetUSARTClockFreq+0x15e>
 80105b0:	4a5a      	ldr	r2, [pc, #360]	@ (801071c <LL_RCC_GetUSARTClockFreq+0x1a8>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	f200 809e 	bhi.w	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 80105b8:	4a59      	ldr	r2, [pc, #356]	@ (8010720 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	f000 8089 	beq.w	80106d2 <LL_RCC_GetUSARTClockFreq+0x15e>
 80105c0:	4a57      	ldr	r2, [pc, #348]	@ (8010720 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	f200 8096 	bhi.w	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 80105c8:	4a56      	ldr	r2, [pc, #344]	@ (8010724 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d073      	beq.n	80106b6 <LL_RCC_GetUSARTClockFreq+0x142>
 80105ce:	4a55      	ldr	r2, [pc, #340]	@ (8010724 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	f200 808f 	bhi.w	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 80105d6:	4a54      	ldr	r2, [pc, #336]	@ (8010728 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d06c      	beq.n	80106b6 <LL_RCC_GetUSARTClockFreq+0x142>
 80105dc:	4a52      	ldr	r2, [pc, #328]	@ (8010728 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	f200 8088 	bhi.w	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 80105e4:	4a51      	ldr	r2, [pc, #324]	@ (801072c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d058      	beq.n	801069c <LL_RCC_GetUSARTClockFreq+0x128>
 80105ea:	4a50      	ldr	r2, [pc, #320]	@ (801072c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	f200 8081 	bhi.w	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 80105f2:	4a4f      	ldr	r2, [pc, #316]	@ (8010730 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d051      	beq.n	801069c <LL_RCC_GetUSARTClockFreq+0x128>
 80105f8:	4a4d      	ldr	r2, [pc, #308]	@ (8010730 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d87a      	bhi.n	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 80105fe:	4a4d      	ldr	r2, [pc, #308]	@ (8010734 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d03e      	beq.n	8010682 <LL_RCC_GetUSARTClockFreq+0x10e>
 8010604:	4a4b      	ldr	r2, [pc, #300]	@ (8010734 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d874      	bhi.n	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 801060a:	4a4b      	ldr	r2, [pc, #300]	@ (8010738 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 801060c:	4293      	cmp	r3, r2
 801060e:	d038      	beq.n	8010682 <LL_RCC_GetUSARTClockFreq+0x10e>
 8010610:	4a49      	ldr	r2, [pc, #292]	@ (8010738 <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d86e      	bhi.n	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
 8010616:	4a49      	ldr	r2, [pc, #292]	@ (801073c <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8010618:	4293      	cmp	r3, r2
 801061a:	d01a      	beq.n	8010652 <LL_RCC_GetUSARTClockFreq+0xde>
 801061c:	4a48      	ldr	r2, [pc, #288]	@ (8010740 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d168      	bne.n	80106f4 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8010622:	f000 f895 	bl	8010750 <RCC_GetSystemClockFreq>
 8010626:	4604      	mov	r4, r0
 8010628:	f7ff fb00 	bl	800fc2c <LL_RCC_GetSysPrescaler>
 801062c:	4603      	mov	r3, r0
 801062e:	0a1b      	lsrs	r3, r3, #8
 8010630:	f003 030f 	and.w	r3, r3, #15
 8010634:	4a43      	ldr	r2, [pc, #268]	@ (8010744 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8010636:	5cd3      	ldrb	r3, [r2, r3]
 8010638:	f003 031f 	and.w	r3, r3, #31
 801063c:	fa24 f303 	lsr.w	r3, r4, r3
 8010640:	4618      	mov	r0, r3
 8010642:	f000 f8e7 	bl	8010814 <RCC_GetHCLKClockFreq>
 8010646:	4603      	mov	r3, r0
 8010648:	4618      	mov	r0, r3
 801064a:	f000 f911 	bl	8010870 <RCC_GetPCLK2ClockFreq>
 801064e:	6178      	str	r0, [r7, #20]
      break;
 8010650:	e05b      	b.n	801070a <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8010652:	f000 f87d 	bl	8010750 <RCC_GetSystemClockFreq>
 8010656:	4604      	mov	r4, r0
 8010658:	f7ff fae8 	bl	800fc2c <LL_RCC_GetSysPrescaler>
 801065c:	4603      	mov	r3, r0
 801065e:	0a1b      	lsrs	r3, r3, #8
 8010660:	f003 030f 	and.w	r3, r3, #15
 8010664:	4a37      	ldr	r2, [pc, #220]	@ (8010744 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8010666:	5cd3      	ldrb	r3, [r2, r3]
 8010668:	f003 031f 	and.w	r3, r3, #31
 801066c:	fa24 f303 	lsr.w	r3, r4, r3
 8010670:	4618      	mov	r0, r3
 8010672:	f000 f8cf 	bl	8010814 <RCC_GetHCLKClockFreq>
 8010676:	4603      	mov	r3, r0
 8010678:	4618      	mov	r0, r3
 801067a:	f000 f8e1 	bl	8010840 <RCC_GetPCLK1ClockFreq>
 801067e:	6178      	str	r0, [r7, #20]
      break;
 8010680:	e043      	b.n	801070a <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8010682:	f7ff fbf3 	bl	800fe6c <LL_RCC_PLL2_IsReady>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d035      	beq.n	80106f8 <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 801068c:	f107 0308 	add.w	r3, r7, #8
 8010690:	4618      	mov	r0, r3
 8010692:	f7ff fdfd 	bl	8010290 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	617b      	str	r3, [r7, #20]
      }
      break;
 801069a:	e02d      	b.n	80106f8 <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 801069c:	f7ff fca2 	bl	800ffe4 <LL_RCC_PLL3_IsReady>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d02a      	beq.n	80106fc <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 80106a6:	f107 0308 	add.w	r3, r7, #8
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7ff fe88 	bl	80103c0 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	617b      	str	r3, [r7, #20]
      }
      break;
 80106b4:	e022      	b.n	80106fc <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 80106b6:	f7ff fa65 	bl	800fb84 <LL_RCC_HSI_IsReady>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d01f      	beq.n	8010700 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80106c0:	f7ff fa72 	bl	800fba8 <LL_RCC_HSI_GetDivider>
 80106c4:	4603      	mov	r3, r0
 80106c6:	08db      	lsrs	r3, r3, #3
 80106c8:	4a1f      	ldr	r2, [pc, #124]	@ (8010748 <LL_RCC_GetUSARTClockFreq+0x1d4>)
 80106ca:	fa22 f303 	lsr.w	r3, r2, r3
 80106ce:	617b      	str	r3, [r7, #20]
      }
      break;
 80106d0:	e016      	b.n	8010700 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 80106d2:	f7ff fa77 	bl	800fbc4 <LL_RCC_CSI_IsReady>
 80106d6:	4603      	mov	r3, r0
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d013      	beq.n	8010704 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 80106dc:	4b1b      	ldr	r3, [pc, #108]	@ (801074c <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80106de:	617b      	str	r3, [r7, #20]
      }
      break;
 80106e0:	e010      	b.n	8010704 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 80106e2:	f7ff fa83 	bl	800fbec <LL_RCC_LSE_IsReady>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00d      	beq.n	8010708 <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 80106ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80106f0:	617b      	str	r3, [r7, #20]
      }
      break;
 80106f2:	e009      	b.n	8010708 <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 80106f4:	bf00      	nop
 80106f6:	e008      	b.n	801070a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80106f8:	bf00      	nop
 80106fa:	e006      	b.n	801070a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 80106fc:	bf00      	nop
 80106fe:	e004      	b.n	801070a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8010700:	bf00      	nop
 8010702:	e002      	b.n	801070a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8010704:	bf00      	nop
 8010706:	e000      	b.n	801070a <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8010708:	bf00      	nop
  }

  return usart_frequency;
 801070a:	697b      	ldr	r3, [r7, #20]
}
 801070c:	4618      	mov	r0, r3
 801070e:	371c      	adds	r7, #28
 8010710:	46bd      	mov	sp, r7
 8010712:	bd90      	pop	{r4, r7, pc}
 8010714:	07050308 	.word	0x07050308
 8010718:	07050008 	.word	0x07050008
 801071c:	07040308 	.word	0x07040308
 8010720:	07040008 	.word	0x07040008
 8010724:	07030308 	.word	0x07030308
 8010728:	07030008 	.word	0x07030008
 801072c:	07020308 	.word	0x07020308
 8010730:	07020008 	.word	0x07020008
 8010734:	07010308 	.word	0x07010308
 8010738:	07010008 	.word	0x07010008
 801073c:	07000008 	.word	0x07000008
 8010740:	07000308 	.word	0x07000308
 8010744:	08016374 	.word	0x08016374
 8010748:	03d09000 	.word	0x03d09000
 801074c:	003d0900 	.word	0x003d0900

08010750 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b084      	sub	sp, #16
 8010754:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8010756:	2300      	movs	r3, #0
 8010758:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 801075a:	f7ff fa59 	bl	800fc10 <LL_RCC_GetSysClkSource>
 801075e:	4603      	mov	r3, r0
 8010760:	2b18      	cmp	r3, #24
 8010762:	d84b      	bhi.n	80107fc <RCC_GetSystemClockFreq+0xac>
 8010764:	a201      	add	r2, pc, #4	@ (adr r2, 801076c <RCC_GetSystemClockFreq+0x1c>)
 8010766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076a:	bf00      	nop
 801076c:	080107d1 	.word	0x080107d1
 8010770:	080107fd 	.word	0x080107fd
 8010774:	080107fd 	.word	0x080107fd
 8010778:	080107fd 	.word	0x080107fd
 801077c:	080107fd 	.word	0x080107fd
 8010780:	080107fd 	.word	0x080107fd
 8010784:	080107fd 	.word	0x080107fd
 8010788:	080107fd 	.word	0x080107fd
 801078c:	080107e3 	.word	0x080107e3
 8010790:	080107fd 	.word	0x080107fd
 8010794:	080107fd 	.word	0x080107fd
 8010798:	080107fd 	.word	0x080107fd
 801079c:	080107fd 	.word	0x080107fd
 80107a0:	080107fd 	.word	0x080107fd
 80107a4:	080107fd 	.word	0x080107fd
 80107a8:	080107fd 	.word	0x080107fd
 80107ac:	080107e9 	.word	0x080107e9
 80107b0:	080107fd 	.word	0x080107fd
 80107b4:	080107fd 	.word	0x080107fd
 80107b8:	080107fd 	.word	0x080107fd
 80107bc:	080107fd 	.word	0x080107fd
 80107c0:	080107fd 	.word	0x080107fd
 80107c4:	080107fd 	.word	0x080107fd
 80107c8:	080107fd 	.word	0x080107fd
 80107cc:	080107ef 	.word	0x080107ef
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 80107d0:	f7ff f9ea 	bl	800fba8 <LL_RCC_HSI_GetDivider>
 80107d4:	4603      	mov	r3, r0
 80107d6:	08db      	lsrs	r3, r3, #3
 80107d8:	4a0b      	ldr	r2, [pc, #44]	@ (8010808 <RCC_GetSystemClockFreq+0xb8>)
 80107da:	fa22 f303 	lsr.w	r3, r2, r3
 80107de:	60fb      	str	r3, [r7, #12]
      break;
 80107e0:	e00d      	b.n	80107fe <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 80107e2:	4b0a      	ldr	r3, [pc, #40]	@ (801080c <RCC_GetSystemClockFreq+0xbc>)
 80107e4:	60fb      	str	r3, [r7, #12]
      break;
 80107e6:	e00a      	b.n	80107fe <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 80107e8:	4b09      	ldr	r3, [pc, #36]	@ (8010810 <RCC_GetSystemClockFreq+0xc0>)
 80107ea:	60fb      	str	r3, [r7, #12]
      break;
 80107ec:	e007      	b.n	80107fe <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 80107ee:	463b      	mov	r3, r7
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7ff fcb5 	bl	8010160 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	60fb      	str	r3, [r7, #12]
      break;
 80107fa:	e000      	b.n	80107fe <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 80107fc:	bf00      	nop
  }

  return frequency;
 80107fe:	68fb      	ldr	r3, [r7, #12]
}
 8010800:	4618      	mov	r0, r3
 8010802:	3710      	adds	r7, #16
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}
 8010808:	03d09000 	.word	0x03d09000
 801080c:	003d0900 	.word	0x003d0900
 8010810:	017d7840 	.word	0x017d7840

08010814 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 801081c:	f7ff fa14 	bl	800fc48 <LL_RCC_GetAHBPrescaler>
 8010820:	4603      	mov	r3, r0
 8010822:	f003 030f 	and.w	r3, r3, #15
 8010826:	4a05      	ldr	r2, [pc, #20]	@ (801083c <RCC_GetHCLKClockFreq+0x28>)
 8010828:	5cd3      	ldrb	r3, [r2, r3]
 801082a:	f003 031f 	and.w	r3, r3, #31
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010834:	4618      	mov	r0, r3
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	08016374 	.word	0x08016374

08010840 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8010848:	f7ff fa0c 	bl	800fc64 <LL_RCC_GetAPB1Prescaler>
 801084c:	4603      	mov	r3, r0
 801084e:	091b      	lsrs	r3, r3, #4
 8010850:	f003 0307 	and.w	r3, r3, #7
 8010854:	4a05      	ldr	r2, [pc, #20]	@ (801086c <RCC_GetPCLK1ClockFreq+0x2c>)
 8010856:	5cd3      	ldrb	r3, [r2, r3]
 8010858:	f003 031f 	and.w	r3, r3, #31
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010862:	4618      	mov	r0, r3
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}
 801086a:	bf00      	nop
 801086c:	08016374 	.word	0x08016374

08010870 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8010878:	f7ff fa02 	bl	800fc80 <LL_RCC_GetAPB2Prescaler>
 801087c:	4603      	mov	r3, r0
 801087e:	0a1b      	lsrs	r3, r3, #8
 8010880:	f003 0307 	and.w	r3, r3, #7
 8010884:	4a05      	ldr	r2, [pc, #20]	@ (801089c <RCC_GetPCLK2ClockFreq+0x2c>)
 8010886:	5cd3      	ldrb	r3, [r2, r3]
 8010888:	f003 031f 	and.w	r3, r3, #31
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010892:	4618      	mov	r0, r3
 8010894:	3708      	adds	r7, #8
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	08016374 	.word	0x08016374

080108a0 <LL_SPI_IsEnabled>:
{
 80108a0:	b480      	push	{r7}
 80108a2:	b083      	sub	sp, #12
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f003 0301 	and.w	r3, r3, #1
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	d101      	bne.n	80108b8 <LL_SPI_IsEnabled+0x18>
 80108b4:	2301      	movs	r3, #1
 80108b6:	e000      	b.n	80108ba <LL_SPI_IsEnabled+0x1a>
 80108b8:	2300      	movs	r3, #0
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	370c      	adds	r7, #12
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <LL_SPI_SetInternalSSLevel>:
{
 80108c6:	b480      	push	{r7}
 80108c8:	b083      	sub	sp, #12
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_SSI, SSLevel);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	431a      	orrs	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	601a      	str	r2, [r3, #0]
}
 80108e0:	bf00      	nop
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <LL_SPI_GetNSSPolarity>:
{
 80108ec:	b480      	push	{r7}
 80108ee:	b083      	sub	sp, #12
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->CFG2, SPI_CFG2_SSIOP));
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	68db      	ldr	r3, [r3, #12]
 80108f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	370c      	adds	r7, #12
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr

08010908 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly 0..0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPOLY, CRCPoly);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	683a      	ldr	r2, [r7, #0]
 8010916:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8010918:	bf00      	nop
 801091a:	370c      	adds	r7, #12
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b086      	sub	sp, #24
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801092e:	2301      	movs	r3, #1
 8010930:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_LL_SPI_BAUDRATEPRESCALER(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  /* Check the SPI instance is not enabled */
  if (LL_SPI_IsEnabled(SPIx) == 0x00000000UL)
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f7ff ffb4 	bl	80108a0 <LL_SPI_IsEnabled>
 8010938:	4603      	mov	r3, r0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d167      	bne.n	8010a0e <LL_SPI_Init+0xea>
       * Configure SPIx CFG1 with parameters:
       * - Master Baud Rate       : SPI_CFG1_MBR[2:0] bits
       * - CRC Computation Enable : SPI_CFG1_CRCEN bit
       * - Length of data frame   : SPI_CFG1_DSIZE[4:0] bits
       */
    MODIFY_REG(SPIx->CFG1, SPI_CFG1_MBR | SPI_CFG1_CRCEN | SPI_CFG1_DSIZE,
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	689a      	ldr	r2, [r3, #8]
 8010942:	4b35      	ldr	r3, [pc, #212]	@ (8010a18 <LL_SPI_Init+0xf4>)
 8010944:	4013      	ands	r3, r2
 8010946:	683a      	ldr	r2, [r7, #0]
 8010948:	6991      	ldr	r1, [r2, #24]
 801094a:	683a      	ldr	r2, [r7, #0]
 801094c:	6a12      	ldr	r2, [r2, #32]
 801094e:	4311      	orrs	r1, r2
 8010950:	683a      	ldr	r2, [r7, #0]
 8010952:	6892      	ldr	r2, [r2, #8]
 8010954:	430a      	orrs	r2, r1
 8010956:	431a      	orrs	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	609a      	str	r2, [r3, #8]
               SPI_InitStruct->BaudRate  | SPI_InitStruct->CRCCalculation | SPI_InitStruct->DataWidth);

    tmp_nss  = SPI_InitStruct->NSS;
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	695b      	ldr	r3, [r3, #20]
 8010960:	613b      	str	r3, [r7, #16]
    tmp_mode = SPI_InitStruct->Mode;
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	60fb      	str	r3, [r7, #12]
    tmp_nss_polarity = LL_SPI_GetNSSPolarity(SPIx);
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7ff ffbf 	bl	80108ec <LL_SPI_GetNSSPolarity>
 801096e:	60b8      	str	r0, [r7, #8]

    /* Checks to setup Internal SS signal level and avoid a MODF Error */
    if ((tmp_nss == LL_SPI_NSS_SOFT) && (((tmp_nss_polarity == LL_SPI_NSS_POLARITY_LOW)  && \
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010976:	d112      	bne.n	801099e <LL_SPI_Init+0x7a>
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d103      	bne.n	8010986 <LL_SPI_Init+0x62>
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010984:	d006      	beq.n	8010994 <LL_SPI_Init+0x70>
                                          (tmp_mode == LL_SPI_MODE_MASTER))              || \
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801098c:	d107      	bne.n	801099e <LL_SPI_Init+0x7a>
                                         ((tmp_nss_polarity == LL_SPI_NSS_POLARITY_HIGH) && \
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d104      	bne.n	801099e <LL_SPI_Init+0x7a>
                                          (tmp_mode == LL_SPI_MODE_SLAVE))))
    {
      LL_SPI_SetInternalSSLevel(SPIx, LL_SPI_SS_LEVEL_HIGH);
 8010994:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7ff ff94 	bl	80108c6 <LL_SPI_SetInternalSSLevel>
       * - ClockPhase             : SPI_CFG2_CPHA bit
       * - BitOrder               : SPI_CFG2_LSBFRST bit
       * - Master/Slave Mode      : SPI_CFG2_MASTER bit
       * - SPI Mode               : SPI_CFG2_COMM[1:0] bits
       */
    MODIFY_REG(SPIx->CFG2, SPI_CFG2_SSM   | SPI_CFG2_SSOE    |
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	68da      	ldr	r2, [r3, #12]
 80109a2:	4b1e      	ldr	r3, [pc, #120]	@ (8010a1c <LL_SPI_Init+0xf8>)
 80109a4:	4013      	ands	r3, r2
 80109a6:	683a      	ldr	r2, [r7, #0]
 80109a8:	6951      	ldr	r1, [r2, #20]
 80109aa:	683a      	ldr	r2, [r7, #0]
 80109ac:	68d2      	ldr	r2, [r2, #12]
 80109ae:	4311      	orrs	r1, r2
 80109b0:	683a      	ldr	r2, [r7, #0]
 80109b2:	6912      	ldr	r2, [r2, #16]
 80109b4:	4311      	orrs	r1, r2
 80109b6:	683a      	ldr	r2, [r7, #0]
 80109b8:	69d2      	ldr	r2, [r2, #28]
 80109ba:	4311      	orrs	r1, r2
 80109bc:	683a      	ldr	r2, [r7, #0]
 80109be:	6852      	ldr	r2, [r2, #4]
 80109c0:	4311      	orrs	r1, r2
 80109c2:	683a      	ldr	r2, [r7, #0]
 80109c4:	6812      	ldr	r2, [r2, #0]
 80109c6:	f402 22c0 	and.w	r2, r2, #393216	@ 0x60000
 80109ca:	430a      	orrs	r2, r1
 80109cc:	431a      	orrs	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	60da      	str	r2, [r3, #12]

    /*---------------------------- SPIx CR1 Configuration ------------------------
       * Configure SPIx CR1 with parameter:
       * - Half Duplex Direction  : SPI_CR1_HDDIR bit
       */
    MODIFY_REG(SPIx->CR1, SPI_CR1_HDDIR, SPI_InitStruct->TransferDirection & SPI_CR1_HDDIR);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80109e2:	431a      	orrs	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CRCPOLY Configuration ----------------------
       * Configure SPIx CRCPOLY with parameter:
       * - CRCPoly                : CRCPOLY[31:0] bits
       */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	6a1b      	ldr	r3, [r3, #32]
 80109ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80109f0:	d105      	bne.n	80109fe <LL_SPI_Init+0xda>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109f6:	4619      	mov	r1, r3
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff ff85 	bl	8010908 <LL_SPI_SetCRCPolynomial>
    }

    /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
    CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a02:	f023 0201 	bic.w	r2, r3, #1
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	651a      	str	r2, [r3, #80]	@ 0x50

    status = SUCCESS;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8010a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3718      	adds	r7, #24
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	8fbfffe0 	.word	0x8fbfffe0
 8010a1c:	d839ffff 	.word	0xd839ffff

08010a20 <LL_TIM_SetPrescaler>:
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	683a      	ldr	r2, [r7, #0]
 8010a2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <LL_TIM_SetAutoReload>:
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	683a      	ldr	r2, [r7, #0]
 8010a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010a4c:	bf00      	nop
 8010a4e:	370c      	adds	r7, #12
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <LL_TIM_SetRepetitionCounter>:
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b083      	sub	sp, #12
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	683a      	ldr	r2, [r7, #0]
 8010a66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8010a68:	bf00      	nop
 8010a6a:	370c      	adds	r7, #12
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8010a74:	b480      	push	{r7}
 8010a76:	b083      	sub	sp, #12
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	695b      	ldr	r3, [r3, #20]
 8010a80:	f043 0201 	orr.w	r2, r3, #1
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	615a      	str	r2, [r3, #20]
}
 8010a88:	bf00      	nop
 8010a8a:	370c      	adds	r7, #12
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	4a41      	ldr	r2, [pc, #260]	@ (8010bac <LL_TIM_Init+0x118>)
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d013      	beq.n	8010ad4 <LL_TIM_Init+0x40>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010ab2:	d00f      	beq.n	8010ad4 <LL_TIM_Init+0x40>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8010bb0 <LL_TIM_Init+0x11c>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d00b      	beq.n	8010ad4 <LL_TIM_Init+0x40>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	4a3d      	ldr	r2, [pc, #244]	@ (8010bb4 <LL_TIM_Init+0x120>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d007      	beq.n	8010ad4 <LL_TIM_Init+0x40>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	4a3c      	ldr	r2, [pc, #240]	@ (8010bb8 <LL_TIM_Init+0x124>)
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	d003      	beq.n	8010ad4 <LL_TIM_Init+0x40>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	4a3b      	ldr	r2, [pc, #236]	@ (8010bbc <LL_TIM_Init+0x128>)
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d106      	bne.n	8010ae2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	4313      	orrs	r3, r2
 8010ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	4a31      	ldr	r2, [pc, #196]	@ (8010bac <LL_TIM_Init+0x118>)
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	d027      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010af0:	d023      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4a2e      	ldr	r2, [pc, #184]	@ (8010bb0 <LL_TIM_Init+0x11c>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d01f      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4a2d      	ldr	r2, [pc, #180]	@ (8010bb4 <LL_TIM_Init+0x120>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d01b      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4a2c      	ldr	r2, [pc, #176]	@ (8010bb8 <LL_TIM_Init+0x124>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d017      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8010bbc <LL_TIM_Init+0x128>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d013      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	4a2a      	ldr	r2, [pc, #168]	@ (8010bc0 <LL_TIM_Init+0x12c>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d00f      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	4a29      	ldr	r2, [pc, #164]	@ (8010bc4 <LL_TIM_Init+0x130>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d00b      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	4a28      	ldr	r2, [pc, #160]	@ (8010bc8 <LL_TIM_Init+0x134>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d007      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	4a27      	ldr	r2, [pc, #156]	@ (8010bcc <LL_TIM_Init+0x138>)
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d003      	beq.n	8010b3a <LL_TIM_Init+0xa6>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4a26      	ldr	r2, [pc, #152]	@ (8010bd0 <LL_TIM_Init+0x13c>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d106      	bne.n	8010b48 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	68db      	ldr	r3, [r3, #12]
 8010b44:	4313      	orrs	r3, r2
 8010b46:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	689b      	ldr	r3, [r3, #8]
 8010b52:	4619      	mov	r1, r3
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f7ff ff71 	bl	8010a3c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	881b      	ldrh	r3, [r3, #0]
 8010b5e:	4619      	mov	r1, r3
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7ff ff5d 	bl	8010a20 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4a10      	ldr	r2, [pc, #64]	@ (8010bac <LL_TIM_Init+0x118>)
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d00f      	beq.n	8010b8e <LL_TIM_Init+0xfa>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4a12      	ldr	r2, [pc, #72]	@ (8010bbc <LL_TIM_Init+0x128>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d00b      	beq.n	8010b8e <LL_TIM_Init+0xfa>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	4a11      	ldr	r2, [pc, #68]	@ (8010bc0 <LL_TIM_Init+0x12c>)
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	d007      	beq.n	8010b8e <LL_TIM_Init+0xfa>
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	4a10      	ldr	r2, [pc, #64]	@ (8010bc4 <LL_TIM_Init+0x130>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d003      	beq.n	8010b8e <LL_TIM_Init+0xfa>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4a0f      	ldr	r2, [pc, #60]	@ (8010bc8 <LL_TIM_Init+0x134>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d105      	bne.n	8010b9a <LL_TIM_Init+0x106>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	4619      	mov	r1, r3
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f7ff ff5f 	bl	8010a58 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f7ff ff6a 	bl	8010a74 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8010ba0:	2300      	movs	r3, #0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	40010000 	.word	0x40010000
 8010bb0:	40000400 	.word	0x40000400
 8010bb4:	40000800 	.word	0x40000800
 8010bb8:	40000c00 	.word	0x40000c00
 8010bbc:	40010400 	.word	0x40010400
 8010bc0:	40014000 	.word	0x40014000
 8010bc4:	40014400 	.word	0x40014400
 8010bc8:	40014800 	.word	0x40014800
 8010bcc:	4000e000 	.word	0x4000e000
 8010bd0:	4000e400 	.word	0x4000e400

08010bd4 <LL_USART_IsEnabled>:
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b083      	sub	sp, #12
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	f003 0301 	and.w	r3, r3, #1
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d101      	bne.n	8010bec <LL_USART_IsEnabled+0x18>
 8010be8:	2301      	movs	r3, #1
 8010bea:	e000      	b.n	8010bee <LL_USART_IsEnabled+0x1a>
 8010bec:	2300      	movs	r3, #0
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	370c      	adds	r7, #12
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf8:	4770      	bx	lr

08010bfa <LL_USART_SetPrescaler>:
{
 8010bfa:	b480      	push	{r7}
 8010bfc:	b083      	sub	sp, #12
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
 8010c02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c08:	f023 030f 	bic.w	r3, r3, #15
 8010c0c:	683a      	ldr	r2, [r7, #0]
 8010c0e:	b292      	uxth	r2, r2
 8010c10:	431a      	orrs	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010c16:	bf00      	nop
 8010c18:	370c      	adds	r7, #12
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr

08010c22 <LL_USART_SetStopBitsLength>:
{
 8010c22:	b480      	push	{r7}
 8010c24:	b083      	sub	sp, #12
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	431a      	orrs	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	605a      	str	r2, [r3, #4]
}
 8010c3c:	bf00      	nop
 8010c3e:	370c      	adds	r7, #12
 8010c40:	46bd      	mov	sp, r7
 8010c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c46:	4770      	bx	lr

08010c48 <LL_USART_SetHWFlowCtrl>:
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	689b      	ldr	r3, [r3, #8]
 8010c56:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	431a      	orrs	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	609a      	str	r2, [r3, #8]
}
 8010c62:	bf00      	nop
 8010c64:	370c      	adds	r7, #12
 8010c66:	46bd      	mov	sp, r7
 8010c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6c:	4770      	bx	lr
	...

08010c70 <LL_USART_SetBaudRate>:
{
 8010c70:	b480      	push	{r7}
 8010c72:	b087      	sub	sp, #28
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	60f8      	str	r0, [r7, #12]
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	607a      	str	r2, [r7, #4]
 8010c7c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	2b0b      	cmp	r3, #11
 8010c82:	d83c      	bhi.n	8010cfe <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8010c84:	6a3b      	ldr	r3, [r7, #32]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d039      	beq.n	8010cfe <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c90:	d122      	bne.n	8010cd8 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	461a      	mov	r2, r3
 8010c98:	4b1c      	ldr	r3, [pc, #112]	@ (8010d0c <LL_USART_SetBaudRate+0x9c>)
 8010c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c9e:	68ba      	ldr	r2, [r7, #8]
 8010ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ca4:	005a      	lsls	r2, r3, #1
 8010ca6:	6a3b      	ldr	r3, [r7, #32]
 8010ca8:	085b      	lsrs	r3, r3, #1
 8010caa:	441a      	add	r2, r3
 8010cac:	6a3b      	ldr	r3, [r7, #32]
 8010cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	085b      	lsrs	r3, r3, #1
 8010cc4:	b29b      	uxth	r3, r3
 8010cc6:	f003 0307 	and.w	r3, r3, #7
 8010cca:	693a      	ldr	r2, [r7, #16]
 8010ccc:	4313      	orrs	r3, r2
 8010cce:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	693a      	ldr	r2, [r7, #16]
 8010cd4:	60da      	str	r2, [r3, #12]
}
 8010cd6:	e012      	b.n	8010cfe <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	461a      	mov	r2, r3
 8010cde:	4b0b      	ldr	r3, [pc, #44]	@ (8010d0c <LL_USART_SetBaudRate+0x9c>)
 8010ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ce4:	68ba      	ldr	r2, [r7, #8]
 8010ce6:	fbb2 f2f3 	udiv	r2, r2, r3
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	085b      	lsrs	r3, r3, #1
 8010cee:	441a      	add	r2, r3
 8010cf0:	6a3b      	ldr	r3, [r7, #32]
 8010cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	60da      	str	r2, [r3, #12]
}
 8010cfe:	bf00      	nop
 8010d00:	371c      	adds	r7, #28
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr
 8010d0a:	bf00      	nop
 8010d0c:	08016384 	.word	0x08016384

08010d10 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b086      	sub	sp, #24
 8010d14:	af02      	add	r7, sp, #8
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f7ff ff56 	bl	8010bd4 <LL_USART_IsEnabled>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	f040 8092 	bne.w	8010e54 <LL_USART_Init+0x144>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	4b4a      	ldr	r3, [pc, #296]	@ (8010e60 <LL_USART_Init+0x150>)
 8010d36:	4013      	ands	r3, r2
 8010d38:	683a      	ldr	r2, [r7, #0]
 8010d3a:	6891      	ldr	r1, [r2, #8]
 8010d3c:	683a      	ldr	r2, [r7, #0]
 8010d3e:	6912      	ldr	r2, [r2, #16]
 8010d40:	4311      	orrs	r1, r2
 8010d42:	683a      	ldr	r2, [r7, #0]
 8010d44:	6952      	ldr	r2, [r2, #20]
 8010d46:	4311      	orrs	r1, r2
 8010d48:	683a      	ldr	r2, [r7, #0]
 8010d4a:	69d2      	ldr	r2, [r2, #28]
 8010d4c:	430a      	orrs	r2, r1
 8010d4e:	431a      	orrs	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	4619      	mov	r1, r3
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f7ff ff61 	bl	8010c22 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8010d60:	683b      	ldr	r3, [r7, #0]
 8010d62:	699b      	ldr	r3, [r3, #24]
 8010d64:	4619      	mov	r1, r3
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7ff ff6e 	bl	8010c48 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8010e64 <LL_USART_Init+0x154>)
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d104      	bne.n	8010d7e <LL_USART_Init+0x6e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010d74:	483c      	ldr	r0, [pc, #240]	@ (8010e68 <LL_USART_Init+0x158>)
 8010d76:	f7ff fbfd 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010d7a:	60b8      	str	r0, [r7, #8]
 8010d7c:	e04f      	b.n	8010e1e <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART2)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	4a3a      	ldr	r2, [pc, #232]	@ (8010e6c <LL_USART_Init+0x15c>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d104      	bne.n	8010d90 <LL_USART_Init+0x80>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010d86:	483a      	ldr	r0, [pc, #232]	@ (8010e70 <LL_USART_Init+0x160>)
 8010d88:	f7ff fbf4 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010d8c:	60b8      	str	r0, [r7, #8]
 8010d8e:	e046      	b.n	8010e1e <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART3)
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4a38      	ldr	r2, [pc, #224]	@ (8010e74 <LL_USART_Init+0x164>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d104      	bne.n	8010da2 <LL_USART_Init+0x92>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010d98:	4835      	ldr	r0, [pc, #212]	@ (8010e70 <LL_USART_Init+0x160>)
 8010d9a:	f7ff fbeb 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010d9e:	60b8      	str	r0, [r7, #8]
 8010da0:	e03d      	b.n	8010e1e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART4)
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	4a34      	ldr	r2, [pc, #208]	@ (8010e78 <LL_USART_Init+0x168>)
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d104      	bne.n	8010db4 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010daa:	4831      	ldr	r0, [pc, #196]	@ (8010e70 <LL_USART_Init+0x160>)
 8010dac:	f7ff fbe2 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010db0:	60b8      	str	r0, [r7, #8]
 8010db2:	e034      	b.n	8010e1e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART5)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	4a31      	ldr	r2, [pc, #196]	@ (8010e7c <LL_USART_Init+0x16c>)
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d104      	bne.n	8010dc6 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010dbc:	482c      	ldr	r0, [pc, #176]	@ (8010e70 <LL_USART_Init+0x160>)
 8010dbe:	f7ff fbd9 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010dc2:	60b8      	str	r0, [r7, #8]
 8010dc4:	e02b      	b.n	8010e1e <LL_USART_Init+0x10e>
    }
    else if (USARTx == USART6)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8010e80 <LL_USART_Init+0x170>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d104      	bne.n	8010dd8 <LL_USART_Init+0xc8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010dce:	4826      	ldr	r0, [pc, #152]	@ (8010e68 <LL_USART_Init+0x158>)
 8010dd0:	f7ff fbd0 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010dd4:	60b8      	str	r0, [r7, #8]
 8010dd6:	e022      	b.n	8010e1e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART7)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	4a2a      	ldr	r2, [pc, #168]	@ (8010e84 <LL_USART_Init+0x174>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d104      	bne.n	8010dea <LL_USART_Init+0xda>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010de0:	4823      	ldr	r0, [pc, #140]	@ (8010e70 <LL_USART_Init+0x160>)
 8010de2:	f7ff fbc7 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010de6:	60b8      	str	r0, [r7, #8]
 8010de8:	e019      	b.n	8010e1e <LL_USART_Init+0x10e>
    }
    else if (USARTx == UART8)
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	4a26      	ldr	r2, [pc, #152]	@ (8010e88 <LL_USART_Init+0x178>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d104      	bne.n	8010dfc <LL_USART_Init+0xec>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8010df2:	481f      	ldr	r0, [pc, #124]	@ (8010e70 <LL_USART_Init+0x160>)
 8010df4:	f7ff fbbe 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010df8:	60b8      	str	r0, [r7, #8]
 8010dfa:	e010      	b.n	8010e1e <LL_USART_Init+0x10e>
    }
#if defined(UART9)
    else if (USARTx == UART9)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4a23      	ldr	r2, [pc, #140]	@ (8010e8c <LL_USART_Init+0x17c>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d104      	bne.n	8010e0e <LL_USART_Init+0xfe>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010e04:	4818      	ldr	r0, [pc, #96]	@ (8010e68 <LL_USART_Init+0x158>)
 8010e06:	f7ff fbb5 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010e0a:	60b8      	str	r0, [r7, #8]
 8010e0c:	e007      	b.n	8010e1e <LL_USART_Init+0x10e>
    }
#endif /* UART9 */
#if defined(USART10)
    else if (USARTx == USART10)
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	4a1f      	ldr	r2, [pc, #124]	@ (8010e90 <LL_USART_Init+0x180>)
 8010e12:	4293      	cmp	r3, r2
 8010e14:	d103      	bne.n	8010e1e <LL_USART_Init+0x10e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8010e16:	4814      	ldr	r0, [pc, #80]	@ (8010e68 <LL_USART_Init+0x158>)
 8010e18:	f7ff fbac 	bl	8010574 <LL_RCC_GetUSARTClockFreq>
 8010e1c:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d011      	beq.n	8010e48 <LL_USART_Init+0x138>
        && (USART_InitStruct->BaudRate != 0U))
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d00d      	beq.n	8010e48 <LL_USART_Init+0x138>
    {
      status = SUCCESS;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8010e3c:	9300      	str	r3, [sp, #0]
 8010e3e:	460b      	mov	r3, r1
 8010e40:	68b9      	ldr	r1, [r7, #8]
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7ff ff14 	bl	8010c70 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7ff fed3 	bl	8010bfa <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3710      	adds	r7, #16
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	efff69f3 	.word	0xefff69f3
 8010e64:	40011000 	.word	0x40011000
 8010e68:	07000308 	.word	0x07000308
 8010e6c:	40004400 	.word	0x40004400
 8010e70:	07000008 	.word	0x07000008
 8010e74:	40004800 	.word	0x40004800
 8010e78:	40004c00 	.word	0x40004c00
 8010e7c:	40005000 	.word	0x40005000
 8010e80:	40011400 	.word	0x40011400
 8010e84:	40007800 	.word	0x40007800
 8010e88:	40007c00 	.word	0x40007c00
 8010e8c:	40011800 	.word	0x40011800
 8010e90:	40011c00 	.word	0x40011c00

08010e94 <__cvt>:
 8010e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e96:	ed2d 8b02 	vpush	{d8}
 8010e9a:	eeb0 8b40 	vmov.f64	d8, d0
 8010e9e:	b085      	sub	sp, #20
 8010ea0:	4617      	mov	r7, r2
 8010ea2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8010ea4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ea6:	ee18 2a90 	vmov	r2, s17
 8010eaa:	f025 0520 	bic.w	r5, r5, #32
 8010eae:	2a00      	cmp	r2, #0
 8010eb0:	bfb6      	itet	lt
 8010eb2:	222d      	movlt	r2, #45	@ 0x2d
 8010eb4:	2200      	movge	r2, #0
 8010eb6:	eeb1 8b40 	vneglt.f64	d8, d0
 8010eba:	2d46      	cmp	r5, #70	@ 0x46
 8010ebc:	460c      	mov	r4, r1
 8010ebe:	701a      	strb	r2, [r3, #0]
 8010ec0:	d004      	beq.n	8010ecc <__cvt+0x38>
 8010ec2:	2d45      	cmp	r5, #69	@ 0x45
 8010ec4:	d100      	bne.n	8010ec8 <__cvt+0x34>
 8010ec6:	3401      	adds	r4, #1
 8010ec8:	2102      	movs	r1, #2
 8010eca:	e000      	b.n	8010ece <__cvt+0x3a>
 8010ecc:	2103      	movs	r1, #3
 8010ece:	ab03      	add	r3, sp, #12
 8010ed0:	9301      	str	r3, [sp, #4]
 8010ed2:	ab02      	add	r3, sp, #8
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	4622      	mov	r2, r4
 8010ed8:	4633      	mov	r3, r6
 8010eda:	eeb0 0b48 	vmov.f64	d0, d8
 8010ede:	f000 ff9f 	bl	8011e20 <_dtoa_r>
 8010ee2:	2d47      	cmp	r5, #71	@ 0x47
 8010ee4:	d114      	bne.n	8010f10 <__cvt+0x7c>
 8010ee6:	07fb      	lsls	r3, r7, #31
 8010ee8:	d50a      	bpl.n	8010f00 <__cvt+0x6c>
 8010eea:	1902      	adds	r2, r0, r4
 8010eec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef4:	bf08      	it	eq
 8010ef6:	9203      	streq	r2, [sp, #12]
 8010ef8:	2130      	movs	r1, #48	@ 0x30
 8010efa:	9b03      	ldr	r3, [sp, #12]
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d319      	bcc.n	8010f34 <__cvt+0xa0>
 8010f00:	9b03      	ldr	r3, [sp, #12]
 8010f02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f04:	1a1b      	subs	r3, r3, r0
 8010f06:	6013      	str	r3, [r2, #0]
 8010f08:	b005      	add	sp, #20
 8010f0a:	ecbd 8b02 	vpop	{d8}
 8010f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f10:	2d46      	cmp	r5, #70	@ 0x46
 8010f12:	eb00 0204 	add.w	r2, r0, r4
 8010f16:	d1e9      	bne.n	8010eec <__cvt+0x58>
 8010f18:	7803      	ldrb	r3, [r0, #0]
 8010f1a:	2b30      	cmp	r3, #48	@ 0x30
 8010f1c:	d107      	bne.n	8010f2e <__cvt+0x9a>
 8010f1e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f26:	bf1c      	itt	ne
 8010f28:	f1c4 0401 	rsbne	r4, r4, #1
 8010f2c:	6034      	strne	r4, [r6, #0]
 8010f2e:	6833      	ldr	r3, [r6, #0]
 8010f30:	441a      	add	r2, r3
 8010f32:	e7db      	b.n	8010eec <__cvt+0x58>
 8010f34:	1c5c      	adds	r4, r3, #1
 8010f36:	9403      	str	r4, [sp, #12]
 8010f38:	7019      	strb	r1, [r3, #0]
 8010f3a:	e7de      	b.n	8010efa <__cvt+0x66>

08010f3c <__exponent>:
 8010f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f3e:	2900      	cmp	r1, #0
 8010f40:	bfba      	itte	lt
 8010f42:	4249      	neglt	r1, r1
 8010f44:	232d      	movlt	r3, #45	@ 0x2d
 8010f46:	232b      	movge	r3, #43	@ 0x2b
 8010f48:	2909      	cmp	r1, #9
 8010f4a:	7002      	strb	r2, [r0, #0]
 8010f4c:	7043      	strb	r3, [r0, #1]
 8010f4e:	dd29      	ble.n	8010fa4 <__exponent+0x68>
 8010f50:	f10d 0307 	add.w	r3, sp, #7
 8010f54:	461d      	mov	r5, r3
 8010f56:	270a      	movs	r7, #10
 8010f58:	461a      	mov	r2, r3
 8010f5a:	fbb1 f6f7 	udiv	r6, r1, r7
 8010f5e:	fb07 1416 	mls	r4, r7, r6, r1
 8010f62:	3430      	adds	r4, #48	@ 0x30
 8010f64:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010f68:	460c      	mov	r4, r1
 8010f6a:	2c63      	cmp	r4, #99	@ 0x63
 8010f6c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010f70:	4631      	mov	r1, r6
 8010f72:	dcf1      	bgt.n	8010f58 <__exponent+0x1c>
 8010f74:	3130      	adds	r1, #48	@ 0x30
 8010f76:	1e94      	subs	r4, r2, #2
 8010f78:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010f7c:	1c41      	adds	r1, r0, #1
 8010f7e:	4623      	mov	r3, r4
 8010f80:	42ab      	cmp	r3, r5
 8010f82:	d30a      	bcc.n	8010f9a <__exponent+0x5e>
 8010f84:	f10d 0309 	add.w	r3, sp, #9
 8010f88:	1a9b      	subs	r3, r3, r2
 8010f8a:	42ac      	cmp	r4, r5
 8010f8c:	bf88      	it	hi
 8010f8e:	2300      	movhi	r3, #0
 8010f90:	3302      	adds	r3, #2
 8010f92:	4403      	add	r3, r0
 8010f94:	1a18      	subs	r0, r3, r0
 8010f96:	b003      	add	sp, #12
 8010f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f9a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010f9e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010fa2:	e7ed      	b.n	8010f80 <__exponent+0x44>
 8010fa4:	2330      	movs	r3, #48	@ 0x30
 8010fa6:	3130      	adds	r1, #48	@ 0x30
 8010fa8:	7083      	strb	r3, [r0, #2]
 8010faa:	70c1      	strb	r1, [r0, #3]
 8010fac:	1d03      	adds	r3, r0, #4
 8010fae:	e7f1      	b.n	8010f94 <__exponent+0x58>

08010fb0 <_printf_float>:
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	b08d      	sub	sp, #52	@ 0x34
 8010fb6:	460c      	mov	r4, r1
 8010fb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010fbc:	4616      	mov	r6, r2
 8010fbe:	461f      	mov	r7, r3
 8010fc0:	4605      	mov	r5, r0
 8010fc2:	f000 fe1d 	bl	8011c00 <_localeconv_r>
 8010fc6:	f8d0 b000 	ldr.w	fp, [r0]
 8010fca:	4658      	mov	r0, fp
 8010fcc:	f7ef fa00 	bl	80003d0 <strlen>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8010fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8010fd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010fdc:	6822      	ldr	r2, [r4, #0]
 8010fde:	9005      	str	r0, [sp, #20]
 8010fe0:	3307      	adds	r3, #7
 8010fe2:	f023 0307 	bic.w	r3, r3, #7
 8010fe6:	f103 0108 	add.w	r1, r3, #8
 8010fea:	f8c8 1000 	str.w	r1, [r8]
 8010fee:	ed93 0b00 	vldr	d0, [r3]
 8010ff2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011250 <_printf_float+0x2a0>
 8010ff6:	eeb0 7bc0 	vabs.f64	d7, d0
 8010ffa:	eeb4 7b46 	vcmp.f64	d7, d6
 8010ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011002:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011006:	dd24      	ble.n	8011052 <_printf_float+0xa2>
 8011008:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011010:	d502      	bpl.n	8011018 <_printf_float+0x68>
 8011012:	232d      	movs	r3, #45	@ 0x2d
 8011014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011018:	498f      	ldr	r1, [pc, #572]	@ (8011258 <_printf_float+0x2a8>)
 801101a:	4b90      	ldr	r3, [pc, #576]	@ (801125c <_printf_float+0x2ac>)
 801101c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011020:	bf8c      	ite	hi
 8011022:	4688      	movhi	r8, r1
 8011024:	4698      	movls	r8, r3
 8011026:	f022 0204 	bic.w	r2, r2, #4
 801102a:	2303      	movs	r3, #3
 801102c:	6123      	str	r3, [r4, #16]
 801102e:	6022      	str	r2, [r4, #0]
 8011030:	f04f 0a00 	mov.w	sl, #0
 8011034:	9700      	str	r7, [sp, #0]
 8011036:	4633      	mov	r3, r6
 8011038:	aa0b      	add	r2, sp, #44	@ 0x2c
 801103a:	4621      	mov	r1, r4
 801103c:	4628      	mov	r0, r5
 801103e:	f000 f9d1 	bl	80113e4 <_printf_common>
 8011042:	3001      	adds	r0, #1
 8011044:	f040 8089 	bne.w	801115a <_printf_float+0x1aa>
 8011048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801104c:	b00d      	add	sp, #52	@ 0x34
 801104e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011052:	eeb4 0b40 	vcmp.f64	d0, d0
 8011056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105a:	d709      	bvc.n	8011070 <_printf_float+0xc0>
 801105c:	ee10 3a90 	vmov	r3, s1
 8011060:	2b00      	cmp	r3, #0
 8011062:	bfbc      	itt	lt
 8011064:	232d      	movlt	r3, #45	@ 0x2d
 8011066:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801106a:	497d      	ldr	r1, [pc, #500]	@ (8011260 <_printf_float+0x2b0>)
 801106c:	4b7d      	ldr	r3, [pc, #500]	@ (8011264 <_printf_float+0x2b4>)
 801106e:	e7d5      	b.n	801101c <_printf_float+0x6c>
 8011070:	6863      	ldr	r3, [r4, #4]
 8011072:	1c59      	adds	r1, r3, #1
 8011074:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011078:	d139      	bne.n	80110ee <_printf_float+0x13e>
 801107a:	2306      	movs	r3, #6
 801107c:	6063      	str	r3, [r4, #4]
 801107e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011082:	2300      	movs	r3, #0
 8011084:	6022      	str	r2, [r4, #0]
 8011086:	9303      	str	r3, [sp, #12]
 8011088:	ab0a      	add	r3, sp, #40	@ 0x28
 801108a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801108e:	ab09      	add	r3, sp, #36	@ 0x24
 8011090:	9300      	str	r3, [sp, #0]
 8011092:	6861      	ldr	r1, [r4, #4]
 8011094:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011098:	4628      	mov	r0, r5
 801109a:	f7ff fefb 	bl	8010e94 <__cvt>
 801109e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80110a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80110a4:	4680      	mov	r8, r0
 80110a6:	d129      	bne.n	80110fc <_printf_float+0x14c>
 80110a8:	1cc8      	adds	r0, r1, #3
 80110aa:	db02      	blt.n	80110b2 <_printf_float+0x102>
 80110ac:	6863      	ldr	r3, [r4, #4]
 80110ae:	4299      	cmp	r1, r3
 80110b0:	dd41      	ble.n	8011136 <_printf_float+0x186>
 80110b2:	f1a9 0902 	sub.w	r9, r9, #2
 80110b6:	fa5f f989 	uxtb.w	r9, r9
 80110ba:	3901      	subs	r1, #1
 80110bc:	464a      	mov	r2, r9
 80110be:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80110c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80110c4:	f7ff ff3a 	bl	8010f3c <__exponent>
 80110c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80110ca:	1813      	adds	r3, r2, r0
 80110cc:	2a01      	cmp	r2, #1
 80110ce:	4682      	mov	sl, r0
 80110d0:	6123      	str	r3, [r4, #16]
 80110d2:	dc02      	bgt.n	80110da <_printf_float+0x12a>
 80110d4:	6822      	ldr	r2, [r4, #0]
 80110d6:	07d2      	lsls	r2, r2, #31
 80110d8:	d501      	bpl.n	80110de <_printf_float+0x12e>
 80110da:	3301      	adds	r3, #1
 80110dc:	6123      	str	r3, [r4, #16]
 80110de:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d0a6      	beq.n	8011034 <_printf_float+0x84>
 80110e6:	232d      	movs	r3, #45	@ 0x2d
 80110e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110ec:	e7a2      	b.n	8011034 <_printf_float+0x84>
 80110ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80110f2:	d1c4      	bne.n	801107e <_printf_float+0xce>
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d1c2      	bne.n	801107e <_printf_float+0xce>
 80110f8:	2301      	movs	r3, #1
 80110fa:	e7bf      	b.n	801107c <_printf_float+0xcc>
 80110fc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011100:	d9db      	bls.n	80110ba <_printf_float+0x10a>
 8011102:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8011106:	d118      	bne.n	801113a <_printf_float+0x18a>
 8011108:	2900      	cmp	r1, #0
 801110a:	6863      	ldr	r3, [r4, #4]
 801110c:	dd0b      	ble.n	8011126 <_printf_float+0x176>
 801110e:	6121      	str	r1, [r4, #16]
 8011110:	b913      	cbnz	r3, 8011118 <_printf_float+0x168>
 8011112:	6822      	ldr	r2, [r4, #0]
 8011114:	07d0      	lsls	r0, r2, #31
 8011116:	d502      	bpl.n	801111e <_printf_float+0x16e>
 8011118:	3301      	adds	r3, #1
 801111a:	440b      	add	r3, r1
 801111c:	6123      	str	r3, [r4, #16]
 801111e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011120:	f04f 0a00 	mov.w	sl, #0
 8011124:	e7db      	b.n	80110de <_printf_float+0x12e>
 8011126:	b913      	cbnz	r3, 801112e <_printf_float+0x17e>
 8011128:	6822      	ldr	r2, [r4, #0]
 801112a:	07d2      	lsls	r2, r2, #31
 801112c:	d501      	bpl.n	8011132 <_printf_float+0x182>
 801112e:	3302      	adds	r3, #2
 8011130:	e7f4      	b.n	801111c <_printf_float+0x16c>
 8011132:	2301      	movs	r3, #1
 8011134:	e7f2      	b.n	801111c <_printf_float+0x16c>
 8011136:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801113a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801113c:	4299      	cmp	r1, r3
 801113e:	db05      	blt.n	801114c <_printf_float+0x19c>
 8011140:	6823      	ldr	r3, [r4, #0]
 8011142:	6121      	str	r1, [r4, #16]
 8011144:	07d8      	lsls	r0, r3, #31
 8011146:	d5ea      	bpl.n	801111e <_printf_float+0x16e>
 8011148:	1c4b      	adds	r3, r1, #1
 801114a:	e7e7      	b.n	801111c <_printf_float+0x16c>
 801114c:	2900      	cmp	r1, #0
 801114e:	bfd4      	ite	le
 8011150:	f1c1 0202 	rsble	r2, r1, #2
 8011154:	2201      	movgt	r2, #1
 8011156:	4413      	add	r3, r2
 8011158:	e7e0      	b.n	801111c <_printf_float+0x16c>
 801115a:	6823      	ldr	r3, [r4, #0]
 801115c:	055a      	lsls	r2, r3, #21
 801115e:	d407      	bmi.n	8011170 <_printf_float+0x1c0>
 8011160:	6923      	ldr	r3, [r4, #16]
 8011162:	4642      	mov	r2, r8
 8011164:	4631      	mov	r1, r6
 8011166:	4628      	mov	r0, r5
 8011168:	47b8      	blx	r7
 801116a:	3001      	adds	r0, #1
 801116c:	d12a      	bne.n	80111c4 <_printf_float+0x214>
 801116e:	e76b      	b.n	8011048 <_printf_float+0x98>
 8011170:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011174:	f240 80e0 	bls.w	8011338 <_printf_float+0x388>
 8011178:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801117c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011184:	d133      	bne.n	80111ee <_printf_float+0x23e>
 8011186:	4a38      	ldr	r2, [pc, #224]	@ (8011268 <_printf_float+0x2b8>)
 8011188:	2301      	movs	r3, #1
 801118a:	4631      	mov	r1, r6
 801118c:	4628      	mov	r0, r5
 801118e:	47b8      	blx	r7
 8011190:	3001      	adds	r0, #1
 8011192:	f43f af59 	beq.w	8011048 <_printf_float+0x98>
 8011196:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801119a:	4543      	cmp	r3, r8
 801119c:	db02      	blt.n	80111a4 <_printf_float+0x1f4>
 801119e:	6823      	ldr	r3, [r4, #0]
 80111a0:	07d8      	lsls	r0, r3, #31
 80111a2:	d50f      	bpl.n	80111c4 <_printf_float+0x214>
 80111a4:	9b05      	ldr	r3, [sp, #20]
 80111a6:	465a      	mov	r2, fp
 80111a8:	4631      	mov	r1, r6
 80111aa:	4628      	mov	r0, r5
 80111ac:	47b8      	blx	r7
 80111ae:	3001      	adds	r0, #1
 80111b0:	f43f af4a 	beq.w	8011048 <_printf_float+0x98>
 80111b4:	f04f 0900 	mov.w	r9, #0
 80111b8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80111bc:	f104 0a1a 	add.w	sl, r4, #26
 80111c0:	45c8      	cmp	r8, r9
 80111c2:	dc09      	bgt.n	80111d8 <_printf_float+0x228>
 80111c4:	6823      	ldr	r3, [r4, #0]
 80111c6:	079b      	lsls	r3, r3, #30
 80111c8:	f100 8107 	bmi.w	80113da <_printf_float+0x42a>
 80111cc:	68e0      	ldr	r0, [r4, #12]
 80111ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111d0:	4298      	cmp	r0, r3
 80111d2:	bfb8      	it	lt
 80111d4:	4618      	movlt	r0, r3
 80111d6:	e739      	b.n	801104c <_printf_float+0x9c>
 80111d8:	2301      	movs	r3, #1
 80111da:	4652      	mov	r2, sl
 80111dc:	4631      	mov	r1, r6
 80111de:	4628      	mov	r0, r5
 80111e0:	47b8      	blx	r7
 80111e2:	3001      	adds	r0, #1
 80111e4:	f43f af30 	beq.w	8011048 <_printf_float+0x98>
 80111e8:	f109 0901 	add.w	r9, r9, #1
 80111ec:	e7e8      	b.n	80111c0 <_printf_float+0x210>
 80111ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	dc3b      	bgt.n	801126c <_printf_float+0x2bc>
 80111f4:	4a1c      	ldr	r2, [pc, #112]	@ (8011268 <_printf_float+0x2b8>)
 80111f6:	2301      	movs	r3, #1
 80111f8:	4631      	mov	r1, r6
 80111fa:	4628      	mov	r0, r5
 80111fc:	47b8      	blx	r7
 80111fe:	3001      	adds	r0, #1
 8011200:	f43f af22 	beq.w	8011048 <_printf_float+0x98>
 8011204:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011208:	ea59 0303 	orrs.w	r3, r9, r3
 801120c:	d102      	bne.n	8011214 <_printf_float+0x264>
 801120e:	6823      	ldr	r3, [r4, #0]
 8011210:	07d9      	lsls	r1, r3, #31
 8011212:	d5d7      	bpl.n	80111c4 <_printf_float+0x214>
 8011214:	9b05      	ldr	r3, [sp, #20]
 8011216:	465a      	mov	r2, fp
 8011218:	4631      	mov	r1, r6
 801121a:	4628      	mov	r0, r5
 801121c:	47b8      	blx	r7
 801121e:	3001      	adds	r0, #1
 8011220:	f43f af12 	beq.w	8011048 <_printf_float+0x98>
 8011224:	f04f 0a00 	mov.w	sl, #0
 8011228:	f104 0b1a 	add.w	fp, r4, #26
 801122c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801122e:	425b      	negs	r3, r3
 8011230:	4553      	cmp	r3, sl
 8011232:	dc01      	bgt.n	8011238 <_printf_float+0x288>
 8011234:	464b      	mov	r3, r9
 8011236:	e794      	b.n	8011162 <_printf_float+0x1b2>
 8011238:	2301      	movs	r3, #1
 801123a:	465a      	mov	r2, fp
 801123c:	4631      	mov	r1, r6
 801123e:	4628      	mov	r0, r5
 8011240:	47b8      	blx	r7
 8011242:	3001      	adds	r0, #1
 8011244:	f43f af00 	beq.w	8011048 <_printf_float+0x98>
 8011248:	f10a 0a01 	add.w	sl, sl, #1
 801124c:	e7ee      	b.n	801122c <_printf_float+0x27c>
 801124e:	bf00      	nop
 8011250:	ffffffff 	.word	0xffffffff
 8011254:	7fefffff 	.word	0x7fefffff
 8011258:	080163b8 	.word	0x080163b8
 801125c:	080163b4 	.word	0x080163b4
 8011260:	080163c0 	.word	0x080163c0
 8011264:	080163bc 	.word	0x080163bc
 8011268:	080164f3 	.word	0x080164f3
 801126c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801126e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011272:	4553      	cmp	r3, sl
 8011274:	bfa8      	it	ge
 8011276:	4653      	movge	r3, sl
 8011278:	2b00      	cmp	r3, #0
 801127a:	4699      	mov	r9, r3
 801127c:	dc37      	bgt.n	80112ee <_printf_float+0x33e>
 801127e:	2300      	movs	r3, #0
 8011280:	9307      	str	r3, [sp, #28]
 8011282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011286:	f104 021a 	add.w	r2, r4, #26
 801128a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801128c:	9907      	ldr	r1, [sp, #28]
 801128e:	9306      	str	r3, [sp, #24]
 8011290:	eba3 0309 	sub.w	r3, r3, r9
 8011294:	428b      	cmp	r3, r1
 8011296:	dc31      	bgt.n	80112fc <_printf_float+0x34c>
 8011298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801129a:	459a      	cmp	sl, r3
 801129c:	dc3b      	bgt.n	8011316 <_printf_float+0x366>
 801129e:	6823      	ldr	r3, [r4, #0]
 80112a0:	07da      	lsls	r2, r3, #31
 80112a2:	d438      	bmi.n	8011316 <_printf_float+0x366>
 80112a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112a6:	ebaa 0903 	sub.w	r9, sl, r3
 80112aa:	9b06      	ldr	r3, [sp, #24]
 80112ac:	ebaa 0303 	sub.w	r3, sl, r3
 80112b0:	4599      	cmp	r9, r3
 80112b2:	bfa8      	it	ge
 80112b4:	4699      	movge	r9, r3
 80112b6:	f1b9 0f00 	cmp.w	r9, #0
 80112ba:	dc34      	bgt.n	8011326 <_printf_float+0x376>
 80112bc:	f04f 0800 	mov.w	r8, #0
 80112c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80112c4:	f104 0b1a 	add.w	fp, r4, #26
 80112c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ca:	ebaa 0303 	sub.w	r3, sl, r3
 80112ce:	eba3 0309 	sub.w	r3, r3, r9
 80112d2:	4543      	cmp	r3, r8
 80112d4:	f77f af76 	ble.w	80111c4 <_printf_float+0x214>
 80112d8:	2301      	movs	r3, #1
 80112da:	465a      	mov	r2, fp
 80112dc:	4631      	mov	r1, r6
 80112de:	4628      	mov	r0, r5
 80112e0:	47b8      	blx	r7
 80112e2:	3001      	adds	r0, #1
 80112e4:	f43f aeb0 	beq.w	8011048 <_printf_float+0x98>
 80112e8:	f108 0801 	add.w	r8, r8, #1
 80112ec:	e7ec      	b.n	80112c8 <_printf_float+0x318>
 80112ee:	4642      	mov	r2, r8
 80112f0:	4631      	mov	r1, r6
 80112f2:	4628      	mov	r0, r5
 80112f4:	47b8      	blx	r7
 80112f6:	3001      	adds	r0, #1
 80112f8:	d1c1      	bne.n	801127e <_printf_float+0x2ce>
 80112fa:	e6a5      	b.n	8011048 <_printf_float+0x98>
 80112fc:	2301      	movs	r3, #1
 80112fe:	4631      	mov	r1, r6
 8011300:	4628      	mov	r0, r5
 8011302:	9206      	str	r2, [sp, #24]
 8011304:	47b8      	blx	r7
 8011306:	3001      	adds	r0, #1
 8011308:	f43f ae9e 	beq.w	8011048 <_printf_float+0x98>
 801130c:	9b07      	ldr	r3, [sp, #28]
 801130e:	9a06      	ldr	r2, [sp, #24]
 8011310:	3301      	adds	r3, #1
 8011312:	9307      	str	r3, [sp, #28]
 8011314:	e7b9      	b.n	801128a <_printf_float+0x2da>
 8011316:	9b05      	ldr	r3, [sp, #20]
 8011318:	465a      	mov	r2, fp
 801131a:	4631      	mov	r1, r6
 801131c:	4628      	mov	r0, r5
 801131e:	47b8      	blx	r7
 8011320:	3001      	adds	r0, #1
 8011322:	d1bf      	bne.n	80112a4 <_printf_float+0x2f4>
 8011324:	e690      	b.n	8011048 <_printf_float+0x98>
 8011326:	9a06      	ldr	r2, [sp, #24]
 8011328:	464b      	mov	r3, r9
 801132a:	4442      	add	r2, r8
 801132c:	4631      	mov	r1, r6
 801132e:	4628      	mov	r0, r5
 8011330:	47b8      	blx	r7
 8011332:	3001      	adds	r0, #1
 8011334:	d1c2      	bne.n	80112bc <_printf_float+0x30c>
 8011336:	e687      	b.n	8011048 <_printf_float+0x98>
 8011338:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801133c:	f1b9 0f01 	cmp.w	r9, #1
 8011340:	dc01      	bgt.n	8011346 <_printf_float+0x396>
 8011342:	07db      	lsls	r3, r3, #31
 8011344:	d536      	bpl.n	80113b4 <_printf_float+0x404>
 8011346:	2301      	movs	r3, #1
 8011348:	4642      	mov	r2, r8
 801134a:	4631      	mov	r1, r6
 801134c:	4628      	mov	r0, r5
 801134e:	47b8      	blx	r7
 8011350:	3001      	adds	r0, #1
 8011352:	f43f ae79 	beq.w	8011048 <_printf_float+0x98>
 8011356:	9b05      	ldr	r3, [sp, #20]
 8011358:	465a      	mov	r2, fp
 801135a:	4631      	mov	r1, r6
 801135c:	4628      	mov	r0, r5
 801135e:	47b8      	blx	r7
 8011360:	3001      	adds	r0, #1
 8011362:	f43f ae71 	beq.w	8011048 <_printf_float+0x98>
 8011366:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801136a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011372:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011376:	d018      	beq.n	80113aa <_printf_float+0x3fa>
 8011378:	464b      	mov	r3, r9
 801137a:	f108 0201 	add.w	r2, r8, #1
 801137e:	4631      	mov	r1, r6
 8011380:	4628      	mov	r0, r5
 8011382:	47b8      	blx	r7
 8011384:	3001      	adds	r0, #1
 8011386:	d10c      	bne.n	80113a2 <_printf_float+0x3f2>
 8011388:	e65e      	b.n	8011048 <_printf_float+0x98>
 801138a:	2301      	movs	r3, #1
 801138c:	465a      	mov	r2, fp
 801138e:	4631      	mov	r1, r6
 8011390:	4628      	mov	r0, r5
 8011392:	47b8      	blx	r7
 8011394:	3001      	adds	r0, #1
 8011396:	f43f ae57 	beq.w	8011048 <_printf_float+0x98>
 801139a:	f108 0801 	add.w	r8, r8, #1
 801139e:	45c8      	cmp	r8, r9
 80113a0:	dbf3      	blt.n	801138a <_printf_float+0x3da>
 80113a2:	4653      	mov	r3, sl
 80113a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80113a8:	e6dc      	b.n	8011164 <_printf_float+0x1b4>
 80113aa:	f04f 0800 	mov.w	r8, #0
 80113ae:	f104 0b1a 	add.w	fp, r4, #26
 80113b2:	e7f4      	b.n	801139e <_printf_float+0x3ee>
 80113b4:	2301      	movs	r3, #1
 80113b6:	4642      	mov	r2, r8
 80113b8:	e7e1      	b.n	801137e <_printf_float+0x3ce>
 80113ba:	2301      	movs	r3, #1
 80113bc:	464a      	mov	r2, r9
 80113be:	4631      	mov	r1, r6
 80113c0:	4628      	mov	r0, r5
 80113c2:	47b8      	blx	r7
 80113c4:	3001      	adds	r0, #1
 80113c6:	f43f ae3f 	beq.w	8011048 <_printf_float+0x98>
 80113ca:	f108 0801 	add.w	r8, r8, #1
 80113ce:	68e3      	ldr	r3, [r4, #12]
 80113d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80113d2:	1a5b      	subs	r3, r3, r1
 80113d4:	4543      	cmp	r3, r8
 80113d6:	dcf0      	bgt.n	80113ba <_printf_float+0x40a>
 80113d8:	e6f8      	b.n	80111cc <_printf_float+0x21c>
 80113da:	f04f 0800 	mov.w	r8, #0
 80113de:	f104 0919 	add.w	r9, r4, #25
 80113e2:	e7f4      	b.n	80113ce <_printf_float+0x41e>

080113e4 <_printf_common>:
 80113e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113e8:	4616      	mov	r6, r2
 80113ea:	4698      	mov	r8, r3
 80113ec:	688a      	ldr	r2, [r1, #8]
 80113ee:	690b      	ldr	r3, [r1, #16]
 80113f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80113f4:	4293      	cmp	r3, r2
 80113f6:	bfb8      	it	lt
 80113f8:	4613      	movlt	r3, r2
 80113fa:	6033      	str	r3, [r6, #0]
 80113fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011400:	4607      	mov	r7, r0
 8011402:	460c      	mov	r4, r1
 8011404:	b10a      	cbz	r2, 801140a <_printf_common+0x26>
 8011406:	3301      	adds	r3, #1
 8011408:	6033      	str	r3, [r6, #0]
 801140a:	6823      	ldr	r3, [r4, #0]
 801140c:	0699      	lsls	r1, r3, #26
 801140e:	bf42      	ittt	mi
 8011410:	6833      	ldrmi	r3, [r6, #0]
 8011412:	3302      	addmi	r3, #2
 8011414:	6033      	strmi	r3, [r6, #0]
 8011416:	6825      	ldr	r5, [r4, #0]
 8011418:	f015 0506 	ands.w	r5, r5, #6
 801141c:	d106      	bne.n	801142c <_printf_common+0x48>
 801141e:	f104 0a19 	add.w	sl, r4, #25
 8011422:	68e3      	ldr	r3, [r4, #12]
 8011424:	6832      	ldr	r2, [r6, #0]
 8011426:	1a9b      	subs	r3, r3, r2
 8011428:	42ab      	cmp	r3, r5
 801142a:	dc26      	bgt.n	801147a <_printf_common+0x96>
 801142c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011430:	6822      	ldr	r2, [r4, #0]
 8011432:	3b00      	subs	r3, #0
 8011434:	bf18      	it	ne
 8011436:	2301      	movne	r3, #1
 8011438:	0692      	lsls	r2, r2, #26
 801143a:	d42b      	bmi.n	8011494 <_printf_common+0xb0>
 801143c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011440:	4641      	mov	r1, r8
 8011442:	4638      	mov	r0, r7
 8011444:	47c8      	blx	r9
 8011446:	3001      	adds	r0, #1
 8011448:	d01e      	beq.n	8011488 <_printf_common+0xa4>
 801144a:	6823      	ldr	r3, [r4, #0]
 801144c:	6922      	ldr	r2, [r4, #16]
 801144e:	f003 0306 	and.w	r3, r3, #6
 8011452:	2b04      	cmp	r3, #4
 8011454:	bf02      	ittt	eq
 8011456:	68e5      	ldreq	r5, [r4, #12]
 8011458:	6833      	ldreq	r3, [r6, #0]
 801145a:	1aed      	subeq	r5, r5, r3
 801145c:	68a3      	ldr	r3, [r4, #8]
 801145e:	bf0c      	ite	eq
 8011460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011464:	2500      	movne	r5, #0
 8011466:	4293      	cmp	r3, r2
 8011468:	bfc4      	itt	gt
 801146a:	1a9b      	subgt	r3, r3, r2
 801146c:	18ed      	addgt	r5, r5, r3
 801146e:	2600      	movs	r6, #0
 8011470:	341a      	adds	r4, #26
 8011472:	42b5      	cmp	r5, r6
 8011474:	d11a      	bne.n	80114ac <_printf_common+0xc8>
 8011476:	2000      	movs	r0, #0
 8011478:	e008      	b.n	801148c <_printf_common+0xa8>
 801147a:	2301      	movs	r3, #1
 801147c:	4652      	mov	r2, sl
 801147e:	4641      	mov	r1, r8
 8011480:	4638      	mov	r0, r7
 8011482:	47c8      	blx	r9
 8011484:	3001      	adds	r0, #1
 8011486:	d103      	bne.n	8011490 <_printf_common+0xac>
 8011488:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801148c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011490:	3501      	adds	r5, #1
 8011492:	e7c6      	b.n	8011422 <_printf_common+0x3e>
 8011494:	18e1      	adds	r1, r4, r3
 8011496:	1c5a      	adds	r2, r3, #1
 8011498:	2030      	movs	r0, #48	@ 0x30
 801149a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801149e:	4422      	add	r2, r4
 80114a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80114a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80114a8:	3302      	adds	r3, #2
 80114aa:	e7c7      	b.n	801143c <_printf_common+0x58>
 80114ac:	2301      	movs	r3, #1
 80114ae:	4622      	mov	r2, r4
 80114b0:	4641      	mov	r1, r8
 80114b2:	4638      	mov	r0, r7
 80114b4:	47c8      	blx	r9
 80114b6:	3001      	adds	r0, #1
 80114b8:	d0e6      	beq.n	8011488 <_printf_common+0xa4>
 80114ba:	3601      	adds	r6, #1
 80114bc:	e7d9      	b.n	8011472 <_printf_common+0x8e>
	...

080114c0 <_printf_i>:
 80114c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114c4:	7e0f      	ldrb	r7, [r1, #24]
 80114c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80114c8:	2f78      	cmp	r7, #120	@ 0x78
 80114ca:	4691      	mov	r9, r2
 80114cc:	4680      	mov	r8, r0
 80114ce:	460c      	mov	r4, r1
 80114d0:	469a      	mov	sl, r3
 80114d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80114d6:	d807      	bhi.n	80114e8 <_printf_i+0x28>
 80114d8:	2f62      	cmp	r7, #98	@ 0x62
 80114da:	d80a      	bhi.n	80114f2 <_printf_i+0x32>
 80114dc:	2f00      	cmp	r7, #0
 80114de:	f000 80d1 	beq.w	8011684 <_printf_i+0x1c4>
 80114e2:	2f58      	cmp	r7, #88	@ 0x58
 80114e4:	f000 80b8 	beq.w	8011658 <_printf_i+0x198>
 80114e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80114f0:	e03a      	b.n	8011568 <_printf_i+0xa8>
 80114f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80114f6:	2b15      	cmp	r3, #21
 80114f8:	d8f6      	bhi.n	80114e8 <_printf_i+0x28>
 80114fa:	a101      	add	r1, pc, #4	@ (adr r1, 8011500 <_printf_i+0x40>)
 80114fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011500:	08011559 	.word	0x08011559
 8011504:	0801156d 	.word	0x0801156d
 8011508:	080114e9 	.word	0x080114e9
 801150c:	080114e9 	.word	0x080114e9
 8011510:	080114e9 	.word	0x080114e9
 8011514:	080114e9 	.word	0x080114e9
 8011518:	0801156d 	.word	0x0801156d
 801151c:	080114e9 	.word	0x080114e9
 8011520:	080114e9 	.word	0x080114e9
 8011524:	080114e9 	.word	0x080114e9
 8011528:	080114e9 	.word	0x080114e9
 801152c:	0801166b 	.word	0x0801166b
 8011530:	08011597 	.word	0x08011597
 8011534:	08011625 	.word	0x08011625
 8011538:	080114e9 	.word	0x080114e9
 801153c:	080114e9 	.word	0x080114e9
 8011540:	0801168d 	.word	0x0801168d
 8011544:	080114e9 	.word	0x080114e9
 8011548:	08011597 	.word	0x08011597
 801154c:	080114e9 	.word	0x080114e9
 8011550:	080114e9 	.word	0x080114e9
 8011554:	0801162d 	.word	0x0801162d
 8011558:	6833      	ldr	r3, [r6, #0]
 801155a:	1d1a      	adds	r2, r3, #4
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	6032      	str	r2, [r6, #0]
 8011560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011568:	2301      	movs	r3, #1
 801156a:	e09c      	b.n	80116a6 <_printf_i+0x1e6>
 801156c:	6833      	ldr	r3, [r6, #0]
 801156e:	6820      	ldr	r0, [r4, #0]
 8011570:	1d19      	adds	r1, r3, #4
 8011572:	6031      	str	r1, [r6, #0]
 8011574:	0606      	lsls	r6, r0, #24
 8011576:	d501      	bpl.n	801157c <_printf_i+0xbc>
 8011578:	681d      	ldr	r5, [r3, #0]
 801157a:	e003      	b.n	8011584 <_printf_i+0xc4>
 801157c:	0645      	lsls	r5, r0, #25
 801157e:	d5fb      	bpl.n	8011578 <_printf_i+0xb8>
 8011580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011584:	2d00      	cmp	r5, #0
 8011586:	da03      	bge.n	8011590 <_printf_i+0xd0>
 8011588:	232d      	movs	r3, #45	@ 0x2d
 801158a:	426d      	negs	r5, r5
 801158c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011590:	4858      	ldr	r0, [pc, #352]	@ (80116f4 <_printf_i+0x234>)
 8011592:	230a      	movs	r3, #10
 8011594:	e011      	b.n	80115ba <_printf_i+0xfa>
 8011596:	6821      	ldr	r1, [r4, #0]
 8011598:	6833      	ldr	r3, [r6, #0]
 801159a:	0608      	lsls	r0, r1, #24
 801159c:	f853 5b04 	ldr.w	r5, [r3], #4
 80115a0:	d402      	bmi.n	80115a8 <_printf_i+0xe8>
 80115a2:	0649      	lsls	r1, r1, #25
 80115a4:	bf48      	it	mi
 80115a6:	b2ad      	uxthmi	r5, r5
 80115a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80115aa:	4852      	ldr	r0, [pc, #328]	@ (80116f4 <_printf_i+0x234>)
 80115ac:	6033      	str	r3, [r6, #0]
 80115ae:	bf14      	ite	ne
 80115b0:	230a      	movne	r3, #10
 80115b2:	2308      	moveq	r3, #8
 80115b4:	2100      	movs	r1, #0
 80115b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80115ba:	6866      	ldr	r6, [r4, #4]
 80115bc:	60a6      	str	r6, [r4, #8]
 80115be:	2e00      	cmp	r6, #0
 80115c0:	db05      	blt.n	80115ce <_printf_i+0x10e>
 80115c2:	6821      	ldr	r1, [r4, #0]
 80115c4:	432e      	orrs	r6, r5
 80115c6:	f021 0104 	bic.w	r1, r1, #4
 80115ca:	6021      	str	r1, [r4, #0]
 80115cc:	d04b      	beq.n	8011666 <_printf_i+0x1a6>
 80115ce:	4616      	mov	r6, r2
 80115d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80115d4:	fb03 5711 	mls	r7, r3, r1, r5
 80115d8:	5dc7      	ldrb	r7, [r0, r7]
 80115da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80115de:	462f      	mov	r7, r5
 80115e0:	42bb      	cmp	r3, r7
 80115e2:	460d      	mov	r5, r1
 80115e4:	d9f4      	bls.n	80115d0 <_printf_i+0x110>
 80115e6:	2b08      	cmp	r3, #8
 80115e8:	d10b      	bne.n	8011602 <_printf_i+0x142>
 80115ea:	6823      	ldr	r3, [r4, #0]
 80115ec:	07df      	lsls	r7, r3, #31
 80115ee:	d508      	bpl.n	8011602 <_printf_i+0x142>
 80115f0:	6923      	ldr	r3, [r4, #16]
 80115f2:	6861      	ldr	r1, [r4, #4]
 80115f4:	4299      	cmp	r1, r3
 80115f6:	bfde      	ittt	le
 80115f8:	2330      	movle	r3, #48	@ 0x30
 80115fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80115fe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011602:	1b92      	subs	r2, r2, r6
 8011604:	6122      	str	r2, [r4, #16]
 8011606:	f8cd a000 	str.w	sl, [sp]
 801160a:	464b      	mov	r3, r9
 801160c:	aa03      	add	r2, sp, #12
 801160e:	4621      	mov	r1, r4
 8011610:	4640      	mov	r0, r8
 8011612:	f7ff fee7 	bl	80113e4 <_printf_common>
 8011616:	3001      	adds	r0, #1
 8011618:	d14a      	bne.n	80116b0 <_printf_i+0x1f0>
 801161a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801161e:	b004      	add	sp, #16
 8011620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011624:	6823      	ldr	r3, [r4, #0]
 8011626:	f043 0320 	orr.w	r3, r3, #32
 801162a:	6023      	str	r3, [r4, #0]
 801162c:	4832      	ldr	r0, [pc, #200]	@ (80116f8 <_printf_i+0x238>)
 801162e:	2778      	movs	r7, #120	@ 0x78
 8011630:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011634:	6823      	ldr	r3, [r4, #0]
 8011636:	6831      	ldr	r1, [r6, #0]
 8011638:	061f      	lsls	r7, r3, #24
 801163a:	f851 5b04 	ldr.w	r5, [r1], #4
 801163e:	d402      	bmi.n	8011646 <_printf_i+0x186>
 8011640:	065f      	lsls	r7, r3, #25
 8011642:	bf48      	it	mi
 8011644:	b2ad      	uxthmi	r5, r5
 8011646:	6031      	str	r1, [r6, #0]
 8011648:	07d9      	lsls	r1, r3, #31
 801164a:	bf44      	itt	mi
 801164c:	f043 0320 	orrmi.w	r3, r3, #32
 8011650:	6023      	strmi	r3, [r4, #0]
 8011652:	b11d      	cbz	r5, 801165c <_printf_i+0x19c>
 8011654:	2310      	movs	r3, #16
 8011656:	e7ad      	b.n	80115b4 <_printf_i+0xf4>
 8011658:	4826      	ldr	r0, [pc, #152]	@ (80116f4 <_printf_i+0x234>)
 801165a:	e7e9      	b.n	8011630 <_printf_i+0x170>
 801165c:	6823      	ldr	r3, [r4, #0]
 801165e:	f023 0320 	bic.w	r3, r3, #32
 8011662:	6023      	str	r3, [r4, #0]
 8011664:	e7f6      	b.n	8011654 <_printf_i+0x194>
 8011666:	4616      	mov	r6, r2
 8011668:	e7bd      	b.n	80115e6 <_printf_i+0x126>
 801166a:	6833      	ldr	r3, [r6, #0]
 801166c:	6825      	ldr	r5, [r4, #0]
 801166e:	6961      	ldr	r1, [r4, #20]
 8011670:	1d18      	adds	r0, r3, #4
 8011672:	6030      	str	r0, [r6, #0]
 8011674:	062e      	lsls	r6, r5, #24
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	d501      	bpl.n	801167e <_printf_i+0x1be>
 801167a:	6019      	str	r1, [r3, #0]
 801167c:	e002      	b.n	8011684 <_printf_i+0x1c4>
 801167e:	0668      	lsls	r0, r5, #25
 8011680:	d5fb      	bpl.n	801167a <_printf_i+0x1ba>
 8011682:	8019      	strh	r1, [r3, #0]
 8011684:	2300      	movs	r3, #0
 8011686:	6123      	str	r3, [r4, #16]
 8011688:	4616      	mov	r6, r2
 801168a:	e7bc      	b.n	8011606 <_printf_i+0x146>
 801168c:	6833      	ldr	r3, [r6, #0]
 801168e:	1d1a      	adds	r2, r3, #4
 8011690:	6032      	str	r2, [r6, #0]
 8011692:	681e      	ldr	r6, [r3, #0]
 8011694:	6862      	ldr	r2, [r4, #4]
 8011696:	2100      	movs	r1, #0
 8011698:	4630      	mov	r0, r6
 801169a:	f7ee fe49 	bl	8000330 <memchr>
 801169e:	b108      	cbz	r0, 80116a4 <_printf_i+0x1e4>
 80116a0:	1b80      	subs	r0, r0, r6
 80116a2:	6060      	str	r0, [r4, #4]
 80116a4:	6863      	ldr	r3, [r4, #4]
 80116a6:	6123      	str	r3, [r4, #16]
 80116a8:	2300      	movs	r3, #0
 80116aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116ae:	e7aa      	b.n	8011606 <_printf_i+0x146>
 80116b0:	6923      	ldr	r3, [r4, #16]
 80116b2:	4632      	mov	r2, r6
 80116b4:	4649      	mov	r1, r9
 80116b6:	4640      	mov	r0, r8
 80116b8:	47d0      	blx	sl
 80116ba:	3001      	adds	r0, #1
 80116bc:	d0ad      	beq.n	801161a <_printf_i+0x15a>
 80116be:	6823      	ldr	r3, [r4, #0]
 80116c0:	079b      	lsls	r3, r3, #30
 80116c2:	d413      	bmi.n	80116ec <_printf_i+0x22c>
 80116c4:	68e0      	ldr	r0, [r4, #12]
 80116c6:	9b03      	ldr	r3, [sp, #12]
 80116c8:	4298      	cmp	r0, r3
 80116ca:	bfb8      	it	lt
 80116cc:	4618      	movlt	r0, r3
 80116ce:	e7a6      	b.n	801161e <_printf_i+0x15e>
 80116d0:	2301      	movs	r3, #1
 80116d2:	4632      	mov	r2, r6
 80116d4:	4649      	mov	r1, r9
 80116d6:	4640      	mov	r0, r8
 80116d8:	47d0      	blx	sl
 80116da:	3001      	adds	r0, #1
 80116dc:	d09d      	beq.n	801161a <_printf_i+0x15a>
 80116de:	3501      	adds	r5, #1
 80116e0:	68e3      	ldr	r3, [r4, #12]
 80116e2:	9903      	ldr	r1, [sp, #12]
 80116e4:	1a5b      	subs	r3, r3, r1
 80116e6:	42ab      	cmp	r3, r5
 80116e8:	dcf2      	bgt.n	80116d0 <_printf_i+0x210>
 80116ea:	e7eb      	b.n	80116c4 <_printf_i+0x204>
 80116ec:	2500      	movs	r5, #0
 80116ee:	f104 0619 	add.w	r6, r4, #25
 80116f2:	e7f5      	b.n	80116e0 <_printf_i+0x220>
 80116f4:	080163c4 	.word	0x080163c4
 80116f8:	080163d5 	.word	0x080163d5

080116fc <std>:
 80116fc:	2300      	movs	r3, #0
 80116fe:	b510      	push	{r4, lr}
 8011700:	4604      	mov	r4, r0
 8011702:	e9c0 3300 	strd	r3, r3, [r0]
 8011706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801170a:	6083      	str	r3, [r0, #8]
 801170c:	8181      	strh	r1, [r0, #12]
 801170e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011710:	81c2      	strh	r2, [r0, #14]
 8011712:	6183      	str	r3, [r0, #24]
 8011714:	4619      	mov	r1, r3
 8011716:	2208      	movs	r2, #8
 8011718:	305c      	adds	r0, #92	@ 0x5c
 801171a:	f000 fa49 	bl	8011bb0 <memset>
 801171e:	4b0d      	ldr	r3, [pc, #52]	@ (8011754 <std+0x58>)
 8011720:	6263      	str	r3, [r4, #36]	@ 0x24
 8011722:	4b0d      	ldr	r3, [pc, #52]	@ (8011758 <std+0x5c>)
 8011724:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011726:	4b0d      	ldr	r3, [pc, #52]	@ (801175c <std+0x60>)
 8011728:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801172a:	4b0d      	ldr	r3, [pc, #52]	@ (8011760 <std+0x64>)
 801172c:	6323      	str	r3, [r4, #48]	@ 0x30
 801172e:	4b0d      	ldr	r3, [pc, #52]	@ (8011764 <std+0x68>)
 8011730:	6224      	str	r4, [r4, #32]
 8011732:	429c      	cmp	r4, r3
 8011734:	d006      	beq.n	8011744 <std+0x48>
 8011736:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801173a:	4294      	cmp	r4, r2
 801173c:	d002      	beq.n	8011744 <std+0x48>
 801173e:	33d0      	adds	r3, #208	@ 0xd0
 8011740:	429c      	cmp	r4, r3
 8011742:	d105      	bne.n	8011750 <std+0x54>
 8011744:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801174c:	f000 bacc 	b.w	8011ce8 <__retarget_lock_init_recursive>
 8011750:	bd10      	pop	{r4, pc}
 8011752:	bf00      	nop
 8011754:	080119c9 	.word	0x080119c9
 8011758:	080119ef 	.word	0x080119ef
 801175c:	08011a27 	.word	0x08011a27
 8011760:	08011a4b 	.word	0x08011a4b
 8011764:	24000ad4 	.word	0x24000ad4

08011768 <stdio_exit_handler>:
 8011768:	4a02      	ldr	r2, [pc, #8]	@ (8011774 <stdio_exit_handler+0xc>)
 801176a:	4903      	ldr	r1, [pc, #12]	@ (8011778 <stdio_exit_handler+0x10>)
 801176c:	4803      	ldr	r0, [pc, #12]	@ (801177c <stdio_exit_handler+0x14>)
 801176e:	f000 b869 	b.w	8011844 <_fwalk_sglue>
 8011772:	bf00      	nop
 8011774:	24000020 	.word	0x24000020
 8011778:	08013b99 	.word	0x08013b99
 801177c:	24000030 	.word	0x24000030

08011780 <cleanup_stdio>:
 8011780:	6841      	ldr	r1, [r0, #4]
 8011782:	4b0c      	ldr	r3, [pc, #48]	@ (80117b4 <cleanup_stdio+0x34>)
 8011784:	4299      	cmp	r1, r3
 8011786:	b510      	push	{r4, lr}
 8011788:	4604      	mov	r4, r0
 801178a:	d001      	beq.n	8011790 <cleanup_stdio+0x10>
 801178c:	f002 fa04 	bl	8013b98 <_fflush_r>
 8011790:	68a1      	ldr	r1, [r4, #8]
 8011792:	4b09      	ldr	r3, [pc, #36]	@ (80117b8 <cleanup_stdio+0x38>)
 8011794:	4299      	cmp	r1, r3
 8011796:	d002      	beq.n	801179e <cleanup_stdio+0x1e>
 8011798:	4620      	mov	r0, r4
 801179a:	f002 f9fd 	bl	8013b98 <_fflush_r>
 801179e:	68e1      	ldr	r1, [r4, #12]
 80117a0:	4b06      	ldr	r3, [pc, #24]	@ (80117bc <cleanup_stdio+0x3c>)
 80117a2:	4299      	cmp	r1, r3
 80117a4:	d004      	beq.n	80117b0 <cleanup_stdio+0x30>
 80117a6:	4620      	mov	r0, r4
 80117a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117ac:	f002 b9f4 	b.w	8013b98 <_fflush_r>
 80117b0:	bd10      	pop	{r4, pc}
 80117b2:	bf00      	nop
 80117b4:	24000ad4 	.word	0x24000ad4
 80117b8:	24000b3c 	.word	0x24000b3c
 80117bc:	24000ba4 	.word	0x24000ba4

080117c0 <global_stdio_init.part.0>:
 80117c0:	b510      	push	{r4, lr}
 80117c2:	4b0b      	ldr	r3, [pc, #44]	@ (80117f0 <global_stdio_init.part.0+0x30>)
 80117c4:	4c0b      	ldr	r4, [pc, #44]	@ (80117f4 <global_stdio_init.part.0+0x34>)
 80117c6:	4a0c      	ldr	r2, [pc, #48]	@ (80117f8 <global_stdio_init.part.0+0x38>)
 80117c8:	601a      	str	r2, [r3, #0]
 80117ca:	4620      	mov	r0, r4
 80117cc:	2200      	movs	r2, #0
 80117ce:	2104      	movs	r1, #4
 80117d0:	f7ff ff94 	bl	80116fc <std>
 80117d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80117d8:	2201      	movs	r2, #1
 80117da:	2109      	movs	r1, #9
 80117dc:	f7ff ff8e 	bl	80116fc <std>
 80117e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80117e4:	2202      	movs	r2, #2
 80117e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117ea:	2112      	movs	r1, #18
 80117ec:	f7ff bf86 	b.w	80116fc <std>
 80117f0:	24000c0c 	.word	0x24000c0c
 80117f4:	24000ad4 	.word	0x24000ad4
 80117f8:	08011769 	.word	0x08011769

080117fc <__sfp_lock_acquire>:
 80117fc:	4801      	ldr	r0, [pc, #4]	@ (8011804 <__sfp_lock_acquire+0x8>)
 80117fe:	f000 ba74 	b.w	8011cea <__retarget_lock_acquire_recursive>
 8011802:	bf00      	nop
 8011804:	24000c15 	.word	0x24000c15

08011808 <__sfp_lock_release>:
 8011808:	4801      	ldr	r0, [pc, #4]	@ (8011810 <__sfp_lock_release+0x8>)
 801180a:	f000 ba6f 	b.w	8011cec <__retarget_lock_release_recursive>
 801180e:	bf00      	nop
 8011810:	24000c15 	.word	0x24000c15

08011814 <__sinit>:
 8011814:	b510      	push	{r4, lr}
 8011816:	4604      	mov	r4, r0
 8011818:	f7ff fff0 	bl	80117fc <__sfp_lock_acquire>
 801181c:	6a23      	ldr	r3, [r4, #32]
 801181e:	b11b      	cbz	r3, 8011828 <__sinit+0x14>
 8011820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011824:	f7ff bff0 	b.w	8011808 <__sfp_lock_release>
 8011828:	4b04      	ldr	r3, [pc, #16]	@ (801183c <__sinit+0x28>)
 801182a:	6223      	str	r3, [r4, #32]
 801182c:	4b04      	ldr	r3, [pc, #16]	@ (8011840 <__sinit+0x2c>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d1f5      	bne.n	8011820 <__sinit+0xc>
 8011834:	f7ff ffc4 	bl	80117c0 <global_stdio_init.part.0>
 8011838:	e7f2      	b.n	8011820 <__sinit+0xc>
 801183a:	bf00      	nop
 801183c:	08011781 	.word	0x08011781
 8011840:	24000c0c 	.word	0x24000c0c

08011844 <_fwalk_sglue>:
 8011844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011848:	4607      	mov	r7, r0
 801184a:	4688      	mov	r8, r1
 801184c:	4614      	mov	r4, r2
 801184e:	2600      	movs	r6, #0
 8011850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011854:	f1b9 0901 	subs.w	r9, r9, #1
 8011858:	d505      	bpl.n	8011866 <_fwalk_sglue+0x22>
 801185a:	6824      	ldr	r4, [r4, #0]
 801185c:	2c00      	cmp	r4, #0
 801185e:	d1f7      	bne.n	8011850 <_fwalk_sglue+0xc>
 8011860:	4630      	mov	r0, r6
 8011862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011866:	89ab      	ldrh	r3, [r5, #12]
 8011868:	2b01      	cmp	r3, #1
 801186a:	d907      	bls.n	801187c <_fwalk_sglue+0x38>
 801186c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011870:	3301      	adds	r3, #1
 8011872:	d003      	beq.n	801187c <_fwalk_sglue+0x38>
 8011874:	4629      	mov	r1, r5
 8011876:	4638      	mov	r0, r7
 8011878:	47c0      	blx	r8
 801187a:	4306      	orrs	r6, r0
 801187c:	3568      	adds	r5, #104	@ 0x68
 801187e:	e7e9      	b.n	8011854 <_fwalk_sglue+0x10>

08011880 <iprintf>:
 8011880:	b40f      	push	{r0, r1, r2, r3}
 8011882:	b507      	push	{r0, r1, r2, lr}
 8011884:	4906      	ldr	r1, [pc, #24]	@ (80118a0 <iprintf+0x20>)
 8011886:	ab04      	add	r3, sp, #16
 8011888:	6808      	ldr	r0, [r1, #0]
 801188a:	f853 2b04 	ldr.w	r2, [r3], #4
 801188e:	6881      	ldr	r1, [r0, #8]
 8011890:	9301      	str	r3, [sp, #4]
 8011892:	f001 fe97 	bl	80135c4 <_vfiprintf_r>
 8011896:	b003      	add	sp, #12
 8011898:	f85d eb04 	ldr.w	lr, [sp], #4
 801189c:	b004      	add	sp, #16
 801189e:	4770      	bx	lr
 80118a0:	2400002c 	.word	0x2400002c

080118a4 <putchar>:
 80118a4:	4b02      	ldr	r3, [pc, #8]	@ (80118b0 <putchar+0xc>)
 80118a6:	4601      	mov	r1, r0
 80118a8:	6818      	ldr	r0, [r3, #0]
 80118aa:	6882      	ldr	r2, [r0, #8]
 80118ac:	f002 b9fe 	b.w	8013cac <_putc_r>
 80118b0:	2400002c 	.word	0x2400002c

080118b4 <_puts_r>:
 80118b4:	6a03      	ldr	r3, [r0, #32]
 80118b6:	b570      	push	{r4, r5, r6, lr}
 80118b8:	6884      	ldr	r4, [r0, #8]
 80118ba:	4605      	mov	r5, r0
 80118bc:	460e      	mov	r6, r1
 80118be:	b90b      	cbnz	r3, 80118c4 <_puts_r+0x10>
 80118c0:	f7ff ffa8 	bl	8011814 <__sinit>
 80118c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118c6:	07db      	lsls	r3, r3, #31
 80118c8:	d405      	bmi.n	80118d6 <_puts_r+0x22>
 80118ca:	89a3      	ldrh	r3, [r4, #12]
 80118cc:	0598      	lsls	r0, r3, #22
 80118ce:	d402      	bmi.n	80118d6 <_puts_r+0x22>
 80118d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118d2:	f000 fa0a 	bl	8011cea <__retarget_lock_acquire_recursive>
 80118d6:	89a3      	ldrh	r3, [r4, #12]
 80118d8:	0719      	lsls	r1, r3, #28
 80118da:	d502      	bpl.n	80118e2 <_puts_r+0x2e>
 80118dc:	6923      	ldr	r3, [r4, #16]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d135      	bne.n	801194e <_puts_r+0x9a>
 80118e2:	4621      	mov	r1, r4
 80118e4:	4628      	mov	r0, r5
 80118e6:	f000 f8f3 	bl	8011ad0 <__swsetup_r>
 80118ea:	b380      	cbz	r0, 801194e <_puts_r+0x9a>
 80118ec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80118f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118f2:	07da      	lsls	r2, r3, #31
 80118f4:	d405      	bmi.n	8011902 <_puts_r+0x4e>
 80118f6:	89a3      	ldrh	r3, [r4, #12]
 80118f8:	059b      	lsls	r3, r3, #22
 80118fa:	d402      	bmi.n	8011902 <_puts_r+0x4e>
 80118fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118fe:	f000 f9f5 	bl	8011cec <__retarget_lock_release_recursive>
 8011902:	4628      	mov	r0, r5
 8011904:	bd70      	pop	{r4, r5, r6, pc}
 8011906:	2b00      	cmp	r3, #0
 8011908:	da04      	bge.n	8011914 <_puts_r+0x60>
 801190a:	69a2      	ldr	r2, [r4, #24]
 801190c:	429a      	cmp	r2, r3
 801190e:	dc17      	bgt.n	8011940 <_puts_r+0x8c>
 8011910:	290a      	cmp	r1, #10
 8011912:	d015      	beq.n	8011940 <_puts_r+0x8c>
 8011914:	6823      	ldr	r3, [r4, #0]
 8011916:	1c5a      	adds	r2, r3, #1
 8011918:	6022      	str	r2, [r4, #0]
 801191a:	7019      	strb	r1, [r3, #0]
 801191c:	68a3      	ldr	r3, [r4, #8]
 801191e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011922:	3b01      	subs	r3, #1
 8011924:	60a3      	str	r3, [r4, #8]
 8011926:	2900      	cmp	r1, #0
 8011928:	d1ed      	bne.n	8011906 <_puts_r+0x52>
 801192a:	2b00      	cmp	r3, #0
 801192c:	da11      	bge.n	8011952 <_puts_r+0x9e>
 801192e:	4622      	mov	r2, r4
 8011930:	210a      	movs	r1, #10
 8011932:	4628      	mov	r0, r5
 8011934:	f000 f88d 	bl	8011a52 <__swbuf_r>
 8011938:	3001      	adds	r0, #1
 801193a:	d0d7      	beq.n	80118ec <_puts_r+0x38>
 801193c:	250a      	movs	r5, #10
 801193e:	e7d7      	b.n	80118f0 <_puts_r+0x3c>
 8011940:	4622      	mov	r2, r4
 8011942:	4628      	mov	r0, r5
 8011944:	f000 f885 	bl	8011a52 <__swbuf_r>
 8011948:	3001      	adds	r0, #1
 801194a:	d1e7      	bne.n	801191c <_puts_r+0x68>
 801194c:	e7ce      	b.n	80118ec <_puts_r+0x38>
 801194e:	3e01      	subs	r6, #1
 8011950:	e7e4      	b.n	801191c <_puts_r+0x68>
 8011952:	6823      	ldr	r3, [r4, #0]
 8011954:	1c5a      	adds	r2, r3, #1
 8011956:	6022      	str	r2, [r4, #0]
 8011958:	220a      	movs	r2, #10
 801195a:	701a      	strb	r2, [r3, #0]
 801195c:	e7ee      	b.n	801193c <_puts_r+0x88>
	...

08011960 <puts>:
 8011960:	4b02      	ldr	r3, [pc, #8]	@ (801196c <puts+0xc>)
 8011962:	4601      	mov	r1, r0
 8011964:	6818      	ldr	r0, [r3, #0]
 8011966:	f7ff bfa5 	b.w	80118b4 <_puts_r>
 801196a:	bf00      	nop
 801196c:	2400002c 	.word	0x2400002c

08011970 <siscanf>:
 8011970:	b40e      	push	{r1, r2, r3}
 8011972:	b570      	push	{r4, r5, r6, lr}
 8011974:	b09d      	sub	sp, #116	@ 0x74
 8011976:	ac21      	add	r4, sp, #132	@ 0x84
 8011978:	2500      	movs	r5, #0
 801197a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801197e:	f854 6b04 	ldr.w	r6, [r4], #4
 8011982:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011986:	951b      	str	r5, [sp, #108]	@ 0x6c
 8011988:	9002      	str	r0, [sp, #8]
 801198a:	9006      	str	r0, [sp, #24]
 801198c:	f7ee fd20 	bl	80003d0 <strlen>
 8011990:	4b0b      	ldr	r3, [pc, #44]	@ (80119c0 <siscanf+0x50>)
 8011992:	9003      	str	r0, [sp, #12]
 8011994:	9007      	str	r0, [sp, #28]
 8011996:	480b      	ldr	r0, [pc, #44]	@ (80119c4 <siscanf+0x54>)
 8011998:	930b      	str	r3, [sp, #44]	@ 0x2c
 801199a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801199e:	f8ad 3016 	strh.w	r3, [sp, #22]
 80119a2:	4632      	mov	r2, r6
 80119a4:	4623      	mov	r3, r4
 80119a6:	a902      	add	r1, sp, #8
 80119a8:	6800      	ldr	r0, [r0, #0]
 80119aa:	950f      	str	r5, [sp, #60]	@ 0x3c
 80119ac:	9514      	str	r5, [sp, #80]	@ 0x50
 80119ae:	9401      	str	r4, [sp, #4]
 80119b0:	f001 fc68 	bl	8013284 <__ssvfiscanf_r>
 80119b4:	b01d      	add	sp, #116	@ 0x74
 80119b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80119ba:	b003      	add	sp, #12
 80119bc:	4770      	bx	lr
 80119be:	bf00      	nop
 80119c0:	080119eb 	.word	0x080119eb
 80119c4:	2400002c 	.word	0x2400002c

080119c8 <__sread>:
 80119c8:	b510      	push	{r4, lr}
 80119ca:	460c      	mov	r4, r1
 80119cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119d0:	f000 f93c 	bl	8011c4c <_read_r>
 80119d4:	2800      	cmp	r0, #0
 80119d6:	bfab      	itete	ge
 80119d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80119da:	89a3      	ldrhlt	r3, [r4, #12]
 80119dc:	181b      	addge	r3, r3, r0
 80119de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80119e2:	bfac      	ite	ge
 80119e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80119e6:	81a3      	strhlt	r3, [r4, #12]
 80119e8:	bd10      	pop	{r4, pc}

080119ea <__seofread>:
 80119ea:	2000      	movs	r0, #0
 80119ec:	4770      	bx	lr

080119ee <__swrite>:
 80119ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119f2:	461f      	mov	r7, r3
 80119f4:	898b      	ldrh	r3, [r1, #12]
 80119f6:	05db      	lsls	r3, r3, #23
 80119f8:	4605      	mov	r5, r0
 80119fa:	460c      	mov	r4, r1
 80119fc:	4616      	mov	r6, r2
 80119fe:	d505      	bpl.n	8011a0c <__swrite+0x1e>
 8011a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a04:	2302      	movs	r3, #2
 8011a06:	2200      	movs	r2, #0
 8011a08:	f000 f90e 	bl	8011c28 <_lseek_r>
 8011a0c:	89a3      	ldrh	r3, [r4, #12]
 8011a0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011a16:	81a3      	strh	r3, [r4, #12]
 8011a18:	4632      	mov	r2, r6
 8011a1a:	463b      	mov	r3, r7
 8011a1c:	4628      	mov	r0, r5
 8011a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a22:	f000 b925 	b.w	8011c70 <_write_r>

08011a26 <__sseek>:
 8011a26:	b510      	push	{r4, lr}
 8011a28:	460c      	mov	r4, r1
 8011a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a2e:	f000 f8fb 	bl	8011c28 <_lseek_r>
 8011a32:	1c43      	adds	r3, r0, #1
 8011a34:	89a3      	ldrh	r3, [r4, #12]
 8011a36:	bf15      	itete	ne
 8011a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011a42:	81a3      	strheq	r3, [r4, #12]
 8011a44:	bf18      	it	ne
 8011a46:	81a3      	strhne	r3, [r4, #12]
 8011a48:	bd10      	pop	{r4, pc}

08011a4a <__sclose>:
 8011a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a4e:	f000 b8db 	b.w	8011c08 <_close_r>

08011a52 <__swbuf_r>:
 8011a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a54:	460e      	mov	r6, r1
 8011a56:	4614      	mov	r4, r2
 8011a58:	4605      	mov	r5, r0
 8011a5a:	b118      	cbz	r0, 8011a64 <__swbuf_r+0x12>
 8011a5c:	6a03      	ldr	r3, [r0, #32]
 8011a5e:	b90b      	cbnz	r3, 8011a64 <__swbuf_r+0x12>
 8011a60:	f7ff fed8 	bl	8011814 <__sinit>
 8011a64:	69a3      	ldr	r3, [r4, #24]
 8011a66:	60a3      	str	r3, [r4, #8]
 8011a68:	89a3      	ldrh	r3, [r4, #12]
 8011a6a:	071a      	lsls	r2, r3, #28
 8011a6c:	d501      	bpl.n	8011a72 <__swbuf_r+0x20>
 8011a6e:	6923      	ldr	r3, [r4, #16]
 8011a70:	b943      	cbnz	r3, 8011a84 <__swbuf_r+0x32>
 8011a72:	4621      	mov	r1, r4
 8011a74:	4628      	mov	r0, r5
 8011a76:	f000 f82b 	bl	8011ad0 <__swsetup_r>
 8011a7a:	b118      	cbz	r0, 8011a84 <__swbuf_r+0x32>
 8011a7c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011a80:	4638      	mov	r0, r7
 8011a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	6922      	ldr	r2, [r4, #16]
 8011a88:	1a98      	subs	r0, r3, r2
 8011a8a:	6963      	ldr	r3, [r4, #20]
 8011a8c:	b2f6      	uxtb	r6, r6
 8011a8e:	4283      	cmp	r3, r0
 8011a90:	4637      	mov	r7, r6
 8011a92:	dc05      	bgt.n	8011aa0 <__swbuf_r+0x4e>
 8011a94:	4621      	mov	r1, r4
 8011a96:	4628      	mov	r0, r5
 8011a98:	f002 f87e 	bl	8013b98 <_fflush_r>
 8011a9c:	2800      	cmp	r0, #0
 8011a9e:	d1ed      	bne.n	8011a7c <__swbuf_r+0x2a>
 8011aa0:	68a3      	ldr	r3, [r4, #8]
 8011aa2:	3b01      	subs	r3, #1
 8011aa4:	60a3      	str	r3, [r4, #8]
 8011aa6:	6823      	ldr	r3, [r4, #0]
 8011aa8:	1c5a      	adds	r2, r3, #1
 8011aaa:	6022      	str	r2, [r4, #0]
 8011aac:	701e      	strb	r6, [r3, #0]
 8011aae:	6962      	ldr	r2, [r4, #20]
 8011ab0:	1c43      	adds	r3, r0, #1
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d004      	beq.n	8011ac0 <__swbuf_r+0x6e>
 8011ab6:	89a3      	ldrh	r3, [r4, #12]
 8011ab8:	07db      	lsls	r3, r3, #31
 8011aba:	d5e1      	bpl.n	8011a80 <__swbuf_r+0x2e>
 8011abc:	2e0a      	cmp	r6, #10
 8011abe:	d1df      	bne.n	8011a80 <__swbuf_r+0x2e>
 8011ac0:	4621      	mov	r1, r4
 8011ac2:	4628      	mov	r0, r5
 8011ac4:	f002 f868 	bl	8013b98 <_fflush_r>
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	d0d9      	beq.n	8011a80 <__swbuf_r+0x2e>
 8011acc:	e7d6      	b.n	8011a7c <__swbuf_r+0x2a>
	...

08011ad0 <__swsetup_r>:
 8011ad0:	b538      	push	{r3, r4, r5, lr}
 8011ad2:	4b29      	ldr	r3, [pc, #164]	@ (8011b78 <__swsetup_r+0xa8>)
 8011ad4:	4605      	mov	r5, r0
 8011ad6:	6818      	ldr	r0, [r3, #0]
 8011ad8:	460c      	mov	r4, r1
 8011ada:	b118      	cbz	r0, 8011ae4 <__swsetup_r+0x14>
 8011adc:	6a03      	ldr	r3, [r0, #32]
 8011ade:	b90b      	cbnz	r3, 8011ae4 <__swsetup_r+0x14>
 8011ae0:	f7ff fe98 	bl	8011814 <__sinit>
 8011ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ae8:	0719      	lsls	r1, r3, #28
 8011aea:	d422      	bmi.n	8011b32 <__swsetup_r+0x62>
 8011aec:	06da      	lsls	r2, r3, #27
 8011aee:	d407      	bmi.n	8011b00 <__swsetup_r+0x30>
 8011af0:	2209      	movs	r2, #9
 8011af2:	602a      	str	r2, [r5, #0]
 8011af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011af8:	81a3      	strh	r3, [r4, #12]
 8011afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011afe:	e033      	b.n	8011b68 <__swsetup_r+0x98>
 8011b00:	0758      	lsls	r0, r3, #29
 8011b02:	d512      	bpl.n	8011b2a <__swsetup_r+0x5a>
 8011b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b06:	b141      	cbz	r1, 8011b1a <__swsetup_r+0x4a>
 8011b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b0c:	4299      	cmp	r1, r3
 8011b0e:	d002      	beq.n	8011b16 <__swsetup_r+0x46>
 8011b10:	4628      	mov	r0, r5
 8011b12:	f000 fee3 	bl	80128dc <_free_r>
 8011b16:	2300      	movs	r3, #0
 8011b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b1a:	89a3      	ldrh	r3, [r4, #12]
 8011b1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011b20:	81a3      	strh	r3, [r4, #12]
 8011b22:	2300      	movs	r3, #0
 8011b24:	6063      	str	r3, [r4, #4]
 8011b26:	6923      	ldr	r3, [r4, #16]
 8011b28:	6023      	str	r3, [r4, #0]
 8011b2a:	89a3      	ldrh	r3, [r4, #12]
 8011b2c:	f043 0308 	orr.w	r3, r3, #8
 8011b30:	81a3      	strh	r3, [r4, #12]
 8011b32:	6923      	ldr	r3, [r4, #16]
 8011b34:	b94b      	cbnz	r3, 8011b4a <__swsetup_r+0x7a>
 8011b36:	89a3      	ldrh	r3, [r4, #12]
 8011b38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011b40:	d003      	beq.n	8011b4a <__swsetup_r+0x7a>
 8011b42:	4621      	mov	r1, r4
 8011b44:	4628      	mov	r0, r5
 8011b46:	f002 f875 	bl	8013c34 <__smakebuf_r>
 8011b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b4e:	f013 0201 	ands.w	r2, r3, #1
 8011b52:	d00a      	beq.n	8011b6a <__swsetup_r+0x9a>
 8011b54:	2200      	movs	r2, #0
 8011b56:	60a2      	str	r2, [r4, #8]
 8011b58:	6962      	ldr	r2, [r4, #20]
 8011b5a:	4252      	negs	r2, r2
 8011b5c:	61a2      	str	r2, [r4, #24]
 8011b5e:	6922      	ldr	r2, [r4, #16]
 8011b60:	b942      	cbnz	r2, 8011b74 <__swsetup_r+0xa4>
 8011b62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011b66:	d1c5      	bne.n	8011af4 <__swsetup_r+0x24>
 8011b68:	bd38      	pop	{r3, r4, r5, pc}
 8011b6a:	0799      	lsls	r1, r3, #30
 8011b6c:	bf58      	it	pl
 8011b6e:	6962      	ldrpl	r2, [r4, #20]
 8011b70:	60a2      	str	r2, [r4, #8]
 8011b72:	e7f4      	b.n	8011b5e <__swsetup_r+0x8e>
 8011b74:	2000      	movs	r0, #0
 8011b76:	e7f7      	b.n	8011b68 <__swsetup_r+0x98>
 8011b78:	2400002c 	.word	0x2400002c

08011b7c <memmove>:
 8011b7c:	4288      	cmp	r0, r1
 8011b7e:	b510      	push	{r4, lr}
 8011b80:	eb01 0402 	add.w	r4, r1, r2
 8011b84:	d902      	bls.n	8011b8c <memmove+0x10>
 8011b86:	4284      	cmp	r4, r0
 8011b88:	4623      	mov	r3, r4
 8011b8a:	d807      	bhi.n	8011b9c <memmove+0x20>
 8011b8c:	1e43      	subs	r3, r0, #1
 8011b8e:	42a1      	cmp	r1, r4
 8011b90:	d008      	beq.n	8011ba4 <memmove+0x28>
 8011b92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b9a:	e7f8      	b.n	8011b8e <memmove+0x12>
 8011b9c:	4402      	add	r2, r0
 8011b9e:	4601      	mov	r1, r0
 8011ba0:	428a      	cmp	r2, r1
 8011ba2:	d100      	bne.n	8011ba6 <memmove+0x2a>
 8011ba4:	bd10      	pop	{r4, pc}
 8011ba6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011baa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011bae:	e7f7      	b.n	8011ba0 <memmove+0x24>

08011bb0 <memset>:
 8011bb0:	4402      	add	r2, r0
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d100      	bne.n	8011bba <memset+0xa>
 8011bb8:	4770      	bx	lr
 8011bba:	f803 1b01 	strb.w	r1, [r3], #1
 8011bbe:	e7f9      	b.n	8011bb4 <memset+0x4>

08011bc0 <strchr>:
 8011bc0:	b2c9      	uxtb	r1, r1
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bca:	b112      	cbz	r2, 8011bd2 <strchr+0x12>
 8011bcc:	428a      	cmp	r2, r1
 8011bce:	d1f9      	bne.n	8011bc4 <strchr+0x4>
 8011bd0:	4770      	bx	lr
 8011bd2:	2900      	cmp	r1, #0
 8011bd4:	bf18      	it	ne
 8011bd6:	2000      	movne	r0, #0
 8011bd8:	4770      	bx	lr

08011bda <strncmp>:
 8011bda:	b510      	push	{r4, lr}
 8011bdc:	b16a      	cbz	r2, 8011bfa <strncmp+0x20>
 8011bde:	3901      	subs	r1, #1
 8011be0:	1884      	adds	r4, r0, r2
 8011be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011be6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d103      	bne.n	8011bf6 <strncmp+0x1c>
 8011bee:	42a0      	cmp	r0, r4
 8011bf0:	d001      	beq.n	8011bf6 <strncmp+0x1c>
 8011bf2:	2a00      	cmp	r2, #0
 8011bf4:	d1f5      	bne.n	8011be2 <strncmp+0x8>
 8011bf6:	1ad0      	subs	r0, r2, r3
 8011bf8:	bd10      	pop	{r4, pc}
 8011bfa:	4610      	mov	r0, r2
 8011bfc:	e7fc      	b.n	8011bf8 <strncmp+0x1e>
	...

08011c00 <_localeconv_r>:
 8011c00:	4800      	ldr	r0, [pc, #0]	@ (8011c04 <_localeconv_r+0x4>)
 8011c02:	4770      	bx	lr
 8011c04:	2400016c 	.word	0x2400016c

08011c08 <_close_r>:
 8011c08:	b538      	push	{r3, r4, r5, lr}
 8011c0a:	4d06      	ldr	r5, [pc, #24]	@ (8011c24 <_close_r+0x1c>)
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	4604      	mov	r4, r0
 8011c10:	4608      	mov	r0, r1
 8011c12:	602b      	str	r3, [r5, #0]
 8011c14:	f7f3 fdca 	bl	80057ac <_close>
 8011c18:	1c43      	adds	r3, r0, #1
 8011c1a:	d102      	bne.n	8011c22 <_close_r+0x1a>
 8011c1c:	682b      	ldr	r3, [r5, #0]
 8011c1e:	b103      	cbz	r3, 8011c22 <_close_r+0x1a>
 8011c20:	6023      	str	r3, [r4, #0]
 8011c22:	bd38      	pop	{r3, r4, r5, pc}
 8011c24:	24000c10 	.word	0x24000c10

08011c28 <_lseek_r>:
 8011c28:	b538      	push	{r3, r4, r5, lr}
 8011c2a:	4d07      	ldr	r5, [pc, #28]	@ (8011c48 <_lseek_r+0x20>)
 8011c2c:	4604      	mov	r4, r0
 8011c2e:	4608      	mov	r0, r1
 8011c30:	4611      	mov	r1, r2
 8011c32:	2200      	movs	r2, #0
 8011c34:	602a      	str	r2, [r5, #0]
 8011c36:	461a      	mov	r2, r3
 8011c38:	f7f3 fddf 	bl	80057fa <_lseek>
 8011c3c:	1c43      	adds	r3, r0, #1
 8011c3e:	d102      	bne.n	8011c46 <_lseek_r+0x1e>
 8011c40:	682b      	ldr	r3, [r5, #0]
 8011c42:	b103      	cbz	r3, 8011c46 <_lseek_r+0x1e>
 8011c44:	6023      	str	r3, [r4, #0]
 8011c46:	bd38      	pop	{r3, r4, r5, pc}
 8011c48:	24000c10 	.word	0x24000c10

08011c4c <_read_r>:
 8011c4c:	b538      	push	{r3, r4, r5, lr}
 8011c4e:	4d07      	ldr	r5, [pc, #28]	@ (8011c6c <_read_r+0x20>)
 8011c50:	4604      	mov	r4, r0
 8011c52:	4608      	mov	r0, r1
 8011c54:	4611      	mov	r1, r2
 8011c56:	2200      	movs	r2, #0
 8011c58:	602a      	str	r2, [r5, #0]
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	f7f3 fd89 	bl	8005772 <_read>
 8011c60:	1c43      	adds	r3, r0, #1
 8011c62:	d102      	bne.n	8011c6a <_read_r+0x1e>
 8011c64:	682b      	ldr	r3, [r5, #0]
 8011c66:	b103      	cbz	r3, 8011c6a <_read_r+0x1e>
 8011c68:	6023      	str	r3, [r4, #0]
 8011c6a:	bd38      	pop	{r3, r4, r5, pc}
 8011c6c:	24000c10 	.word	0x24000c10

08011c70 <_write_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4d07      	ldr	r5, [pc, #28]	@ (8011c90 <_write_r+0x20>)
 8011c74:	4604      	mov	r4, r0
 8011c76:	4608      	mov	r0, r1
 8011c78:	4611      	mov	r1, r2
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	602a      	str	r2, [r5, #0]
 8011c7e:	461a      	mov	r2, r3
 8011c80:	f7f1 fdd6 	bl	8003830 <_write>
 8011c84:	1c43      	adds	r3, r0, #1
 8011c86:	d102      	bne.n	8011c8e <_write_r+0x1e>
 8011c88:	682b      	ldr	r3, [r5, #0]
 8011c8a:	b103      	cbz	r3, 8011c8e <_write_r+0x1e>
 8011c8c:	6023      	str	r3, [r4, #0]
 8011c8e:	bd38      	pop	{r3, r4, r5, pc}
 8011c90:	24000c10 	.word	0x24000c10

08011c94 <__errno>:
 8011c94:	4b01      	ldr	r3, [pc, #4]	@ (8011c9c <__errno+0x8>)
 8011c96:	6818      	ldr	r0, [r3, #0]
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop
 8011c9c:	2400002c 	.word	0x2400002c

08011ca0 <__libc_init_array>:
 8011ca0:	b570      	push	{r4, r5, r6, lr}
 8011ca2:	4d0d      	ldr	r5, [pc, #52]	@ (8011cd8 <__libc_init_array+0x38>)
 8011ca4:	4c0d      	ldr	r4, [pc, #52]	@ (8011cdc <__libc_init_array+0x3c>)
 8011ca6:	1b64      	subs	r4, r4, r5
 8011ca8:	10a4      	asrs	r4, r4, #2
 8011caa:	2600      	movs	r6, #0
 8011cac:	42a6      	cmp	r6, r4
 8011cae:	d109      	bne.n	8011cc4 <__libc_init_array+0x24>
 8011cb0:	4d0b      	ldr	r5, [pc, #44]	@ (8011ce0 <__libc_init_array+0x40>)
 8011cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8011ce4 <__libc_init_array+0x44>)
 8011cb4:	f002 ff46 	bl	8014b44 <_init>
 8011cb8:	1b64      	subs	r4, r4, r5
 8011cba:	10a4      	asrs	r4, r4, #2
 8011cbc:	2600      	movs	r6, #0
 8011cbe:	42a6      	cmp	r6, r4
 8011cc0:	d105      	bne.n	8011cce <__libc_init_array+0x2e>
 8011cc2:	bd70      	pop	{r4, r5, r6, pc}
 8011cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cc8:	4798      	blx	r3
 8011cca:	3601      	adds	r6, #1
 8011ccc:	e7ee      	b.n	8011cac <__libc_init_array+0xc>
 8011cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cd2:	4798      	blx	r3
 8011cd4:	3601      	adds	r6, #1
 8011cd6:	e7f2      	b.n	8011cbe <__libc_init_array+0x1e>
 8011cd8:	080168d0 	.word	0x080168d0
 8011cdc:	080168d0 	.word	0x080168d0
 8011ce0:	080168d0 	.word	0x080168d0
 8011ce4:	080168d4 	.word	0x080168d4

08011ce8 <__retarget_lock_init_recursive>:
 8011ce8:	4770      	bx	lr

08011cea <__retarget_lock_acquire_recursive>:
 8011cea:	4770      	bx	lr

08011cec <__retarget_lock_release_recursive>:
 8011cec:	4770      	bx	lr

08011cee <memcpy>:
 8011cee:	440a      	add	r2, r1
 8011cf0:	4291      	cmp	r1, r2
 8011cf2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011cf6:	d100      	bne.n	8011cfa <memcpy+0xc>
 8011cf8:	4770      	bx	lr
 8011cfa:	b510      	push	{r4, lr}
 8011cfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d04:	4291      	cmp	r1, r2
 8011d06:	d1f9      	bne.n	8011cfc <memcpy+0xe>
 8011d08:	bd10      	pop	{r4, pc}

08011d0a <quorem>:
 8011d0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d0e:	6903      	ldr	r3, [r0, #16]
 8011d10:	690c      	ldr	r4, [r1, #16]
 8011d12:	42a3      	cmp	r3, r4
 8011d14:	4607      	mov	r7, r0
 8011d16:	db7e      	blt.n	8011e16 <quorem+0x10c>
 8011d18:	3c01      	subs	r4, #1
 8011d1a:	f101 0814 	add.w	r8, r1, #20
 8011d1e:	00a3      	lsls	r3, r4, #2
 8011d20:	f100 0514 	add.w	r5, r0, #20
 8011d24:	9300      	str	r3, [sp, #0]
 8011d26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d2a:	9301      	str	r3, [sp, #4]
 8011d2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011d30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d34:	3301      	adds	r3, #1
 8011d36:	429a      	cmp	r2, r3
 8011d38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011d3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d40:	d32e      	bcc.n	8011da0 <quorem+0x96>
 8011d42:	f04f 0a00 	mov.w	sl, #0
 8011d46:	46c4      	mov	ip, r8
 8011d48:	46ae      	mov	lr, r5
 8011d4a:	46d3      	mov	fp, sl
 8011d4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011d50:	b298      	uxth	r0, r3
 8011d52:	fb06 a000 	mla	r0, r6, r0, sl
 8011d56:	0c02      	lsrs	r2, r0, #16
 8011d58:	0c1b      	lsrs	r3, r3, #16
 8011d5a:	fb06 2303 	mla	r3, r6, r3, r2
 8011d5e:	f8de 2000 	ldr.w	r2, [lr]
 8011d62:	b280      	uxth	r0, r0
 8011d64:	b292      	uxth	r2, r2
 8011d66:	1a12      	subs	r2, r2, r0
 8011d68:	445a      	add	r2, fp
 8011d6a:	f8de 0000 	ldr.w	r0, [lr]
 8011d6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d72:	b29b      	uxth	r3, r3
 8011d74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011d78:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011d7c:	b292      	uxth	r2, r2
 8011d7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011d82:	45e1      	cmp	r9, ip
 8011d84:	f84e 2b04 	str.w	r2, [lr], #4
 8011d88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011d8c:	d2de      	bcs.n	8011d4c <quorem+0x42>
 8011d8e:	9b00      	ldr	r3, [sp, #0]
 8011d90:	58eb      	ldr	r3, [r5, r3]
 8011d92:	b92b      	cbnz	r3, 8011da0 <quorem+0x96>
 8011d94:	9b01      	ldr	r3, [sp, #4]
 8011d96:	3b04      	subs	r3, #4
 8011d98:	429d      	cmp	r5, r3
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	d32f      	bcc.n	8011dfe <quorem+0xf4>
 8011d9e:	613c      	str	r4, [r7, #16]
 8011da0:	4638      	mov	r0, r7
 8011da2:	f001 f90d 	bl	8012fc0 <__mcmp>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	db25      	blt.n	8011df6 <quorem+0xec>
 8011daa:	4629      	mov	r1, r5
 8011dac:	2000      	movs	r0, #0
 8011dae:	f858 2b04 	ldr.w	r2, [r8], #4
 8011db2:	f8d1 c000 	ldr.w	ip, [r1]
 8011db6:	fa1f fe82 	uxth.w	lr, r2
 8011dba:	fa1f f38c 	uxth.w	r3, ip
 8011dbe:	eba3 030e 	sub.w	r3, r3, lr
 8011dc2:	4403      	add	r3, r0
 8011dc4:	0c12      	lsrs	r2, r2, #16
 8011dc6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011dca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011dd4:	45c1      	cmp	r9, r8
 8011dd6:	f841 3b04 	str.w	r3, [r1], #4
 8011dda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011dde:	d2e6      	bcs.n	8011dae <quorem+0xa4>
 8011de0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011de4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011de8:	b922      	cbnz	r2, 8011df4 <quorem+0xea>
 8011dea:	3b04      	subs	r3, #4
 8011dec:	429d      	cmp	r5, r3
 8011dee:	461a      	mov	r2, r3
 8011df0:	d30b      	bcc.n	8011e0a <quorem+0x100>
 8011df2:	613c      	str	r4, [r7, #16]
 8011df4:	3601      	adds	r6, #1
 8011df6:	4630      	mov	r0, r6
 8011df8:	b003      	add	sp, #12
 8011dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfe:	6812      	ldr	r2, [r2, #0]
 8011e00:	3b04      	subs	r3, #4
 8011e02:	2a00      	cmp	r2, #0
 8011e04:	d1cb      	bne.n	8011d9e <quorem+0x94>
 8011e06:	3c01      	subs	r4, #1
 8011e08:	e7c6      	b.n	8011d98 <quorem+0x8e>
 8011e0a:	6812      	ldr	r2, [r2, #0]
 8011e0c:	3b04      	subs	r3, #4
 8011e0e:	2a00      	cmp	r2, #0
 8011e10:	d1ef      	bne.n	8011df2 <quorem+0xe8>
 8011e12:	3c01      	subs	r4, #1
 8011e14:	e7ea      	b.n	8011dec <quorem+0xe2>
 8011e16:	2000      	movs	r0, #0
 8011e18:	e7ee      	b.n	8011df8 <quorem+0xee>
 8011e1a:	0000      	movs	r0, r0
 8011e1c:	0000      	movs	r0, r0
	...

08011e20 <_dtoa_r>:
 8011e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e24:	ed2d 8b02 	vpush	{d8}
 8011e28:	69c7      	ldr	r7, [r0, #28]
 8011e2a:	b091      	sub	sp, #68	@ 0x44
 8011e2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011e30:	ec55 4b10 	vmov	r4, r5, d0
 8011e34:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011e36:	9107      	str	r1, [sp, #28]
 8011e38:	4681      	mov	r9, r0
 8011e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e3c:	930d      	str	r3, [sp, #52]	@ 0x34
 8011e3e:	b97f      	cbnz	r7, 8011e60 <_dtoa_r+0x40>
 8011e40:	2010      	movs	r0, #16
 8011e42:	f000 fd95 	bl	8012970 <malloc>
 8011e46:	4602      	mov	r2, r0
 8011e48:	f8c9 001c 	str.w	r0, [r9, #28]
 8011e4c:	b920      	cbnz	r0, 8011e58 <_dtoa_r+0x38>
 8011e4e:	4ba0      	ldr	r3, [pc, #640]	@ (80120d0 <_dtoa_r+0x2b0>)
 8011e50:	21ef      	movs	r1, #239	@ 0xef
 8011e52:	48a0      	ldr	r0, [pc, #640]	@ (80120d4 <_dtoa_r+0x2b4>)
 8011e54:	f002 f804 	bl	8013e60 <__assert_func>
 8011e58:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011e5c:	6007      	str	r7, [r0, #0]
 8011e5e:	60c7      	str	r7, [r0, #12]
 8011e60:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011e64:	6819      	ldr	r1, [r3, #0]
 8011e66:	b159      	cbz	r1, 8011e80 <_dtoa_r+0x60>
 8011e68:	685a      	ldr	r2, [r3, #4]
 8011e6a:	604a      	str	r2, [r1, #4]
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	4093      	lsls	r3, r2
 8011e70:	608b      	str	r3, [r1, #8]
 8011e72:	4648      	mov	r0, r9
 8011e74:	f000 fe72 	bl	8012b5c <_Bfree>
 8011e78:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011e7c:	2200      	movs	r2, #0
 8011e7e:	601a      	str	r2, [r3, #0]
 8011e80:	1e2b      	subs	r3, r5, #0
 8011e82:	bfbb      	ittet	lt
 8011e84:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011e88:	9303      	strlt	r3, [sp, #12]
 8011e8a:	2300      	movge	r3, #0
 8011e8c:	2201      	movlt	r2, #1
 8011e8e:	bfac      	ite	ge
 8011e90:	6033      	strge	r3, [r6, #0]
 8011e92:	6032      	strlt	r2, [r6, #0]
 8011e94:	4b90      	ldr	r3, [pc, #576]	@ (80120d8 <_dtoa_r+0x2b8>)
 8011e96:	9e03      	ldr	r6, [sp, #12]
 8011e98:	43b3      	bics	r3, r6
 8011e9a:	d110      	bne.n	8011ebe <_dtoa_r+0x9e>
 8011e9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011e9e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011ea2:	6013      	str	r3, [r2, #0]
 8011ea4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011ea8:	4323      	orrs	r3, r4
 8011eaa:	f000 84e6 	beq.w	801287a <_dtoa_r+0xa5a>
 8011eae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011eb0:	4f8a      	ldr	r7, [pc, #552]	@ (80120dc <_dtoa_r+0x2bc>)
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	f000 84e8 	beq.w	8012888 <_dtoa_r+0xa68>
 8011eb8:	1cfb      	adds	r3, r7, #3
 8011eba:	f000 bce3 	b.w	8012884 <_dtoa_r+0xa64>
 8011ebe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011ec2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eca:	d10a      	bne.n	8011ee2 <_dtoa_r+0xc2>
 8011ecc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011ece:	2301      	movs	r3, #1
 8011ed0:	6013      	str	r3, [r2, #0]
 8011ed2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011ed4:	b113      	cbz	r3, 8011edc <_dtoa_r+0xbc>
 8011ed6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011ed8:	4b81      	ldr	r3, [pc, #516]	@ (80120e0 <_dtoa_r+0x2c0>)
 8011eda:	6013      	str	r3, [r2, #0]
 8011edc:	4f81      	ldr	r7, [pc, #516]	@ (80120e4 <_dtoa_r+0x2c4>)
 8011ede:	f000 bcd3 	b.w	8012888 <_dtoa_r+0xa68>
 8011ee2:	aa0e      	add	r2, sp, #56	@ 0x38
 8011ee4:	a90f      	add	r1, sp, #60	@ 0x3c
 8011ee6:	4648      	mov	r0, r9
 8011ee8:	eeb0 0b48 	vmov.f64	d0, d8
 8011eec:	f001 f918 	bl	8013120 <__d2b>
 8011ef0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011ef4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ef6:	9001      	str	r0, [sp, #4]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d045      	beq.n	8011f88 <_dtoa_r+0x168>
 8011efc:	eeb0 7b48 	vmov.f64	d7, d8
 8011f00:	ee18 1a90 	vmov	r1, s17
 8011f04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011f08:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011f0c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011f10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011f14:	2500      	movs	r5, #0
 8011f16:	ee07 1a90 	vmov	s15, r1
 8011f1a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8011f1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80120b8 <_dtoa_r+0x298>
 8011f22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011f26:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80120c0 <_dtoa_r+0x2a0>
 8011f2a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011f2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80120c8 <_dtoa_r+0x2a8>
 8011f32:	ee07 3a90 	vmov	s15, r3
 8011f36:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011f3a:	eeb0 7b46 	vmov.f64	d7, d6
 8011f3e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011f42:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011f46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4e:	ee16 8a90 	vmov	r8, s13
 8011f52:	d508      	bpl.n	8011f66 <_dtoa_r+0x146>
 8011f54:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011f58:	eeb4 6b47 	vcmp.f64	d6, d7
 8011f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f60:	bf18      	it	ne
 8011f62:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8011f66:	f1b8 0f16 	cmp.w	r8, #22
 8011f6a:	d82b      	bhi.n	8011fc4 <_dtoa_r+0x1a4>
 8011f6c:	495e      	ldr	r1, [pc, #376]	@ (80120e8 <_dtoa_r+0x2c8>)
 8011f6e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011f72:	ed91 7b00 	vldr	d7, [r1]
 8011f76:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7e:	d501      	bpl.n	8011f84 <_dtoa_r+0x164>
 8011f80:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011f84:	2100      	movs	r1, #0
 8011f86:	e01e      	b.n	8011fc6 <_dtoa_r+0x1a6>
 8011f88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f8a:	4413      	add	r3, r2
 8011f8c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011f90:	2920      	cmp	r1, #32
 8011f92:	bfc1      	itttt	gt
 8011f94:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011f98:	408e      	lslgt	r6, r1
 8011f9a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011f9e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011fa2:	bfd6      	itet	le
 8011fa4:	f1c1 0120 	rsble	r1, r1, #32
 8011fa8:	4331      	orrgt	r1, r6
 8011faa:	fa04 f101 	lslle.w	r1, r4, r1
 8011fae:	ee07 1a90 	vmov	s15, r1
 8011fb2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	ee17 1a90 	vmov	r1, s15
 8011fbc:	2501      	movs	r5, #1
 8011fbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011fc2:	e7a8      	b.n	8011f16 <_dtoa_r+0xf6>
 8011fc4:	2101      	movs	r1, #1
 8011fc6:	1ad2      	subs	r2, r2, r3
 8011fc8:	1e53      	subs	r3, r2, #1
 8011fca:	9306      	str	r3, [sp, #24]
 8011fcc:	bf45      	ittet	mi
 8011fce:	f1c2 0301 	rsbmi	r3, r2, #1
 8011fd2:	9304      	strmi	r3, [sp, #16]
 8011fd4:	2300      	movpl	r3, #0
 8011fd6:	2300      	movmi	r3, #0
 8011fd8:	bf4c      	ite	mi
 8011fda:	9306      	strmi	r3, [sp, #24]
 8011fdc:	9304      	strpl	r3, [sp, #16]
 8011fde:	f1b8 0f00 	cmp.w	r8, #0
 8011fe2:	910c      	str	r1, [sp, #48]	@ 0x30
 8011fe4:	db18      	blt.n	8012018 <_dtoa_r+0x1f8>
 8011fe6:	9b06      	ldr	r3, [sp, #24]
 8011fe8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8011fec:	4443      	add	r3, r8
 8011fee:	9306      	str	r3, [sp, #24]
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	9a07      	ldr	r2, [sp, #28]
 8011ff4:	2a09      	cmp	r2, #9
 8011ff6:	d845      	bhi.n	8012084 <_dtoa_r+0x264>
 8011ff8:	2a05      	cmp	r2, #5
 8011ffa:	bfc4      	itt	gt
 8011ffc:	3a04      	subgt	r2, #4
 8011ffe:	9207      	strgt	r2, [sp, #28]
 8012000:	9a07      	ldr	r2, [sp, #28]
 8012002:	f1a2 0202 	sub.w	r2, r2, #2
 8012006:	bfcc      	ite	gt
 8012008:	2400      	movgt	r4, #0
 801200a:	2401      	movle	r4, #1
 801200c:	2a03      	cmp	r2, #3
 801200e:	d844      	bhi.n	801209a <_dtoa_r+0x27a>
 8012010:	e8df f002 	tbb	[pc, r2]
 8012014:	0b173634 	.word	0x0b173634
 8012018:	9b04      	ldr	r3, [sp, #16]
 801201a:	2200      	movs	r2, #0
 801201c:	eba3 0308 	sub.w	r3, r3, r8
 8012020:	9304      	str	r3, [sp, #16]
 8012022:	920a      	str	r2, [sp, #40]	@ 0x28
 8012024:	f1c8 0300 	rsb	r3, r8, #0
 8012028:	e7e3      	b.n	8011ff2 <_dtoa_r+0x1d2>
 801202a:	2201      	movs	r2, #1
 801202c:	9208      	str	r2, [sp, #32]
 801202e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012030:	eb08 0b02 	add.w	fp, r8, r2
 8012034:	f10b 0a01 	add.w	sl, fp, #1
 8012038:	4652      	mov	r2, sl
 801203a:	2a01      	cmp	r2, #1
 801203c:	bfb8      	it	lt
 801203e:	2201      	movlt	r2, #1
 8012040:	e006      	b.n	8012050 <_dtoa_r+0x230>
 8012042:	2201      	movs	r2, #1
 8012044:	9208      	str	r2, [sp, #32]
 8012046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012048:	2a00      	cmp	r2, #0
 801204a:	dd29      	ble.n	80120a0 <_dtoa_r+0x280>
 801204c:	4693      	mov	fp, r2
 801204e:	4692      	mov	sl, r2
 8012050:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012054:	2100      	movs	r1, #0
 8012056:	2004      	movs	r0, #4
 8012058:	f100 0614 	add.w	r6, r0, #20
 801205c:	4296      	cmp	r6, r2
 801205e:	d926      	bls.n	80120ae <_dtoa_r+0x28e>
 8012060:	6079      	str	r1, [r7, #4]
 8012062:	4648      	mov	r0, r9
 8012064:	9305      	str	r3, [sp, #20]
 8012066:	f000 fd39 	bl	8012adc <_Balloc>
 801206a:	9b05      	ldr	r3, [sp, #20]
 801206c:	4607      	mov	r7, r0
 801206e:	2800      	cmp	r0, #0
 8012070:	d13e      	bne.n	80120f0 <_dtoa_r+0x2d0>
 8012072:	4b1e      	ldr	r3, [pc, #120]	@ (80120ec <_dtoa_r+0x2cc>)
 8012074:	4602      	mov	r2, r0
 8012076:	f240 11af 	movw	r1, #431	@ 0x1af
 801207a:	e6ea      	b.n	8011e52 <_dtoa_r+0x32>
 801207c:	2200      	movs	r2, #0
 801207e:	e7e1      	b.n	8012044 <_dtoa_r+0x224>
 8012080:	2200      	movs	r2, #0
 8012082:	e7d3      	b.n	801202c <_dtoa_r+0x20c>
 8012084:	2401      	movs	r4, #1
 8012086:	2200      	movs	r2, #0
 8012088:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801208c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012090:	2100      	movs	r1, #0
 8012092:	46da      	mov	sl, fp
 8012094:	2212      	movs	r2, #18
 8012096:	9109      	str	r1, [sp, #36]	@ 0x24
 8012098:	e7da      	b.n	8012050 <_dtoa_r+0x230>
 801209a:	2201      	movs	r2, #1
 801209c:	9208      	str	r2, [sp, #32]
 801209e:	e7f5      	b.n	801208c <_dtoa_r+0x26c>
 80120a0:	f04f 0b01 	mov.w	fp, #1
 80120a4:	46da      	mov	sl, fp
 80120a6:	465a      	mov	r2, fp
 80120a8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80120ac:	e7d0      	b.n	8012050 <_dtoa_r+0x230>
 80120ae:	3101      	adds	r1, #1
 80120b0:	0040      	lsls	r0, r0, #1
 80120b2:	e7d1      	b.n	8012058 <_dtoa_r+0x238>
 80120b4:	f3af 8000 	nop.w
 80120b8:	636f4361 	.word	0x636f4361
 80120bc:	3fd287a7 	.word	0x3fd287a7
 80120c0:	8b60c8b3 	.word	0x8b60c8b3
 80120c4:	3fc68a28 	.word	0x3fc68a28
 80120c8:	509f79fb 	.word	0x509f79fb
 80120cc:	3fd34413 	.word	0x3fd34413
 80120d0:	080163f3 	.word	0x080163f3
 80120d4:	0801640a 	.word	0x0801640a
 80120d8:	7ff00000 	.word	0x7ff00000
 80120dc:	080163ef 	.word	0x080163ef
 80120e0:	080164f4 	.word	0x080164f4
 80120e4:	080164f3 	.word	0x080164f3
 80120e8:	08016578 	.word	0x08016578
 80120ec:	08016462 	.word	0x08016462
 80120f0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80120f4:	f1ba 0f0e 	cmp.w	sl, #14
 80120f8:	6010      	str	r0, [r2, #0]
 80120fa:	d86e      	bhi.n	80121da <_dtoa_r+0x3ba>
 80120fc:	2c00      	cmp	r4, #0
 80120fe:	d06c      	beq.n	80121da <_dtoa_r+0x3ba>
 8012100:	f1b8 0f00 	cmp.w	r8, #0
 8012104:	f340 80b4 	ble.w	8012270 <_dtoa_r+0x450>
 8012108:	4ac8      	ldr	r2, [pc, #800]	@ (801242c <_dtoa_r+0x60c>)
 801210a:	f008 010f 	and.w	r1, r8, #15
 801210e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012112:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012116:	ed92 7b00 	vldr	d7, [r2]
 801211a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801211e:	f000 809b 	beq.w	8012258 <_dtoa_r+0x438>
 8012122:	4ac3      	ldr	r2, [pc, #780]	@ (8012430 <_dtoa_r+0x610>)
 8012124:	ed92 6b08 	vldr	d6, [r2, #32]
 8012128:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801212c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012130:	f001 010f 	and.w	r1, r1, #15
 8012134:	2203      	movs	r2, #3
 8012136:	48be      	ldr	r0, [pc, #760]	@ (8012430 <_dtoa_r+0x610>)
 8012138:	2900      	cmp	r1, #0
 801213a:	f040 808f 	bne.w	801225c <_dtoa_r+0x43c>
 801213e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012142:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012146:	ed8d 7b02 	vstr	d7, [sp, #8]
 801214a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801214c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012150:	2900      	cmp	r1, #0
 8012152:	f000 80b3 	beq.w	80122bc <_dtoa_r+0x49c>
 8012156:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801215a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012162:	f140 80ab 	bpl.w	80122bc <_dtoa_r+0x49c>
 8012166:	f1ba 0f00 	cmp.w	sl, #0
 801216a:	f000 80a7 	beq.w	80122bc <_dtoa_r+0x49c>
 801216e:	f1bb 0f00 	cmp.w	fp, #0
 8012172:	dd30      	ble.n	80121d6 <_dtoa_r+0x3b6>
 8012174:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012178:	ee27 7b06 	vmul.f64	d7, d7, d6
 801217c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012180:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8012184:	9105      	str	r1, [sp, #20]
 8012186:	3201      	adds	r2, #1
 8012188:	465c      	mov	r4, fp
 801218a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801218e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012192:	ee07 2a90 	vmov	s15, r2
 8012196:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801219a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801219e:	ee15 2a90 	vmov	r2, s11
 80121a2:	ec51 0b15 	vmov	r0, r1, d5
 80121a6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80121aa:	2c00      	cmp	r4, #0
 80121ac:	f040 808a 	bne.w	80122c4 <_dtoa_r+0x4a4>
 80121b0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80121b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80121b8:	ec41 0b17 	vmov	d7, r0, r1
 80121bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121c4:	f300 826a 	bgt.w	801269c <_dtoa_r+0x87c>
 80121c8:	eeb1 7b47 	vneg.f64	d7, d7
 80121cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121d4:	d423      	bmi.n	801221e <_dtoa_r+0x3fe>
 80121d6:	ed8d 8b02 	vstr	d8, [sp, #8]
 80121da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80121dc:	2a00      	cmp	r2, #0
 80121de:	f2c0 8129 	blt.w	8012434 <_dtoa_r+0x614>
 80121e2:	f1b8 0f0e 	cmp.w	r8, #14
 80121e6:	f300 8125 	bgt.w	8012434 <_dtoa_r+0x614>
 80121ea:	4b90      	ldr	r3, [pc, #576]	@ (801242c <_dtoa_r+0x60c>)
 80121ec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80121f0:	ed93 6b00 	vldr	d6, [r3]
 80121f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	f280 80c8 	bge.w	801238c <_dtoa_r+0x56c>
 80121fc:	f1ba 0f00 	cmp.w	sl, #0
 8012200:	f300 80c4 	bgt.w	801238c <_dtoa_r+0x56c>
 8012204:	d10b      	bne.n	801221e <_dtoa_r+0x3fe>
 8012206:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801220a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801220e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012212:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221a:	f2c0 823c 	blt.w	8012696 <_dtoa_r+0x876>
 801221e:	2400      	movs	r4, #0
 8012220:	4625      	mov	r5, r4
 8012222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012224:	43db      	mvns	r3, r3
 8012226:	9305      	str	r3, [sp, #20]
 8012228:	463e      	mov	r6, r7
 801222a:	f04f 0800 	mov.w	r8, #0
 801222e:	4621      	mov	r1, r4
 8012230:	4648      	mov	r0, r9
 8012232:	f000 fc93 	bl	8012b5c <_Bfree>
 8012236:	2d00      	cmp	r5, #0
 8012238:	f000 80a2 	beq.w	8012380 <_dtoa_r+0x560>
 801223c:	f1b8 0f00 	cmp.w	r8, #0
 8012240:	d005      	beq.n	801224e <_dtoa_r+0x42e>
 8012242:	45a8      	cmp	r8, r5
 8012244:	d003      	beq.n	801224e <_dtoa_r+0x42e>
 8012246:	4641      	mov	r1, r8
 8012248:	4648      	mov	r0, r9
 801224a:	f000 fc87 	bl	8012b5c <_Bfree>
 801224e:	4629      	mov	r1, r5
 8012250:	4648      	mov	r0, r9
 8012252:	f000 fc83 	bl	8012b5c <_Bfree>
 8012256:	e093      	b.n	8012380 <_dtoa_r+0x560>
 8012258:	2202      	movs	r2, #2
 801225a:	e76c      	b.n	8012136 <_dtoa_r+0x316>
 801225c:	07cc      	lsls	r4, r1, #31
 801225e:	d504      	bpl.n	801226a <_dtoa_r+0x44a>
 8012260:	ed90 6b00 	vldr	d6, [r0]
 8012264:	3201      	adds	r2, #1
 8012266:	ee27 7b06 	vmul.f64	d7, d7, d6
 801226a:	1049      	asrs	r1, r1, #1
 801226c:	3008      	adds	r0, #8
 801226e:	e763      	b.n	8012138 <_dtoa_r+0x318>
 8012270:	d022      	beq.n	80122b8 <_dtoa_r+0x498>
 8012272:	f1c8 0100 	rsb	r1, r8, #0
 8012276:	4a6d      	ldr	r2, [pc, #436]	@ (801242c <_dtoa_r+0x60c>)
 8012278:	f001 000f 	and.w	r0, r1, #15
 801227c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012280:	ed92 7b00 	vldr	d7, [r2]
 8012284:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012288:	ed8d 7b02 	vstr	d7, [sp, #8]
 801228c:	4868      	ldr	r0, [pc, #416]	@ (8012430 <_dtoa_r+0x610>)
 801228e:	1109      	asrs	r1, r1, #4
 8012290:	2400      	movs	r4, #0
 8012292:	2202      	movs	r2, #2
 8012294:	b929      	cbnz	r1, 80122a2 <_dtoa_r+0x482>
 8012296:	2c00      	cmp	r4, #0
 8012298:	f43f af57 	beq.w	801214a <_dtoa_r+0x32a>
 801229c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80122a0:	e753      	b.n	801214a <_dtoa_r+0x32a>
 80122a2:	07ce      	lsls	r6, r1, #31
 80122a4:	d505      	bpl.n	80122b2 <_dtoa_r+0x492>
 80122a6:	ed90 6b00 	vldr	d6, [r0]
 80122aa:	3201      	adds	r2, #1
 80122ac:	2401      	movs	r4, #1
 80122ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80122b2:	1049      	asrs	r1, r1, #1
 80122b4:	3008      	adds	r0, #8
 80122b6:	e7ed      	b.n	8012294 <_dtoa_r+0x474>
 80122b8:	2202      	movs	r2, #2
 80122ba:	e746      	b.n	801214a <_dtoa_r+0x32a>
 80122bc:	f8cd 8014 	str.w	r8, [sp, #20]
 80122c0:	4654      	mov	r4, sl
 80122c2:	e762      	b.n	801218a <_dtoa_r+0x36a>
 80122c4:	4a59      	ldr	r2, [pc, #356]	@ (801242c <_dtoa_r+0x60c>)
 80122c6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80122ca:	ed12 4b02 	vldr	d4, [r2, #-8]
 80122ce:	9a08      	ldr	r2, [sp, #32]
 80122d0:	ec41 0b17 	vmov	d7, r0, r1
 80122d4:	443c      	add	r4, r7
 80122d6:	b34a      	cbz	r2, 801232c <_dtoa_r+0x50c>
 80122d8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80122dc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80122e0:	463e      	mov	r6, r7
 80122e2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80122e6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80122ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 80122ee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80122f2:	ee14 2a90 	vmov	r2, s9
 80122f6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80122fa:	3230      	adds	r2, #48	@ 0x30
 80122fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012300:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012308:	f806 2b01 	strb.w	r2, [r6], #1
 801230c:	d438      	bmi.n	8012380 <_dtoa_r+0x560>
 801230e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012312:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801231a:	d46e      	bmi.n	80123fa <_dtoa_r+0x5da>
 801231c:	42a6      	cmp	r6, r4
 801231e:	f43f af5a 	beq.w	80121d6 <_dtoa_r+0x3b6>
 8012322:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012326:	ee26 6b03 	vmul.f64	d6, d6, d3
 801232a:	e7e0      	b.n	80122ee <_dtoa_r+0x4ce>
 801232c:	4621      	mov	r1, r4
 801232e:	463e      	mov	r6, r7
 8012330:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012334:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012338:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801233c:	ee14 2a90 	vmov	r2, s9
 8012340:	3230      	adds	r2, #48	@ 0x30
 8012342:	f806 2b01 	strb.w	r2, [r6], #1
 8012346:	42a6      	cmp	r6, r4
 8012348:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801234c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012350:	d119      	bne.n	8012386 <_dtoa_r+0x566>
 8012352:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012356:	ee37 4b05 	vadd.f64	d4, d7, d5
 801235a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801235e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012362:	dc4a      	bgt.n	80123fa <_dtoa_r+0x5da>
 8012364:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012368:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012370:	f57f af31 	bpl.w	80121d6 <_dtoa_r+0x3b6>
 8012374:	460e      	mov	r6, r1
 8012376:	3901      	subs	r1, #1
 8012378:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801237c:	2b30      	cmp	r3, #48	@ 0x30
 801237e:	d0f9      	beq.n	8012374 <_dtoa_r+0x554>
 8012380:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012384:	e027      	b.n	80123d6 <_dtoa_r+0x5b6>
 8012386:	ee26 6b03 	vmul.f64	d6, d6, d3
 801238a:	e7d5      	b.n	8012338 <_dtoa_r+0x518>
 801238c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012390:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012394:	463e      	mov	r6, r7
 8012396:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801239a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801239e:	ee15 3a10 	vmov	r3, s10
 80123a2:	3330      	adds	r3, #48	@ 0x30
 80123a4:	f806 3b01 	strb.w	r3, [r6], #1
 80123a8:	1bf3      	subs	r3, r6, r7
 80123aa:	459a      	cmp	sl, r3
 80123ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80123b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80123b4:	d132      	bne.n	801241c <_dtoa_r+0x5fc>
 80123b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80123ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80123be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c2:	dc18      	bgt.n	80123f6 <_dtoa_r+0x5d6>
 80123c4:	eeb4 7b46 	vcmp.f64	d7, d6
 80123c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123cc:	d103      	bne.n	80123d6 <_dtoa_r+0x5b6>
 80123ce:	ee15 3a10 	vmov	r3, s10
 80123d2:	07db      	lsls	r3, r3, #31
 80123d4:	d40f      	bmi.n	80123f6 <_dtoa_r+0x5d6>
 80123d6:	9901      	ldr	r1, [sp, #4]
 80123d8:	4648      	mov	r0, r9
 80123da:	f000 fbbf 	bl	8012b5c <_Bfree>
 80123de:	2300      	movs	r3, #0
 80123e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80123e2:	7033      	strb	r3, [r6, #0]
 80123e4:	f108 0301 	add.w	r3, r8, #1
 80123e8:	6013      	str	r3, [r2, #0]
 80123ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	f000 824b 	beq.w	8012888 <_dtoa_r+0xa68>
 80123f2:	601e      	str	r6, [r3, #0]
 80123f4:	e248      	b.n	8012888 <_dtoa_r+0xa68>
 80123f6:	f8cd 8014 	str.w	r8, [sp, #20]
 80123fa:	4633      	mov	r3, r6
 80123fc:	461e      	mov	r6, r3
 80123fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012402:	2a39      	cmp	r2, #57	@ 0x39
 8012404:	d106      	bne.n	8012414 <_dtoa_r+0x5f4>
 8012406:	429f      	cmp	r7, r3
 8012408:	d1f8      	bne.n	80123fc <_dtoa_r+0x5dc>
 801240a:	9a05      	ldr	r2, [sp, #20]
 801240c:	3201      	adds	r2, #1
 801240e:	9205      	str	r2, [sp, #20]
 8012410:	2230      	movs	r2, #48	@ 0x30
 8012412:	703a      	strb	r2, [r7, #0]
 8012414:	781a      	ldrb	r2, [r3, #0]
 8012416:	3201      	adds	r2, #1
 8012418:	701a      	strb	r2, [r3, #0]
 801241a:	e7b1      	b.n	8012380 <_dtoa_r+0x560>
 801241c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012420:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012428:	d1b5      	bne.n	8012396 <_dtoa_r+0x576>
 801242a:	e7d4      	b.n	80123d6 <_dtoa_r+0x5b6>
 801242c:	08016578 	.word	0x08016578
 8012430:	08016550 	.word	0x08016550
 8012434:	9908      	ldr	r1, [sp, #32]
 8012436:	2900      	cmp	r1, #0
 8012438:	f000 80e9 	beq.w	801260e <_dtoa_r+0x7ee>
 801243c:	9907      	ldr	r1, [sp, #28]
 801243e:	2901      	cmp	r1, #1
 8012440:	f300 80cb 	bgt.w	80125da <_dtoa_r+0x7ba>
 8012444:	2d00      	cmp	r5, #0
 8012446:	f000 80c4 	beq.w	80125d2 <_dtoa_r+0x7b2>
 801244a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801244e:	9e04      	ldr	r6, [sp, #16]
 8012450:	461c      	mov	r4, r3
 8012452:	9305      	str	r3, [sp, #20]
 8012454:	9b04      	ldr	r3, [sp, #16]
 8012456:	4413      	add	r3, r2
 8012458:	9304      	str	r3, [sp, #16]
 801245a:	9b06      	ldr	r3, [sp, #24]
 801245c:	2101      	movs	r1, #1
 801245e:	4413      	add	r3, r2
 8012460:	4648      	mov	r0, r9
 8012462:	9306      	str	r3, [sp, #24]
 8012464:	f000 fc2e 	bl	8012cc4 <__i2b>
 8012468:	9b05      	ldr	r3, [sp, #20]
 801246a:	4605      	mov	r5, r0
 801246c:	b166      	cbz	r6, 8012488 <_dtoa_r+0x668>
 801246e:	9a06      	ldr	r2, [sp, #24]
 8012470:	2a00      	cmp	r2, #0
 8012472:	dd09      	ble.n	8012488 <_dtoa_r+0x668>
 8012474:	42b2      	cmp	r2, r6
 8012476:	9904      	ldr	r1, [sp, #16]
 8012478:	bfa8      	it	ge
 801247a:	4632      	movge	r2, r6
 801247c:	1a89      	subs	r1, r1, r2
 801247e:	9104      	str	r1, [sp, #16]
 8012480:	9906      	ldr	r1, [sp, #24]
 8012482:	1ab6      	subs	r6, r6, r2
 8012484:	1a8a      	subs	r2, r1, r2
 8012486:	9206      	str	r2, [sp, #24]
 8012488:	b30b      	cbz	r3, 80124ce <_dtoa_r+0x6ae>
 801248a:	9a08      	ldr	r2, [sp, #32]
 801248c:	2a00      	cmp	r2, #0
 801248e:	f000 80c5 	beq.w	801261c <_dtoa_r+0x7fc>
 8012492:	2c00      	cmp	r4, #0
 8012494:	f000 80bf 	beq.w	8012616 <_dtoa_r+0x7f6>
 8012498:	4629      	mov	r1, r5
 801249a:	4622      	mov	r2, r4
 801249c:	4648      	mov	r0, r9
 801249e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80124a0:	f000 fcc8 	bl	8012e34 <__pow5mult>
 80124a4:	9a01      	ldr	r2, [sp, #4]
 80124a6:	4601      	mov	r1, r0
 80124a8:	4605      	mov	r5, r0
 80124aa:	4648      	mov	r0, r9
 80124ac:	f000 fc20 	bl	8012cf0 <__multiply>
 80124b0:	9901      	ldr	r1, [sp, #4]
 80124b2:	9005      	str	r0, [sp, #20]
 80124b4:	4648      	mov	r0, r9
 80124b6:	f000 fb51 	bl	8012b5c <_Bfree>
 80124ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124bc:	1b1b      	subs	r3, r3, r4
 80124be:	f000 80b0 	beq.w	8012622 <_dtoa_r+0x802>
 80124c2:	9905      	ldr	r1, [sp, #20]
 80124c4:	461a      	mov	r2, r3
 80124c6:	4648      	mov	r0, r9
 80124c8:	f000 fcb4 	bl	8012e34 <__pow5mult>
 80124cc:	9001      	str	r0, [sp, #4]
 80124ce:	2101      	movs	r1, #1
 80124d0:	4648      	mov	r0, r9
 80124d2:	f000 fbf7 	bl	8012cc4 <__i2b>
 80124d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124d8:	4604      	mov	r4, r0
 80124da:	2b00      	cmp	r3, #0
 80124dc:	f000 81da 	beq.w	8012894 <_dtoa_r+0xa74>
 80124e0:	461a      	mov	r2, r3
 80124e2:	4601      	mov	r1, r0
 80124e4:	4648      	mov	r0, r9
 80124e6:	f000 fca5 	bl	8012e34 <__pow5mult>
 80124ea:	9b07      	ldr	r3, [sp, #28]
 80124ec:	2b01      	cmp	r3, #1
 80124ee:	4604      	mov	r4, r0
 80124f0:	f300 80a0 	bgt.w	8012634 <_dtoa_r+0x814>
 80124f4:	9b02      	ldr	r3, [sp, #8]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	f040 8096 	bne.w	8012628 <_dtoa_r+0x808>
 80124fc:	9b03      	ldr	r3, [sp, #12]
 80124fe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012502:	2a00      	cmp	r2, #0
 8012504:	f040 8092 	bne.w	801262c <_dtoa_r+0x80c>
 8012508:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801250c:	0d12      	lsrs	r2, r2, #20
 801250e:	0512      	lsls	r2, r2, #20
 8012510:	2a00      	cmp	r2, #0
 8012512:	f000 808d 	beq.w	8012630 <_dtoa_r+0x810>
 8012516:	9b04      	ldr	r3, [sp, #16]
 8012518:	3301      	adds	r3, #1
 801251a:	9304      	str	r3, [sp, #16]
 801251c:	9b06      	ldr	r3, [sp, #24]
 801251e:	3301      	adds	r3, #1
 8012520:	9306      	str	r3, [sp, #24]
 8012522:	2301      	movs	r3, #1
 8012524:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012526:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012528:	2b00      	cmp	r3, #0
 801252a:	f000 81b9 	beq.w	80128a0 <_dtoa_r+0xa80>
 801252e:	6922      	ldr	r2, [r4, #16]
 8012530:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012534:	6910      	ldr	r0, [r2, #16]
 8012536:	f000 fb79 	bl	8012c2c <__hi0bits>
 801253a:	f1c0 0020 	rsb	r0, r0, #32
 801253e:	9b06      	ldr	r3, [sp, #24]
 8012540:	4418      	add	r0, r3
 8012542:	f010 001f 	ands.w	r0, r0, #31
 8012546:	f000 8081 	beq.w	801264c <_dtoa_r+0x82c>
 801254a:	f1c0 0220 	rsb	r2, r0, #32
 801254e:	2a04      	cmp	r2, #4
 8012550:	dd73      	ble.n	801263a <_dtoa_r+0x81a>
 8012552:	9b04      	ldr	r3, [sp, #16]
 8012554:	f1c0 001c 	rsb	r0, r0, #28
 8012558:	4403      	add	r3, r0
 801255a:	9304      	str	r3, [sp, #16]
 801255c:	9b06      	ldr	r3, [sp, #24]
 801255e:	4406      	add	r6, r0
 8012560:	4403      	add	r3, r0
 8012562:	9306      	str	r3, [sp, #24]
 8012564:	9b04      	ldr	r3, [sp, #16]
 8012566:	2b00      	cmp	r3, #0
 8012568:	dd05      	ble.n	8012576 <_dtoa_r+0x756>
 801256a:	9901      	ldr	r1, [sp, #4]
 801256c:	461a      	mov	r2, r3
 801256e:	4648      	mov	r0, r9
 8012570:	f000 fcba 	bl	8012ee8 <__lshift>
 8012574:	9001      	str	r0, [sp, #4]
 8012576:	9b06      	ldr	r3, [sp, #24]
 8012578:	2b00      	cmp	r3, #0
 801257a:	dd05      	ble.n	8012588 <_dtoa_r+0x768>
 801257c:	4621      	mov	r1, r4
 801257e:	461a      	mov	r2, r3
 8012580:	4648      	mov	r0, r9
 8012582:	f000 fcb1 	bl	8012ee8 <__lshift>
 8012586:	4604      	mov	r4, r0
 8012588:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801258a:	2b00      	cmp	r3, #0
 801258c:	d060      	beq.n	8012650 <_dtoa_r+0x830>
 801258e:	9801      	ldr	r0, [sp, #4]
 8012590:	4621      	mov	r1, r4
 8012592:	f000 fd15 	bl	8012fc0 <__mcmp>
 8012596:	2800      	cmp	r0, #0
 8012598:	da5a      	bge.n	8012650 <_dtoa_r+0x830>
 801259a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 801259e:	9305      	str	r3, [sp, #20]
 80125a0:	9901      	ldr	r1, [sp, #4]
 80125a2:	2300      	movs	r3, #0
 80125a4:	220a      	movs	r2, #10
 80125a6:	4648      	mov	r0, r9
 80125a8:	f000 fafa 	bl	8012ba0 <__multadd>
 80125ac:	9b08      	ldr	r3, [sp, #32]
 80125ae:	9001      	str	r0, [sp, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	f000 8177 	beq.w	80128a4 <_dtoa_r+0xa84>
 80125b6:	4629      	mov	r1, r5
 80125b8:	2300      	movs	r3, #0
 80125ba:	220a      	movs	r2, #10
 80125bc:	4648      	mov	r0, r9
 80125be:	f000 faef 	bl	8012ba0 <__multadd>
 80125c2:	f1bb 0f00 	cmp.w	fp, #0
 80125c6:	4605      	mov	r5, r0
 80125c8:	dc6e      	bgt.n	80126a8 <_dtoa_r+0x888>
 80125ca:	9b07      	ldr	r3, [sp, #28]
 80125cc:	2b02      	cmp	r3, #2
 80125ce:	dc48      	bgt.n	8012662 <_dtoa_r+0x842>
 80125d0:	e06a      	b.n	80126a8 <_dtoa_r+0x888>
 80125d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80125d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80125d8:	e739      	b.n	801244e <_dtoa_r+0x62e>
 80125da:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80125de:	42a3      	cmp	r3, r4
 80125e0:	db07      	blt.n	80125f2 <_dtoa_r+0x7d2>
 80125e2:	f1ba 0f00 	cmp.w	sl, #0
 80125e6:	eba3 0404 	sub.w	r4, r3, r4
 80125ea:	db0b      	blt.n	8012604 <_dtoa_r+0x7e4>
 80125ec:	9e04      	ldr	r6, [sp, #16]
 80125ee:	4652      	mov	r2, sl
 80125f0:	e72f      	b.n	8012452 <_dtoa_r+0x632>
 80125f2:	1ae2      	subs	r2, r4, r3
 80125f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125f6:	9e04      	ldr	r6, [sp, #16]
 80125f8:	4413      	add	r3, r2
 80125fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80125fc:	4652      	mov	r2, sl
 80125fe:	4623      	mov	r3, r4
 8012600:	2400      	movs	r4, #0
 8012602:	e726      	b.n	8012452 <_dtoa_r+0x632>
 8012604:	9a04      	ldr	r2, [sp, #16]
 8012606:	eba2 060a 	sub.w	r6, r2, sl
 801260a:	2200      	movs	r2, #0
 801260c:	e721      	b.n	8012452 <_dtoa_r+0x632>
 801260e:	9e04      	ldr	r6, [sp, #16]
 8012610:	9d08      	ldr	r5, [sp, #32]
 8012612:	461c      	mov	r4, r3
 8012614:	e72a      	b.n	801246c <_dtoa_r+0x64c>
 8012616:	9a01      	ldr	r2, [sp, #4]
 8012618:	9205      	str	r2, [sp, #20]
 801261a:	e752      	b.n	80124c2 <_dtoa_r+0x6a2>
 801261c:	9901      	ldr	r1, [sp, #4]
 801261e:	461a      	mov	r2, r3
 8012620:	e751      	b.n	80124c6 <_dtoa_r+0x6a6>
 8012622:	9b05      	ldr	r3, [sp, #20]
 8012624:	9301      	str	r3, [sp, #4]
 8012626:	e752      	b.n	80124ce <_dtoa_r+0x6ae>
 8012628:	2300      	movs	r3, #0
 801262a:	e77b      	b.n	8012524 <_dtoa_r+0x704>
 801262c:	9b02      	ldr	r3, [sp, #8]
 801262e:	e779      	b.n	8012524 <_dtoa_r+0x704>
 8012630:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012632:	e778      	b.n	8012526 <_dtoa_r+0x706>
 8012634:	2300      	movs	r3, #0
 8012636:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012638:	e779      	b.n	801252e <_dtoa_r+0x70e>
 801263a:	d093      	beq.n	8012564 <_dtoa_r+0x744>
 801263c:	9b04      	ldr	r3, [sp, #16]
 801263e:	321c      	adds	r2, #28
 8012640:	4413      	add	r3, r2
 8012642:	9304      	str	r3, [sp, #16]
 8012644:	9b06      	ldr	r3, [sp, #24]
 8012646:	4416      	add	r6, r2
 8012648:	4413      	add	r3, r2
 801264a:	e78a      	b.n	8012562 <_dtoa_r+0x742>
 801264c:	4602      	mov	r2, r0
 801264e:	e7f5      	b.n	801263c <_dtoa_r+0x81c>
 8012650:	f1ba 0f00 	cmp.w	sl, #0
 8012654:	f8cd 8014 	str.w	r8, [sp, #20]
 8012658:	46d3      	mov	fp, sl
 801265a:	dc21      	bgt.n	80126a0 <_dtoa_r+0x880>
 801265c:	9b07      	ldr	r3, [sp, #28]
 801265e:	2b02      	cmp	r3, #2
 8012660:	dd1e      	ble.n	80126a0 <_dtoa_r+0x880>
 8012662:	f1bb 0f00 	cmp.w	fp, #0
 8012666:	f47f addc 	bne.w	8012222 <_dtoa_r+0x402>
 801266a:	4621      	mov	r1, r4
 801266c:	465b      	mov	r3, fp
 801266e:	2205      	movs	r2, #5
 8012670:	4648      	mov	r0, r9
 8012672:	f000 fa95 	bl	8012ba0 <__multadd>
 8012676:	4601      	mov	r1, r0
 8012678:	4604      	mov	r4, r0
 801267a:	9801      	ldr	r0, [sp, #4]
 801267c:	f000 fca0 	bl	8012fc0 <__mcmp>
 8012680:	2800      	cmp	r0, #0
 8012682:	f77f adce 	ble.w	8012222 <_dtoa_r+0x402>
 8012686:	463e      	mov	r6, r7
 8012688:	2331      	movs	r3, #49	@ 0x31
 801268a:	f806 3b01 	strb.w	r3, [r6], #1
 801268e:	9b05      	ldr	r3, [sp, #20]
 8012690:	3301      	adds	r3, #1
 8012692:	9305      	str	r3, [sp, #20]
 8012694:	e5c9      	b.n	801222a <_dtoa_r+0x40a>
 8012696:	f8cd 8014 	str.w	r8, [sp, #20]
 801269a:	4654      	mov	r4, sl
 801269c:	4625      	mov	r5, r4
 801269e:	e7f2      	b.n	8012686 <_dtoa_r+0x866>
 80126a0:	9b08      	ldr	r3, [sp, #32]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	f000 8102 	beq.w	80128ac <_dtoa_r+0xa8c>
 80126a8:	2e00      	cmp	r6, #0
 80126aa:	dd05      	ble.n	80126b8 <_dtoa_r+0x898>
 80126ac:	4629      	mov	r1, r5
 80126ae:	4632      	mov	r2, r6
 80126b0:	4648      	mov	r0, r9
 80126b2:	f000 fc19 	bl	8012ee8 <__lshift>
 80126b6:	4605      	mov	r5, r0
 80126b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d058      	beq.n	8012770 <_dtoa_r+0x950>
 80126be:	6869      	ldr	r1, [r5, #4]
 80126c0:	4648      	mov	r0, r9
 80126c2:	f000 fa0b 	bl	8012adc <_Balloc>
 80126c6:	4606      	mov	r6, r0
 80126c8:	b928      	cbnz	r0, 80126d6 <_dtoa_r+0x8b6>
 80126ca:	4b82      	ldr	r3, [pc, #520]	@ (80128d4 <_dtoa_r+0xab4>)
 80126cc:	4602      	mov	r2, r0
 80126ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80126d2:	f7ff bbbe 	b.w	8011e52 <_dtoa_r+0x32>
 80126d6:	692a      	ldr	r2, [r5, #16]
 80126d8:	3202      	adds	r2, #2
 80126da:	0092      	lsls	r2, r2, #2
 80126dc:	f105 010c 	add.w	r1, r5, #12
 80126e0:	300c      	adds	r0, #12
 80126e2:	f7ff fb04 	bl	8011cee <memcpy>
 80126e6:	2201      	movs	r2, #1
 80126e8:	4631      	mov	r1, r6
 80126ea:	4648      	mov	r0, r9
 80126ec:	f000 fbfc 	bl	8012ee8 <__lshift>
 80126f0:	1c7b      	adds	r3, r7, #1
 80126f2:	9304      	str	r3, [sp, #16]
 80126f4:	eb07 030b 	add.w	r3, r7, fp
 80126f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80126fa:	9b02      	ldr	r3, [sp, #8]
 80126fc:	f003 0301 	and.w	r3, r3, #1
 8012700:	46a8      	mov	r8, r5
 8012702:	9308      	str	r3, [sp, #32]
 8012704:	4605      	mov	r5, r0
 8012706:	9b04      	ldr	r3, [sp, #16]
 8012708:	9801      	ldr	r0, [sp, #4]
 801270a:	4621      	mov	r1, r4
 801270c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8012710:	f7ff fafb 	bl	8011d0a <quorem>
 8012714:	4641      	mov	r1, r8
 8012716:	9002      	str	r0, [sp, #8]
 8012718:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801271c:	9801      	ldr	r0, [sp, #4]
 801271e:	f000 fc4f 	bl	8012fc0 <__mcmp>
 8012722:	462a      	mov	r2, r5
 8012724:	9006      	str	r0, [sp, #24]
 8012726:	4621      	mov	r1, r4
 8012728:	4648      	mov	r0, r9
 801272a:	f000 fc65 	bl	8012ff8 <__mdiff>
 801272e:	68c2      	ldr	r2, [r0, #12]
 8012730:	4606      	mov	r6, r0
 8012732:	b9fa      	cbnz	r2, 8012774 <_dtoa_r+0x954>
 8012734:	4601      	mov	r1, r0
 8012736:	9801      	ldr	r0, [sp, #4]
 8012738:	f000 fc42 	bl	8012fc0 <__mcmp>
 801273c:	4602      	mov	r2, r0
 801273e:	4631      	mov	r1, r6
 8012740:	4648      	mov	r0, r9
 8012742:	920a      	str	r2, [sp, #40]	@ 0x28
 8012744:	f000 fa0a 	bl	8012b5c <_Bfree>
 8012748:	9b07      	ldr	r3, [sp, #28]
 801274a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801274c:	9e04      	ldr	r6, [sp, #16]
 801274e:	ea42 0103 	orr.w	r1, r2, r3
 8012752:	9b08      	ldr	r3, [sp, #32]
 8012754:	4319      	orrs	r1, r3
 8012756:	d10f      	bne.n	8012778 <_dtoa_r+0x958>
 8012758:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801275c:	d028      	beq.n	80127b0 <_dtoa_r+0x990>
 801275e:	9b06      	ldr	r3, [sp, #24]
 8012760:	2b00      	cmp	r3, #0
 8012762:	dd02      	ble.n	801276a <_dtoa_r+0x94a>
 8012764:	9b02      	ldr	r3, [sp, #8]
 8012766:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801276a:	f88b a000 	strb.w	sl, [fp]
 801276e:	e55e      	b.n	801222e <_dtoa_r+0x40e>
 8012770:	4628      	mov	r0, r5
 8012772:	e7bd      	b.n	80126f0 <_dtoa_r+0x8d0>
 8012774:	2201      	movs	r2, #1
 8012776:	e7e2      	b.n	801273e <_dtoa_r+0x91e>
 8012778:	9b06      	ldr	r3, [sp, #24]
 801277a:	2b00      	cmp	r3, #0
 801277c:	db04      	blt.n	8012788 <_dtoa_r+0x968>
 801277e:	9907      	ldr	r1, [sp, #28]
 8012780:	430b      	orrs	r3, r1
 8012782:	9908      	ldr	r1, [sp, #32]
 8012784:	430b      	orrs	r3, r1
 8012786:	d120      	bne.n	80127ca <_dtoa_r+0x9aa>
 8012788:	2a00      	cmp	r2, #0
 801278a:	ddee      	ble.n	801276a <_dtoa_r+0x94a>
 801278c:	9901      	ldr	r1, [sp, #4]
 801278e:	2201      	movs	r2, #1
 8012790:	4648      	mov	r0, r9
 8012792:	f000 fba9 	bl	8012ee8 <__lshift>
 8012796:	4621      	mov	r1, r4
 8012798:	9001      	str	r0, [sp, #4]
 801279a:	f000 fc11 	bl	8012fc0 <__mcmp>
 801279e:	2800      	cmp	r0, #0
 80127a0:	dc03      	bgt.n	80127aa <_dtoa_r+0x98a>
 80127a2:	d1e2      	bne.n	801276a <_dtoa_r+0x94a>
 80127a4:	f01a 0f01 	tst.w	sl, #1
 80127a8:	d0df      	beq.n	801276a <_dtoa_r+0x94a>
 80127aa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80127ae:	d1d9      	bne.n	8012764 <_dtoa_r+0x944>
 80127b0:	2339      	movs	r3, #57	@ 0x39
 80127b2:	f88b 3000 	strb.w	r3, [fp]
 80127b6:	4633      	mov	r3, r6
 80127b8:	461e      	mov	r6, r3
 80127ba:	3b01      	subs	r3, #1
 80127bc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80127c0:	2a39      	cmp	r2, #57	@ 0x39
 80127c2:	d052      	beq.n	801286a <_dtoa_r+0xa4a>
 80127c4:	3201      	adds	r2, #1
 80127c6:	701a      	strb	r2, [r3, #0]
 80127c8:	e531      	b.n	801222e <_dtoa_r+0x40e>
 80127ca:	2a00      	cmp	r2, #0
 80127cc:	dd07      	ble.n	80127de <_dtoa_r+0x9be>
 80127ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80127d2:	d0ed      	beq.n	80127b0 <_dtoa_r+0x990>
 80127d4:	f10a 0301 	add.w	r3, sl, #1
 80127d8:	f88b 3000 	strb.w	r3, [fp]
 80127dc:	e527      	b.n	801222e <_dtoa_r+0x40e>
 80127de:	9b04      	ldr	r3, [sp, #16]
 80127e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127e2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80127e6:	4293      	cmp	r3, r2
 80127e8:	d029      	beq.n	801283e <_dtoa_r+0xa1e>
 80127ea:	9901      	ldr	r1, [sp, #4]
 80127ec:	2300      	movs	r3, #0
 80127ee:	220a      	movs	r2, #10
 80127f0:	4648      	mov	r0, r9
 80127f2:	f000 f9d5 	bl	8012ba0 <__multadd>
 80127f6:	45a8      	cmp	r8, r5
 80127f8:	9001      	str	r0, [sp, #4]
 80127fa:	f04f 0300 	mov.w	r3, #0
 80127fe:	f04f 020a 	mov.w	r2, #10
 8012802:	4641      	mov	r1, r8
 8012804:	4648      	mov	r0, r9
 8012806:	d107      	bne.n	8012818 <_dtoa_r+0x9f8>
 8012808:	f000 f9ca 	bl	8012ba0 <__multadd>
 801280c:	4680      	mov	r8, r0
 801280e:	4605      	mov	r5, r0
 8012810:	9b04      	ldr	r3, [sp, #16]
 8012812:	3301      	adds	r3, #1
 8012814:	9304      	str	r3, [sp, #16]
 8012816:	e776      	b.n	8012706 <_dtoa_r+0x8e6>
 8012818:	f000 f9c2 	bl	8012ba0 <__multadd>
 801281c:	4629      	mov	r1, r5
 801281e:	4680      	mov	r8, r0
 8012820:	2300      	movs	r3, #0
 8012822:	220a      	movs	r2, #10
 8012824:	4648      	mov	r0, r9
 8012826:	f000 f9bb 	bl	8012ba0 <__multadd>
 801282a:	4605      	mov	r5, r0
 801282c:	e7f0      	b.n	8012810 <_dtoa_r+0x9f0>
 801282e:	f1bb 0f00 	cmp.w	fp, #0
 8012832:	bfcc      	ite	gt
 8012834:	465e      	movgt	r6, fp
 8012836:	2601      	movle	r6, #1
 8012838:	443e      	add	r6, r7
 801283a:	f04f 0800 	mov.w	r8, #0
 801283e:	9901      	ldr	r1, [sp, #4]
 8012840:	2201      	movs	r2, #1
 8012842:	4648      	mov	r0, r9
 8012844:	f000 fb50 	bl	8012ee8 <__lshift>
 8012848:	4621      	mov	r1, r4
 801284a:	9001      	str	r0, [sp, #4]
 801284c:	f000 fbb8 	bl	8012fc0 <__mcmp>
 8012850:	2800      	cmp	r0, #0
 8012852:	dcb0      	bgt.n	80127b6 <_dtoa_r+0x996>
 8012854:	d102      	bne.n	801285c <_dtoa_r+0xa3c>
 8012856:	f01a 0f01 	tst.w	sl, #1
 801285a:	d1ac      	bne.n	80127b6 <_dtoa_r+0x996>
 801285c:	4633      	mov	r3, r6
 801285e:	461e      	mov	r6, r3
 8012860:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012864:	2a30      	cmp	r2, #48	@ 0x30
 8012866:	d0fa      	beq.n	801285e <_dtoa_r+0xa3e>
 8012868:	e4e1      	b.n	801222e <_dtoa_r+0x40e>
 801286a:	429f      	cmp	r7, r3
 801286c:	d1a4      	bne.n	80127b8 <_dtoa_r+0x998>
 801286e:	9b05      	ldr	r3, [sp, #20]
 8012870:	3301      	adds	r3, #1
 8012872:	9305      	str	r3, [sp, #20]
 8012874:	2331      	movs	r3, #49	@ 0x31
 8012876:	703b      	strb	r3, [r7, #0]
 8012878:	e4d9      	b.n	801222e <_dtoa_r+0x40e>
 801287a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801287c:	4f16      	ldr	r7, [pc, #88]	@ (80128d8 <_dtoa_r+0xab8>)
 801287e:	b11b      	cbz	r3, 8012888 <_dtoa_r+0xa68>
 8012880:	f107 0308 	add.w	r3, r7, #8
 8012884:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012886:	6013      	str	r3, [r2, #0]
 8012888:	4638      	mov	r0, r7
 801288a:	b011      	add	sp, #68	@ 0x44
 801288c:	ecbd 8b02 	vpop	{d8}
 8012890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012894:	9b07      	ldr	r3, [sp, #28]
 8012896:	2b01      	cmp	r3, #1
 8012898:	f77f ae2c 	ble.w	80124f4 <_dtoa_r+0x6d4>
 801289c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801289e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80128a0:	2001      	movs	r0, #1
 80128a2:	e64c      	b.n	801253e <_dtoa_r+0x71e>
 80128a4:	f1bb 0f00 	cmp.w	fp, #0
 80128a8:	f77f aed8 	ble.w	801265c <_dtoa_r+0x83c>
 80128ac:	463e      	mov	r6, r7
 80128ae:	9801      	ldr	r0, [sp, #4]
 80128b0:	4621      	mov	r1, r4
 80128b2:	f7ff fa2a 	bl	8011d0a <quorem>
 80128b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80128ba:	f806 ab01 	strb.w	sl, [r6], #1
 80128be:	1bf2      	subs	r2, r6, r7
 80128c0:	4593      	cmp	fp, r2
 80128c2:	ddb4      	ble.n	801282e <_dtoa_r+0xa0e>
 80128c4:	9901      	ldr	r1, [sp, #4]
 80128c6:	2300      	movs	r3, #0
 80128c8:	220a      	movs	r2, #10
 80128ca:	4648      	mov	r0, r9
 80128cc:	f000 f968 	bl	8012ba0 <__multadd>
 80128d0:	9001      	str	r0, [sp, #4]
 80128d2:	e7ec      	b.n	80128ae <_dtoa_r+0xa8e>
 80128d4:	08016462 	.word	0x08016462
 80128d8:	080163e6 	.word	0x080163e6

080128dc <_free_r>:
 80128dc:	b538      	push	{r3, r4, r5, lr}
 80128de:	4605      	mov	r5, r0
 80128e0:	2900      	cmp	r1, #0
 80128e2:	d041      	beq.n	8012968 <_free_r+0x8c>
 80128e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128e8:	1f0c      	subs	r4, r1, #4
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	bfb8      	it	lt
 80128ee:	18e4      	addlt	r4, r4, r3
 80128f0:	f000 f8e8 	bl	8012ac4 <__malloc_lock>
 80128f4:	4a1d      	ldr	r2, [pc, #116]	@ (801296c <_free_r+0x90>)
 80128f6:	6813      	ldr	r3, [r2, #0]
 80128f8:	b933      	cbnz	r3, 8012908 <_free_r+0x2c>
 80128fa:	6063      	str	r3, [r4, #4]
 80128fc:	6014      	str	r4, [r2, #0]
 80128fe:	4628      	mov	r0, r5
 8012900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012904:	f000 b8e4 	b.w	8012ad0 <__malloc_unlock>
 8012908:	42a3      	cmp	r3, r4
 801290a:	d908      	bls.n	801291e <_free_r+0x42>
 801290c:	6820      	ldr	r0, [r4, #0]
 801290e:	1821      	adds	r1, r4, r0
 8012910:	428b      	cmp	r3, r1
 8012912:	bf01      	itttt	eq
 8012914:	6819      	ldreq	r1, [r3, #0]
 8012916:	685b      	ldreq	r3, [r3, #4]
 8012918:	1809      	addeq	r1, r1, r0
 801291a:	6021      	streq	r1, [r4, #0]
 801291c:	e7ed      	b.n	80128fa <_free_r+0x1e>
 801291e:	461a      	mov	r2, r3
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	b10b      	cbz	r3, 8012928 <_free_r+0x4c>
 8012924:	42a3      	cmp	r3, r4
 8012926:	d9fa      	bls.n	801291e <_free_r+0x42>
 8012928:	6811      	ldr	r1, [r2, #0]
 801292a:	1850      	adds	r0, r2, r1
 801292c:	42a0      	cmp	r0, r4
 801292e:	d10b      	bne.n	8012948 <_free_r+0x6c>
 8012930:	6820      	ldr	r0, [r4, #0]
 8012932:	4401      	add	r1, r0
 8012934:	1850      	adds	r0, r2, r1
 8012936:	4283      	cmp	r3, r0
 8012938:	6011      	str	r1, [r2, #0]
 801293a:	d1e0      	bne.n	80128fe <_free_r+0x22>
 801293c:	6818      	ldr	r0, [r3, #0]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	6053      	str	r3, [r2, #4]
 8012942:	4408      	add	r0, r1
 8012944:	6010      	str	r0, [r2, #0]
 8012946:	e7da      	b.n	80128fe <_free_r+0x22>
 8012948:	d902      	bls.n	8012950 <_free_r+0x74>
 801294a:	230c      	movs	r3, #12
 801294c:	602b      	str	r3, [r5, #0]
 801294e:	e7d6      	b.n	80128fe <_free_r+0x22>
 8012950:	6820      	ldr	r0, [r4, #0]
 8012952:	1821      	adds	r1, r4, r0
 8012954:	428b      	cmp	r3, r1
 8012956:	bf04      	itt	eq
 8012958:	6819      	ldreq	r1, [r3, #0]
 801295a:	685b      	ldreq	r3, [r3, #4]
 801295c:	6063      	str	r3, [r4, #4]
 801295e:	bf04      	itt	eq
 8012960:	1809      	addeq	r1, r1, r0
 8012962:	6021      	streq	r1, [r4, #0]
 8012964:	6054      	str	r4, [r2, #4]
 8012966:	e7ca      	b.n	80128fe <_free_r+0x22>
 8012968:	bd38      	pop	{r3, r4, r5, pc}
 801296a:	bf00      	nop
 801296c:	24000c1c 	.word	0x24000c1c

08012970 <malloc>:
 8012970:	4b02      	ldr	r3, [pc, #8]	@ (801297c <malloc+0xc>)
 8012972:	4601      	mov	r1, r0
 8012974:	6818      	ldr	r0, [r3, #0]
 8012976:	f000 b825 	b.w	80129c4 <_malloc_r>
 801297a:	bf00      	nop
 801297c:	2400002c 	.word	0x2400002c

08012980 <sbrk_aligned>:
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	4e0f      	ldr	r6, [pc, #60]	@ (80129c0 <sbrk_aligned+0x40>)
 8012984:	460c      	mov	r4, r1
 8012986:	6831      	ldr	r1, [r6, #0]
 8012988:	4605      	mov	r5, r0
 801298a:	b911      	cbnz	r1, 8012992 <sbrk_aligned+0x12>
 801298c:	f001 fa58 	bl	8013e40 <_sbrk_r>
 8012990:	6030      	str	r0, [r6, #0]
 8012992:	4621      	mov	r1, r4
 8012994:	4628      	mov	r0, r5
 8012996:	f001 fa53 	bl	8013e40 <_sbrk_r>
 801299a:	1c43      	adds	r3, r0, #1
 801299c:	d103      	bne.n	80129a6 <sbrk_aligned+0x26>
 801299e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80129a2:	4620      	mov	r0, r4
 80129a4:	bd70      	pop	{r4, r5, r6, pc}
 80129a6:	1cc4      	adds	r4, r0, #3
 80129a8:	f024 0403 	bic.w	r4, r4, #3
 80129ac:	42a0      	cmp	r0, r4
 80129ae:	d0f8      	beq.n	80129a2 <sbrk_aligned+0x22>
 80129b0:	1a21      	subs	r1, r4, r0
 80129b2:	4628      	mov	r0, r5
 80129b4:	f001 fa44 	bl	8013e40 <_sbrk_r>
 80129b8:	3001      	adds	r0, #1
 80129ba:	d1f2      	bne.n	80129a2 <sbrk_aligned+0x22>
 80129bc:	e7ef      	b.n	801299e <sbrk_aligned+0x1e>
 80129be:	bf00      	nop
 80129c0:	24000c18 	.word	0x24000c18

080129c4 <_malloc_r>:
 80129c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129c8:	1ccd      	adds	r5, r1, #3
 80129ca:	f025 0503 	bic.w	r5, r5, #3
 80129ce:	3508      	adds	r5, #8
 80129d0:	2d0c      	cmp	r5, #12
 80129d2:	bf38      	it	cc
 80129d4:	250c      	movcc	r5, #12
 80129d6:	2d00      	cmp	r5, #0
 80129d8:	4606      	mov	r6, r0
 80129da:	db01      	blt.n	80129e0 <_malloc_r+0x1c>
 80129dc:	42a9      	cmp	r1, r5
 80129de:	d904      	bls.n	80129ea <_malloc_r+0x26>
 80129e0:	230c      	movs	r3, #12
 80129e2:	6033      	str	r3, [r6, #0]
 80129e4:	2000      	movs	r0, #0
 80129e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ac0 <_malloc_r+0xfc>
 80129ee:	f000 f869 	bl	8012ac4 <__malloc_lock>
 80129f2:	f8d8 3000 	ldr.w	r3, [r8]
 80129f6:	461c      	mov	r4, r3
 80129f8:	bb44      	cbnz	r4, 8012a4c <_malloc_r+0x88>
 80129fa:	4629      	mov	r1, r5
 80129fc:	4630      	mov	r0, r6
 80129fe:	f7ff ffbf 	bl	8012980 <sbrk_aligned>
 8012a02:	1c43      	adds	r3, r0, #1
 8012a04:	4604      	mov	r4, r0
 8012a06:	d158      	bne.n	8012aba <_malloc_r+0xf6>
 8012a08:	f8d8 4000 	ldr.w	r4, [r8]
 8012a0c:	4627      	mov	r7, r4
 8012a0e:	2f00      	cmp	r7, #0
 8012a10:	d143      	bne.n	8012a9a <_malloc_r+0xd6>
 8012a12:	2c00      	cmp	r4, #0
 8012a14:	d04b      	beq.n	8012aae <_malloc_r+0xea>
 8012a16:	6823      	ldr	r3, [r4, #0]
 8012a18:	4639      	mov	r1, r7
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	eb04 0903 	add.w	r9, r4, r3
 8012a20:	f001 fa0e 	bl	8013e40 <_sbrk_r>
 8012a24:	4581      	cmp	r9, r0
 8012a26:	d142      	bne.n	8012aae <_malloc_r+0xea>
 8012a28:	6821      	ldr	r1, [r4, #0]
 8012a2a:	1a6d      	subs	r5, r5, r1
 8012a2c:	4629      	mov	r1, r5
 8012a2e:	4630      	mov	r0, r6
 8012a30:	f7ff ffa6 	bl	8012980 <sbrk_aligned>
 8012a34:	3001      	adds	r0, #1
 8012a36:	d03a      	beq.n	8012aae <_malloc_r+0xea>
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	442b      	add	r3, r5
 8012a3c:	6023      	str	r3, [r4, #0]
 8012a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8012a42:	685a      	ldr	r2, [r3, #4]
 8012a44:	bb62      	cbnz	r2, 8012aa0 <_malloc_r+0xdc>
 8012a46:	f8c8 7000 	str.w	r7, [r8]
 8012a4a:	e00f      	b.n	8012a6c <_malloc_r+0xa8>
 8012a4c:	6822      	ldr	r2, [r4, #0]
 8012a4e:	1b52      	subs	r2, r2, r5
 8012a50:	d420      	bmi.n	8012a94 <_malloc_r+0xd0>
 8012a52:	2a0b      	cmp	r2, #11
 8012a54:	d917      	bls.n	8012a86 <_malloc_r+0xc2>
 8012a56:	1961      	adds	r1, r4, r5
 8012a58:	42a3      	cmp	r3, r4
 8012a5a:	6025      	str	r5, [r4, #0]
 8012a5c:	bf18      	it	ne
 8012a5e:	6059      	strne	r1, [r3, #4]
 8012a60:	6863      	ldr	r3, [r4, #4]
 8012a62:	bf08      	it	eq
 8012a64:	f8c8 1000 	streq.w	r1, [r8]
 8012a68:	5162      	str	r2, [r4, r5]
 8012a6a:	604b      	str	r3, [r1, #4]
 8012a6c:	4630      	mov	r0, r6
 8012a6e:	f000 f82f 	bl	8012ad0 <__malloc_unlock>
 8012a72:	f104 000b 	add.w	r0, r4, #11
 8012a76:	1d23      	adds	r3, r4, #4
 8012a78:	f020 0007 	bic.w	r0, r0, #7
 8012a7c:	1ac2      	subs	r2, r0, r3
 8012a7e:	bf1c      	itt	ne
 8012a80:	1a1b      	subne	r3, r3, r0
 8012a82:	50a3      	strne	r3, [r4, r2]
 8012a84:	e7af      	b.n	80129e6 <_malloc_r+0x22>
 8012a86:	6862      	ldr	r2, [r4, #4]
 8012a88:	42a3      	cmp	r3, r4
 8012a8a:	bf0c      	ite	eq
 8012a8c:	f8c8 2000 	streq.w	r2, [r8]
 8012a90:	605a      	strne	r2, [r3, #4]
 8012a92:	e7eb      	b.n	8012a6c <_malloc_r+0xa8>
 8012a94:	4623      	mov	r3, r4
 8012a96:	6864      	ldr	r4, [r4, #4]
 8012a98:	e7ae      	b.n	80129f8 <_malloc_r+0x34>
 8012a9a:	463c      	mov	r4, r7
 8012a9c:	687f      	ldr	r7, [r7, #4]
 8012a9e:	e7b6      	b.n	8012a0e <_malloc_r+0x4a>
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	685b      	ldr	r3, [r3, #4]
 8012aa4:	42a3      	cmp	r3, r4
 8012aa6:	d1fb      	bne.n	8012aa0 <_malloc_r+0xdc>
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	6053      	str	r3, [r2, #4]
 8012aac:	e7de      	b.n	8012a6c <_malloc_r+0xa8>
 8012aae:	230c      	movs	r3, #12
 8012ab0:	6033      	str	r3, [r6, #0]
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f000 f80c 	bl	8012ad0 <__malloc_unlock>
 8012ab8:	e794      	b.n	80129e4 <_malloc_r+0x20>
 8012aba:	6005      	str	r5, [r0, #0]
 8012abc:	e7d6      	b.n	8012a6c <_malloc_r+0xa8>
 8012abe:	bf00      	nop
 8012ac0:	24000c1c 	.word	0x24000c1c

08012ac4 <__malloc_lock>:
 8012ac4:	4801      	ldr	r0, [pc, #4]	@ (8012acc <__malloc_lock+0x8>)
 8012ac6:	f7ff b910 	b.w	8011cea <__retarget_lock_acquire_recursive>
 8012aca:	bf00      	nop
 8012acc:	24000c14 	.word	0x24000c14

08012ad0 <__malloc_unlock>:
 8012ad0:	4801      	ldr	r0, [pc, #4]	@ (8012ad8 <__malloc_unlock+0x8>)
 8012ad2:	f7ff b90b 	b.w	8011cec <__retarget_lock_release_recursive>
 8012ad6:	bf00      	nop
 8012ad8:	24000c14 	.word	0x24000c14

08012adc <_Balloc>:
 8012adc:	b570      	push	{r4, r5, r6, lr}
 8012ade:	69c6      	ldr	r6, [r0, #28]
 8012ae0:	4604      	mov	r4, r0
 8012ae2:	460d      	mov	r5, r1
 8012ae4:	b976      	cbnz	r6, 8012b04 <_Balloc+0x28>
 8012ae6:	2010      	movs	r0, #16
 8012ae8:	f7ff ff42 	bl	8012970 <malloc>
 8012aec:	4602      	mov	r2, r0
 8012aee:	61e0      	str	r0, [r4, #28]
 8012af0:	b920      	cbnz	r0, 8012afc <_Balloc+0x20>
 8012af2:	4b18      	ldr	r3, [pc, #96]	@ (8012b54 <_Balloc+0x78>)
 8012af4:	4818      	ldr	r0, [pc, #96]	@ (8012b58 <_Balloc+0x7c>)
 8012af6:	216b      	movs	r1, #107	@ 0x6b
 8012af8:	f001 f9b2 	bl	8013e60 <__assert_func>
 8012afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b00:	6006      	str	r6, [r0, #0]
 8012b02:	60c6      	str	r6, [r0, #12]
 8012b04:	69e6      	ldr	r6, [r4, #28]
 8012b06:	68f3      	ldr	r3, [r6, #12]
 8012b08:	b183      	cbz	r3, 8012b2c <_Balloc+0x50>
 8012b0a:	69e3      	ldr	r3, [r4, #28]
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012b12:	b9b8      	cbnz	r0, 8012b44 <_Balloc+0x68>
 8012b14:	2101      	movs	r1, #1
 8012b16:	fa01 f605 	lsl.w	r6, r1, r5
 8012b1a:	1d72      	adds	r2, r6, #5
 8012b1c:	0092      	lsls	r2, r2, #2
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f001 f9bc 	bl	8013e9c <_calloc_r>
 8012b24:	b160      	cbz	r0, 8012b40 <_Balloc+0x64>
 8012b26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012b2a:	e00e      	b.n	8012b4a <_Balloc+0x6e>
 8012b2c:	2221      	movs	r2, #33	@ 0x21
 8012b2e:	2104      	movs	r1, #4
 8012b30:	4620      	mov	r0, r4
 8012b32:	f001 f9b3 	bl	8013e9c <_calloc_r>
 8012b36:	69e3      	ldr	r3, [r4, #28]
 8012b38:	60f0      	str	r0, [r6, #12]
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d1e4      	bne.n	8012b0a <_Balloc+0x2e>
 8012b40:	2000      	movs	r0, #0
 8012b42:	bd70      	pop	{r4, r5, r6, pc}
 8012b44:	6802      	ldr	r2, [r0, #0]
 8012b46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012b50:	e7f7      	b.n	8012b42 <_Balloc+0x66>
 8012b52:	bf00      	nop
 8012b54:	080163f3 	.word	0x080163f3
 8012b58:	08016473 	.word	0x08016473

08012b5c <_Bfree>:
 8012b5c:	b570      	push	{r4, r5, r6, lr}
 8012b5e:	69c6      	ldr	r6, [r0, #28]
 8012b60:	4605      	mov	r5, r0
 8012b62:	460c      	mov	r4, r1
 8012b64:	b976      	cbnz	r6, 8012b84 <_Bfree+0x28>
 8012b66:	2010      	movs	r0, #16
 8012b68:	f7ff ff02 	bl	8012970 <malloc>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	61e8      	str	r0, [r5, #28]
 8012b70:	b920      	cbnz	r0, 8012b7c <_Bfree+0x20>
 8012b72:	4b09      	ldr	r3, [pc, #36]	@ (8012b98 <_Bfree+0x3c>)
 8012b74:	4809      	ldr	r0, [pc, #36]	@ (8012b9c <_Bfree+0x40>)
 8012b76:	218f      	movs	r1, #143	@ 0x8f
 8012b78:	f001 f972 	bl	8013e60 <__assert_func>
 8012b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b80:	6006      	str	r6, [r0, #0]
 8012b82:	60c6      	str	r6, [r0, #12]
 8012b84:	b13c      	cbz	r4, 8012b96 <_Bfree+0x3a>
 8012b86:	69eb      	ldr	r3, [r5, #28]
 8012b88:	6862      	ldr	r2, [r4, #4]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012b90:	6021      	str	r1, [r4, #0]
 8012b92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012b96:	bd70      	pop	{r4, r5, r6, pc}
 8012b98:	080163f3 	.word	0x080163f3
 8012b9c:	08016473 	.word	0x08016473

08012ba0 <__multadd>:
 8012ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba4:	690d      	ldr	r5, [r1, #16]
 8012ba6:	4607      	mov	r7, r0
 8012ba8:	460c      	mov	r4, r1
 8012baa:	461e      	mov	r6, r3
 8012bac:	f101 0c14 	add.w	ip, r1, #20
 8012bb0:	2000      	movs	r0, #0
 8012bb2:	f8dc 3000 	ldr.w	r3, [ip]
 8012bb6:	b299      	uxth	r1, r3
 8012bb8:	fb02 6101 	mla	r1, r2, r1, r6
 8012bbc:	0c1e      	lsrs	r6, r3, #16
 8012bbe:	0c0b      	lsrs	r3, r1, #16
 8012bc0:	fb02 3306 	mla	r3, r2, r6, r3
 8012bc4:	b289      	uxth	r1, r1
 8012bc6:	3001      	adds	r0, #1
 8012bc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012bcc:	4285      	cmp	r5, r0
 8012bce:	f84c 1b04 	str.w	r1, [ip], #4
 8012bd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012bd6:	dcec      	bgt.n	8012bb2 <__multadd+0x12>
 8012bd8:	b30e      	cbz	r6, 8012c1e <__multadd+0x7e>
 8012bda:	68a3      	ldr	r3, [r4, #8]
 8012bdc:	42ab      	cmp	r3, r5
 8012bde:	dc19      	bgt.n	8012c14 <__multadd+0x74>
 8012be0:	6861      	ldr	r1, [r4, #4]
 8012be2:	4638      	mov	r0, r7
 8012be4:	3101      	adds	r1, #1
 8012be6:	f7ff ff79 	bl	8012adc <_Balloc>
 8012bea:	4680      	mov	r8, r0
 8012bec:	b928      	cbnz	r0, 8012bfa <__multadd+0x5a>
 8012bee:	4602      	mov	r2, r0
 8012bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8012c24 <__multadd+0x84>)
 8012bf2:	480d      	ldr	r0, [pc, #52]	@ (8012c28 <__multadd+0x88>)
 8012bf4:	21ba      	movs	r1, #186	@ 0xba
 8012bf6:	f001 f933 	bl	8013e60 <__assert_func>
 8012bfa:	6922      	ldr	r2, [r4, #16]
 8012bfc:	3202      	adds	r2, #2
 8012bfe:	f104 010c 	add.w	r1, r4, #12
 8012c02:	0092      	lsls	r2, r2, #2
 8012c04:	300c      	adds	r0, #12
 8012c06:	f7ff f872 	bl	8011cee <memcpy>
 8012c0a:	4621      	mov	r1, r4
 8012c0c:	4638      	mov	r0, r7
 8012c0e:	f7ff ffa5 	bl	8012b5c <_Bfree>
 8012c12:	4644      	mov	r4, r8
 8012c14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012c18:	3501      	adds	r5, #1
 8012c1a:	615e      	str	r6, [r3, #20]
 8012c1c:	6125      	str	r5, [r4, #16]
 8012c1e:	4620      	mov	r0, r4
 8012c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c24:	08016462 	.word	0x08016462
 8012c28:	08016473 	.word	0x08016473

08012c2c <__hi0bits>:
 8012c2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012c30:	4603      	mov	r3, r0
 8012c32:	bf36      	itet	cc
 8012c34:	0403      	lslcc	r3, r0, #16
 8012c36:	2000      	movcs	r0, #0
 8012c38:	2010      	movcc	r0, #16
 8012c3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012c3e:	bf3c      	itt	cc
 8012c40:	021b      	lslcc	r3, r3, #8
 8012c42:	3008      	addcc	r0, #8
 8012c44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012c48:	bf3c      	itt	cc
 8012c4a:	011b      	lslcc	r3, r3, #4
 8012c4c:	3004      	addcc	r0, #4
 8012c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c52:	bf3c      	itt	cc
 8012c54:	009b      	lslcc	r3, r3, #2
 8012c56:	3002      	addcc	r0, #2
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	db05      	blt.n	8012c68 <__hi0bits+0x3c>
 8012c5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012c60:	f100 0001 	add.w	r0, r0, #1
 8012c64:	bf08      	it	eq
 8012c66:	2020      	moveq	r0, #32
 8012c68:	4770      	bx	lr

08012c6a <__lo0bits>:
 8012c6a:	6803      	ldr	r3, [r0, #0]
 8012c6c:	4602      	mov	r2, r0
 8012c6e:	f013 0007 	ands.w	r0, r3, #7
 8012c72:	d00b      	beq.n	8012c8c <__lo0bits+0x22>
 8012c74:	07d9      	lsls	r1, r3, #31
 8012c76:	d421      	bmi.n	8012cbc <__lo0bits+0x52>
 8012c78:	0798      	lsls	r0, r3, #30
 8012c7a:	bf49      	itett	mi
 8012c7c:	085b      	lsrmi	r3, r3, #1
 8012c7e:	089b      	lsrpl	r3, r3, #2
 8012c80:	2001      	movmi	r0, #1
 8012c82:	6013      	strmi	r3, [r2, #0]
 8012c84:	bf5c      	itt	pl
 8012c86:	6013      	strpl	r3, [r2, #0]
 8012c88:	2002      	movpl	r0, #2
 8012c8a:	4770      	bx	lr
 8012c8c:	b299      	uxth	r1, r3
 8012c8e:	b909      	cbnz	r1, 8012c94 <__lo0bits+0x2a>
 8012c90:	0c1b      	lsrs	r3, r3, #16
 8012c92:	2010      	movs	r0, #16
 8012c94:	b2d9      	uxtb	r1, r3
 8012c96:	b909      	cbnz	r1, 8012c9c <__lo0bits+0x32>
 8012c98:	3008      	adds	r0, #8
 8012c9a:	0a1b      	lsrs	r3, r3, #8
 8012c9c:	0719      	lsls	r1, r3, #28
 8012c9e:	bf04      	itt	eq
 8012ca0:	091b      	lsreq	r3, r3, #4
 8012ca2:	3004      	addeq	r0, #4
 8012ca4:	0799      	lsls	r1, r3, #30
 8012ca6:	bf04      	itt	eq
 8012ca8:	089b      	lsreq	r3, r3, #2
 8012caa:	3002      	addeq	r0, #2
 8012cac:	07d9      	lsls	r1, r3, #31
 8012cae:	d403      	bmi.n	8012cb8 <__lo0bits+0x4e>
 8012cb0:	085b      	lsrs	r3, r3, #1
 8012cb2:	f100 0001 	add.w	r0, r0, #1
 8012cb6:	d003      	beq.n	8012cc0 <__lo0bits+0x56>
 8012cb8:	6013      	str	r3, [r2, #0]
 8012cba:	4770      	bx	lr
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	4770      	bx	lr
 8012cc0:	2020      	movs	r0, #32
 8012cc2:	4770      	bx	lr

08012cc4 <__i2b>:
 8012cc4:	b510      	push	{r4, lr}
 8012cc6:	460c      	mov	r4, r1
 8012cc8:	2101      	movs	r1, #1
 8012cca:	f7ff ff07 	bl	8012adc <_Balloc>
 8012cce:	4602      	mov	r2, r0
 8012cd0:	b928      	cbnz	r0, 8012cde <__i2b+0x1a>
 8012cd2:	4b05      	ldr	r3, [pc, #20]	@ (8012ce8 <__i2b+0x24>)
 8012cd4:	4805      	ldr	r0, [pc, #20]	@ (8012cec <__i2b+0x28>)
 8012cd6:	f240 1145 	movw	r1, #325	@ 0x145
 8012cda:	f001 f8c1 	bl	8013e60 <__assert_func>
 8012cde:	2301      	movs	r3, #1
 8012ce0:	6144      	str	r4, [r0, #20]
 8012ce2:	6103      	str	r3, [r0, #16]
 8012ce4:	bd10      	pop	{r4, pc}
 8012ce6:	bf00      	nop
 8012ce8:	08016462 	.word	0x08016462
 8012cec:	08016473 	.word	0x08016473

08012cf0 <__multiply>:
 8012cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf4:	4617      	mov	r7, r2
 8012cf6:	690a      	ldr	r2, [r1, #16]
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	bfa8      	it	ge
 8012cfe:	463b      	movge	r3, r7
 8012d00:	4689      	mov	r9, r1
 8012d02:	bfa4      	itt	ge
 8012d04:	460f      	movge	r7, r1
 8012d06:	4699      	movge	r9, r3
 8012d08:	693d      	ldr	r5, [r7, #16]
 8012d0a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	6879      	ldr	r1, [r7, #4]
 8012d12:	eb05 060a 	add.w	r6, r5, sl
 8012d16:	42b3      	cmp	r3, r6
 8012d18:	b085      	sub	sp, #20
 8012d1a:	bfb8      	it	lt
 8012d1c:	3101      	addlt	r1, #1
 8012d1e:	f7ff fedd 	bl	8012adc <_Balloc>
 8012d22:	b930      	cbnz	r0, 8012d32 <__multiply+0x42>
 8012d24:	4602      	mov	r2, r0
 8012d26:	4b41      	ldr	r3, [pc, #260]	@ (8012e2c <__multiply+0x13c>)
 8012d28:	4841      	ldr	r0, [pc, #260]	@ (8012e30 <__multiply+0x140>)
 8012d2a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012d2e:	f001 f897 	bl	8013e60 <__assert_func>
 8012d32:	f100 0414 	add.w	r4, r0, #20
 8012d36:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8012d3a:	4623      	mov	r3, r4
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	4573      	cmp	r3, lr
 8012d40:	d320      	bcc.n	8012d84 <__multiply+0x94>
 8012d42:	f107 0814 	add.w	r8, r7, #20
 8012d46:	f109 0114 	add.w	r1, r9, #20
 8012d4a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8012d4e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8012d52:	9302      	str	r3, [sp, #8]
 8012d54:	1beb      	subs	r3, r5, r7
 8012d56:	3b15      	subs	r3, #21
 8012d58:	f023 0303 	bic.w	r3, r3, #3
 8012d5c:	3304      	adds	r3, #4
 8012d5e:	3715      	adds	r7, #21
 8012d60:	42bd      	cmp	r5, r7
 8012d62:	bf38      	it	cc
 8012d64:	2304      	movcc	r3, #4
 8012d66:	9301      	str	r3, [sp, #4]
 8012d68:	9b02      	ldr	r3, [sp, #8]
 8012d6a:	9103      	str	r1, [sp, #12]
 8012d6c:	428b      	cmp	r3, r1
 8012d6e:	d80c      	bhi.n	8012d8a <__multiply+0x9a>
 8012d70:	2e00      	cmp	r6, #0
 8012d72:	dd03      	ble.n	8012d7c <__multiply+0x8c>
 8012d74:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d055      	beq.n	8012e28 <__multiply+0x138>
 8012d7c:	6106      	str	r6, [r0, #16]
 8012d7e:	b005      	add	sp, #20
 8012d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d84:	f843 2b04 	str.w	r2, [r3], #4
 8012d88:	e7d9      	b.n	8012d3e <__multiply+0x4e>
 8012d8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8012d8e:	f1ba 0f00 	cmp.w	sl, #0
 8012d92:	d01f      	beq.n	8012dd4 <__multiply+0xe4>
 8012d94:	46c4      	mov	ip, r8
 8012d96:	46a1      	mov	r9, r4
 8012d98:	2700      	movs	r7, #0
 8012d9a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012d9e:	f8d9 3000 	ldr.w	r3, [r9]
 8012da2:	fa1f fb82 	uxth.w	fp, r2
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	fb0a 330b 	mla	r3, sl, fp, r3
 8012dac:	443b      	add	r3, r7
 8012dae:	f8d9 7000 	ldr.w	r7, [r9]
 8012db2:	0c12      	lsrs	r2, r2, #16
 8012db4:	0c3f      	lsrs	r7, r7, #16
 8012db6:	fb0a 7202 	mla	r2, sl, r2, r7
 8012dba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012dc4:	4565      	cmp	r5, ip
 8012dc6:	f849 3b04 	str.w	r3, [r9], #4
 8012dca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8012dce:	d8e4      	bhi.n	8012d9a <__multiply+0xaa>
 8012dd0:	9b01      	ldr	r3, [sp, #4]
 8012dd2:	50e7      	str	r7, [r4, r3]
 8012dd4:	9b03      	ldr	r3, [sp, #12]
 8012dd6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012dda:	3104      	adds	r1, #4
 8012ddc:	f1b9 0f00 	cmp.w	r9, #0
 8012de0:	d020      	beq.n	8012e24 <__multiply+0x134>
 8012de2:	6823      	ldr	r3, [r4, #0]
 8012de4:	4647      	mov	r7, r8
 8012de6:	46a4      	mov	ip, r4
 8012de8:	f04f 0a00 	mov.w	sl, #0
 8012dec:	f8b7 b000 	ldrh.w	fp, [r7]
 8012df0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8012df4:	fb09 220b 	mla	r2, r9, fp, r2
 8012df8:	4452      	add	r2, sl
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e00:	f84c 3b04 	str.w	r3, [ip], #4
 8012e04:	f857 3b04 	ldr.w	r3, [r7], #4
 8012e08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e0c:	f8bc 3000 	ldrh.w	r3, [ip]
 8012e10:	fb09 330a 	mla	r3, r9, sl, r3
 8012e14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8012e18:	42bd      	cmp	r5, r7
 8012e1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e1e:	d8e5      	bhi.n	8012dec <__multiply+0xfc>
 8012e20:	9a01      	ldr	r2, [sp, #4]
 8012e22:	50a3      	str	r3, [r4, r2]
 8012e24:	3404      	adds	r4, #4
 8012e26:	e79f      	b.n	8012d68 <__multiply+0x78>
 8012e28:	3e01      	subs	r6, #1
 8012e2a:	e7a1      	b.n	8012d70 <__multiply+0x80>
 8012e2c:	08016462 	.word	0x08016462
 8012e30:	08016473 	.word	0x08016473

08012e34 <__pow5mult>:
 8012e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e38:	4615      	mov	r5, r2
 8012e3a:	f012 0203 	ands.w	r2, r2, #3
 8012e3e:	4607      	mov	r7, r0
 8012e40:	460e      	mov	r6, r1
 8012e42:	d007      	beq.n	8012e54 <__pow5mult+0x20>
 8012e44:	4c25      	ldr	r4, [pc, #148]	@ (8012edc <__pow5mult+0xa8>)
 8012e46:	3a01      	subs	r2, #1
 8012e48:	2300      	movs	r3, #0
 8012e4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012e4e:	f7ff fea7 	bl	8012ba0 <__multadd>
 8012e52:	4606      	mov	r6, r0
 8012e54:	10ad      	asrs	r5, r5, #2
 8012e56:	d03d      	beq.n	8012ed4 <__pow5mult+0xa0>
 8012e58:	69fc      	ldr	r4, [r7, #28]
 8012e5a:	b97c      	cbnz	r4, 8012e7c <__pow5mult+0x48>
 8012e5c:	2010      	movs	r0, #16
 8012e5e:	f7ff fd87 	bl	8012970 <malloc>
 8012e62:	4602      	mov	r2, r0
 8012e64:	61f8      	str	r0, [r7, #28]
 8012e66:	b928      	cbnz	r0, 8012e74 <__pow5mult+0x40>
 8012e68:	4b1d      	ldr	r3, [pc, #116]	@ (8012ee0 <__pow5mult+0xac>)
 8012e6a:	481e      	ldr	r0, [pc, #120]	@ (8012ee4 <__pow5mult+0xb0>)
 8012e6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012e70:	f000 fff6 	bl	8013e60 <__assert_func>
 8012e74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012e78:	6004      	str	r4, [r0, #0]
 8012e7a:	60c4      	str	r4, [r0, #12]
 8012e7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012e80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012e84:	b94c      	cbnz	r4, 8012e9a <__pow5mult+0x66>
 8012e86:	f240 2171 	movw	r1, #625	@ 0x271
 8012e8a:	4638      	mov	r0, r7
 8012e8c:	f7ff ff1a 	bl	8012cc4 <__i2b>
 8012e90:	2300      	movs	r3, #0
 8012e92:	f8c8 0008 	str.w	r0, [r8, #8]
 8012e96:	4604      	mov	r4, r0
 8012e98:	6003      	str	r3, [r0, #0]
 8012e9a:	f04f 0900 	mov.w	r9, #0
 8012e9e:	07eb      	lsls	r3, r5, #31
 8012ea0:	d50a      	bpl.n	8012eb8 <__pow5mult+0x84>
 8012ea2:	4631      	mov	r1, r6
 8012ea4:	4622      	mov	r2, r4
 8012ea6:	4638      	mov	r0, r7
 8012ea8:	f7ff ff22 	bl	8012cf0 <__multiply>
 8012eac:	4631      	mov	r1, r6
 8012eae:	4680      	mov	r8, r0
 8012eb0:	4638      	mov	r0, r7
 8012eb2:	f7ff fe53 	bl	8012b5c <_Bfree>
 8012eb6:	4646      	mov	r6, r8
 8012eb8:	106d      	asrs	r5, r5, #1
 8012eba:	d00b      	beq.n	8012ed4 <__pow5mult+0xa0>
 8012ebc:	6820      	ldr	r0, [r4, #0]
 8012ebe:	b938      	cbnz	r0, 8012ed0 <__pow5mult+0x9c>
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	4621      	mov	r1, r4
 8012ec4:	4638      	mov	r0, r7
 8012ec6:	f7ff ff13 	bl	8012cf0 <__multiply>
 8012eca:	6020      	str	r0, [r4, #0]
 8012ecc:	f8c0 9000 	str.w	r9, [r0]
 8012ed0:	4604      	mov	r4, r0
 8012ed2:	e7e4      	b.n	8012e9e <__pow5mult+0x6a>
 8012ed4:	4630      	mov	r0, r6
 8012ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eda:	bf00      	nop
 8012edc:	08016540 	.word	0x08016540
 8012ee0:	080163f3 	.word	0x080163f3
 8012ee4:	08016473 	.word	0x08016473

08012ee8 <__lshift>:
 8012ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eec:	460c      	mov	r4, r1
 8012eee:	6849      	ldr	r1, [r1, #4]
 8012ef0:	6923      	ldr	r3, [r4, #16]
 8012ef2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012ef6:	68a3      	ldr	r3, [r4, #8]
 8012ef8:	4607      	mov	r7, r0
 8012efa:	4691      	mov	r9, r2
 8012efc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012f00:	f108 0601 	add.w	r6, r8, #1
 8012f04:	42b3      	cmp	r3, r6
 8012f06:	db0b      	blt.n	8012f20 <__lshift+0x38>
 8012f08:	4638      	mov	r0, r7
 8012f0a:	f7ff fde7 	bl	8012adc <_Balloc>
 8012f0e:	4605      	mov	r5, r0
 8012f10:	b948      	cbnz	r0, 8012f26 <__lshift+0x3e>
 8012f12:	4602      	mov	r2, r0
 8012f14:	4b28      	ldr	r3, [pc, #160]	@ (8012fb8 <__lshift+0xd0>)
 8012f16:	4829      	ldr	r0, [pc, #164]	@ (8012fbc <__lshift+0xd4>)
 8012f18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012f1c:	f000 ffa0 	bl	8013e60 <__assert_func>
 8012f20:	3101      	adds	r1, #1
 8012f22:	005b      	lsls	r3, r3, #1
 8012f24:	e7ee      	b.n	8012f04 <__lshift+0x1c>
 8012f26:	2300      	movs	r3, #0
 8012f28:	f100 0114 	add.w	r1, r0, #20
 8012f2c:	f100 0210 	add.w	r2, r0, #16
 8012f30:	4618      	mov	r0, r3
 8012f32:	4553      	cmp	r3, sl
 8012f34:	db33      	blt.n	8012f9e <__lshift+0xb6>
 8012f36:	6920      	ldr	r0, [r4, #16]
 8012f38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012f3c:	f104 0314 	add.w	r3, r4, #20
 8012f40:	f019 091f 	ands.w	r9, r9, #31
 8012f44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012f4c:	d02b      	beq.n	8012fa6 <__lshift+0xbe>
 8012f4e:	f1c9 0e20 	rsb	lr, r9, #32
 8012f52:	468a      	mov	sl, r1
 8012f54:	2200      	movs	r2, #0
 8012f56:	6818      	ldr	r0, [r3, #0]
 8012f58:	fa00 f009 	lsl.w	r0, r0, r9
 8012f5c:	4310      	orrs	r0, r2
 8012f5e:	f84a 0b04 	str.w	r0, [sl], #4
 8012f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f66:	459c      	cmp	ip, r3
 8012f68:	fa22 f20e 	lsr.w	r2, r2, lr
 8012f6c:	d8f3      	bhi.n	8012f56 <__lshift+0x6e>
 8012f6e:	ebac 0304 	sub.w	r3, ip, r4
 8012f72:	3b15      	subs	r3, #21
 8012f74:	f023 0303 	bic.w	r3, r3, #3
 8012f78:	3304      	adds	r3, #4
 8012f7a:	f104 0015 	add.w	r0, r4, #21
 8012f7e:	4560      	cmp	r0, ip
 8012f80:	bf88      	it	hi
 8012f82:	2304      	movhi	r3, #4
 8012f84:	50ca      	str	r2, [r1, r3]
 8012f86:	b10a      	cbz	r2, 8012f8c <__lshift+0xa4>
 8012f88:	f108 0602 	add.w	r6, r8, #2
 8012f8c:	3e01      	subs	r6, #1
 8012f8e:	4638      	mov	r0, r7
 8012f90:	612e      	str	r6, [r5, #16]
 8012f92:	4621      	mov	r1, r4
 8012f94:	f7ff fde2 	bl	8012b5c <_Bfree>
 8012f98:	4628      	mov	r0, r5
 8012f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	e7c5      	b.n	8012f32 <__lshift+0x4a>
 8012fa6:	3904      	subs	r1, #4
 8012fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fac:	f841 2f04 	str.w	r2, [r1, #4]!
 8012fb0:	459c      	cmp	ip, r3
 8012fb2:	d8f9      	bhi.n	8012fa8 <__lshift+0xc0>
 8012fb4:	e7ea      	b.n	8012f8c <__lshift+0xa4>
 8012fb6:	bf00      	nop
 8012fb8:	08016462 	.word	0x08016462
 8012fbc:	08016473 	.word	0x08016473

08012fc0 <__mcmp>:
 8012fc0:	690a      	ldr	r2, [r1, #16]
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	6900      	ldr	r0, [r0, #16]
 8012fc6:	1a80      	subs	r0, r0, r2
 8012fc8:	b530      	push	{r4, r5, lr}
 8012fca:	d10e      	bne.n	8012fea <__mcmp+0x2a>
 8012fcc:	3314      	adds	r3, #20
 8012fce:	3114      	adds	r1, #20
 8012fd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012fd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012fd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012fdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012fe0:	4295      	cmp	r5, r2
 8012fe2:	d003      	beq.n	8012fec <__mcmp+0x2c>
 8012fe4:	d205      	bcs.n	8012ff2 <__mcmp+0x32>
 8012fe6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012fea:	bd30      	pop	{r4, r5, pc}
 8012fec:	42a3      	cmp	r3, r4
 8012fee:	d3f3      	bcc.n	8012fd8 <__mcmp+0x18>
 8012ff0:	e7fb      	b.n	8012fea <__mcmp+0x2a>
 8012ff2:	2001      	movs	r0, #1
 8012ff4:	e7f9      	b.n	8012fea <__mcmp+0x2a>
	...

08012ff8 <__mdiff>:
 8012ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ffc:	4689      	mov	r9, r1
 8012ffe:	4606      	mov	r6, r0
 8013000:	4611      	mov	r1, r2
 8013002:	4648      	mov	r0, r9
 8013004:	4614      	mov	r4, r2
 8013006:	f7ff ffdb 	bl	8012fc0 <__mcmp>
 801300a:	1e05      	subs	r5, r0, #0
 801300c:	d112      	bne.n	8013034 <__mdiff+0x3c>
 801300e:	4629      	mov	r1, r5
 8013010:	4630      	mov	r0, r6
 8013012:	f7ff fd63 	bl	8012adc <_Balloc>
 8013016:	4602      	mov	r2, r0
 8013018:	b928      	cbnz	r0, 8013026 <__mdiff+0x2e>
 801301a:	4b3f      	ldr	r3, [pc, #252]	@ (8013118 <__mdiff+0x120>)
 801301c:	f240 2137 	movw	r1, #567	@ 0x237
 8013020:	483e      	ldr	r0, [pc, #248]	@ (801311c <__mdiff+0x124>)
 8013022:	f000 ff1d 	bl	8013e60 <__assert_func>
 8013026:	2301      	movs	r3, #1
 8013028:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801302c:	4610      	mov	r0, r2
 801302e:	b003      	add	sp, #12
 8013030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013034:	bfbc      	itt	lt
 8013036:	464b      	movlt	r3, r9
 8013038:	46a1      	movlt	r9, r4
 801303a:	4630      	mov	r0, r6
 801303c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013040:	bfba      	itte	lt
 8013042:	461c      	movlt	r4, r3
 8013044:	2501      	movlt	r5, #1
 8013046:	2500      	movge	r5, #0
 8013048:	f7ff fd48 	bl	8012adc <_Balloc>
 801304c:	4602      	mov	r2, r0
 801304e:	b918      	cbnz	r0, 8013058 <__mdiff+0x60>
 8013050:	4b31      	ldr	r3, [pc, #196]	@ (8013118 <__mdiff+0x120>)
 8013052:	f240 2145 	movw	r1, #581	@ 0x245
 8013056:	e7e3      	b.n	8013020 <__mdiff+0x28>
 8013058:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801305c:	6926      	ldr	r6, [r4, #16]
 801305e:	60c5      	str	r5, [r0, #12]
 8013060:	f109 0310 	add.w	r3, r9, #16
 8013064:	f109 0514 	add.w	r5, r9, #20
 8013068:	f104 0e14 	add.w	lr, r4, #20
 801306c:	f100 0b14 	add.w	fp, r0, #20
 8013070:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013074:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013078:	9301      	str	r3, [sp, #4]
 801307a:	46d9      	mov	r9, fp
 801307c:	f04f 0c00 	mov.w	ip, #0
 8013080:	9b01      	ldr	r3, [sp, #4]
 8013082:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013086:	f853 af04 	ldr.w	sl, [r3, #4]!
 801308a:	9301      	str	r3, [sp, #4]
 801308c:	fa1f f38a 	uxth.w	r3, sl
 8013090:	4619      	mov	r1, r3
 8013092:	b283      	uxth	r3, r0
 8013094:	1acb      	subs	r3, r1, r3
 8013096:	0c00      	lsrs	r0, r0, #16
 8013098:	4463      	add	r3, ip
 801309a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801309e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80130a8:	4576      	cmp	r6, lr
 80130aa:	f849 3b04 	str.w	r3, [r9], #4
 80130ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80130b2:	d8e5      	bhi.n	8013080 <__mdiff+0x88>
 80130b4:	1b33      	subs	r3, r6, r4
 80130b6:	3b15      	subs	r3, #21
 80130b8:	f023 0303 	bic.w	r3, r3, #3
 80130bc:	3415      	adds	r4, #21
 80130be:	3304      	adds	r3, #4
 80130c0:	42a6      	cmp	r6, r4
 80130c2:	bf38      	it	cc
 80130c4:	2304      	movcc	r3, #4
 80130c6:	441d      	add	r5, r3
 80130c8:	445b      	add	r3, fp
 80130ca:	461e      	mov	r6, r3
 80130cc:	462c      	mov	r4, r5
 80130ce:	4544      	cmp	r4, r8
 80130d0:	d30e      	bcc.n	80130f0 <__mdiff+0xf8>
 80130d2:	f108 0103 	add.w	r1, r8, #3
 80130d6:	1b49      	subs	r1, r1, r5
 80130d8:	f021 0103 	bic.w	r1, r1, #3
 80130dc:	3d03      	subs	r5, #3
 80130de:	45a8      	cmp	r8, r5
 80130e0:	bf38      	it	cc
 80130e2:	2100      	movcc	r1, #0
 80130e4:	440b      	add	r3, r1
 80130e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80130ea:	b191      	cbz	r1, 8013112 <__mdiff+0x11a>
 80130ec:	6117      	str	r7, [r2, #16]
 80130ee:	e79d      	b.n	801302c <__mdiff+0x34>
 80130f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80130f4:	46e6      	mov	lr, ip
 80130f6:	0c08      	lsrs	r0, r1, #16
 80130f8:	fa1c fc81 	uxtah	ip, ip, r1
 80130fc:	4471      	add	r1, lr
 80130fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013102:	b289      	uxth	r1, r1
 8013104:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013108:	f846 1b04 	str.w	r1, [r6], #4
 801310c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013110:	e7dd      	b.n	80130ce <__mdiff+0xd6>
 8013112:	3f01      	subs	r7, #1
 8013114:	e7e7      	b.n	80130e6 <__mdiff+0xee>
 8013116:	bf00      	nop
 8013118:	08016462 	.word	0x08016462
 801311c:	08016473 	.word	0x08016473

08013120 <__d2b>:
 8013120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013124:	460f      	mov	r7, r1
 8013126:	2101      	movs	r1, #1
 8013128:	ec59 8b10 	vmov	r8, r9, d0
 801312c:	4616      	mov	r6, r2
 801312e:	f7ff fcd5 	bl	8012adc <_Balloc>
 8013132:	4604      	mov	r4, r0
 8013134:	b930      	cbnz	r0, 8013144 <__d2b+0x24>
 8013136:	4602      	mov	r2, r0
 8013138:	4b23      	ldr	r3, [pc, #140]	@ (80131c8 <__d2b+0xa8>)
 801313a:	4824      	ldr	r0, [pc, #144]	@ (80131cc <__d2b+0xac>)
 801313c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013140:	f000 fe8e 	bl	8013e60 <__assert_func>
 8013144:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013148:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801314c:	b10d      	cbz	r5, 8013152 <__d2b+0x32>
 801314e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013152:	9301      	str	r3, [sp, #4]
 8013154:	f1b8 0300 	subs.w	r3, r8, #0
 8013158:	d023      	beq.n	80131a2 <__d2b+0x82>
 801315a:	4668      	mov	r0, sp
 801315c:	9300      	str	r3, [sp, #0]
 801315e:	f7ff fd84 	bl	8012c6a <__lo0bits>
 8013162:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013166:	b1d0      	cbz	r0, 801319e <__d2b+0x7e>
 8013168:	f1c0 0320 	rsb	r3, r0, #32
 801316c:	fa02 f303 	lsl.w	r3, r2, r3
 8013170:	430b      	orrs	r3, r1
 8013172:	40c2      	lsrs	r2, r0
 8013174:	6163      	str	r3, [r4, #20]
 8013176:	9201      	str	r2, [sp, #4]
 8013178:	9b01      	ldr	r3, [sp, #4]
 801317a:	61a3      	str	r3, [r4, #24]
 801317c:	2b00      	cmp	r3, #0
 801317e:	bf0c      	ite	eq
 8013180:	2201      	moveq	r2, #1
 8013182:	2202      	movne	r2, #2
 8013184:	6122      	str	r2, [r4, #16]
 8013186:	b1a5      	cbz	r5, 80131b2 <__d2b+0x92>
 8013188:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801318c:	4405      	add	r5, r0
 801318e:	603d      	str	r5, [r7, #0]
 8013190:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013194:	6030      	str	r0, [r6, #0]
 8013196:	4620      	mov	r0, r4
 8013198:	b003      	add	sp, #12
 801319a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801319e:	6161      	str	r1, [r4, #20]
 80131a0:	e7ea      	b.n	8013178 <__d2b+0x58>
 80131a2:	a801      	add	r0, sp, #4
 80131a4:	f7ff fd61 	bl	8012c6a <__lo0bits>
 80131a8:	9b01      	ldr	r3, [sp, #4]
 80131aa:	6163      	str	r3, [r4, #20]
 80131ac:	3020      	adds	r0, #32
 80131ae:	2201      	movs	r2, #1
 80131b0:	e7e8      	b.n	8013184 <__d2b+0x64>
 80131b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80131b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80131ba:	6038      	str	r0, [r7, #0]
 80131bc:	6918      	ldr	r0, [r3, #16]
 80131be:	f7ff fd35 	bl	8012c2c <__hi0bits>
 80131c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80131c6:	e7e5      	b.n	8013194 <__d2b+0x74>
 80131c8:	08016462 	.word	0x08016462
 80131cc:	08016473 	.word	0x08016473

080131d0 <_sungetc_r>:
 80131d0:	b538      	push	{r3, r4, r5, lr}
 80131d2:	1c4b      	adds	r3, r1, #1
 80131d4:	4614      	mov	r4, r2
 80131d6:	d103      	bne.n	80131e0 <_sungetc_r+0x10>
 80131d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80131dc:	4628      	mov	r0, r5
 80131de:	bd38      	pop	{r3, r4, r5, pc}
 80131e0:	8993      	ldrh	r3, [r2, #12]
 80131e2:	f023 0320 	bic.w	r3, r3, #32
 80131e6:	8193      	strh	r3, [r2, #12]
 80131e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80131ea:	6852      	ldr	r2, [r2, #4]
 80131ec:	b2cd      	uxtb	r5, r1
 80131ee:	b18b      	cbz	r3, 8013214 <_sungetc_r+0x44>
 80131f0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80131f2:	4293      	cmp	r3, r2
 80131f4:	dd08      	ble.n	8013208 <_sungetc_r+0x38>
 80131f6:	6823      	ldr	r3, [r4, #0]
 80131f8:	1e5a      	subs	r2, r3, #1
 80131fa:	6022      	str	r2, [r4, #0]
 80131fc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013200:	6863      	ldr	r3, [r4, #4]
 8013202:	3301      	adds	r3, #1
 8013204:	6063      	str	r3, [r4, #4]
 8013206:	e7e9      	b.n	80131dc <_sungetc_r+0xc>
 8013208:	4621      	mov	r1, r4
 801320a:	f000 fdbc 	bl	8013d86 <__submore>
 801320e:	2800      	cmp	r0, #0
 8013210:	d0f1      	beq.n	80131f6 <_sungetc_r+0x26>
 8013212:	e7e1      	b.n	80131d8 <_sungetc_r+0x8>
 8013214:	6921      	ldr	r1, [r4, #16]
 8013216:	6823      	ldr	r3, [r4, #0]
 8013218:	b151      	cbz	r1, 8013230 <_sungetc_r+0x60>
 801321a:	4299      	cmp	r1, r3
 801321c:	d208      	bcs.n	8013230 <_sungetc_r+0x60>
 801321e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013222:	42a9      	cmp	r1, r5
 8013224:	d104      	bne.n	8013230 <_sungetc_r+0x60>
 8013226:	3b01      	subs	r3, #1
 8013228:	3201      	adds	r2, #1
 801322a:	6023      	str	r3, [r4, #0]
 801322c:	6062      	str	r2, [r4, #4]
 801322e:	e7d5      	b.n	80131dc <_sungetc_r+0xc>
 8013230:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8013234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013238:	6363      	str	r3, [r4, #52]	@ 0x34
 801323a:	2303      	movs	r3, #3
 801323c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801323e:	4623      	mov	r3, r4
 8013240:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013244:	6023      	str	r3, [r4, #0]
 8013246:	2301      	movs	r3, #1
 8013248:	e7dc      	b.n	8013204 <_sungetc_r+0x34>

0801324a <__ssrefill_r>:
 801324a:	b510      	push	{r4, lr}
 801324c:	460c      	mov	r4, r1
 801324e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013250:	b169      	cbz	r1, 801326e <__ssrefill_r+0x24>
 8013252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013256:	4299      	cmp	r1, r3
 8013258:	d001      	beq.n	801325e <__ssrefill_r+0x14>
 801325a:	f7ff fb3f 	bl	80128dc <_free_r>
 801325e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013260:	6063      	str	r3, [r4, #4]
 8013262:	2000      	movs	r0, #0
 8013264:	6360      	str	r0, [r4, #52]	@ 0x34
 8013266:	b113      	cbz	r3, 801326e <__ssrefill_r+0x24>
 8013268:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801326a:	6023      	str	r3, [r4, #0]
 801326c:	bd10      	pop	{r4, pc}
 801326e:	6923      	ldr	r3, [r4, #16]
 8013270:	6023      	str	r3, [r4, #0]
 8013272:	2300      	movs	r3, #0
 8013274:	6063      	str	r3, [r4, #4]
 8013276:	89a3      	ldrh	r3, [r4, #12]
 8013278:	f043 0320 	orr.w	r3, r3, #32
 801327c:	81a3      	strh	r3, [r4, #12]
 801327e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013282:	e7f3      	b.n	801326c <__ssrefill_r+0x22>

08013284 <__ssvfiscanf_r>:
 8013284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013288:	460c      	mov	r4, r1
 801328a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801328e:	2100      	movs	r1, #0
 8013290:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013294:	49a6      	ldr	r1, [pc, #664]	@ (8013530 <__ssvfiscanf_r+0x2ac>)
 8013296:	91a0      	str	r1, [sp, #640]	@ 0x280
 8013298:	f10d 0804 	add.w	r8, sp, #4
 801329c:	49a5      	ldr	r1, [pc, #660]	@ (8013534 <__ssvfiscanf_r+0x2b0>)
 801329e:	4fa6      	ldr	r7, [pc, #664]	@ (8013538 <__ssvfiscanf_r+0x2b4>)
 80132a0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80132a4:	4606      	mov	r6, r0
 80132a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80132a8:	9300      	str	r3, [sp, #0]
 80132aa:	f892 9000 	ldrb.w	r9, [r2]
 80132ae:	f1b9 0f00 	cmp.w	r9, #0
 80132b2:	f000 8158 	beq.w	8013566 <__ssvfiscanf_r+0x2e2>
 80132b6:	f817 3009 	ldrb.w	r3, [r7, r9]
 80132ba:	f013 0308 	ands.w	r3, r3, #8
 80132be:	f102 0501 	add.w	r5, r2, #1
 80132c2:	d019      	beq.n	80132f8 <__ssvfiscanf_r+0x74>
 80132c4:	6863      	ldr	r3, [r4, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	dd0f      	ble.n	80132ea <__ssvfiscanf_r+0x66>
 80132ca:	6823      	ldr	r3, [r4, #0]
 80132cc:	781a      	ldrb	r2, [r3, #0]
 80132ce:	5cba      	ldrb	r2, [r7, r2]
 80132d0:	0712      	lsls	r2, r2, #28
 80132d2:	d401      	bmi.n	80132d8 <__ssvfiscanf_r+0x54>
 80132d4:	462a      	mov	r2, r5
 80132d6:	e7e8      	b.n	80132aa <__ssvfiscanf_r+0x26>
 80132d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80132da:	3201      	adds	r2, #1
 80132dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80132de:	6862      	ldr	r2, [r4, #4]
 80132e0:	3301      	adds	r3, #1
 80132e2:	3a01      	subs	r2, #1
 80132e4:	6062      	str	r2, [r4, #4]
 80132e6:	6023      	str	r3, [r4, #0]
 80132e8:	e7ec      	b.n	80132c4 <__ssvfiscanf_r+0x40>
 80132ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80132ec:	4621      	mov	r1, r4
 80132ee:	4630      	mov	r0, r6
 80132f0:	4798      	blx	r3
 80132f2:	2800      	cmp	r0, #0
 80132f4:	d0e9      	beq.n	80132ca <__ssvfiscanf_r+0x46>
 80132f6:	e7ed      	b.n	80132d4 <__ssvfiscanf_r+0x50>
 80132f8:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80132fc:	f040 8085 	bne.w	801340a <__ssvfiscanf_r+0x186>
 8013300:	9341      	str	r3, [sp, #260]	@ 0x104
 8013302:	9343      	str	r3, [sp, #268]	@ 0x10c
 8013304:	7853      	ldrb	r3, [r2, #1]
 8013306:	2b2a      	cmp	r3, #42	@ 0x2a
 8013308:	bf02      	ittt	eq
 801330a:	2310      	moveq	r3, #16
 801330c:	1c95      	addeq	r5, r2, #2
 801330e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8013310:	220a      	movs	r2, #10
 8013312:	46aa      	mov	sl, r5
 8013314:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8013318:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801331c:	2b09      	cmp	r3, #9
 801331e:	d91e      	bls.n	801335e <__ssvfiscanf_r+0xda>
 8013320:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801353c <__ssvfiscanf_r+0x2b8>
 8013324:	2203      	movs	r2, #3
 8013326:	4658      	mov	r0, fp
 8013328:	f7ed f802 	bl	8000330 <memchr>
 801332c:	b138      	cbz	r0, 801333e <__ssvfiscanf_r+0xba>
 801332e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013330:	eba0 000b 	sub.w	r0, r0, fp
 8013334:	2301      	movs	r3, #1
 8013336:	4083      	lsls	r3, r0
 8013338:	4313      	orrs	r3, r2
 801333a:	9341      	str	r3, [sp, #260]	@ 0x104
 801333c:	4655      	mov	r5, sl
 801333e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013342:	2b78      	cmp	r3, #120	@ 0x78
 8013344:	d806      	bhi.n	8013354 <__ssvfiscanf_r+0xd0>
 8013346:	2b57      	cmp	r3, #87	@ 0x57
 8013348:	d810      	bhi.n	801336c <__ssvfiscanf_r+0xe8>
 801334a:	2b25      	cmp	r3, #37	@ 0x25
 801334c:	d05d      	beq.n	801340a <__ssvfiscanf_r+0x186>
 801334e:	d857      	bhi.n	8013400 <__ssvfiscanf_r+0x17c>
 8013350:	2b00      	cmp	r3, #0
 8013352:	d075      	beq.n	8013440 <__ssvfiscanf_r+0x1bc>
 8013354:	2303      	movs	r3, #3
 8013356:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013358:	230a      	movs	r3, #10
 801335a:	9342      	str	r3, [sp, #264]	@ 0x108
 801335c:	e088      	b.n	8013470 <__ssvfiscanf_r+0x1ec>
 801335e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8013360:	fb02 1103 	mla	r1, r2, r3, r1
 8013364:	3930      	subs	r1, #48	@ 0x30
 8013366:	9143      	str	r1, [sp, #268]	@ 0x10c
 8013368:	4655      	mov	r5, sl
 801336a:	e7d2      	b.n	8013312 <__ssvfiscanf_r+0x8e>
 801336c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8013370:	2a20      	cmp	r2, #32
 8013372:	d8ef      	bhi.n	8013354 <__ssvfiscanf_r+0xd0>
 8013374:	a101      	add	r1, pc, #4	@ (adr r1, 801337c <__ssvfiscanf_r+0xf8>)
 8013376:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801337a:	bf00      	nop
 801337c:	0801344f 	.word	0x0801344f
 8013380:	08013355 	.word	0x08013355
 8013384:	08013355 	.word	0x08013355
 8013388:	080134a9 	.word	0x080134a9
 801338c:	08013355 	.word	0x08013355
 8013390:	08013355 	.word	0x08013355
 8013394:	08013355 	.word	0x08013355
 8013398:	08013355 	.word	0x08013355
 801339c:	08013355 	.word	0x08013355
 80133a0:	08013355 	.word	0x08013355
 80133a4:	08013355 	.word	0x08013355
 80133a8:	080134bf 	.word	0x080134bf
 80133ac:	080134a5 	.word	0x080134a5
 80133b0:	08013407 	.word	0x08013407
 80133b4:	08013407 	.word	0x08013407
 80133b8:	08013407 	.word	0x08013407
 80133bc:	08013355 	.word	0x08013355
 80133c0:	08013461 	.word	0x08013461
 80133c4:	08013355 	.word	0x08013355
 80133c8:	08013355 	.word	0x08013355
 80133cc:	08013355 	.word	0x08013355
 80133d0:	08013355 	.word	0x08013355
 80133d4:	080134cf 	.word	0x080134cf
 80133d8:	08013469 	.word	0x08013469
 80133dc:	08013447 	.word	0x08013447
 80133e0:	08013355 	.word	0x08013355
 80133e4:	08013355 	.word	0x08013355
 80133e8:	080134cb 	.word	0x080134cb
 80133ec:	08013355 	.word	0x08013355
 80133f0:	080134a5 	.word	0x080134a5
 80133f4:	08013355 	.word	0x08013355
 80133f8:	08013355 	.word	0x08013355
 80133fc:	0801344f 	.word	0x0801344f
 8013400:	3b45      	subs	r3, #69	@ 0x45
 8013402:	2b02      	cmp	r3, #2
 8013404:	d8a6      	bhi.n	8013354 <__ssvfiscanf_r+0xd0>
 8013406:	2305      	movs	r3, #5
 8013408:	e031      	b.n	801346e <__ssvfiscanf_r+0x1ea>
 801340a:	6863      	ldr	r3, [r4, #4]
 801340c:	2b00      	cmp	r3, #0
 801340e:	dd0d      	ble.n	801342c <__ssvfiscanf_r+0x1a8>
 8013410:	6823      	ldr	r3, [r4, #0]
 8013412:	781a      	ldrb	r2, [r3, #0]
 8013414:	454a      	cmp	r2, r9
 8013416:	f040 80a6 	bne.w	8013566 <__ssvfiscanf_r+0x2e2>
 801341a:	3301      	adds	r3, #1
 801341c:	6862      	ldr	r2, [r4, #4]
 801341e:	6023      	str	r3, [r4, #0]
 8013420:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8013422:	3a01      	subs	r2, #1
 8013424:	3301      	adds	r3, #1
 8013426:	6062      	str	r2, [r4, #4]
 8013428:	9345      	str	r3, [sp, #276]	@ 0x114
 801342a:	e753      	b.n	80132d4 <__ssvfiscanf_r+0x50>
 801342c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801342e:	4621      	mov	r1, r4
 8013430:	4630      	mov	r0, r6
 8013432:	4798      	blx	r3
 8013434:	2800      	cmp	r0, #0
 8013436:	d0eb      	beq.n	8013410 <__ssvfiscanf_r+0x18c>
 8013438:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801343a:	2800      	cmp	r0, #0
 801343c:	f040 808b 	bne.w	8013556 <__ssvfiscanf_r+0x2d2>
 8013440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013444:	e08b      	b.n	801355e <__ssvfiscanf_r+0x2da>
 8013446:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013448:	f042 0220 	orr.w	r2, r2, #32
 801344c:	9241      	str	r2, [sp, #260]	@ 0x104
 801344e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8013450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013454:	9241      	str	r2, [sp, #260]	@ 0x104
 8013456:	2210      	movs	r2, #16
 8013458:	2b6e      	cmp	r3, #110	@ 0x6e
 801345a:	9242      	str	r2, [sp, #264]	@ 0x108
 801345c:	d902      	bls.n	8013464 <__ssvfiscanf_r+0x1e0>
 801345e:	e005      	b.n	801346c <__ssvfiscanf_r+0x1e8>
 8013460:	2300      	movs	r3, #0
 8013462:	9342      	str	r3, [sp, #264]	@ 0x108
 8013464:	2303      	movs	r3, #3
 8013466:	e002      	b.n	801346e <__ssvfiscanf_r+0x1ea>
 8013468:	2308      	movs	r3, #8
 801346a:	9342      	str	r3, [sp, #264]	@ 0x108
 801346c:	2304      	movs	r3, #4
 801346e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8013470:	6863      	ldr	r3, [r4, #4]
 8013472:	2b00      	cmp	r3, #0
 8013474:	dd39      	ble.n	80134ea <__ssvfiscanf_r+0x266>
 8013476:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8013478:	0659      	lsls	r1, r3, #25
 801347a:	d404      	bmi.n	8013486 <__ssvfiscanf_r+0x202>
 801347c:	6823      	ldr	r3, [r4, #0]
 801347e:	781a      	ldrb	r2, [r3, #0]
 8013480:	5cba      	ldrb	r2, [r7, r2]
 8013482:	0712      	lsls	r2, r2, #28
 8013484:	d438      	bmi.n	80134f8 <__ssvfiscanf_r+0x274>
 8013486:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8013488:	2b02      	cmp	r3, #2
 801348a:	dc47      	bgt.n	801351c <__ssvfiscanf_r+0x298>
 801348c:	466b      	mov	r3, sp
 801348e:	4622      	mov	r2, r4
 8013490:	a941      	add	r1, sp, #260	@ 0x104
 8013492:	4630      	mov	r0, r6
 8013494:	f000 f9ae 	bl	80137f4 <_scanf_chars>
 8013498:	2801      	cmp	r0, #1
 801349a:	d064      	beq.n	8013566 <__ssvfiscanf_r+0x2e2>
 801349c:	2802      	cmp	r0, #2
 801349e:	f47f af19 	bne.w	80132d4 <__ssvfiscanf_r+0x50>
 80134a2:	e7c9      	b.n	8013438 <__ssvfiscanf_r+0x1b4>
 80134a4:	220a      	movs	r2, #10
 80134a6:	e7d7      	b.n	8013458 <__ssvfiscanf_r+0x1d4>
 80134a8:	4629      	mov	r1, r5
 80134aa:	4640      	mov	r0, r8
 80134ac:	f000 fc32 	bl	8013d14 <__sccl>
 80134b0:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80134b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80134b8:	4605      	mov	r5, r0
 80134ba:	2301      	movs	r3, #1
 80134bc:	e7d7      	b.n	801346e <__ssvfiscanf_r+0x1ea>
 80134be:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80134c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80134c4:	9341      	str	r3, [sp, #260]	@ 0x104
 80134c6:	2300      	movs	r3, #0
 80134c8:	e7d1      	b.n	801346e <__ssvfiscanf_r+0x1ea>
 80134ca:	2302      	movs	r3, #2
 80134cc:	e7cf      	b.n	801346e <__ssvfiscanf_r+0x1ea>
 80134ce:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80134d0:	06c3      	lsls	r3, r0, #27
 80134d2:	f53f aeff 	bmi.w	80132d4 <__ssvfiscanf_r+0x50>
 80134d6:	9b00      	ldr	r3, [sp, #0]
 80134d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80134da:	1d19      	adds	r1, r3, #4
 80134dc:	9100      	str	r1, [sp, #0]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	07c0      	lsls	r0, r0, #31
 80134e2:	bf4c      	ite	mi
 80134e4:	801a      	strhmi	r2, [r3, #0]
 80134e6:	601a      	strpl	r2, [r3, #0]
 80134e8:	e6f4      	b.n	80132d4 <__ssvfiscanf_r+0x50>
 80134ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80134ec:	4621      	mov	r1, r4
 80134ee:	4630      	mov	r0, r6
 80134f0:	4798      	blx	r3
 80134f2:	2800      	cmp	r0, #0
 80134f4:	d0bf      	beq.n	8013476 <__ssvfiscanf_r+0x1f2>
 80134f6:	e79f      	b.n	8013438 <__ssvfiscanf_r+0x1b4>
 80134f8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80134fa:	3201      	adds	r2, #1
 80134fc:	9245      	str	r2, [sp, #276]	@ 0x114
 80134fe:	6862      	ldr	r2, [r4, #4]
 8013500:	3a01      	subs	r2, #1
 8013502:	2a00      	cmp	r2, #0
 8013504:	6062      	str	r2, [r4, #4]
 8013506:	dd02      	ble.n	801350e <__ssvfiscanf_r+0x28a>
 8013508:	3301      	adds	r3, #1
 801350a:	6023      	str	r3, [r4, #0]
 801350c:	e7b6      	b.n	801347c <__ssvfiscanf_r+0x1f8>
 801350e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013510:	4621      	mov	r1, r4
 8013512:	4630      	mov	r0, r6
 8013514:	4798      	blx	r3
 8013516:	2800      	cmp	r0, #0
 8013518:	d0b0      	beq.n	801347c <__ssvfiscanf_r+0x1f8>
 801351a:	e78d      	b.n	8013438 <__ssvfiscanf_r+0x1b4>
 801351c:	2b04      	cmp	r3, #4
 801351e:	dc0f      	bgt.n	8013540 <__ssvfiscanf_r+0x2bc>
 8013520:	466b      	mov	r3, sp
 8013522:	4622      	mov	r2, r4
 8013524:	a941      	add	r1, sp, #260	@ 0x104
 8013526:	4630      	mov	r0, r6
 8013528:	f000 f9be 	bl	80138a8 <_scanf_i>
 801352c:	e7b4      	b.n	8013498 <__ssvfiscanf_r+0x214>
 801352e:	bf00      	nop
 8013530:	080131d1 	.word	0x080131d1
 8013534:	0801324b 	.word	0x0801324b
 8013538:	08016641 	.word	0x08016641
 801353c:	080164cc 	.word	0x080164cc
 8013540:	4b0a      	ldr	r3, [pc, #40]	@ (801356c <__ssvfiscanf_r+0x2e8>)
 8013542:	2b00      	cmp	r3, #0
 8013544:	f43f aec6 	beq.w	80132d4 <__ssvfiscanf_r+0x50>
 8013548:	466b      	mov	r3, sp
 801354a:	4622      	mov	r2, r4
 801354c:	a941      	add	r1, sp, #260	@ 0x104
 801354e:	4630      	mov	r0, r6
 8013550:	f3af 8000 	nop.w
 8013554:	e7a0      	b.n	8013498 <__ssvfiscanf_r+0x214>
 8013556:	89a3      	ldrh	r3, [r4, #12]
 8013558:	065b      	lsls	r3, r3, #25
 801355a:	f53f af71 	bmi.w	8013440 <__ssvfiscanf_r+0x1bc>
 801355e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8013562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013566:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8013568:	e7f9      	b.n	801355e <__ssvfiscanf_r+0x2da>
 801356a:	bf00      	nop
 801356c:	00000000 	.word	0x00000000

08013570 <__sfputc_r>:
 8013570:	6893      	ldr	r3, [r2, #8]
 8013572:	3b01      	subs	r3, #1
 8013574:	2b00      	cmp	r3, #0
 8013576:	b410      	push	{r4}
 8013578:	6093      	str	r3, [r2, #8]
 801357a:	da08      	bge.n	801358e <__sfputc_r+0x1e>
 801357c:	6994      	ldr	r4, [r2, #24]
 801357e:	42a3      	cmp	r3, r4
 8013580:	db01      	blt.n	8013586 <__sfputc_r+0x16>
 8013582:	290a      	cmp	r1, #10
 8013584:	d103      	bne.n	801358e <__sfputc_r+0x1e>
 8013586:	f85d 4b04 	ldr.w	r4, [sp], #4
 801358a:	f7fe ba62 	b.w	8011a52 <__swbuf_r>
 801358e:	6813      	ldr	r3, [r2, #0]
 8013590:	1c58      	adds	r0, r3, #1
 8013592:	6010      	str	r0, [r2, #0]
 8013594:	7019      	strb	r1, [r3, #0]
 8013596:	4608      	mov	r0, r1
 8013598:	f85d 4b04 	ldr.w	r4, [sp], #4
 801359c:	4770      	bx	lr

0801359e <__sfputs_r>:
 801359e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a0:	4606      	mov	r6, r0
 80135a2:	460f      	mov	r7, r1
 80135a4:	4614      	mov	r4, r2
 80135a6:	18d5      	adds	r5, r2, r3
 80135a8:	42ac      	cmp	r4, r5
 80135aa:	d101      	bne.n	80135b0 <__sfputs_r+0x12>
 80135ac:	2000      	movs	r0, #0
 80135ae:	e007      	b.n	80135c0 <__sfputs_r+0x22>
 80135b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135b4:	463a      	mov	r2, r7
 80135b6:	4630      	mov	r0, r6
 80135b8:	f7ff ffda 	bl	8013570 <__sfputc_r>
 80135bc:	1c43      	adds	r3, r0, #1
 80135be:	d1f3      	bne.n	80135a8 <__sfputs_r+0xa>
 80135c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080135c4 <_vfiprintf_r>:
 80135c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135c8:	460d      	mov	r5, r1
 80135ca:	b09d      	sub	sp, #116	@ 0x74
 80135cc:	4614      	mov	r4, r2
 80135ce:	4698      	mov	r8, r3
 80135d0:	4606      	mov	r6, r0
 80135d2:	b118      	cbz	r0, 80135dc <_vfiprintf_r+0x18>
 80135d4:	6a03      	ldr	r3, [r0, #32]
 80135d6:	b90b      	cbnz	r3, 80135dc <_vfiprintf_r+0x18>
 80135d8:	f7fe f91c 	bl	8011814 <__sinit>
 80135dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80135de:	07d9      	lsls	r1, r3, #31
 80135e0:	d405      	bmi.n	80135ee <_vfiprintf_r+0x2a>
 80135e2:	89ab      	ldrh	r3, [r5, #12]
 80135e4:	059a      	lsls	r2, r3, #22
 80135e6:	d402      	bmi.n	80135ee <_vfiprintf_r+0x2a>
 80135e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80135ea:	f7fe fb7e 	bl	8011cea <__retarget_lock_acquire_recursive>
 80135ee:	89ab      	ldrh	r3, [r5, #12]
 80135f0:	071b      	lsls	r3, r3, #28
 80135f2:	d501      	bpl.n	80135f8 <_vfiprintf_r+0x34>
 80135f4:	692b      	ldr	r3, [r5, #16]
 80135f6:	b99b      	cbnz	r3, 8013620 <_vfiprintf_r+0x5c>
 80135f8:	4629      	mov	r1, r5
 80135fa:	4630      	mov	r0, r6
 80135fc:	f7fe fa68 	bl	8011ad0 <__swsetup_r>
 8013600:	b170      	cbz	r0, 8013620 <_vfiprintf_r+0x5c>
 8013602:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013604:	07dc      	lsls	r4, r3, #31
 8013606:	d504      	bpl.n	8013612 <_vfiprintf_r+0x4e>
 8013608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801360c:	b01d      	add	sp, #116	@ 0x74
 801360e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013612:	89ab      	ldrh	r3, [r5, #12]
 8013614:	0598      	lsls	r0, r3, #22
 8013616:	d4f7      	bmi.n	8013608 <_vfiprintf_r+0x44>
 8013618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801361a:	f7fe fb67 	bl	8011cec <__retarget_lock_release_recursive>
 801361e:	e7f3      	b.n	8013608 <_vfiprintf_r+0x44>
 8013620:	2300      	movs	r3, #0
 8013622:	9309      	str	r3, [sp, #36]	@ 0x24
 8013624:	2320      	movs	r3, #32
 8013626:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801362a:	f8cd 800c 	str.w	r8, [sp, #12]
 801362e:	2330      	movs	r3, #48	@ 0x30
 8013630:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80137e0 <_vfiprintf_r+0x21c>
 8013634:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013638:	f04f 0901 	mov.w	r9, #1
 801363c:	4623      	mov	r3, r4
 801363e:	469a      	mov	sl, r3
 8013640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013644:	b10a      	cbz	r2, 801364a <_vfiprintf_r+0x86>
 8013646:	2a25      	cmp	r2, #37	@ 0x25
 8013648:	d1f9      	bne.n	801363e <_vfiprintf_r+0x7a>
 801364a:	ebba 0b04 	subs.w	fp, sl, r4
 801364e:	d00b      	beq.n	8013668 <_vfiprintf_r+0xa4>
 8013650:	465b      	mov	r3, fp
 8013652:	4622      	mov	r2, r4
 8013654:	4629      	mov	r1, r5
 8013656:	4630      	mov	r0, r6
 8013658:	f7ff ffa1 	bl	801359e <__sfputs_r>
 801365c:	3001      	adds	r0, #1
 801365e:	f000 80a7 	beq.w	80137b0 <_vfiprintf_r+0x1ec>
 8013662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013664:	445a      	add	r2, fp
 8013666:	9209      	str	r2, [sp, #36]	@ 0x24
 8013668:	f89a 3000 	ldrb.w	r3, [sl]
 801366c:	2b00      	cmp	r3, #0
 801366e:	f000 809f 	beq.w	80137b0 <_vfiprintf_r+0x1ec>
 8013672:	2300      	movs	r3, #0
 8013674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801367c:	f10a 0a01 	add.w	sl, sl, #1
 8013680:	9304      	str	r3, [sp, #16]
 8013682:	9307      	str	r3, [sp, #28]
 8013684:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013688:	931a      	str	r3, [sp, #104]	@ 0x68
 801368a:	4654      	mov	r4, sl
 801368c:	2205      	movs	r2, #5
 801368e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013692:	4853      	ldr	r0, [pc, #332]	@ (80137e0 <_vfiprintf_r+0x21c>)
 8013694:	f7ec fe4c 	bl	8000330 <memchr>
 8013698:	9a04      	ldr	r2, [sp, #16]
 801369a:	b9d8      	cbnz	r0, 80136d4 <_vfiprintf_r+0x110>
 801369c:	06d1      	lsls	r1, r2, #27
 801369e:	bf44      	itt	mi
 80136a0:	2320      	movmi	r3, #32
 80136a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136a6:	0713      	lsls	r3, r2, #28
 80136a8:	bf44      	itt	mi
 80136aa:	232b      	movmi	r3, #43	@ 0x2b
 80136ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80136b0:	f89a 3000 	ldrb.w	r3, [sl]
 80136b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80136b6:	d015      	beq.n	80136e4 <_vfiprintf_r+0x120>
 80136b8:	9a07      	ldr	r2, [sp, #28]
 80136ba:	4654      	mov	r4, sl
 80136bc:	2000      	movs	r0, #0
 80136be:	f04f 0c0a 	mov.w	ip, #10
 80136c2:	4621      	mov	r1, r4
 80136c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136c8:	3b30      	subs	r3, #48	@ 0x30
 80136ca:	2b09      	cmp	r3, #9
 80136cc:	d94b      	bls.n	8013766 <_vfiprintf_r+0x1a2>
 80136ce:	b1b0      	cbz	r0, 80136fe <_vfiprintf_r+0x13a>
 80136d0:	9207      	str	r2, [sp, #28]
 80136d2:	e014      	b.n	80136fe <_vfiprintf_r+0x13a>
 80136d4:	eba0 0308 	sub.w	r3, r0, r8
 80136d8:	fa09 f303 	lsl.w	r3, r9, r3
 80136dc:	4313      	orrs	r3, r2
 80136de:	9304      	str	r3, [sp, #16]
 80136e0:	46a2      	mov	sl, r4
 80136e2:	e7d2      	b.n	801368a <_vfiprintf_r+0xc6>
 80136e4:	9b03      	ldr	r3, [sp, #12]
 80136e6:	1d19      	adds	r1, r3, #4
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	9103      	str	r1, [sp, #12]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	bfbb      	ittet	lt
 80136f0:	425b      	neglt	r3, r3
 80136f2:	f042 0202 	orrlt.w	r2, r2, #2
 80136f6:	9307      	strge	r3, [sp, #28]
 80136f8:	9307      	strlt	r3, [sp, #28]
 80136fa:	bfb8      	it	lt
 80136fc:	9204      	strlt	r2, [sp, #16]
 80136fe:	7823      	ldrb	r3, [r4, #0]
 8013700:	2b2e      	cmp	r3, #46	@ 0x2e
 8013702:	d10a      	bne.n	801371a <_vfiprintf_r+0x156>
 8013704:	7863      	ldrb	r3, [r4, #1]
 8013706:	2b2a      	cmp	r3, #42	@ 0x2a
 8013708:	d132      	bne.n	8013770 <_vfiprintf_r+0x1ac>
 801370a:	9b03      	ldr	r3, [sp, #12]
 801370c:	1d1a      	adds	r2, r3, #4
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	9203      	str	r2, [sp, #12]
 8013712:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013716:	3402      	adds	r4, #2
 8013718:	9305      	str	r3, [sp, #20]
 801371a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80137f0 <_vfiprintf_r+0x22c>
 801371e:	7821      	ldrb	r1, [r4, #0]
 8013720:	2203      	movs	r2, #3
 8013722:	4650      	mov	r0, sl
 8013724:	f7ec fe04 	bl	8000330 <memchr>
 8013728:	b138      	cbz	r0, 801373a <_vfiprintf_r+0x176>
 801372a:	9b04      	ldr	r3, [sp, #16]
 801372c:	eba0 000a 	sub.w	r0, r0, sl
 8013730:	2240      	movs	r2, #64	@ 0x40
 8013732:	4082      	lsls	r2, r0
 8013734:	4313      	orrs	r3, r2
 8013736:	3401      	adds	r4, #1
 8013738:	9304      	str	r3, [sp, #16]
 801373a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801373e:	4829      	ldr	r0, [pc, #164]	@ (80137e4 <_vfiprintf_r+0x220>)
 8013740:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013744:	2206      	movs	r2, #6
 8013746:	f7ec fdf3 	bl	8000330 <memchr>
 801374a:	2800      	cmp	r0, #0
 801374c:	d03f      	beq.n	80137ce <_vfiprintf_r+0x20a>
 801374e:	4b26      	ldr	r3, [pc, #152]	@ (80137e8 <_vfiprintf_r+0x224>)
 8013750:	bb1b      	cbnz	r3, 801379a <_vfiprintf_r+0x1d6>
 8013752:	9b03      	ldr	r3, [sp, #12]
 8013754:	3307      	adds	r3, #7
 8013756:	f023 0307 	bic.w	r3, r3, #7
 801375a:	3308      	adds	r3, #8
 801375c:	9303      	str	r3, [sp, #12]
 801375e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013760:	443b      	add	r3, r7
 8013762:	9309      	str	r3, [sp, #36]	@ 0x24
 8013764:	e76a      	b.n	801363c <_vfiprintf_r+0x78>
 8013766:	fb0c 3202 	mla	r2, ip, r2, r3
 801376a:	460c      	mov	r4, r1
 801376c:	2001      	movs	r0, #1
 801376e:	e7a8      	b.n	80136c2 <_vfiprintf_r+0xfe>
 8013770:	2300      	movs	r3, #0
 8013772:	3401      	adds	r4, #1
 8013774:	9305      	str	r3, [sp, #20]
 8013776:	4619      	mov	r1, r3
 8013778:	f04f 0c0a 	mov.w	ip, #10
 801377c:	4620      	mov	r0, r4
 801377e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013782:	3a30      	subs	r2, #48	@ 0x30
 8013784:	2a09      	cmp	r2, #9
 8013786:	d903      	bls.n	8013790 <_vfiprintf_r+0x1cc>
 8013788:	2b00      	cmp	r3, #0
 801378a:	d0c6      	beq.n	801371a <_vfiprintf_r+0x156>
 801378c:	9105      	str	r1, [sp, #20]
 801378e:	e7c4      	b.n	801371a <_vfiprintf_r+0x156>
 8013790:	fb0c 2101 	mla	r1, ip, r1, r2
 8013794:	4604      	mov	r4, r0
 8013796:	2301      	movs	r3, #1
 8013798:	e7f0      	b.n	801377c <_vfiprintf_r+0x1b8>
 801379a:	ab03      	add	r3, sp, #12
 801379c:	9300      	str	r3, [sp, #0]
 801379e:	462a      	mov	r2, r5
 80137a0:	4b12      	ldr	r3, [pc, #72]	@ (80137ec <_vfiprintf_r+0x228>)
 80137a2:	a904      	add	r1, sp, #16
 80137a4:	4630      	mov	r0, r6
 80137a6:	f7fd fc03 	bl	8010fb0 <_printf_float>
 80137aa:	4607      	mov	r7, r0
 80137ac:	1c78      	adds	r0, r7, #1
 80137ae:	d1d6      	bne.n	801375e <_vfiprintf_r+0x19a>
 80137b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80137b2:	07d9      	lsls	r1, r3, #31
 80137b4:	d405      	bmi.n	80137c2 <_vfiprintf_r+0x1fe>
 80137b6:	89ab      	ldrh	r3, [r5, #12]
 80137b8:	059a      	lsls	r2, r3, #22
 80137ba:	d402      	bmi.n	80137c2 <_vfiprintf_r+0x1fe>
 80137bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80137be:	f7fe fa95 	bl	8011cec <__retarget_lock_release_recursive>
 80137c2:	89ab      	ldrh	r3, [r5, #12]
 80137c4:	065b      	lsls	r3, r3, #25
 80137c6:	f53f af1f 	bmi.w	8013608 <_vfiprintf_r+0x44>
 80137ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80137cc:	e71e      	b.n	801360c <_vfiprintf_r+0x48>
 80137ce:	ab03      	add	r3, sp, #12
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	462a      	mov	r2, r5
 80137d4:	4b05      	ldr	r3, [pc, #20]	@ (80137ec <_vfiprintf_r+0x228>)
 80137d6:	a904      	add	r1, sp, #16
 80137d8:	4630      	mov	r0, r6
 80137da:	f7fd fe71 	bl	80114c0 <_printf_i>
 80137de:	e7e4      	b.n	80137aa <_vfiprintf_r+0x1e6>
 80137e0:	080164d0 	.word	0x080164d0
 80137e4:	080164d6 	.word	0x080164d6
 80137e8:	08010fb1 	.word	0x08010fb1
 80137ec:	0801359f 	.word	0x0801359f
 80137f0:	080164cc 	.word	0x080164cc

080137f4 <_scanf_chars>:
 80137f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137f8:	4615      	mov	r5, r2
 80137fa:	688a      	ldr	r2, [r1, #8]
 80137fc:	4680      	mov	r8, r0
 80137fe:	460c      	mov	r4, r1
 8013800:	b932      	cbnz	r2, 8013810 <_scanf_chars+0x1c>
 8013802:	698a      	ldr	r2, [r1, #24]
 8013804:	2a00      	cmp	r2, #0
 8013806:	bf14      	ite	ne
 8013808:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 801380c:	2201      	moveq	r2, #1
 801380e:	608a      	str	r2, [r1, #8]
 8013810:	6822      	ldr	r2, [r4, #0]
 8013812:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80138a4 <_scanf_chars+0xb0>
 8013816:	06d1      	lsls	r1, r2, #27
 8013818:	bf5f      	itttt	pl
 801381a:	681a      	ldrpl	r2, [r3, #0]
 801381c:	1d11      	addpl	r1, r2, #4
 801381e:	6019      	strpl	r1, [r3, #0]
 8013820:	6816      	ldrpl	r6, [r2, #0]
 8013822:	2700      	movs	r7, #0
 8013824:	69a0      	ldr	r0, [r4, #24]
 8013826:	b188      	cbz	r0, 801384c <_scanf_chars+0x58>
 8013828:	2801      	cmp	r0, #1
 801382a:	d107      	bne.n	801383c <_scanf_chars+0x48>
 801382c:	682b      	ldr	r3, [r5, #0]
 801382e:	781a      	ldrb	r2, [r3, #0]
 8013830:	6963      	ldr	r3, [r4, #20]
 8013832:	5c9b      	ldrb	r3, [r3, r2]
 8013834:	b953      	cbnz	r3, 801384c <_scanf_chars+0x58>
 8013836:	2f00      	cmp	r7, #0
 8013838:	d031      	beq.n	801389e <_scanf_chars+0xaa>
 801383a:	e022      	b.n	8013882 <_scanf_chars+0x8e>
 801383c:	2802      	cmp	r0, #2
 801383e:	d120      	bne.n	8013882 <_scanf_chars+0x8e>
 8013840:	682b      	ldr	r3, [r5, #0]
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	f819 3003 	ldrb.w	r3, [r9, r3]
 8013848:	071b      	lsls	r3, r3, #28
 801384a:	d41a      	bmi.n	8013882 <_scanf_chars+0x8e>
 801384c:	6823      	ldr	r3, [r4, #0]
 801384e:	06da      	lsls	r2, r3, #27
 8013850:	bf5e      	ittt	pl
 8013852:	682b      	ldrpl	r3, [r5, #0]
 8013854:	781b      	ldrbpl	r3, [r3, #0]
 8013856:	f806 3b01 	strbpl.w	r3, [r6], #1
 801385a:	682a      	ldr	r2, [r5, #0]
 801385c:	686b      	ldr	r3, [r5, #4]
 801385e:	3201      	adds	r2, #1
 8013860:	602a      	str	r2, [r5, #0]
 8013862:	68a2      	ldr	r2, [r4, #8]
 8013864:	3b01      	subs	r3, #1
 8013866:	3a01      	subs	r2, #1
 8013868:	606b      	str	r3, [r5, #4]
 801386a:	3701      	adds	r7, #1
 801386c:	60a2      	str	r2, [r4, #8]
 801386e:	b142      	cbz	r2, 8013882 <_scanf_chars+0x8e>
 8013870:	2b00      	cmp	r3, #0
 8013872:	dcd7      	bgt.n	8013824 <_scanf_chars+0x30>
 8013874:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013878:	4629      	mov	r1, r5
 801387a:	4640      	mov	r0, r8
 801387c:	4798      	blx	r3
 801387e:	2800      	cmp	r0, #0
 8013880:	d0d0      	beq.n	8013824 <_scanf_chars+0x30>
 8013882:	6823      	ldr	r3, [r4, #0]
 8013884:	f013 0310 	ands.w	r3, r3, #16
 8013888:	d105      	bne.n	8013896 <_scanf_chars+0xa2>
 801388a:	68e2      	ldr	r2, [r4, #12]
 801388c:	3201      	adds	r2, #1
 801388e:	60e2      	str	r2, [r4, #12]
 8013890:	69a2      	ldr	r2, [r4, #24]
 8013892:	b102      	cbz	r2, 8013896 <_scanf_chars+0xa2>
 8013894:	7033      	strb	r3, [r6, #0]
 8013896:	6923      	ldr	r3, [r4, #16]
 8013898:	443b      	add	r3, r7
 801389a:	6123      	str	r3, [r4, #16]
 801389c:	2000      	movs	r0, #0
 801389e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138a2:	bf00      	nop
 80138a4:	08016641 	.word	0x08016641

080138a8 <_scanf_i>:
 80138a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ac:	4698      	mov	r8, r3
 80138ae:	4b74      	ldr	r3, [pc, #464]	@ (8013a80 <_scanf_i+0x1d8>)
 80138b0:	460c      	mov	r4, r1
 80138b2:	4682      	mov	sl, r0
 80138b4:	4616      	mov	r6, r2
 80138b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80138ba:	b087      	sub	sp, #28
 80138bc:	ab03      	add	r3, sp, #12
 80138be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80138c2:	4b70      	ldr	r3, [pc, #448]	@ (8013a84 <_scanf_i+0x1dc>)
 80138c4:	69a1      	ldr	r1, [r4, #24]
 80138c6:	4a70      	ldr	r2, [pc, #448]	@ (8013a88 <_scanf_i+0x1e0>)
 80138c8:	2903      	cmp	r1, #3
 80138ca:	bf08      	it	eq
 80138cc:	461a      	moveq	r2, r3
 80138ce:	68a3      	ldr	r3, [r4, #8]
 80138d0:	9201      	str	r2, [sp, #4]
 80138d2:	1e5a      	subs	r2, r3, #1
 80138d4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80138d8:	bf88      	it	hi
 80138da:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80138de:	4627      	mov	r7, r4
 80138e0:	bf82      	ittt	hi
 80138e2:	eb03 0905 	addhi.w	r9, r3, r5
 80138e6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80138ea:	60a3      	strhi	r3, [r4, #8]
 80138ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80138f0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80138f4:	bf98      	it	ls
 80138f6:	f04f 0900 	movls.w	r9, #0
 80138fa:	6023      	str	r3, [r4, #0]
 80138fc:	463d      	mov	r5, r7
 80138fe:	f04f 0b00 	mov.w	fp, #0
 8013902:	6831      	ldr	r1, [r6, #0]
 8013904:	ab03      	add	r3, sp, #12
 8013906:	7809      	ldrb	r1, [r1, #0]
 8013908:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801390c:	2202      	movs	r2, #2
 801390e:	f7ec fd0f 	bl	8000330 <memchr>
 8013912:	b328      	cbz	r0, 8013960 <_scanf_i+0xb8>
 8013914:	f1bb 0f01 	cmp.w	fp, #1
 8013918:	d159      	bne.n	80139ce <_scanf_i+0x126>
 801391a:	6862      	ldr	r2, [r4, #4]
 801391c:	b92a      	cbnz	r2, 801392a <_scanf_i+0x82>
 801391e:	6822      	ldr	r2, [r4, #0]
 8013920:	2108      	movs	r1, #8
 8013922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8013926:	6061      	str	r1, [r4, #4]
 8013928:	6022      	str	r2, [r4, #0]
 801392a:	6822      	ldr	r2, [r4, #0]
 801392c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8013930:	6022      	str	r2, [r4, #0]
 8013932:	68a2      	ldr	r2, [r4, #8]
 8013934:	1e51      	subs	r1, r2, #1
 8013936:	60a1      	str	r1, [r4, #8]
 8013938:	b192      	cbz	r2, 8013960 <_scanf_i+0xb8>
 801393a:	6832      	ldr	r2, [r6, #0]
 801393c:	1c51      	adds	r1, r2, #1
 801393e:	6031      	str	r1, [r6, #0]
 8013940:	7812      	ldrb	r2, [r2, #0]
 8013942:	f805 2b01 	strb.w	r2, [r5], #1
 8013946:	6872      	ldr	r2, [r6, #4]
 8013948:	3a01      	subs	r2, #1
 801394a:	2a00      	cmp	r2, #0
 801394c:	6072      	str	r2, [r6, #4]
 801394e:	dc07      	bgt.n	8013960 <_scanf_i+0xb8>
 8013950:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8013954:	4631      	mov	r1, r6
 8013956:	4650      	mov	r0, sl
 8013958:	4790      	blx	r2
 801395a:	2800      	cmp	r0, #0
 801395c:	f040 8085 	bne.w	8013a6a <_scanf_i+0x1c2>
 8013960:	f10b 0b01 	add.w	fp, fp, #1
 8013964:	f1bb 0f03 	cmp.w	fp, #3
 8013968:	d1cb      	bne.n	8013902 <_scanf_i+0x5a>
 801396a:	6863      	ldr	r3, [r4, #4]
 801396c:	b90b      	cbnz	r3, 8013972 <_scanf_i+0xca>
 801396e:	230a      	movs	r3, #10
 8013970:	6063      	str	r3, [r4, #4]
 8013972:	6863      	ldr	r3, [r4, #4]
 8013974:	4945      	ldr	r1, [pc, #276]	@ (8013a8c <_scanf_i+0x1e4>)
 8013976:	6960      	ldr	r0, [r4, #20]
 8013978:	1ac9      	subs	r1, r1, r3
 801397a:	f000 f9cb 	bl	8013d14 <__sccl>
 801397e:	f04f 0b00 	mov.w	fp, #0
 8013982:	68a3      	ldr	r3, [r4, #8]
 8013984:	6822      	ldr	r2, [r4, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d03d      	beq.n	8013a06 <_scanf_i+0x15e>
 801398a:	6831      	ldr	r1, [r6, #0]
 801398c:	6960      	ldr	r0, [r4, #20]
 801398e:	f891 c000 	ldrb.w	ip, [r1]
 8013992:	f810 000c 	ldrb.w	r0, [r0, ip]
 8013996:	2800      	cmp	r0, #0
 8013998:	d035      	beq.n	8013a06 <_scanf_i+0x15e>
 801399a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801399e:	d124      	bne.n	80139ea <_scanf_i+0x142>
 80139a0:	0510      	lsls	r0, r2, #20
 80139a2:	d522      	bpl.n	80139ea <_scanf_i+0x142>
 80139a4:	f10b 0b01 	add.w	fp, fp, #1
 80139a8:	f1b9 0f00 	cmp.w	r9, #0
 80139ac:	d003      	beq.n	80139b6 <_scanf_i+0x10e>
 80139ae:	3301      	adds	r3, #1
 80139b0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80139b4:	60a3      	str	r3, [r4, #8]
 80139b6:	6873      	ldr	r3, [r6, #4]
 80139b8:	3b01      	subs	r3, #1
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	6073      	str	r3, [r6, #4]
 80139be:	dd1b      	ble.n	80139f8 <_scanf_i+0x150>
 80139c0:	6833      	ldr	r3, [r6, #0]
 80139c2:	3301      	adds	r3, #1
 80139c4:	6033      	str	r3, [r6, #0]
 80139c6:	68a3      	ldr	r3, [r4, #8]
 80139c8:	3b01      	subs	r3, #1
 80139ca:	60a3      	str	r3, [r4, #8]
 80139cc:	e7d9      	b.n	8013982 <_scanf_i+0xda>
 80139ce:	f1bb 0f02 	cmp.w	fp, #2
 80139d2:	d1ae      	bne.n	8013932 <_scanf_i+0x8a>
 80139d4:	6822      	ldr	r2, [r4, #0]
 80139d6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80139da:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80139de:	d1c4      	bne.n	801396a <_scanf_i+0xc2>
 80139e0:	2110      	movs	r1, #16
 80139e2:	6061      	str	r1, [r4, #4]
 80139e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80139e8:	e7a2      	b.n	8013930 <_scanf_i+0x88>
 80139ea:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80139ee:	6022      	str	r2, [r4, #0]
 80139f0:	780b      	ldrb	r3, [r1, #0]
 80139f2:	f805 3b01 	strb.w	r3, [r5], #1
 80139f6:	e7de      	b.n	80139b6 <_scanf_i+0x10e>
 80139f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80139fc:	4631      	mov	r1, r6
 80139fe:	4650      	mov	r0, sl
 8013a00:	4798      	blx	r3
 8013a02:	2800      	cmp	r0, #0
 8013a04:	d0df      	beq.n	80139c6 <_scanf_i+0x11e>
 8013a06:	6823      	ldr	r3, [r4, #0]
 8013a08:	05d9      	lsls	r1, r3, #23
 8013a0a:	d50d      	bpl.n	8013a28 <_scanf_i+0x180>
 8013a0c:	42bd      	cmp	r5, r7
 8013a0e:	d909      	bls.n	8013a24 <_scanf_i+0x17c>
 8013a10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013a18:	4632      	mov	r2, r6
 8013a1a:	4650      	mov	r0, sl
 8013a1c:	4798      	blx	r3
 8013a1e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8013a22:	464d      	mov	r5, r9
 8013a24:	42bd      	cmp	r5, r7
 8013a26:	d028      	beq.n	8013a7a <_scanf_i+0x1d2>
 8013a28:	6822      	ldr	r2, [r4, #0]
 8013a2a:	f012 0210 	ands.w	r2, r2, #16
 8013a2e:	d113      	bne.n	8013a58 <_scanf_i+0x1b0>
 8013a30:	702a      	strb	r2, [r5, #0]
 8013a32:	6863      	ldr	r3, [r4, #4]
 8013a34:	9e01      	ldr	r6, [sp, #4]
 8013a36:	4639      	mov	r1, r7
 8013a38:	4650      	mov	r0, sl
 8013a3a:	47b0      	blx	r6
 8013a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8013a40:	6821      	ldr	r1, [r4, #0]
 8013a42:	1d1a      	adds	r2, r3, #4
 8013a44:	f8c8 2000 	str.w	r2, [r8]
 8013a48:	f011 0f20 	tst.w	r1, #32
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	d00f      	beq.n	8013a70 <_scanf_i+0x1c8>
 8013a50:	6018      	str	r0, [r3, #0]
 8013a52:	68e3      	ldr	r3, [r4, #12]
 8013a54:	3301      	adds	r3, #1
 8013a56:	60e3      	str	r3, [r4, #12]
 8013a58:	6923      	ldr	r3, [r4, #16]
 8013a5a:	1bed      	subs	r5, r5, r7
 8013a5c:	445d      	add	r5, fp
 8013a5e:	442b      	add	r3, r5
 8013a60:	6123      	str	r3, [r4, #16]
 8013a62:	2000      	movs	r0, #0
 8013a64:	b007      	add	sp, #28
 8013a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a6a:	f04f 0b00 	mov.w	fp, #0
 8013a6e:	e7ca      	b.n	8013a06 <_scanf_i+0x15e>
 8013a70:	07ca      	lsls	r2, r1, #31
 8013a72:	bf4c      	ite	mi
 8013a74:	8018      	strhmi	r0, [r3, #0]
 8013a76:	6018      	strpl	r0, [r3, #0]
 8013a78:	e7eb      	b.n	8013a52 <_scanf_i+0x1aa>
 8013a7a:	2001      	movs	r0, #1
 8013a7c:	e7f2      	b.n	8013a64 <_scanf_i+0x1bc>
 8013a7e:	bf00      	nop
 8013a80:	08016348 	.word	0x08016348
 8013a84:	08014039 	.word	0x08014039
 8013a88:	08014119 	.word	0x08014119
 8013a8c:	080164ed 	.word	0x080164ed

08013a90 <__sflush_r>:
 8013a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a98:	0716      	lsls	r6, r2, #28
 8013a9a:	4605      	mov	r5, r0
 8013a9c:	460c      	mov	r4, r1
 8013a9e:	d454      	bmi.n	8013b4a <__sflush_r+0xba>
 8013aa0:	684b      	ldr	r3, [r1, #4]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	dc02      	bgt.n	8013aac <__sflush_r+0x1c>
 8013aa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	dd48      	ble.n	8013b3e <__sflush_r+0xae>
 8013aac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013aae:	2e00      	cmp	r6, #0
 8013ab0:	d045      	beq.n	8013b3e <__sflush_r+0xae>
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013ab8:	682f      	ldr	r7, [r5, #0]
 8013aba:	6a21      	ldr	r1, [r4, #32]
 8013abc:	602b      	str	r3, [r5, #0]
 8013abe:	d030      	beq.n	8013b22 <__sflush_r+0x92>
 8013ac0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013ac2:	89a3      	ldrh	r3, [r4, #12]
 8013ac4:	0759      	lsls	r1, r3, #29
 8013ac6:	d505      	bpl.n	8013ad4 <__sflush_r+0x44>
 8013ac8:	6863      	ldr	r3, [r4, #4]
 8013aca:	1ad2      	subs	r2, r2, r3
 8013acc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013ace:	b10b      	cbz	r3, 8013ad4 <__sflush_r+0x44>
 8013ad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013ad2:	1ad2      	subs	r2, r2, r3
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013ad8:	6a21      	ldr	r1, [r4, #32]
 8013ada:	4628      	mov	r0, r5
 8013adc:	47b0      	blx	r6
 8013ade:	1c43      	adds	r3, r0, #1
 8013ae0:	89a3      	ldrh	r3, [r4, #12]
 8013ae2:	d106      	bne.n	8013af2 <__sflush_r+0x62>
 8013ae4:	6829      	ldr	r1, [r5, #0]
 8013ae6:	291d      	cmp	r1, #29
 8013ae8:	d82b      	bhi.n	8013b42 <__sflush_r+0xb2>
 8013aea:	4a2a      	ldr	r2, [pc, #168]	@ (8013b94 <__sflush_r+0x104>)
 8013aec:	40ca      	lsrs	r2, r1
 8013aee:	07d6      	lsls	r6, r2, #31
 8013af0:	d527      	bpl.n	8013b42 <__sflush_r+0xb2>
 8013af2:	2200      	movs	r2, #0
 8013af4:	6062      	str	r2, [r4, #4]
 8013af6:	04d9      	lsls	r1, r3, #19
 8013af8:	6922      	ldr	r2, [r4, #16]
 8013afa:	6022      	str	r2, [r4, #0]
 8013afc:	d504      	bpl.n	8013b08 <__sflush_r+0x78>
 8013afe:	1c42      	adds	r2, r0, #1
 8013b00:	d101      	bne.n	8013b06 <__sflush_r+0x76>
 8013b02:	682b      	ldr	r3, [r5, #0]
 8013b04:	b903      	cbnz	r3, 8013b08 <__sflush_r+0x78>
 8013b06:	6560      	str	r0, [r4, #84]	@ 0x54
 8013b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013b0a:	602f      	str	r7, [r5, #0]
 8013b0c:	b1b9      	cbz	r1, 8013b3e <__sflush_r+0xae>
 8013b0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013b12:	4299      	cmp	r1, r3
 8013b14:	d002      	beq.n	8013b1c <__sflush_r+0x8c>
 8013b16:	4628      	mov	r0, r5
 8013b18:	f7fe fee0 	bl	80128dc <_free_r>
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013b20:	e00d      	b.n	8013b3e <__sflush_r+0xae>
 8013b22:	2301      	movs	r3, #1
 8013b24:	4628      	mov	r0, r5
 8013b26:	47b0      	blx	r6
 8013b28:	4602      	mov	r2, r0
 8013b2a:	1c50      	adds	r0, r2, #1
 8013b2c:	d1c9      	bne.n	8013ac2 <__sflush_r+0x32>
 8013b2e:	682b      	ldr	r3, [r5, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d0c6      	beq.n	8013ac2 <__sflush_r+0x32>
 8013b34:	2b1d      	cmp	r3, #29
 8013b36:	d001      	beq.n	8013b3c <__sflush_r+0xac>
 8013b38:	2b16      	cmp	r3, #22
 8013b3a:	d11e      	bne.n	8013b7a <__sflush_r+0xea>
 8013b3c:	602f      	str	r7, [r5, #0]
 8013b3e:	2000      	movs	r0, #0
 8013b40:	e022      	b.n	8013b88 <__sflush_r+0xf8>
 8013b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b46:	b21b      	sxth	r3, r3
 8013b48:	e01b      	b.n	8013b82 <__sflush_r+0xf2>
 8013b4a:	690f      	ldr	r7, [r1, #16]
 8013b4c:	2f00      	cmp	r7, #0
 8013b4e:	d0f6      	beq.n	8013b3e <__sflush_r+0xae>
 8013b50:	0793      	lsls	r3, r2, #30
 8013b52:	680e      	ldr	r6, [r1, #0]
 8013b54:	bf08      	it	eq
 8013b56:	694b      	ldreq	r3, [r1, #20]
 8013b58:	600f      	str	r7, [r1, #0]
 8013b5a:	bf18      	it	ne
 8013b5c:	2300      	movne	r3, #0
 8013b5e:	eba6 0807 	sub.w	r8, r6, r7
 8013b62:	608b      	str	r3, [r1, #8]
 8013b64:	f1b8 0f00 	cmp.w	r8, #0
 8013b68:	dde9      	ble.n	8013b3e <__sflush_r+0xae>
 8013b6a:	6a21      	ldr	r1, [r4, #32]
 8013b6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013b6e:	4643      	mov	r3, r8
 8013b70:	463a      	mov	r2, r7
 8013b72:	4628      	mov	r0, r5
 8013b74:	47b0      	blx	r6
 8013b76:	2800      	cmp	r0, #0
 8013b78:	dc08      	bgt.n	8013b8c <__sflush_r+0xfc>
 8013b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b82:	81a3      	strh	r3, [r4, #12]
 8013b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b8c:	4407      	add	r7, r0
 8013b8e:	eba8 0800 	sub.w	r8, r8, r0
 8013b92:	e7e7      	b.n	8013b64 <__sflush_r+0xd4>
 8013b94:	20400001 	.word	0x20400001

08013b98 <_fflush_r>:
 8013b98:	b538      	push	{r3, r4, r5, lr}
 8013b9a:	690b      	ldr	r3, [r1, #16]
 8013b9c:	4605      	mov	r5, r0
 8013b9e:	460c      	mov	r4, r1
 8013ba0:	b913      	cbnz	r3, 8013ba8 <_fflush_r+0x10>
 8013ba2:	2500      	movs	r5, #0
 8013ba4:	4628      	mov	r0, r5
 8013ba6:	bd38      	pop	{r3, r4, r5, pc}
 8013ba8:	b118      	cbz	r0, 8013bb2 <_fflush_r+0x1a>
 8013baa:	6a03      	ldr	r3, [r0, #32]
 8013bac:	b90b      	cbnz	r3, 8013bb2 <_fflush_r+0x1a>
 8013bae:	f7fd fe31 	bl	8011814 <__sinit>
 8013bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d0f3      	beq.n	8013ba2 <_fflush_r+0xa>
 8013bba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013bbc:	07d0      	lsls	r0, r2, #31
 8013bbe:	d404      	bmi.n	8013bca <_fflush_r+0x32>
 8013bc0:	0599      	lsls	r1, r3, #22
 8013bc2:	d402      	bmi.n	8013bca <_fflush_r+0x32>
 8013bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013bc6:	f7fe f890 	bl	8011cea <__retarget_lock_acquire_recursive>
 8013bca:	4628      	mov	r0, r5
 8013bcc:	4621      	mov	r1, r4
 8013bce:	f7ff ff5f 	bl	8013a90 <__sflush_r>
 8013bd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013bd4:	07da      	lsls	r2, r3, #31
 8013bd6:	4605      	mov	r5, r0
 8013bd8:	d4e4      	bmi.n	8013ba4 <_fflush_r+0xc>
 8013bda:	89a3      	ldrh	r3, [r4, #12]
 8013bdc:	059b      	lsls	r3, r3, #22
 8013bde:	d4e1      	bmi.n	8013ba4 <_fflush_r+0xc>
 8013be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013be2:	f7fe f883 	bl	8011cec <__retarget_lock_release_recursive>
 8013be6:	e7dd      	b.n	8013ba4 <_fflush_r+0xc>

08013be8 <__swhatbuf_r>:
 8013be8:	b570      	push	{r4, r5, r6, lr}
 8013bea:	460c      	mov	r4, r1
 8013bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bf0:	2900      	cmp	r1, #0
 8013bf2:	b096      	sub	sp, #88	@ 0x58
 8013bf4:	4615      	mov	r5, r2
 8013bf6:	461e      	mov	r6, r3
 8013bf8:	da0d      	bge.n	8013c16 <__swhatbuf_r+0x2e>
 8013bfa:	89a3      	ldrh	r3, [r4, #12]
 8013bfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013c00:	f04f 0100 	mov.w	r1, #0
 8013c04:	bf14      	ite	ne
 8013c06:	2340      	movne	r3, #64	@ 0x40
 8013c08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	6031      	str	r1, [r6, #0]
 8013c10:	602b      	str	r3, [r5, #0]
 8013c12:	b016      	add	sp, #88	@ 0x58
 8013c14:	bd70      	pop	{r4, r5, r6, pc}
 8013c16:	466a      	mov	r2, sp
 8013c18:	f000 f8f0 	bl	8013dfc <_fstat_r>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	dbec      	blt.n	8013bfa <__swhatbuf_r+0x12>
 8013c20:	9901      	ldr	r1, [sp, #4]
 8013c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013c2a:	4259      	negs	r1, r3
 8013c2c:	4159      	adcs	r1, r3
 8013c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013c32:	e7eb      	b.n	8013c0c <__swhatbuf_r+0x24>

08013c34 <__smakebuf_r>:
 8013c34:	898b      	ldrh	r3, [r1, #12]
 8013c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c38:	079d      	lsls	r5, r3, #30
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	460c      	mov	r4, r1
 8013c3e:	d507      	bpl.n	8013c50 <__smakebuf_r+0x1c>
 8013c40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	6123      	str	r3, [r4, #16]
 8013c48:	2301      	movs	r3, #1
 8013c4a:	6163      	str	r3, [r4, #20]
 8013c4c:	b003      	add	sp, #12
 8013c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c50:	ab01      	add	r3, sp, #4
 8013c52:	466a      	mov	r2, sp
 8013c54:	f7ff ffc8 	bl	8013be8 <__swhatbuf_r>
 8013c58:	9f00      	ldr	r7, [sp, #0]
 8013c5a:	4605      	mov	r5, r0
 8013c5c:	4639      	mov	r1, r7
 8013c5e:	4630      	mov	r0, r6
 8013c60:	f7fe feb0 	bl	80129c4 <_malloc_r>
 8013c64:	b948      	cbnz	r0, 8013c7a <__smakebuf_r+0x46>
 8013c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c6a:	059a      	lsls	r2, r3, #22
 8013c6c:	d4ee      	bmi.n	8013c4c <__smakebuf_r+0x18>
 8013c6e:	f023 0303 	bic.w	r3, r3, #3
 8013c72:	f043 0302 	orr.w	r3, r3, #2
 8013c76:	81a3      	strh	r3, [r4, #12]
 8013c78:	e7e2      	b.n	8013c40 <__smakebuf_r+0xc>
 8013c7a:	89a3      	ldrh	r3, [r4, #12]
 8013c7c:	6020      	str	r0, [r4, #0]
 8013c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c82:	81a3      	strh	r3, [r4, #12]
 8013c84:	9b01      	ldr	r3, [sp, #4]
 8013c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013c8a:	b15b      	cbz	r3, 8013ca4 <__smakebuf_r+0x70>
 8013c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c90:	4630      	mov	r0, r6
 8013c92:	f000 f8c5 	bl	8013e20 <_isatty_r>
 8013c96:	b128      	cbz	r0, 8013ca4 <__smakebuf_r+0x70>
 8013c98:	89a3      	ldrh	r3, [r4, #12]
 8013c9a:	f023 0303 	bic.w	r3, r3, #3
 8013c9e:	f043 0301 	orr.w	r3, r3, #1
 8013ca2:	81a3      	strh	r3, [r4, #12]
 8013ca4:	89a3      	ldrh	r3, [r4, #12]
 8013ca6:	431d      	orrs	r5, r3
 8013ca8:	81a5      	strh	r5, [r4, #12]
 8013caa:	e7cf      	b.n	8013c4c <__smakebuf_r+0x18>

08013cac <_putc_r>:
 8013cac:	b570      	push	{r4, r5, r6, lr}
 8013cae:	460d      	mov	r5, r1
 8013cb0:	4614      	mov	r4, r2
 8013cb2:	4606      	mov	r6, r0
 8013cb4:	b118      	cbz	r0, 8013cbe <_putc_r+0x12>
 8013cb6:	6a03      	ldr	r3, [r0, #32]
 8013cb8:	b90b      	cbnz	r3, 8013cbe <_putc_r+0x12>
 8013cba:	f7fd fdab 	bl	8011814 <__sinit>
 8013cbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013cc0:	07d8      	lsls	r0, r3, #31
 8013cc2:	d405      	bmi.n	8013cd0 <_putc_r+0x24>
 8013cc4:	89a3      	ldrh	r3, [r4, #12]
 8013cc6:	0599      	lsls	r1, r3, #22
 8013cc8:	d402      	bmi.n	8013cd0 <_putc_r+0x24>
 8013cca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013ccc:	f7fe f80d 	bl	8011cea <__retarget_lock_acquire_recursive>
 8013cd0:	68a3      	ldr	r3, [r4, #8]
 8013cd2:	3b01      	subs	r3, #1
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	60a3      	str	r3, [r4, #8]
 8013cd8:	da05      	bge.n	8013ce6 <_putc_r+0x3a>
 8013cda:	69a2      	ldr	r2, [r4, #24]
 8013cdc:	4293      	cmp	r3, r2
 8013cde:	db12      	blt.n	8013d06 <_putc_r+0x5a>
 8013ce0:	b2eb      	uxtb	r3, r5
 8013ce2:	2b0a      	cmp	r3, #10
 8013ce4:	d00f      	beq.n	8013d06 <_putc_r+0x5a>
 8013ce6:	6823      	ldr	r3, [r4, #0]
 8013ce8:	1c5a      	adds	r2, r3, #1
 8013cea:	6022      	str	r2, [r4, #0]
 8013cec:	701d      	strb	r5, [r3, #0]
 8013cee:	b2ed      	uxtb	r5, r5
 8013cf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013cf2:	07da      	lsls	r2, r3, #31
 8013cf4:	d405      	bmi.n	8013d02 <_putc_r+0x56>
 8013cf6:	89a3      	ldrh	r3, [r4, #12]
 8013cf8:	059b      	lsls	r3, r3, #22
 8013cfa:	d402      	bmi.n	8013d02 <_putc_r+0x56>
 8013cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013cfe:	f7fd fff5 	bl	8011cec <__retarget_lock_release_recursive>
 8013d02:	4628      	mov	r0, r5
 8013d04:	bd70      	pop	{r4, r5, r6, pc}
 8013d06:	4629      	mov	r1, r5
 8013d08:	4622      	mov	r2, r4
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	f7fd fea1 	bl	8011a52 <__swbuf_r>
 8013d10:	4605      	mov	r5, r0
 8013d12:	e7ed      	b.n	8013cf0 <_putc_r+0x44>

08013d14 <__sccl>:
 8013d14:	b570      	push	{r4, r5, r6, lr}
 8013d16:	780b      	ldrb	r3, [r1, #0]
 8013d18:	4604      	mov	r4, r0
 8013d1a:	2b5e      	cmp	r3, #94	@ 0x5e
 8013d1c:	bf0b      	itete	eq
 8013d1e:	784b      	ldrbeq	r3, [r1, #1]
 8013d20:	1c4a      	addne	r2, r1, #1
 8013d22:	1c8a      	addeq	r2, r1, #2
 8013d24:	2100      	movne	r1, #0
 8013d26:	bf08      	it	eq
 8013d28:	2101      	moveq	r1, #1
 8013d2a:	3801      	subs	r0, #1
 8013d2c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8013d30:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013d34:	42a8      	cmp	r0, r5
 8013d36:	d1fb      	bne.n	8013d30 <__sccl+0x1c>
 8013d38:	b90b      	cbnz	r3, 8013d3e <__sccl+0x2a>
 8013d3a:	1e50      	subs	r0, r2, #1
 8013d3c:	bd70      	pop	{r4, r5, r6, pc}
 8013d3e:	f081 0101 	eor.w	r1, r1, #1
 8013d42:	54e1      	strb	r1, [r4, r3]
 8013d44:	4610      	mov	r0, r2
 8013d46:	4602      	mov	r2, r0
 8013d48:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013d4c:	2d2d      	cmp	r5, #45	@ 0x2d
 8013d4e:	d005      	beq.n	8013d5c <__sccl+0x48>
 8013d50:	2d5d      	cmp	r5, #93	@ 0x5d
 8013d52:	d016      	beq.n	8013d82 <__sccl+0x6e>
 8013d54:	2d00      	cmp	r5, #0
 8013d56:	d0f1      	beq.n	8013d3c <__sccl+0x28>
 8013d58:	462b      	mov	r3, r5
 8013d5a:	e7f2      	b.n	8013d42 <__sccl+0x2e>
 8013d5c:	7846      	ldrb	r6, [r0, #1]
 8013d5e:	2e5d      	cmp	r6, #93	@ 0x5d
 8013d60:	d0fa      	beq.n	8013d58 <__sccl+0x44>
 8013d62:	42b3      	cmp	r3, r6
 8013d64:	dcf8      	bgt.n	8013d58 <__sccl+0x44>
 8013d66:	3002      	adds	r0, #2
 8013d68:	461a      	mov	r2, r3
 8013d6a:	3201      	adds	r2, #1
 8013d6c:	4296      	cmp	r6, r2
 8013d6e:	54a1      	strb	r1, [r4, r2]
 8013d70:	dcfb      	bgt.n	8013d6a <__sccl+0x56>
 8013d72:	1af2      	subs	r2, r6, r3
 8013d74:	3a01      	subs	r2, #1
 8013d76:	1c5d      	adds	r5, r3, #1
 8013d78:	42b3      	cmp	r3, r6
 8013d7a:	bfa8      	it	ge
 8013d7c:	2200      	movge	r2, #0
 8013d7e:	18ab      	adds	r3, r5, r2
 8013d80:	e7e1      	b.n	8013d46 <__sccl+0x32>
 8013d82:	4610      	mov	r0, r2
 8013d84:	e7da      	b.n	8013d3c <__sccl+0x28>

08013d86 <__submore>:
 8013d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d8a:	460c      	mov	r4, r1
 8013d8c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013d8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013d92:	4299      	cmp	r1, r3
 8013d94:	d11d      	bne.n	8013dd2 <__submore+0x4c>
 8013d96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013d9a:	f7fe fe13 	bl	80129c4 <_malloc_r>
 8013d9e:	b918      	cbnz	r0, 8013da8 <__submore+0x22>
 8013da0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013dac:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013dae:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8013db2:	6360      	str	r0, [r4, #52]	@ 0x34
 8013db4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013db8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013dbc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8013dc0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8013dc4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8013dc8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8013dcc:	6020      	str	r0, [r4, #0]
 8013dce:	2000      	movs	r0, #0
 8013dd0:	e7e8      	b.n	8013da4 <__submore+0x1e>
 8013dd2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8013dd4:	0077      	lsls	r7, r6, #1
 8013dd6:	463a      	mov	r2, r7
 8013dd8:	f000 f886 	bl	8013ee8 <_realloc_r>
 8013ddc:	4605      	mov	r5, r0
 8013dde:	2800      	cmp	r0, #0
 8013de0:	d0de      	beq.n	8013da0 <__submore+0x1a>
 8013de2:	eb00 0806 	add.w	r8, r0, r6
 8013de6:	4601      	mov	r1, r0
 8013de8:	4632      	mov	r2, r6
 8013dea:	4640      	mov	r0, r8
 8013dec:	f7fd ff7f 	bl	8011cee <memcpy>
 8013df0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8013df4:	f8c4 8000 	str.w	r8, [r4]
 8013df8:	e7e9      	b.n	8013dce <__submore+0x48>
	...

08013dfc <_fstat_r>:
 8013dfc:	b538      	push	{r3, r4, r5, lr}
 8013dfe:	4d07      	ldr	r5, [pc, #28]	@ (8013e1c <_fstat_r+0x20>)
 8013e00:	2300      	movs	r3, #0
 8013e02:	4604      	mov	r4, r0
 8013e04:	4608      	mov	r0, r1
 8013e06:	4611      	mov	r1, r2
 8013e08:	602b      	str	r3, [r5, #0]
 8013e0a:	f7f1 fcdb 	bl	80057c4 <_fstat>
 8013e0e:	1c43      	adds	r3, r0, #1
 8013e10:	d102      	bne.n	8013e18 <_fstat_r+0x1c>
 8013e12:	682b      	ldr	r3, [r5, #0]
 8013e14:	b103      	cbz	r3, 8013e18 <_fstat_r+0x1c>
 8013e16:	6023      	str	r3, [r4, #0]
 8013e18:	bd38      	pop	{r3, r4, r5, pc}
 8013e1a:	bf00      	nop
 8013e1c:	24000c10 	.word	0x24000c10

08013e20 <_isatty_r>:
 8013e20:	b538      	push	{r3, r4, r5, lr}
 8013e22:	4d06      	ldr	r5, [pc, #24]	@ (8013e3c <_isatty_r+0x1c>)
 8013e24:	2300      	movs	r3, #0
 8013e26:	4604      	mov	r4, r0
 8013e28:	4608      	mov	r0, r1
 8013e2a:	602b      	str	r3, [r5, #0]
 8013e2c:	f7f1 fcda 	bl	80057e4 <_isatty>
 8013e30:	1c43      	adds	r3, r0, #1
 8013e32:	d102      	bne.n	8013e3a <_isatty_r+0x1a>
 8013e34:	682b      	ldr	r3, [r5, #0]
 8013e36:	b103      	cbz	r3, 8013e3a <_isatty_r+0x1a>
 8013e38:	6023      	str	r3, [r4, #0]
 8013e3a:	bd38      	pop	{r3, r4, r5, pc}
 8013e3c:	24000c10 	.word	0x24000c10

08013e40 <_sbrk_r>:
 8013e40:	b538      	push	{r3, r4, r5, lr}
 8013e42:	4d06      	ldr	r5, [pc, #24]	@ (8013e5c <_sbrk_r+0x1c>)
 8013e44:	2300      	movs	r3, #0
 8013e46:	4604      	mov	r4, r0
 8013e48:	4608      	mov	r0, r1
 8013e4a:	602b      	str	r3, [r5, #0]
 8013e4c:	f7f1 fce2 	bl	8005814 <_sbrk>
 8013e50:	1c43      	adds	r3, r0, #1
 8013e52:	d102      	bne.n	8013e5a <_sbrk_r+0x1a>
 8013e54:	682b      	ldr	r3, [r5, #0]
 8013e56:	b103      	cbz	r3, 8013e5a <_sbrk_r+0x1a>
 8013e58:	6023      	str	r3, [r4, #0]
 8013e5a:	bd38      	pop	{r3, r4, r5, pc}
 8013e5c:	24000c10 	.word	0x24000c10

08013e60 <__assert_func>:
 8013e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013e62:	4614      	mov	r4, r2
 8013e64:	461a      	mov	r2, r3
 8013e66:	4b09      	ldr	r3, [pc, #36]	@ (8013e8c <__assert_func+0x2c>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	4605      	mov	r5, r0
 8013e6c:	68d8      	ldr	r0, [r3, #12]
 8013e6e:	b14c      	cbz	r4, 8013e84 <__assert_func+0x24>
 8013e70:	4b07      	ldr	r3, [pc, #28]	@ (8013e90 <__assert_func+0x30>)
 8013e72:	9100      	str	r1, [sp, #0]
 8013e74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013e78:	4906      	ldr	r1, [pc, #24]	@ (8013e94 <__assert_func+0x34>)
 8013e7a:	462b      	mov	r3, r5
 8013e7c:	f000 f95c 	bl	8014138 <fiprintf>
 8013e80:	f000 f96c 	bl	801415c <abort>
 8013e84:	4b04      	ldr	r3, [pc, #16]	@ (8013e98 <__assert_func+0x38>)
 8013e86:	461c      	mov	r4, r3
 8013e88:	e7f3      	b.n	8013e72 <__assert_func+0x12>
 8013e8a:	bf00      	nop
 8013e8c:	2400002c 	.word	0x2400002c
 8013e90:	08016502 	.word	0x08016502
 8013e94:	0801650f 	.word	0x0801650f
 8013e98:	0801653d 	.word	0x0801653d

08013e9c <_calloc_r>:
 8013e9c:	b570      	push	{r4, r5, r6, lr}
 8013e9e:	fba1 5402 	umull	r5, r4, r1, r2
 8013ea2:	b934      	cbnz	r4, 8013eb2 <_calloc_r+0x16>
 8013ea4:	4629      	mov	r1, r5
 8013ea6:	f7fe fd8d 	bl	80129c4 <_malloc_r>
 8013eaa:	4606      	mov	r6, r0
 8013eac:	b928      	cbnz	r0, 8013eba <_calloc_r+0x1e>
 8013eae:	4630      	mov	r0, r6
 8013eb0:	bd70      	pop	{r4, r5, r6, pc}
 8013eb2:	220c      	movs	r2, #12
 8013eb4:	6002      	str	r2, [r0, #0]
 8013eb6:	2600      	movs	r6, #0
 8013eb8:	e7f9      	b.n	8013eae <_calloc_r+0x12>
 8013eba:	462a      	mov	r2, r5
 8013ebc:	4621      	mov	r1, r4
 8013ebe:	f7fd fe77 	bl	8011bb0 <memset>
 8013ec2:	e7f4      	b.n	8013eae <_calloc_r+0x12>

08013ec4 <__ascii_mbtowc>:
 8013ec4:	b082      	sub	sp, #8
 8013ec6:	b901      	cbnz	r1, 8013eca <__ascii_mbtowc+0x6>
 8013ec8:	a901      	add	r1, sp, #4
 8013eca:	b142      	cbz	r2, 8013ede <__ascii_mbtowc+0x1a>
 8013ecc:	b14b      	cbz	r3, 8013ee2 <__ascii_mbtowc+0x1e>
 8013ece:	7813      	ldrb	r3, [r2, #0]
 8013ed0:	600b      	str	r3, [r1, #0]
 8013ed2:	7812      	ldrb	r2, [r2, #0]
 8013ed4:	1e10      	subs	r0, r2, #0
 8013ed6:	bf18      	it	ne
 8013ed8:	2001      	movne	r0, #1
 8013eda:	b002      	add	sp, #8
 8013edc:	4770      	bx	lr
 8013ede:	4610      	mov	r0, r2
 8013ee0:	e7fb      	b.n	8013eda <__ascii_mbtowc+0x16>
 8013ee2:	f06f 0001 	mvn.w	r0, #1
 8013ee6:	e7f8      	b.n	8013eda <__ascii_mbtowc+0x16>

08013ee8 <_realloc_r>:
 8013ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013eec:	4607      	mov	r7, r0
 8013eee:	4614      	mov	r4, r2
 8013ef0:	460d      	mov	r5, r1
 8013ef2:	b921      	cbnz	r1, 8013efe <_realloc_r+0x16>
 8013ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef8:	4611      	mov	r1, r2
 8013efa:	f7fe bd63 	b.w	80129c4 <_malloc_r>
 8013efe:	b92a      	cbnz	r2, 8013f0c <_realloc_r+0x24>
 8013f00:	f7fe fcec 	bl	80128dc <_free_r>
 8013f04:	4625      	mov	r5, r4
 8013f06:	4628      	mov	r0, r5
 8013f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f0c:	f000 f92d 	bl	801416a <_malloc_usable_size_r>
 8013f10:	4284      	cmp	r4, r0
 8013f12:	4606      	mov	r6, r0
 8013f14:	d802      	bhi.n	8013f1c <_realloc_r+0x34>
 8013f16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013f1a:	d8f4      	bhi.n	8013f06 <_realloc_r+0x1e>
 8013f1c:	4621      	mov	r1, r4
 8013f1e:	4638      	mov	r0, r7
 8013f20:	f7fe fd50 	bl	80129c4 <_malloc_r>
 8013f24:	4680      	mov	r8, r0
 8013f26:	b908      	cbnz	r0, 8013f2c <_realloc_r+0x44>
 8013f28:	4645      	mov	r5, r8
 8013f2a:	e7ec      	b.n	8013f06 <_realloc_r+0x1e>
 8013f2c:	42b4      	cmp	r4, r6
 8013f2e:	4622      	mov	r2, r4
 8013f30:	4629      	mov	r1, r5
 8013f32:	bf28      	it	cs
 8013f34:	4632      	movcs	r2, r6
 8013f36:	f7fd feda 	bl	8011cee <memcpy>
 8013f3a:	4629      	mov	r1, r5
 8013f3c:	4638      	mov	r0, r7
 8013f3e:	f7fe fccd 	bl	80128dc <_free_r>
 8013f42:	e7f1      	b.n	8013f28 <_realloc_r+0x40>

08013f44 <_strtol_l.isra.0>:
 8013f44:	2b24      	cmp	r3, #36	@ 0x24
 8013f46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f4a:	4686      	mov	lr, r0
 8013f4c:	4690      	mov	r8, r2
 8013f4e:	d801      	bhi.n	8013f54 <_strtol_l.isra.0+0x10>
 8013f50:	2b01      	cmp	r3, #1
 8013f52:	d106      	bne.n	8013f62 <_strtol_l.isra.0+0x1e>
 8013f54:	f7fd fe9e 	bl	8011c94 <__errno>
 8013f58:	2316      	movs	r3, #22
 8013f5a:	6003      	str	r3, [r0, #0]
 8013f5c:	2000      	movs	r0, #0
 8013f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f62:	4834      	ldr	r0, [pc, #208]	@ (8014034 <_strtol_l.isra.0+0xf0>)
 8013f64:	460d      	mov	r5, r1
 8013f66:	462a      	mov	r2, r5
 8013f68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013f6c:	5d06      	ldrb	r6, [r0, r4]
 8013f6e:	f016 0608 	ands.w	r6, r6, #8
 8013f72:	d1f8      	bne.n	8013f66 <_strtol_l.isra.0+0x22>
 8013f74:	2c2d      	cmp	r4, #45	@ 0x2d
 8013f76:	d110      	bne.n	8013f9a <_strtol_l.isra.0+0x56>
 8013f78:	782c      	ldrb	r4, [r5, #0]
 8013f7a:	2601      	movs	r6, #1
 8013f7c:	1c95      	adds	r5, r2, #2
 8013f7e:	f033 0210 	bics.w	r2, r3, #16
 8013f82:	d115      	bne.n	8013fb0 <_strtol_l.isra.0+0x6c>
 8013f84:	2c30      	cmp	r4, #48	@ 0x30
 8013f86:	d10d      	bne.n	8013fa4 <_strtol_l.isra.0+0x60>
 8013f88:	782a      	ldrb	r2, [r5, #0]
 8013f8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013f8e:	2a58      	cmp	r2, #88	@ 0x58
 8013f90:	d108      	bne.n	8013fa4 <_strtol_l.isra.0+0x60>
 8013f92:	786c      	ldrb	r4, [r5, #1]
 8013f94:	3502      	adds	r5, #2
 8013f96:	2310      	movs	r3, #16
 8013f98:	e00a      	b.n	8013fb0 <_strtol_l.isra.0+0x6c>
 8013f9a:	2c2b      	cmp	r4, #43	@ 0x2b
 8013f9c:	bf04      	itt	eq
 8013f9e:	782c      	ldrbeq	r4, [r5, #0]
 8013fa0:	1c95      	addeq	r5, r2, #2
 8013fa2:	e7ec      	b.n	8013f7e <_strtol_l.isra.0+0x3a>
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d1f6      	bne.n	8013f96 <_strtol_l.isra.0+0x52>
 8013fa8:	2c30      	cmp	r4, #48	@ 0x30
 8013faa:	bf14      	ite	ne
 8013fac:	230a      	movne	r3, #10
 8013fae:	2308      	moveq	r3, #8
 8013fb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013fb4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8013fb8:	2200      	movs	r2, #0
 8013fba:	fbbc f9f3 	udiv	r9, ip, r3
 8013fbe:	4610      	mov	r0, r2
 8013fc0:	fb03 ca19 	mls	sl, r3, r9, ip
 8013fc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013fc8:	2f09      	cmp	r7, #9
 8013fca:	d80f      	bhi.n	8013fec <_strtol_l.isra.0+0xa8>
 8013fcc:	463c      	mov	r4, r7
 8013fce:	42a3      	cmp	r3, r4
 8013fd0:	dd1b      	ble.n	801400a <_strtol_l.isra.0+0xc6>
 8013fd2:	1c57      	adds	r7, r2, #1
 8013fd4:	d007      	beq.n	8013fe6 <_strtol_l.isra.0+0xa2>
 8013fd6:	4581      	cmp	r9, r0
 8013fd8:	d314      	bcc.n	8014004 <_strtol_l.isra.0+0xc0>
 8013fda:	d101      	bne.n	8013fe0 <_strtol_l.isra.0+0x9c>
 8013fdc:	45a2      	cmp	sl, r4
 8013fde:	db11      	blt.n	8014004 <_strtol_l.isra.0+0xc0>
 8013fe0:	fb00 4003 	mla	r0, r0, r3, r4
 8013fe4:	2201      	movs	r2, #1
 8013fe6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013fea:	e7eb      	b.n	8013fc4 <_strtol_l.isra.0+0x80>
 8013fec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013ff0:	2f19      	cmp	r7, #25
 8013ff2:	d801      	bhi.n	8013ff8 <_strtol_l.isra.0+0xb4>
 8013ff4:	3c37      	subs	r4, #55	@ 0x37
 8013ff6:	e7ea      	b.n	8013fce <_strtol_l.isra.0+0x8a>
 8013ff8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013ffc:	2f19      	cmp	r7, #25
 8013ffe:	d804      	bhi.n	801400a <_strtol_l.isra.0+0xc6>
 8014000:	3c57      	subs	r4, #87	@ 0x57
 8014002:	e7e4      	b.n	8013fce <_strtol_l.isra.0+0x8a>
 8014004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014008:	e7ed      	b.n	8013fe6 <_strtol_l.isra.0+0xa2>
 801400a:	1c53      	adds	r3, r2, #1
 801400c:	d108      	bne.n	8014020 <_strtol_l.isra.0+0xdc>
 801400e:	2322      	movs	r3, #34	@ 0x22
 8014010:	f8ce 3000 	str.w	r3, [lr]
 8014014:	4660      	mov	r0, ip
 8014016:	f1b8 0f00 	cmp.w	r8, #0
 801401a:	d0a0      	beq.n	8013f5e <_strtol_l.isra.0+0x1a>
 801401c:	1e69      	subs	r1, r5, #1
 801401e:	e006      	b.n	801402e <_strtol_l.isra.0+0xea>
 8014020:	b106      	cbz	r6, 8014024 <_strtol_l.isra.0+0xe0>
 8014022:	4240      	negs	r0, r0
 8014024:	f1b8 0f00 	cmp.w	r8, #0
 8014028:	d099      	beq.n	8013f5e <_strtol_l.isra.0+0x1a>
 801402a:	2a00      	cmp	r2, #0
 801402c:	d1f6      	bne.n	801401c <_strtol_l.isra.0+0xd8>
 801402e:	f8c8 1000 	str.w	r1, [r8]
 8014032:	e794      	b.n	8013f5e <_strtol_l.isra.0+0x1a>
 8014034:	08016641 	.word	0x08016641

08014038 <_strtol_r>:
 8014038:	f7ff bf84 	b.w	8013f44 <_strtol_l.isra.0>

0801403c <_strtoul_l.isra.0>:
 801403c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014040:	4e34      	ldr	r6, [pc, #208]	@ (8014114 <_strtoul_l.isra.0+0xd8>)
 8014042:	4686      	mov	lr, r0
 8014044:	460d      	mov	r5, r1
 8014046:	4628      	mov	r0, r5
 8014048:	f815 4b01 	ldrb.w	r4, [r5], #1
 801404c:	5d37      	ldrb	r7, [r6, r4]
 801404e:	f017 0708 	ands.w	r7, r7, #8
 8014052:	d1f8      	bne.n	8014046 <_strtoul_l.isra.0+0xa>
 8014054:	2c2d      	cmp	r4, #45	@ 0x2d
 8014056:	d110      	bne.n	801407a <_strtoul_l.isra.0+0x3e>
 8014058:	782c      	ldrb	r4, [r5, #0]
 801405a:	2701      	movs	r7, #1
 801405c:	1c85      	adds	r5, r0, #2
 801405e:	f033 0010 	bics.w	r0, r3, #16
 8014062:	d115      	bne.n	8014090 <_strtoul_l.isra.0+0x54>
 8014064:	2c30      	cmp	r4, #48	@ 0x30
 8014066:	d10d      	bne.n	8014084 <_strtoul_l.isra.0+0x48>
 8014068:	7828      	ldrb	r0, [r5, #0]
 801406a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801406e:	2858      	cmp	r0, #88	@ 0x58
 8014070:	d108      	bne.n	8014084 <_strtoul_l.isra.0+0x48>
 8014072:	786c      	ldrb	r4, [r5, #1]
 8014074:	3502      	adds	r5, #2
 8014076:	2310      	movs	r3, #16
 8014078:	e00a      	b.n	8014090 <_strtoul_l.isra.0+0x54>
 801407a:	2c2b      	cmp	r4, #43	@ 0x2b
 801407c:	bf04      	itt	eq
 801407e:	782c      	ldrbeq	r4, [r5, #0]
 8014080:	1c85      	addeq	r5, r0, #2
 8014082:	e7ec      	b.n	801405e <_strtoul_l.isra.0+0x22>
 8014084:	2b00      	cmp	r3, #0
 8014086:	d1f6      	bne.n	8014076 <_strtoul_l.isra.0+0x3a>
 8014088:	2c30      	cmp	r4, #48	@ 0x30
 801408a:	bf14      	ite	ne
 801408c:	230a      	movne	r3, #10
 801408e:	2308      	moveq	r3, #8
 8014090:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8014094:	2600      	movs	r6, #0
 8014096:	fbb8 f8f3 	udiv	r8, r8, r3
 801409a:	fb03 f908 	mul.w	r9, r3, r8
 801409e:	ea6f 0909 	mvn.w	r9, r9
 80140a2:	4630      	mov	r0, r6
 80140a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80140a8:	f1bc 0f09 	cmp.w	ip, #9
 80140ac:	d810      	bhi.n	80140d0 <_strtoul_l.isra.0+0x94>
 80140ae:	4664      	mov	r4, ip
 80140b0:	42a3      	cmp	r3, r4
 80140b2:	dd1e      	ble.n	80140f2 <_strtoul_l.isra.0+0xb6>
 80140b4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80140b8:	d007      	beq.n	80140ca <_strtoul_l.isra.0+0x8e>
 80140ba:	4580      	cmp	r8, r0
 80140bc:	d316      	bcc.n	80140ec <_strtoul_l.isra.0+0xb0>
 80140be:	d101      	bne.n	80140c4 <_strtoul_l.isra.0+0x88>
 80140c0:	45a1      	cmp	r9, r4
 80140c2:	db13      	blt.n	80140ec <_strtoul_l.isra.0+0xb0>
 80140c4:	fb00 4003 	mla	r0, r0, r3, r4
 80140c8:	2601      	movs	r6, #1
 80140ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140ce:	e7e9      	b.n	80140a4 <_strtoul_l.isra.0+0x68>
 80140d0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80140d4:	f1bc 0f19 	cmp.w	ip, #25
 80140d8:	d801      	bhi.n	80140de <_strtoul_l.isra.0+0xa2>
 80140da:	3c37      	subs	r4, #55	@ 0x37
 80140dc:	e7e8      	b.n	80140b0 <_strtoul_l.isra.0+0x74>
 80140de:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80140e2:	f1bc 0f19 	cmp.w	ip, #25
 80140e6:	d804      	bhi.n	80140f2 <_strtoul_l.isra.0+0xb6>
 80140e8:	3c57      	subs	r4, #87	@ 0x57
 80140ea:	e7e1      	b.n	80140b0 <_strtoul_l.isra.0+0x74>
 80140ec:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80140f0:	e7eb      	b.n	80140ca <_strtoul_l.isra.0+0x8e>
 80140f2:	1c73      	adds	r3, r6, #1
 80140f4:	d106      	bne.n	8014104 <_strtoul_l.isra.0+0xc8>
 80140f6:	2322      	movs	r3, #34	@ 0x22
 80140f8:	f8ce 3000 	str.w	r3, [lr]
 80140fc:	4630      	mov	r0, r6
 80140fe:	b932      	cbnz	r2, 801410e <_strtoul_l.isra.0+0xd2>
 8014100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014104:	b107      	cbz	r7, 8014108 <_strtoul_l.isra.0+0xcc>
 8014106:	4240      	negs	r0, r0
 8014108:	2a00      	cmp	r2, #0
 801410a:	d0f9      	beq.n	8014100 <_strtoul_l.isra.0+0xc4>
 801410c:	b106      	cbz	r6, 8014110 <_strtoul_l.isra.0+0xd4>
 801410e:	1e69      	subs	r1, r5, #1
 8014110:	6011      	str	r1, [r2, #0]
 8014112:	e7f5      	b.n	8014100 <_strtoul_l.isra.0+0xc4>
 8014114:	08016641 	.word	0x08016641

08014118 <_strtoul_r>:
 8014118:	f7ff bf90 	b.w	801403c <_strtoul_l.isra.0>

0801411c <__ascii_wctomb>:
 801411c:	4603      	mov	r3, r0
 801411e:	4608      	mov	r0, r1
 8014120:	b141      	cbz	r1, 8014134 <__ascii_wctomb+0x18>
 8014122:	2aff      	cmp	r2, #255	@ 0xff
 8014124:	d904      	bls.n	8014130 <__ascii_wctomb+0x14>
 8014126:	228a      	movs	r2, #138	@ 0x8a
 8014128:	601a      	str	r2, [r3, #0]
 801412a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801412e:	4770      	bx	lr
 8014130:	700a      	strb	r2, [r1, #0]
 8014132:	2001      	movs	r0, #1
 8014134:	4770      	bx	lr
	...

08014138 <fiprintf>:
 8014138:	b40e      	push	{r1, r2, r3}
 801413a:	b503      	push	{r0, r1, lr}
 801413c:	4601      	mov	r1, r0
 801413e:	ab03      	add	r3, sp, #12
 8014140:	4805      	ldr	r0, [pc, #20]	@ (8014158 <fiprintf+0x20>)
 8014142:	f853 2b04 	ldr.w	r2, [r3], #4
 8014146:	6800      	ldr	r0, [r0, #0]
 8014148:	9301      	str	r3, [sp, #4]
 801414a:	f7ff fa3b 	bl	80135c4 <_vfiprintf_r>
 801414e:	b002      	add	sp, #8
 8014150:	f85d eb04 	ldr.w	lr, [sp], #4
 8014154:	b003      	add	sp, #12
 8014156:	4770      	bx	lr
 8014158:	2400002c 	.word	0x2400002c

0801415c <abort>:
 801415c:	b508      	push	{r3, lr}
 801415e:	2006      	movs	r0, #6
 8014160:	f000 f834 	bl	80141cc <raise>
 8014164:	2001      	movs	r0, #1
 8014166:	f7f1 faf9 	bl	800575c <_exit>

0801416a <_malloc_usable_size_r>:
 801416a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801416e:	1f18      	subs	r0, r3, #4
 8014170:	2b00      	cmp	r3, #0
 8014172:	bfbc      	itt	lt
 8014174:	580b      	ldrlt	r3, [r1, r0]
 8014176:	18c0      	addlt	r0, r0, r3
 8014178:	4770      	bx	lr

0801417a <_raise_r>:
 801417a:	291f      	cmp	r1, #31
 801417c:	b538      	push	{r3, r4, r5, lr}
 801417e:	4605      	mov	r5, r0
 8014180:	460c      	mov	r4, r1
 8014182:	d904      	bls.n	801418e <_raise_r+0x14>
 8014184:	2316      	movs	r3, #22
 8014186:	6003      	str	r3, [r0, #0]
 8014188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801418c:	bd38      	pop	{r3, r4, r5, pc}
 801418e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014190:	b112      	cbz	r2, 8014198 <_raise_r+0x1e>
 8014192:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014196:	b94b      	cbnz	r3, 80141ac <_raise_r+0x32>
 8014198:	4628      	mov	r0, r5
 801419a:	f000 f831 	bl	8014200 <_getpid_r>
 801419e:	4622      	mov	r2, r4
 80141a0:	4601      	mov	r1, r0
 80141a2:	4628      	mov	r0, r5
 80141a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141a8:	f000 b818 	b.w	80141dc <_kill_r>
 80141ac:	2b01      	cmp	r3, #1
 80141ae:	d00a      	beq.n	80141c6 <_raise_r+0x4c>
 80141b0:	1c59      	adds	r1, r3, #1
 80141b2:	d103      	bne.n	80141bc <_raise_r+0x42>
 80141b4:	2316      	movs	r3, #22
 80141b6:	6003      	str	r3, [r0, #0]
 80141b8:	2001      	movs	r0, #1
 80141ba:	e7e7      	b.n	801418c <_raise_r+0x12>
 80141bc:	2100      	movs	r1, #0
 80141be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80141c2:	4620      	mov	r0, r4
 80141c4:	4798      	blx	r3
 80141c6:	2000      	movs	r0, #0
 80141c8:	e7e0      	b.n	801418c <_raise_r+0x12>
	...

080141cc <raise>:
 80141cc:	4b02      	ldr	r3, [pc, #8]	@ (80141d8 <raise+0xc>)
 80141ce:	4601      	mov	r1, r0
 80141d0:	6818      	ldr	r0, [r3, #0]
 80141d2:	f7ff bfd2 	b.w	801417a <_raise_r>
 80141d6:	bf00      	nop
 80141d8:	2400002c 	.word	0x2400002c

080141dc <_kill_r>:
 80141dc:	b538      	push	{r3, r4, r5, lr}
 80141de:	4d07      	ldr	r5, [pc, #28]	@ (80141fc <_kill_r+0x20>)
 80141e0:	2300      	movs	r3, #0
 80141e2:	4604      	mov	r4, r0
 80141e4:	4608      	mov	r0, r1
 80141e6:	4611      	mov	r1, r2
 80141e8:	602b      	str	r3, [r5, #0]
 80141ea:	f7f1 faa7 	bl	800573c <_kill>
 80141ee:	1c43      	adds	r3, r0, #1
 80141f0:	d102      	bne.n	80141f8 <_kill_r+0x1c>
 80141f2:	682b      	ldr	r3, [r5, #0]
 80141f4:	b103      	cbz	r3, 80141f8 <_kill_r+0x1c>
 80141f6:	6023      	str	r3, [r4, #0]
 80141f8:	bd38      	pop	{r3, r4, r5, pc}
 80141fa:	bf00      	nop
 80141fc:	24000c10 	.word	0x24000c10

08014200 <_getpid_r>:
 8014200:	f7f1 ba94 	b.w	800572c <_getpid>

08014204 <asinf>:
 8014204:	b508      	push	{r3, lr}
 8014206:	ed2d 8b02 	vpush	{d8}
 801420a:	eeb0 8a40 	vmov.f32	s16, s0
 801420e:	f000 fa43 	bl	8014698 <__ieee754_asinf>
 8014212:	eeb4 8a48 	vcmp.f32	s16, s16
 8014216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421a:	eef0 8a40 	vmov.f32	s17, s0
 801421e:	d615      	bvs.n	801424c <asinf+0x48>
 8014220:	eeb0 0a48 	vmov.f32	s0, s16
 8014224:	f000 f83a 	bl	801429c <fabsf>
 8014228:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801422c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014234:	dd0a      	ble.n	801424c <asinf+0x48>
 8014236:	f7fd fd2d 	bl	8011c94 <__errno>
 801423a:	ecbd 8b02 	vpop	{d8}
 801423e:	2321      	movs	r3, #33	@ 0x21
 8014240:	6003      	str	r3, [r0, #0]
 8014242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014246:	4804      	ldr	r0, [pc, #16]	@ (8014258 <asinf+0x54>)
 8014248:	f000 b830 	b.w	80142ac <nanf>
 801424c:	eeb0 0a68 	vmov.f32	s0, s17
 8014250:	ecbd 8b02 	vpop	{d8}
 8014254:	bd08      	pop	{r3, pc}
 8014256:	bf00      	nop
 8014258:	0801653d 	.word	0x0801653d

0801425c <atan2f>:
 801425c:	f000 bb00 	b.w	8014860 <__ieee754_atan2f>

08014260 <sqrtf>:
 8014260:	b508      	push	{r3, lr}
 8014262:	ed2d 8b02 	vpush	{d8}
 8014266:	eeb0 8a40 	vmov.f32	s16, s0
 801426a:	f000 fa12 	bl	8014692 <__ieee754_sqrtf>
 801426e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014276:	d60c      	bvs.n	8014292 <sqrtf+0x32>
 8014278:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014298 <sqrtf+0x38>
 801427c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014284:	d505      	bpl.n	8014292 <sqrtf+0x32>
 8014286:	f7fd fd05 	bl	8011c94 <__errno>
 801428a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801428e:	2321      	movs	r3, #33	@ 0x21
 8014290:	6003      	str	r3, [r0, #0]
 8014292:	ecbd 8b02 	vpop	{d8}
 8014296:	bd08      	pop	{r3, pc}
 8014298:	00000000 	.word	0x00000000

0801429c <fabsf>:
 801429c:	ee10 3a10 	vmov	r3, s0
 80142a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80142a4:	ee00 3a10 	vmov	s0, r3
 80142a8:	4770      	bx	lr
	...

080142ac <nanf>:
 80142ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80142b4 <nanf+0x8>
 80142b0:	4770      	bx	lr
 80142b2:	bf00      	nop
 80142b4:	7fc00000 	.word	0x7fc00000

080142b8 <lrintf>:
 80142b8:	ee10 3a10 	vmov	r3, s0
 80142bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80142c0:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 80142c4:	281e      	cmp	r0, #30
 80142c6:	b082      	sub	sp, #8
 80142c8:	dc2c      	bgt.n	8014324 <lrintf+0x6c>
 80142ca:	2816      	cmp	r0, #22
 80142cc:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80142d0:	dd09      	ble.n	80142e6 <lrintf+0x2e>
 80142d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80142d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80142da:	3a96      	subs	r2, #150	@ 0x96
 80142dc:	fa03 f002 	lsl.w	r0, r3, r2
 80142e0:	b321      	cbz	r1, 801432c <lrintf+0x74>
 80142e2:	4240      	negs	r0, r0
 80142e4:	e022      	b.n	801432c <lrintf+0x74>
 80142e6:	4b13      	ldr	r3, [pc, #76]	@ (8014334 <lrintf+0x7c>)
 80142e8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80142ec:	ed93 7a00 	vldr	s14, [r3]
 80142f0:	ee37 0a00 	vadd.f32	s0, s14, s0
 80142f4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80142f8:	eddd 7a01 	vldr	s15, [sp, #4]
 80142fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014300:	ee17 3a90 	vmov	r3, s15
 8014304:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8014308:	d010      	beq.n	801432c <lrintf+0x74>
 801430a:	f3c3 50c7 	ubfx	r0, r3, #23, #8
 801430e:	387f      	subs	r0, #127	@ 0x7f
 8014310:	d40e      	bmi.n	8014330 <lrintf+0x78>
 8014312:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014316:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801431a:	f1c0 0017 	rsb	r0, r0, #23
 801431e:	fa23 f000 	lsr.w	r0, r3, r0
 8014322:	e7dd      	b.n	80142e0 <lrintf+0x28>
 8014324:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014328:	ee17 0a90 	vmov	r0, s15
 801432c:	b002      	add	sp, #8
 801432e:	4770      	bx	lr
 8014330:	2000      	movs	r0, #0
 8014332:	e7d5      	b.n	80142e0 <lrintf+0x28>
 8014334:	08016744 	.word	0x08016744

08014338 <sinf_poly>:
 8014338:	07cb      	lsls	r3, r1, #31
 801433a:	d412      	bmi.n	8014362 <sinf_poly+0x2a>
 801433c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8014340:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8014344:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8014348:	eea6 7b01 	vfma.f64	d7, d6, d1
 801434c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8014350:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014354:	eea6 0b05 	vfma.f64	d0, d6, d5
 8014358:	eea7 0b01 	vfma.f64	d0, d7, d1
 801435c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8014360:	4770      	bx	lr
 8014362:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8014366:	ee21 5b01 	vmul.f64	d5, d1, d1
 801436a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 801436e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8014372:	eea1 7b06 	vfma.f64	d7, d1, d6
 8014376:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 801437a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801437e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8014382:	ee21 1b05 	vmul.f64	d1, d1, d5
 8014386:	eea5 0b06 	vfma.f64	d0, d5, d6
 801438a:	e7e5      	b.n	8014358 <sinf_poly+0x20>
 801438c:	0000      	movs	r0, r0
	...

08014390 <sinf>:
 8014390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014392:	ee10 4a10 	vmov	r4, s0
 8014396:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801439a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 801439e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80143a2:	eef0 7a40 	vmov.f32	s15, s0
 80143a6:	d218      	bcs.n	80143da <sinf+0x4a>
 80143a8:	ee26 1b06 	vmul.f64	d1, d6, d6
 80143ac:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80143b0:	d20a      	bcs.n	80143c8 <sinf+0x38>
 80143b2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80143b6:	d103      	bne.n	80143c0 <sinf+0x30>
 80143b8:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 80143bc:	ed8d 1a01 	vstr	s2, [sp, #4]
 80143c0:	eeb0 0a67 	vmov.f32	s0, s15
 80143c4:	b003      	add	sp, #12
 80143c6:	bd30      	pop	{r4, r5, pc}
 80143c8:	483b      	ldr	r0, [pc, #236]	@ (80144b8 <sinf+0x128>)
 80143ca:	eeb0 0b46 	vmov.f64	d0, d6
 80143ce:	2100      	movs	r1, #0
 80143d0:	b003      	add	sp, #12
 80143d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80143d6:	f7ff bfaf 	b.w	8014338 <sinf_poly>
 80143da:	f240 422e 	movw	r2, #1070	@ 0x42e
 80143de:	4293      	cmp	r3, r2
 80143e0:	d824      	bhi.n	801442c <sinf+0x9c>
 80143e2:	4b35      	ldr	r3, [pc, #212]	@ (80144b8 <sinf+0x128>)
 80143e4:	ed93 7b08 	vldr	d7, [r3, #32]
 80143e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80143ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80143f0:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80143f4:	ee17 1a90 	vmov	r1, s15
 80143f8:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80143fc:	1609      	asrs	r1, r1, #24
 80143fe:	ee07 1a90 	vmov	s15, r1
 8014402:	f001 0203 	and.w	r2, r1, #3
 8014406:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801440a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801440e:	ed92 0b00 	vldr	d0, [r2]
 8014412:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8014416:	f011 0f02 	tst.w	r1, #2
 801441a:	eea5 6b47 	vfms.f64	d6, d5, d7
 801441e:	bf08      	it	eq
 8014420:	4618      	moveq	r0, r3
 8014422:	ee26 1b06 	vmul.f64	d1, d6, d6
 8014426:	ee20 0b06 	vmul.f64	d0, d0, d6
 801442a:	e7d1      	b.n	80143d0 <sinf+0x40>
 801442c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8014430:	d237      	bcs.n	80144a2 <sinf+0x112>
 8014432:	4922      	ldr	r1, [pc, #136]	@ (80144bc <sinf+0x12c>)
 8014434:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8014438:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 801443c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8014440:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8014444:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014448:	6a10      	ldr	r0, [r2, #32]
 801444a:	6912      	ldr	r2, [r2, #16]
 801444c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014450:	40ab      	lsls	r3, r5
 8014452:	fba0 5003 	umull	r5, r0, r0, r3
 8014456:	4359      	muls	r1, r3
 8014458:	fbe3 0102 	umlal	r0, r1, r3, r2
 801445c:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8014460:	0f9d      	lsrs	r5, r3, #30
 8014462:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8014466:	1ac9      	subs	r1, r1, r3
 8014468:	f7ec f948 	bl	80006fc <__aeabi_l2d>
 801446c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8014470:	4b11      	ldr	r3, [pc, #68]	@ (80144b8 <sinf+0x128>)
 8014472:	f004 0203 	and.w	r2, r4, #3
 8014476:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801447a:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80144b0 <sinf+0x120>
 801447e:	ed92 0b00 	vldr	d0, [r2]
 8014482:	ec41 0b17 	vmov	d7, r0, r1
 8014486:	f014 0f02 	tst.w	r4, #2
 801448a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801448e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014492:	4629      	mov	r1, r5
 8014494:	bf08      	it	eq
 8014496:	4618      	moveq	r0, r3
 8014498:	ee27 1b07 	vmul.f64	d1, d7, d7
 801449c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80144a0:	e796      	b.n	80143d0 <sinf+0x40>
 80144a2:	b003      	add	sp, #12
 80144a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144a8:	f000 b8e4 	b.w	8014674 <__math_invalidf>
 80144ac:	f3af 8000 	nop.w
 80144b0:	54442d18 	.word	0x54442d18
 80144b4:	3c1921fb 	.word	0x3c1921fb
 80144b8:	080167b0 	.word	0x080167b0
 80144bc:	0801674c 	.word	0x0801674c

080144c0 <sinf_poly>:
 80144c0:	07cb      	lsls	r3, r1, #31
 80144c2:	d412      	bmi.n	80144ea <sinf_poly+0x2a>
 80144c4:	ee21 5b00 	vmul.f64	d5, d1, d0
 80144c8:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80144cc:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80144d0:	eea6 7b01 	vfma.f64	d7, d6, d1
 80144d4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80144d8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80144dc:	eea6 0b05 	vfma.f64	d0, d6, d5
 80144e0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80144e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80144e8:	4770      	bx	lr
 80144ea:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80144ee:	ee21 5b01 	vmul.f64	d5, d1, d1
 80144f2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80144f6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80144fa:	eea1 7b06 	vfma.f64	d7, d1, d6
 80144fe:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8014502:	eea1 0b06 	vfma.f64	d0, d1, d6
 8014506:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 801450a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801450e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8014512:	e7e5      	b.n	80144e0 <sinf_poly+0x20>
 8014514:	0000      	movs	r0, r0
	...

08014518 <cosf>:
 8014518:	b538      	push	{r3, r4, r5, lr}
 801451a:	ee10 4a10 	vmov	r4, s0
 801451e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014522:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8014526:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801452a:	d21f      	bcs.n	801456c <cosf+0x54>
 801452c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8014530:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8014534:	f0c0 8082 	bcc.w	801463c <cosf+0x124>
 8014538:	ee27 4b07 	vmul.f64	d4, d7, d7
 801453c:	4b44      	ldr	r3, [pc, #272]	@ (8014650 <cosf+0x138>)
 801453e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8014542:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8014546:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 801454a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801454e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8014552:	eea7 0b05 	vfma.f64	d0, d7, d5
 8014556:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 801455a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801455e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8014562:	eea6 0b07 	vfma.f64	d0, d6, d7
 8014566:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801456a:	bd38      	pop	{r3, r4, r5, pc}
 801456c:	f240 422e 	movw	r2, #1070	@ 0x42e
 8014570:	4293      	cmp	r3, r2
 8014572:	d829      	bhi.n	80145c8 <cosf+0xb0>
 8014574:	4b36      	ldr	r3, [pc, #216]	@ (8014650 <cosf+0x138>)
 8014576:	ed93 6b08 	vldr	d6, [r3, #32]
 801457a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801457e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8014582:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8014586:	ee16 1a90 	vmov	r1, s13
 801458a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 801458e:	1609      	asrs	r1, r1, #24
 8014590:	ee06 1a90 	vmov	s13, r1
 8014594:	f001 0203 	and.w	r2, r1, #3
 8014598:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801459c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80145a0:	ed92 0b00 	vldr	d0, [r2]
 80145a4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 80145a8:	f011 0f02 	tst.w	r1, #2
 80145ac:	f081 0101 	eor.w	r1, r1, #1
 80145b0:	eea5 7b46 	vfms.f64	d7, d5, d6
 80145b4:	bf08      	it	eq
 80145b6:	4618      	moveq	r0, r3
 80145b8:	ee27 1b07 	vmul.f64	d1, d7, d7
 80145bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145c0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80145c4:	f7ff bf7c 	b.w	80144c0 <sinf_poly>
 80145c8:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80145cc:	d232      	bcs.n	8014634 <cosf+0x11c>
 80145ce:	4921      	ldr	r1, [pc, #132]	@ (8014654 <cosf+0x13c>)
 80145d0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80145d4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80145d8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80145dc:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80145e0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80145e4:	6a10      	ldr	r0, [r2, #32]
 80145e6:	6912      	ldr	r2, [r2, #16]
 80145e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80145ec:	40ab      	lsls	r3, r5
 80145ee:	fba0 5003 	umull	r5, r0, r0, r3
 80145f2:	4359      	muls	r1, r3
 80145f4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80145f8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80145fc:	0f9d      	lsrs	r5, r3, #30
 80145fe:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8014602:	1ac9      	subs	r1, r1, r3
 8014604:	f7ec f87a 	bl	80006fc <__aeabi_l2d>
 8014608:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801460c:	4b10      	ldr	r3, [pc, #64]	@ (8014650 <cosf+0x138>)
 801460e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8014648 <cosf+0x130>
 8014612:	ec41 0b17 	vmov	d7, r0, r1
 8014616:	f004 0203 	and.w	r2, r4, #3
 801461a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801461e:	ed92 0b00 	vldr	d0, [r2]
 8014622:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014626:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 801462a:	f014 0f02 	tst.w	r4, #2
 801462e:	f085 0101 	eor.w	r1, r5, #1
 8014632:	e7bf      	b.n	80145b4 <cosf+0x9c>
 8014634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014638:	f000 b81c 	b.w	8014674 <__math_invalidf>
 801463c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014640:	e793      	b.n	801456a <cosf+0x52>
 8014642:	bf00      	nop
 8014644:	f3af 8000 	nop.w
 8014648:	54442d18 	.word	0x54442d18
 801464c:	3c1921fb 	.word	0x3c1921fb
 8014650:	080167b0 	.word	0x080167b0
 8014654:	0801674c 	.word	0x0801674c

08014658 <with_errnof>:
 8014658:	b510      	push	{r4, lr}
 801465a:	ed2d 8b02 	vpush	{d8}
 801465e:	eeb0 8a40 	vmov.f32	s16, s0
 8014662:	4604      	mov	r4, r0
 8014664:	f7fd fb16 	bl	8011c94 <__errno>
 8014668:	eeb0 0a48 	vmov.f32	s0, s16
 801466c:	ecbd 8b02 	vpop	{d8}
 8014670:	6004      	str	r4, [r0, #0]
 8014672:	bd10      	pop	{r4, pc}

08014674 <__math_invalidf>:
 8014674:	eef0 7a40 	vmov.f32	s15, s0
 8014678:	ee30 7a40 	vsub.f32	s14, s0, s0
 801467c:	eef4 7a67 	vcmp.f32	s15, s15
 8014680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014684:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8014688:	d602      	bvs.n	8014690 <__math_invalidf+0x1c>
 801468a:	2021      	movs	r0, #33	@ 0x21
 801468c:	f7ff bfe4 	b.w	8014658 <with_errnof>
 8014690:	4770      	bx	lr

08014692 <__ieee754_sqrtf>:
 8014692:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014696:	4770      	bx	lr

08014698 <__ieee754_asinf>:
 8014698:	b538      	push	{r3, r4, r5, lr}
 801469a:	ee10 5a10 	vmov	r5, s0
 801469e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80146a2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80146a6:	ed2d 8b04 	vpush	{d8-d9}
 80146aa:	d10c      	bne.n	80146c6 <__ieee754_asinf+0x2e>
 80146ac:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014820 <__ieee754_asinf+0x188>
 80146b0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8014824 <__ieee754_asinf+0x18c>
 80146b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80146b8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80146bc:	eeb0 0a67 	vmov.f32	s0, s15
 80146c0:	ecbd 8b04 	vpop	{d8-d9}
 80146c4:	bd38      	pop	{r3, r4, r5, pc}
 80146c6:	d904      	bls.n	80146d2 <__ieee754_asinf+0x3a>
 80146c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80146cc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80146d0:	e7f6      	b.n	80146c0 <__ieee754_asinf+0x28>
 80146d2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80146d6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80146da:	d20b      	bcs.n	80146f4 <__ieee754_asinf+0x5c>
 80146dc:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80146e0:	d252      	bcs.n	8014788 <__ieee754_asinf+0xf0>
 80146e2:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8014828 <__ieee754_asinf+0x190>
 80146e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80146ea:	eef4 7ae8 	vcmpe.f32	s15, s17
 80146ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f2:	dce5      	bgt.n	80146c0 <__ieee754_asinf+0x28>
 80146f4:	f7ff fdd2 	bl	801429c <fabsf>
 80146f8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80146fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014700:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014704:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801482c <__ieee754_asinf+0x194>
 8014708:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8014830 <__ieee754_asinf+0x198>
 801470c:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 8014834 <__ieee754_asinf+0x19c>
 8014710:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014714:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8014838 <__ieee754_asinf+0x1a0>
 8014718:	eee7 7a08 	vfma.f32	s15, s14, s16
 801471c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 801483c <__ieee754_asinf+0x1a4>
 8014720:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014724:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8014840 <__ieee754_asinf+0x1a8>
 8014728:	eee7 7a08 	vfma.f32	s15, s14, s16
 801472c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8014844 <__ieee754_asinf+0x1ac>
 8014730:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014734:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8014848 <__ieee754_asinf+0x1b0>
 8014738:	eee8 7a07 	vfma.f32	s15, s16, s14
 801473c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 801484c <__ieee754_asinf+0x1b4>
 8014740:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014744:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8014850 <__ieee754_asinf+0x1b8>
 8014748:	eee7 7a08 	vfma.f32	s15, s14, s16
 801474c:	eeb0 0a48 	vmov.f32	s0, s16
 8014750:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014754:	f7ff ff9d 	bl	8014692 <__ieee754_sqrtf>
 8014758:	4b3e      	ldr	r3, [pc, #248]	@ (8014854 <__ieee754_asinf+0x1bc>)
 801475a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801475e:	429c      	cmp	r4, r3
 8014760:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014764:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8014768:	d93d      	bls.n	80147e6 <__ieee754_asinf+0x14e>
 801476a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801476e:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8014858 <__ieee754_asinf+0x1c0>
 8014772:	eee0 7a26 	vfma.f32	s15, s0, s13
 8014776:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8014824 <__ieee754_asinf+0x18c>
 801477a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801477e:	2d00      	cmp	r5, #0
 8014780:	bfd8      	it	le
 8014782:	eeb1 0a40 	vnegle.f32	s0, s0
 8014786:	e79b      	b.n	80146c0 <__ieee754_asinf+0x28>
 8014788:	ee60 7a00 	vmul.f32	s15, s0, s0
 801478c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8014830 <__ieee754_asinf+0x198>
 8014790:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801482c <__ieee754_asinf+0x194>
 8014794:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 8014844 <__ieee754_asinf+0x1ac>
 8014798:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801479c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8014838 <__ieee754_asinf+0x1a0>
 80147a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80147a4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 801483c <__ieee754_asinf+0x1a4>
 80147a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80147ac:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8014840 <__ieee754_asinf+0x1a8>
 80147b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80147b4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8014834 <__ieee754_asinf+0x19c>
 80147b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80147bc:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8014848 <__ieee754_asinf+0x1b0>
 80147c0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80147c4:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 801484c <__ieee754_asinf+0x1b4>
 80147c8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80147cc:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8014850 <__ieee754_asinf+0x1b8>
 80147d0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80147d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80147d8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80147dc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80147e0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80147e4:	e76c      	b.n	80146c0 <__ieee754_asinf+0x28>
 80147e6:	ee10 3a10 	vmov	r3, s0
 80147ea:	f36f 030b 	bfc	r3, #0, #12
 80147ee:	ee07 3a10 	vmov	s14, r3
 80147f2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80147f6:	ee70 5a00 	vadd.f32	s11, s0, s0
 80147fa:	ee30 0a07 	vadd.f32	s0, s0, s14
 80147fe:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8014820 <__ieee754_asinf+0x188>
 8014802:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8014806:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801485c <__ieee754_asinf+0x1c4>
 801480a:	eee5 7a66 	vfms.f32	s15, s10, s13
 801480e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8014812:	eeb0 6a40 	vmov.f32	s12, s0
 8014816:	eea7 6a66 	vfms.f32	s12, s14, s13
 801481a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801481e:	e7ac      	b.n	801477a <__ieee754_asinf+0xe2>
 8014820:	b33bbd2e 	.word	0xb33bbd2e
 8014824:	3fc90fdb 	.word	0x3fc90fdb
 8014828:	7149f2ca 	.word	0x7149f2ca
 801482c:	3a4f7f04 	.word	0x3a4f7f04
 8014830:	3811ef08 	.word	0x3811ef08
 8014834:	3e2aaaab 	.word	0x3e2aaaab
 8014838:	bd241146 	.word	0xbd241146
 801483c:	3e4e0aa8 	.word	0x3e4e0aa8
 8014840:	bea6b090 	.word	0xbea6b090
 8014844:	3d9dc62e 	.word	0x3d9dc62e
 8014848:	bf303361 	.word	0xbf303361
 801484c:	4001572d 	.word	0x4001572d
 8014850:	c019d139 	.word	0xc019d139
 8014854:	3f799999 	.word	0x3f799999
 8014858:	333bbd2e 	.word	0x333bbd2e
 801485c:	3f490fdb 	.word	0x3f490fdb

08014860 <__ieee754_atan2f>:
 8014860:	ee10 2a90 	vmov	r2, s1
 8014864:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8014868:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801486c:	b510      	push	{r4, lr}
 801486e:	eef0 7a40 	vmov.f32	s15, s0
 8014872:	d806      	bhi.n	8014882 <__ieee754_atan2f+0x22>
 8014874:	ee10 0a10 	vmov	r0, s0
 8014878:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801487c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014880:	d904      	bls.n	801488c <__ieee754_atan2f+0x2c>
 8014882:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014886:	eeb0 0a67 	vmov.f32	s0, s15
 801488a:	bd10      	pop	{r4, pc}
 801488c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8014890:	d103      	bne.n	801489a <__ieee754_atan2f+0x3a>
 8014892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014896:	f000 b881 	b.w	801499c <atanf>
 801489a:	1794      	asrs	r4, r2, #30
 801489c:	f004 0402 	and.w	r4, r4, #2
 80148a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80148a4:	b93b      	cbnz	r3, 80148b6 <__ieee754_atan2f+0x56>
 80148a6:	2c02      	cmp	r4, #2
 80148a8:	d05c      	beq.n	8014964 <__ieee754_atan2f+0x104>
 80148aa:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8014978 <__ieee754_atan2f+0x118>
 80148ae:	2c03      	cmp	r4, #3
 80148b0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80148b4:	e7e7      	b.n	8014886 <__ieee754_atan2f+0x26>
 80148b6:	b939      	cbnz	r1, 80148c8 <__ieee754_atan2f+0x68>
 80148b8:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801497c <__ieee754_atan2f+0x11c>
 80148bc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8014980 <__ieee754_atan2f+0x120>
 80148c0:	2800      	cmp	r0, #0
 80148c2:	fe67 7a27 	vselge.f32	s15, s14, s15
 80148c6:	e7de      	b.n	8014886 <__ieee754_atan2f+0x26>
 80148c8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80148cc:	d110      	bne.n	80148f0 <__ieee754_atan2f+0x90>
 80148ce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80148d2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80148d6:	d107      	bne.n	80148e8 <__ieee754_atan2f+0x88>
 80148d8:	2c02      	cmp	r4, #2
 80148da:	d846      	bhi.n	801496a <__ieee754_atan2f+0x10a>
 80148dc:	4b29      	ldr	r3, [pc, #164]	@ (8014984 <__ieee754_atan2f+0x124>)
 80148de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80148e2:	edd3 7a00 	vldr	s15, [r3]
 80148e6:	e7ce      	b.n	8014886 <__ieee754_atan2f+0x26>
 80148e8:	2c02      	cmp	r4, #2
 80148ea:	d841      	bhi.n	8014970 <__ieee754_atan2f+0x110>
 80148ec:	4b26      	ldr	r3, [pc, #152]	@ (8014988 <__ieee754_atan2f+0x128>)
 80148ee:	e7f6      	b.n	80148de <__ieee754_atan2f+0x7e>
 80148f0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80148f4:	d0e0      	beq.n	80148b8 <__ieee754_atan2f+0x58>
 80148f6:	1a5b      	subs	r3, r3, r1
 80148f8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80148fc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014900:	da1a      	bge.n	8014938 <__ieee754_atan2f+0xd8>
 8014902:	2a00      	cmp	r2, #0
 8014904:	da01      	bge.n	801490a <__ieee754_atan2f+0xaa>
 8014906:	313c      	adds	r1, #60	@ 0x3c
 8014908:	db19      	blt.n	801493e <__ieee754_atan2f+0xde>
 801490a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801490e:	f7ff fcc5 	bl	801429c <fabsf>
 8014912:	f000 f843 	bl	801499c <atanf>
 8014916:	eef0 7a40 	vmov.f32	s15, s0
 801491a:	2c01      	cmp	r4, #1
 801491c:	d012      	beq.n	8014944 <__ieee754_atan2f+0xe4>
 801491e:	2c02      	cmp	r4, #2
 8014920:	d017      	beq.n	8014952 <__ieee754_atan2f+0xf2>
 8014922:	2c00      	cmp	r4, #0
 8014924:	d0af      	beq.n	8014886 <__ieee754_atan2f+0x26>
 8014926:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801498c <__ieee754_atan2f+0x12c>
 801492a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801492e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8014990 <__ieee754_atan2f+0x130>
 8014932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014936:	e7a6      	b.n	8014886 <__ieee754_atan2f+0x26>
 8014938:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8014980 <__ieee754_atan2f+0x120>
 801493c:	e7ed      	b.n	801491a <__ieee754_atan2f+0xba>
 801493e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8014994 <__ieee754_atan2f+0x134>
 8014942:	e7ea      	b.n	801491a <__ieee754_atan2f+0xba>
 8014944:	ee17 3a90 	vmov	r3, s15
 8014948:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801494c:	ee07 3a90 	vmov	s15, r3
 8014950:	e799      	b.n	8014886 <__ieee754_atan2f+0x26>
 8014952:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801498c <__ieee754_atan2f+0x12c>
 8014956:	ee77 7a87 	vadd.f32	s15, s15, s14
 801495a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8014990 <__ieee754_atan2f+0x130>
 801495e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014962:	e790      	b.n	8014886 <__ieee754_atan2f+0x26>
 8014964:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8014990 <__ieee754_atan2f+0x130>
 8014968:	e78d      	b.n	8014886 <__ieee754_atan2f+0x26>
 801496a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8014998 <__ieee754_atan2f+0x138>
 801496e:	e78a      	b.n	8014886 <__ieee754_atan2f+0x26>
 8014970:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8014994 <__ieee754_atan2f+0x134>
 8014974:	e787      	b.n	8014886 <__ieee754_atan2f+0x26>
 8014976:	bf00      	nop
 8014978:	c0490fdb 	.word	0xc0490fdb
 801497c:	bfc90fdb 	.word	0xbfc90fdb
 8014980:	3fc90fdb 	.word	0x3fc90fdb
 8014984:	0801689c 	.word	0x0801689c
 8014988:	08016890 	.word	0x08016890
 801498c:	33bbbd2e 	.word	0x33bbbd2e
 8014990:	40490fdb 	.word	0x40490fdb
 8014994:	00000000 	.word	0x00000000
 8014998:	3f490fdb 	.word	0x3f490fdb

0801499c <atanf>:
 801499c:	b538      	push	{r3, r4, r5, lr}
 801499e:	ee10 5a10 	vmov	r5, s0
 80149a2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80149a6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80149aa:	eef0 7a40 	vmov.f32	s15, s0
 80149ae:	d30f      	bcc.n	80149d0 <atanf+0x34>
 80149b0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80149b4:	d904      	bls.n	80149c0 <atanf+0x24>
 80149b6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80149ba:	eeb0 0a67 	vmov.f32	s0, s15
 80149be:	bd38      	pop	{r3, r4, r5, pc}
 80149c0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8014af8 <atanf+0x15c>
 80149c4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8014afc <atanf+0x160>
 80149c8:	2d00      	cmp	r5, #0
 80149ca:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80149ce:	e7f4      	b.n	80149ba <atanf+0x1e>
 80149d0:	4b4b      	ldr	r3, [pc, #300]	@ (8014b00 <atanf+0x164>)
 80149d2:	429c      	cmp	r4, r3
 80149d4:	d810      	bhi.n	80149f8 <atanf+0x5c>
 80149d6:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80149da:	d20a      	bcs.n	80149f2 <atanf+0x56>
 80149dc:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8014b04 <atanf+0x168>
 80149e0:	ee30 7a07 	vadd.f32	s14, s0, s14
 80149e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80149e8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80149ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f0:	dce3      	bgt.n	80149ba <atanf+0x1e>
 80149f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80149f6:	e013      	b.n	8014a20 <atanf+0x84>
 80149f8:	f7ff fc50 	bl	801429c <fabsf>
 80149fc:	4b42      	ldr	r3, [pc, #264]	@ (8014b08 <atanf+0x16c>)
 80149fe:	429c      	cmp	r4, r3
 8014a00:	d84f      	bhi.n	8014aa2 <atanf+0x106>
 8014a02:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8014a06:	429c      	cmp	r4, r3
 8014a08:	d841      	bhi.n	8014a8e <atanf+0xf2>
 8014a0a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8014a0e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8014a12:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014a16:	2300      	movs	r3, #0
 8014a18:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014a1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014a20:	1c5a      	adds	r2, r3, #1
 8014a22:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014a26:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8014b0c <atanf+0x170>
 8014a2a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8014b10 <atanf+0x174>
 8014a2e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8014b14 <atanf+0x178>
 8014a32:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014a36:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014a3a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8014b18 <atanf+0x17c>
 8014a3e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014a42:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8014b1c <atanf+0x180>
 8014a46:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014a4a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8014b20 <atanf+0x184>
 8014a4e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014a52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014b24 <atanf+0x188>
 8014a56:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014a5a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8014b28 <atanf+0x18c>
 8014a5e:	eea6 5a87 	vfma.f32	s10, s13, s14
 8014a62:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8014b2c <atanf+0x190>
 8014a66:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014a6a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8014b30 <atanf+0x194>
 8014a6e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014a72:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8014b34 <atanf+0x198>
 8014a76:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014a7a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014a7e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014a82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014a86:	d121      	bne.n	8014acc <atanf+0x130>
 8014a88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014a8c:	e795      	b.n	80149ba <atanf+0x1e>
 8014a8e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8014a92:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014a96:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014aa0:	e7be      	b.n	8014a20 <atanf+0x84>
 8014aa2:	4b25      	ldr	r3, [pc, #148]	@ (8014b38 <atanf+0x19c>)
 8014aa4:	429c      	cmp	r4, r3
 8014aa6:	d80b      	bhi.n	8014ac0 <atanf+0x124>
 8014aa8:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8014aac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014ab0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014ab4:	2302      	movs	r3, #2
 8014ab6:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014abe:	e7af      	b.n	8014a20 <atanf+0x84>
 8014ac0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8014ac4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014ac8:	2303      	movs	r3, #3
 8014aca:	e7a9      	b.n	8014a20 <atanf+0x84>
 8014acc:	4a1b      	ldr	r2, [pc, #108]	@ (8014b3c <atanf+0x1a0>)
 8014ace:	491c      	ldr	r1, [pc, #112]	@ (8014b40 <atanf+0x1a4>)
 8014ad0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014ad4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014ad8:	edd3 6a00 	vldr	s13, [r3]
 8014adc:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014ae0:	2d00      	cmp	r5, #0
 8014ae2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014ae6:	edd2 7a00 	vldr	s15, [r2]
 8014aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014aee:	bfb8      	it	lt
 8014af0:	eef1 7a67 	vneglt.f32	s15, s15
 8014af4:	e761      	b.n	80149ba <atanf+0x1e>
 8014af6:	bf00      	nop
 8014af8:	bfc90fdb 	.word	0xbfc90fdb
 8014afc:	3fc90fdb 	.word	0x3fc90fdb
 8014b00:	3edfffff 	.word	0x3edfffff
 8014b04:	7149f2ca 	.word	0x7149f2ca
 8014b08:	3f97ffff 	.word	0x3f97ffff
 8014b0c:	3c8569d7 	.word	0x3c8569d7
 8014b10:	3d4bda59 	.word	0x3d4bda59
 8014b14:	bd6ef16b 	.word	0xbd6ef16b
 8014b18:	3d886b35 	.word	0x3d886b35
 8014b1c:	3dba2e6e 	.word	0x3dba2e6e
 8014b20:	3e124925 	.word	0x3e124925
 8014b24:	3eaaaaab 	.word	0x3eaaaaab
 8014b28:	bd15a221 	.word	0xbd15a221
 8014b2c:	bd9d8795 	.word	0xbd9d8795
 8014b30:	bde38e38 	.word	0xbde38e38
 8014b34:	be4ccccd 	.word	0xbe4ccccd
 8014b38:	401bffff 	.word	0x401bffff
 8014b3c:	080168b8 	.word	0x080168b8
 8014b40:	080168a8 	.word	0x080168a8

08014b44 <_init>:
 8014b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b46:	bf00      	nop
 8014b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b4a:	bc08      	pop	{r3}
 8014b4c:	469e      	mov	lr, r3
 8014b4e:	4770      	bx	lr

08014b50 <_fini>:
 8014b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b52:	bf00      	nop
 8014b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b56:	bc08      	pop	{r3}
 8014b58:	469e      	mov	lr, r3
 8014b5a:	4770      	bx	lr
